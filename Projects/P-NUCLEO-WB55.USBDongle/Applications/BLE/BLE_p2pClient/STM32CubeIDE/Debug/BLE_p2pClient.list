
BLE_p2pClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012260  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000133c  080123a0  080123a0  000223a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080136dc  080136dc  000236dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080136e0  080136e0  000236e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000204  20000008  080136e4  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000020c  080138e8  0003020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 0000009c  200002a8  08013981  000302a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000039  20000344  08013a1d  00030344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000380  08013a56  00030380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001ed0  20000394  08013a67  00030394  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20002264  08013a67  00032264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030391  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 16 .debug_info   0003a988  00000000  00000000  000303c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007f1a  00000000  00000000  0006ad49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003098  00000000  00000000  00072c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002d20  00000000  00000000  00075d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00031a1b  00000000  00000000  00078a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003c71e  00000000  00000000  000aa43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010261b  00000000  00000000  000e6b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001e9174  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000d278  00000000  00000000  001e91c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000394 	.word	0x20000394
 800015c:	00000000 	.word	0x00000000
 8000160:	08012388 	.word	0x08012388

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000398 	.word	0x20000398
 800017c:	08012388 	.word	0x08012388

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_EXTI_EnableIT_32_63+0x24>)
 8000806:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800080a:	4905      	ldr	r1, [pc, #20]	; (8000820 <LL_EXTI_EnableIT_32_63+0x24>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4313      	orrs	r3, r2
 8000810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58000800 	.word	0x58000800

08000824 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800082c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800083c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800085e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000862:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000876:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000880:	68fb      	ldr	r3, [r7, #12]
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000892:	f003 fee7 	bl	8004664 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000896:	f003 feeb 	bl	8004670 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800089a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800089e:	f7ff ffad 	bl	80007fc <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80008a2:	f00f fcd9 	bl	8010258 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80008a6:	f000 f821 	bl	80008ec <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80008aa:	f000 f8c3 	bl	8000a34 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80008ae:	bf00      	nop
}
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <APPD_EnableCPU2+0x34>)
 80008bc:	1d3c      	adds	r4, r7, #4
 80008be:	461d      	mov	r5, r3
 80008c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c8:	c403      	stmia	r4!, {r0, r1}
 80008ca:	8022      	strh	r2, [r4, #0]
 80008cc:	3402      	adds	r4, #2
 80008ce:	0c13      	lsrs	r3, r2, #16
 80008d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80008d2:	f00e ff7d 	bl	800f7d0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f00e fa18 	bl	800ed0e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80008de:	bf00      	nop
}
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bdb0      	pop	{r4, r5, r7, pc}
 80008e6:	bf00      	nop
 80008e8:	080123a0 	.word	0x080123a0

080008ec <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800090c:	2300      	movs	r3, #0
 800090e:	77fb      	strb	r3, [r7, #31]
 8000910:	e038      	b.n	8000984 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000912:	7ffb      	ldrb	r3, [r7, #31]
 8000914:	4a44      	ldr	r2, [pc, #272]	; (8000a28 <APPD_SetCPU2GpioConfig+0x13c>)
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	4413      	add	r3, r2
 800091a:	799b      	ldrb	r3, [r3, #6]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d02b      	beq.n	8000978 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000920:	7ffb      	ldrb	r3, [r7, #31]
 8000922:	4a41      	ldr	r2, [pc, #260]	; (8000a28 <APPD_SetCPU2GpioConfig+0x13c>)
 8000924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000928:	4a40      	ldr	r2, [pc, #256]	; (8000a2c <APPD_SetCPU2GpioConfig+0x140>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d01b      	beq.n	8000966 <APPD_SetCPU2GpioConfig+0x7a>
 800092e:	4a3f      	ldr	r2, [pc, #252]	; (8000a2c <APPD_SetCPU2GpioConfig+0x140>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d823      	bhi.n	800097c <APPD_SetCPU2GpioConfig+0x90>
 8000934:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000938:	d003      	beq.n	8000942 <APPD_SetCPU2GpioConfig+0x56>
 800093a:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <APPD_SetCPU2GpioConfig+0x144>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d009      	beq.n	8000954 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000940:	e01c      	b.n	800097c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000942:	7ffb      	ldrb	r3, [r7, #31]
 8000944:	4a38      	ldr	r2, [pc, #224]	; (8000a28 <APPD_SetCPU2GpioConfig+0x13c>)
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	4413      	add	r3, r2
 800094a:	889a      	ldrh	r2, [r3, #4]
 800094c:	8bbb      	ldrh	r3, [r7, #28]
 800094e:	4313      	orrs	r3, r2
 8000950:	83bb      	strh	r3, [r7, #28]
          break;
 8000952:	e014      	b.n	800097e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000954:	7ffb      	ldrb	r3, [r7, #31]
 8000956:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <APPD_SetCPU2GpioConfig+0x13c>)
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	4413      	add	r3, r2
 800095c:	889a      	ldrh	r2, [r3, #4]
 800095e:	8b7b      	ldrh	r3, [r7, #26]
 8000960:	4313      	orrs	r3, r2
 8000962:	837b      	strh	r3, [r7, #26]
          break;
 8000964:	e00b      	b.n	800097e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	4a2f      	ldr	r2, [pc, #188]	; (8000a28 <APPD_SetCPU2GpioConfig+0x13c>)
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	4413      	add	r3, r2
 800096e:	889a      	ldrh	r2, [r3, #4]
 8000970:	8b3b      	ldrh	r3, [r7, #24]
 8000972:	4313      	orrs	r3, r2
 8000974:	833b      	strh	r3, [r7, #24]
          break;
 8000976:	e002      	b.n	800097e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000978:	bf00      	nop
 800097a:	e000      	b.n	800097e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800097c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800097e:	7ffb      	ldrb	r3, [r7, #31]
 8000980:	3301      	adds	r3, #1
 8000982:	77fb      	strb	r3, [r7, #31]
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	2b25      	cmp	r3, #37	; 0x25
 8000988:	d9c3      	bls.n	8000912 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000996:	8bbb      	ldrh	r3, [r7, #28]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d014      	beq.n	80009c6 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800099c:	8bbb      	ldrh	r3, [r7, #28]
 800099e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff3f 	bl	8000824 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff ff55 	bl	8000856 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f004 fa22 	bl	8004dfc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80009b8:	8bbb      	ldrh	r3, [r7, #28]
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f004 fb8b 	bl	80050dc <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80009c6:	8b7b      	ldrh	r3, [r7, #26]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d012      	beq.n	80009f2 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80009cc:	8b7b      	ldrh	r3, [r7, #26]
 80009ce:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff ff27 	bl	8000824 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff ff3d 	bl	8000856 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4813      	ldr	r0, [pc, #76]	; (8000a30 <APPD_SetCPU2GpioConfig+0x144>)
 80009e2:	f004 fa0b 	bl	8004dfc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80009e6:	8b7b      	ldrh	r3, [r7, #26]
 80009e8:	2200      	movs	r2, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <APPD_SetCPU2GpioConfig+0x144>)
 80009ee:	f004 fb75 	bl	80050dc <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80009f2:	8b3b      	ldrh	r3, [r7, #24]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d013      	beq.n	8000a20 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80009f8:	8b3b      	ldrh	r3, [r7, #24]
 80009fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fc:	2004      	movs	r0, #4
 80009fe:	f7ff ff11 	bl	8000824 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000a02:	2004      	movs	r0, #4
 8000a04:	f7ff ff27 	bl	8000856 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <APPD_SetCPU2GpioConfig+0x140>)
 8000a0e:	f004 f9f5 	bl	8004dfc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000a12:	8b3b      	ldrh	r3, [r7, #24]
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <APPD_SetCPU2GpioConfig+0x140>)
 8000a1a:	f004 fb5f 	bl	80050dc <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
}
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0801343c 	.word	0x0801343c
 8000a2c:	48000800 	.word	0x48000800
 8000a30:	48000400 	.word	0x48000400

08000a34 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000a38:	bf00      	nop
}
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */

  VCP_Init( &VcpTxBuffer[0], 0 );
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DbgOutputInit+0x10>)
 8000a4c:	f00f fa16 	bl	800fe7c <VCP_Init>

/* USER CODE END DbgOutputInit */
  return;
 8000a50:	bf00      	nop
}
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200003b0 	.word	0x200003b0

08000a58 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	460b      	mov	r3, r1
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  VCP_SendData ( p_data , size , cb );
 8000a66:	897b      	ldrh	r3, [r7, #10]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f00f fa45 	bl	800fefc <VCP_SendData>
  
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000a72:	897a      	ldrh	r2, [r7, #10]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68f9      	ldr	r1, [r7, #12]
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f001 fa8d 	bl	8001f98 <HW_UART_Transmit_DMA>
  
/* USER CODE END DbgOutputTraces */
  return;
 8000a7e:	bf00      	nop
}
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a96:	f023 0207 	bic.w	r2, r3, #7
 8000a9a:	4905      	ldr	r1, [pc, #20]	; (8000ab0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	58000400 	.word	0x58000400

08000ab4 <LL_EXTI_EnableIT_32_63>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000abe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000ac2:	4905      	ldr	r1, [pc, #20]	; (8000ad8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	58000800 	.word	0x58000800

08000adc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000aea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000af6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b02:	4313      	orrs	r3, r2
 8000b04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	cafecafe 	.word	0xcafecafe

08000b18 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	608b      	str	r3, [r1, #8]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b98:	d101      	bne.n	8000b9e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000bbe:	d101      	bne.n	8000bc4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <LL_AHB3_GRP1_EnableClock>:
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <LL_DBGMCU_GetRevisionID+0x18>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	0c1b      	lsrs	r3, r3, #16
 8000c0e:	b29b      	uxth	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e0042000 	.word	0xe0042000

08000c20 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	041b      	lsls	r3, r3, #16
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	605a      	str	r2, [r3, #4]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	605a      	str	r2, [r3, #4]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695a      	ldr	r2, [r3, #20]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	041b      	lsls	r3, r3, #16
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	615a      	str	r2, [r3, #20]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	615a      	str	r2, [r3, #20]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	609a      	str	r2, [r3, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	619a      	str	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	22ca      	movs	r2, #202	; 0xca
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2253      	movs	r2, #83	; 0x53
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f023 0207 	bic.w	r2, r3, #7
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	609a      	str	r2, [r3, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <MX_APPE_Config+0x18>)
 8000d4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d4e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d50:	f000 f82e 	bl	8000db0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d54:	f000 f86e 	bl	8000e34 <Config_HSE>

  return;
 8000d58:	bf00      	nop
}
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	58004000 	.word	0x58004000

08000d60 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d64:	f000 f87a 	bl	8000e5c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d68:	f000 f892 	bl	8000e90 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d6c:	4908      	ldr	r1, [pc, #32]	; (8000d90 <MX_APPE_Init+0x30>)
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 fe76 	bl	8001a60 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000d74:	f7ff fd8b 	bl	800088e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f00f ffe4 	bl	8010d48 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000d80:	f000 f9dc 	bl	800113c <Led_Init>

  Button_Init();
 8000d84:	f000 f9ea 	bl	800115c <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d88:	f000 f892 	bl	8000eb0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000d8c:	bf00      	nop
}
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200009f0 	.word	0x200009f0

08000d94 <Init_Smps>:

void Init_Smps(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d98:	bf00      	nop
}
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <Init_Exti>:

void Init_Exti(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000da6:	2050      	movs	r0, #80	; 0x50
 8000da8:	f7ff fe84 	bl	8000ab4 <LL_EXTI_EnableIT_32_63>

  return;
 8000dac:	bf00      	nop
}
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000db4:	f000 f804 	bl	8000dc0 <Reset_BackupDomain>

  Reset_IPCC();
 8000db8:	f000 f81a 	bl	8000df0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000dbc:	bf00      	nop
}
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000dc4:	f7ff fede 	bl	8000b84 <LL_RCC_IsActiveFlag_PINRST>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00d      	beq.n	8000dea <Reset_BackupDomain+0x2a>
 8000dce:	f7ff feec 	bl	8000baa <LL_RCC_IsActiveFlag_SFTRST>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d108      	bne.n	8000dea <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000dd8:	f005 ffb8 	bl	8006d4c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000ddc:	f005 ffb6 	bl	8006d4c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000de0:	f7ff feae 	bl	8000b40 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000de4:	f7ff febd 	bl	8000b62 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
}
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000df4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000df8:	f7ff feea 	bl	8000bd0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000dfc:	213f      	movs	r1, #63	; 0x3f
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <Reset_IPCC+0x40>)
 8000e00:	f7ff ff54 	bl	8000cac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000e04:	213f      	movs	r1, #63	; 0x3f
 8000e06:	480a      	ldr	r0, [pc, #40]	; (8000e30 <Reset_IPCC+0x40>)
 8000e08:	f7ff ff5e 	bl	8000cc8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000e0c:	213f      	movs	r1, #63	; 0x3f
 8000e0e:	4808      	ldr	r0, [pc, #32]	; (8000e30 <Reset_IPCC+0x40>)
 8000e10:	f7ff ff06 	bl	8000c20 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000e14:	213f      	movs	r1, #63	; 0x3f
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <Reset_IPCC+0x40>)
 8000e18:	f7ff ff25 	bl	8000c66 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000e1c:	213f      	movs	r1, #63	; 0x3f
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <Reset_IPCC+0x40>)
 8000e20:	f7ff ff10 	bl	8000c44 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000e24:	213f      	movs	r1, #63	; 0x3f
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <Reset_IPCC+0x40>)
 8000e28:	f7ff ff2f 	bl	8000c8a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000e2c:	bf00      	nop
}
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	58000c00 	.word	0x58000c00

08000e34 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f00f fa8a 	bl	8010354 <OTP_Read>
 8000e40:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	799b      	ldrb	r3, [r3, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe45 	bl	8000adc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
}
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <System_Init>:

static void System_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000e60:	f7ff ff98 	bl	8000d94 <Init_Smps>

  Init_Exti();
 8000e64:	f7ff ff9d 	bl	8000da2 <Init_Exti>

  Init_Rtc();
 8000e68:	f000 f802 	bl	8000e70 <Init_Rtc>

  return;
 8000e6c:	bf00      	nop
}
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <Init_Rtc+0x1c>)
 8000e76:	f7ff ff42 	bl	8000cfe <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <Init_Rtc+0x1c>)
 8000e7e:	f7ff ff4e 	bl	8000d1e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e82:	4802      	ldr	r0, [pc, #8]	; (8000e8c <Init_Rtc+0x1c>)
 8000e84:	f7ff ff2e 	bl	8000ce4 <LL_RTC_EnableWriteProtection>

  return;
 8000e88:	bf00      	nop
}
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40002800 	.word	0x40002800

08000e90 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e98:	f7ff fe3e 	bl	8000b18 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e9c:	f00f ff42 	bl	8010d24 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000ea0:	2004      	movs	r0, #4
 8000ea2:	f7ff fdf1 	bl	8000a88 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8000ea6:	f005 ff6f 	bl	8006d88 <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000eaa:	bf00      	nop
}
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000eb6:	f00e fad5 	bl	800f464 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000eba:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <appe_Tl_Init+0x50>)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2040      	movs	r0, #64	; 0x40
 8000ec0:	f010 f86e 	bl	8010fa0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <appe_Tl_Init+0x54>)
 8000ec6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <appe_Tl_Init+0x58>)
 8000eca:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480e      	ldr	r0, [pc, #56]	; (8000f0c <appe_Tl_Init+0x5c>)
 8000ed2:	f00e f98d 	bl	800f1f0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <appe_Tl_Init+0x60>)
 8000ed8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <appe_Tl_Init+0x64>)
 8000edc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <appe_Tl_Init+0x68>)
 8000ee0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000ee2:	f240 533c 	movw	r3, #1340	; 0x53c
 8000ee6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00e fbfb 	bl	800f6e8 <TL_MM_Init>

  TL_Enable();
 8000ef2:	f00e fab1 	bl	800f458 <TL_Enable>

  return;
 8000ef6:	bf00      	nop
}
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	0800f229 	.word	0x0800f229
 8000f04:	20030734 	.word	0x20030734
 8000f08:	08000f1d 	.word	0x08000f1d
 8000f0c:	08000f35 	.word	0x08000f35
 8000f10:	2003094c 	.word	0x2003094c
 8000f14:	20030840 	.word	0x20030840
 8000f18:	200301f8 	.word	0x200301f8

08000f1c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000f26:	bf00      	nop
}
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	330b      	adds	r3, #11
 8000f42:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d860      	bhi.n	8001014 <APPE_SysUserEvtRx+0xe0>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <APPE_SysUserEvtRx+0x24>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f79 	.word	0x08000f79
 8000f5c:	08000fbb 	.word	0x08000fbb
 8000f60:	08000fc9 	.word	0x08000fc9
 8000f64:	08001015 	.word	0x08001015
 8000f68:	08000fe5 	.word	0x08000fe5
 8000f6c:	08000ff5 	.word	0x08000ff5
 8000f70:	08000ffd 	.word	0x08000ffd
 8000f74:	0800100d 	.word	0x0800100d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00d fef3 	bl	800ed68 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000f82:	7b3b      	ldrb	r3, [r7, #12]
 8000f84:	4619      	mov	r1, r3
 8000f86:	7b7b      	ldrb	r3, [r7, #13]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <APPE_SysUserEvtRx+0xec>)
 8000f8e:	f010 fa79 	bl	8011484 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000f92:	7c3b      	ldrb	r3, [r7, #16]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4823      	ldr	r0, [pc, #140]	; (8001024 <APPE_SysUserEvtRx+0xf0>)
 8000f98:	f010 fa74 	bl	8011484 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000f9c:	7dbb      	ldrb	r3, [r7, #22]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7e3b      	ldrb	r3, [r7, #24]
 8000fa6:	4820      	ldr	r0, [pc, #128]	; (8001028 <APPE_SysUserEvtRx+0xf4>)
 8000fa8:	f010 fa6c 	bl	8011484 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <APPE_SysUserEvtRx+0xf8>)
 8000fae:	f010 fa69 	bl	8011484 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f870 	bl	8001098 <APPE_SysEvtReadyProcessing>
    break;
 8000fb8:	e02d      	b.n	8001016 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000fba:	481d      	ldr	r0, [pc, #116]	; (8001030 <APPE_SysUserEvtRx+0xfc>)
 8000fbc:	f010 fa62 	bl	8011484 <iprintf>
    APPE_SysEvtError(pPayload);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f843 	bl	800104c <APPE_SysEvtError>
    break;
 8000fc6:	e026      	b.n	8001016 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000fc8:	481a      	ldr	r0, [pc, #104]	; (8001034 <APPE_SysUserEvtRx+0x100>)
 8000fca:	f010 faf7 	bl	80115bc <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000fd2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4816      	ldr	r0, [pc, #88]	; (8001038 <APPE_SysUserEvtRx+0x104>)
 8000fde:	f010 fa51 	bl	8011484 <iprintf>
    break;
 8000fe2:	e018      	b.n	8001016 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <APPE_SysUserEvtRx+0x108>)
 8000fee:	f010 fa49 	bl	8011484 <iprintf>
    break;
 8000ff2:	e010      	b.n	8001016 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000ff4:	4812      	ldr	r0, [pc, #72]	; (8001040 <APPE_SysUserEvtRx+0x10c>)
 8000ff6:	f010 fa45 	bl	8011484 <iprintf>
    break;
 8000ffa:	e00c      	b.n	8001016 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <APPE_SysUserEvtRx+0x110>)
 8001006:	f010 fa3d 	bl	8011484 <iprintf>
    break;
 800100a:	e004      	b.n	8001016 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800100c:	480e      	ldr	r0, [pc, #56]	; (8001048 <APPE_SysUserEvtRx+0x114>)
 800100e:	f010 fa39 	bl	8011484 <iprintf>
    break;
 8001012:	e000      	b.n	8001016 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001014:	bf00      	nop
  }

  return;
 8001016:	bf00      	nop
}
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	080123bc 	.word	0x080123bc
 8001024:	080123e0 	.word	0x080123e0
 8001028:	080123fc 	.word	0x080123fc
 800102c:	08012414 	.word	0x08012414
 8001030:	08012434 	.word	0x08012434
 8001034:	08012458 	.word	0x08012458
 8001038:	080124a8 	.word	0x080124a8
 800103c:	080124d0 	.word	0x080124d0
 8001040:	0801250c 	.word	0x0801250c
 8001044:	08012530 	.word	0x08012530
 8001048:	0801256c 	.word	0x0801256c

0800104c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	330b      	adds	r3, #11
 800105a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3302      	adds	r3, #2
 8001060:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <APPE_SysEvtError+0x40>)
 800106a:	f010 fa0b 	bl	8011484 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <APPE_SysEvtError+0x44>)
 8001078:	f010 faa0 	bl	80115bc <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800107c:	e003      	b.n	8001086 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <APPE_SysEvtError+0x48>)
 8001080:	f010 fa9c 	bl	80115bc <puts>
  return;
 8001084:	bf00      	nop
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	08012590 	.word	0x08012590
 8001090:	080125c0 	.word	0x080125c0
 8001094:	080125fc 	.word	0x080125fc

08001098 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	330b      	adds	r3, #11
 80010b8:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	3302      	adds	r3, #2
 80010be:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d11e      	bne.n	8001106 <APPE_SysEvtReadyProcessing+0x6e>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <APPE_SysEvtReadyProcessing+0x94>)
 80010ca:	f010 fa77 	bl	80115bc <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80010ce:	f7ff fbf1 	bl	80008b4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80010d2:	230d      	movs	r3, #13
 80010d4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80010d6:	237f      	movs	r3, #127	; 0x7f
 80010d8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80010da:	f7ff fd93 	bl	8000c04 <LL_DBGMCU_GetRevisionID>
 80010de:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80010e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e2:	4813      	ldr	r0, [pc, #76]	; (8001130 <APPE_SysEvtReadyProcessing+0x98>)
 80010e4:	f010 f9ce 	bl	8011484 <iprintf>

    config_param.RevisionID = RevisionID;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00d fe22 	bl	800ed3c <SHCI_C2_Config>

    APP_BLE_Init();
 80010f8:	f001 fbce 	bl	8002898 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80010fc:	2100      	movs	r1, #0
 80010fe:	2001      	movs	r0, #1
 8001100:	f00f fe22 	bl	8010d48 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001104:	e00e      	b.n	8001124 <APPE_SysEvtReadyProcessing+0x8c>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d106      	bne.n	800111c <APPE_SysEvtReadyProcessing+0x84>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800110e:	4809      	ldr	r0, [pc, #36]	; (8001134 <APPE_SysEvtReadyProcessing+0x9c>)
 8001110:	f010 f9b8 	bl	8011484 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
  return;
 800111a:	e003      	b.n	8001124 <APPE_SysEvtReadyProcessing+0x8c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <APPE_SysEvtReadyProcessing+0xa0>)
 800111e:	f010 f9b1 	bl	8011484 <iprintf>
  return;
 8001122:	bf00      	nop
}
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08012634 	.word	0x08012634
 8001130:	08012650 	.word	0x08012650
 8001134:	08012674 	.word	0x08012674
 8001138:	080126a8 	.word	0x080126a8

0800113c <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8001140:	2000      	movs	r0, #0
 8001142:	f003 f8c5 	bl	80042d0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001146:	2001      	movs	r0, #1
 8001148:	f003 f8c2 	bl	80042d0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800114c:	2002      	movs	r0, #2
 800114e:	f003 f8bf 	bl	80042d0 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8001152:	2001      	movs	r0, #1
 8001154:	f003 f906 	bl	8004364 <BSP_LED_On>
#endif

  return;
 8001158:	bf00      	nop
}
 800115a:	bd80      	pop	{r7, pc}

0800115c <Button_Init>:

static void Button_Init( void )
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001160:	2101      	movs	r1, #1
 8001162:	2000      	movs	r0, #0
 8001164:	f003 f932 	bl	80043cc <BSP_PB_Init>

#endif

  return;
 8001168:	bf00      	nop
}
 800116a:	bd80      	pop	{r7, pc}

0800116c <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f00f fe18 	bl	8010da8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001180:	bf00      	nop
}
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f00f fe06 	bl	8010da8 <UTIL_SEQ_Run>

  return;
 800119c:	bf00      	nop
}
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2040      	movs	r0, #64	; 0x40
 80011b0:	f00f ff18 	bl	8010fe4 <UTIL_SEQ_SetTask>
  return;
 80011b4:	bf00      	nop
}
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80011c4:	2002      	movs	r0, #2
 80011c6:	f00f ff79 	bl	80110bc <UTIL_SEQ_SetEvt>
  return;
 80011ca:	bf00      	nop
}
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80011da:	2002      	movs	r0, #2
 80011dc:	f00f ff8e 	bl	80110fc <UTIL_SEQ_WaitEvt>
  return;
 80011e0:	bf00      	nop
}
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_EXTI_Callback+0x18>
  {
    case BUTTON_SW1_PIN:
      APP_BLE_Key_Button1_Action();
 80011fa:	f001 fe07 	bl	8002e0c <APP_BLE_Key_Button1_Action>
      break; 
 80011fe:	e000      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x1a>


    default:
      break;
 8001200:	bf00      	nop

  }
  return;
 8001202:	bf00      	nop
}
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <LL_EXTI_EnableIT_0_31>:
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <LL_EXTI_EnableIT_0_31+0x24>)
 8001216:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800121a:	4905      	ldr	r1, [pc, #20]	; (8001230 <LL_EXTI_EnableIT_0_31+0x24>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	58000800 	.word	0x58000800

08001234 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]

}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	58000800 	.word	0x58000800

08001258 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <ReadRtcSsrValue+0x3c>)
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	b29b      	uxth	r3, r3
 8001264:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <ReadRtcSsrValue+0x3c>)
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	b29b      	uxth	r3, r3
 800126c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800126e:	e005      	b.n	800127c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <ReadRtcSsrValue+0x3c>)
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	b29b      	uxth	r3, r3
 800127a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d1f5      	bne.n	8001270 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001284:	683b      	ldr	r3, [r7, #0]
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40002800 	.word	0x40002800

08001298 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	491d      	ldr	r1, [pc, #116]	; (8001320 <LinkTimerAfter+0x88>)
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	440b      	add	r3, r1
 80012b6:	3315      	adds	r3, #21
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d009      	beq.n	80012d6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	4916      	ldr	r1, [pc, #88]	; (8001320 <LinkTimerAfter+0x88>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	3314      	adds	r3, #20
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	4911      	ldr	r1, [pc, #68]	; (8001320 <LinkTimerAfter+0x88>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3315      	adds	r3, #21
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <LinkTimerAfter+0x88>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3314      	adds	r3, #20
 80012fa:	79ba      	ldrb	r2, [r7, #6]
 80012fc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80012fe:	79ba      	ldrb	r2, [r7, #6]
 8001300:	4907      	ldr	r1, [pc, #28]	; (8001320 <LinkTimerAfter+0x88>)
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	3315      	adds	r3, #21
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	701a      	strb	r2, [r3, #0]

  return;
 8001312:	bf00      	nop
}
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000020c 	.word	0x2000020c

08001324 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	460a      	mov	r2, r1
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <LinkTimerBefore+0xb8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	79ba      	ldrb	r2, [r7, #6]
 800133c:	429a      	cmp	r2, r3
 800133e:	d032      	beq.n	80013a6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	4927      	ldr	r1, [pc, #156]	; (80013e0 <LinkTimerBefore+0xbc>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3314      	adds	r3, #20
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	4922      	ldr	r1, [pc, #136]	; (80013e0 <LinkTimerBefore+0xbc>)
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	440b      	add	r3, r1
 8001362:	3315      	adds	r3, #21
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	491d      	ldr	r1, [pc, #116]	; (80013e0 <LinkTimerBefore+0xbc>)
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	3315      	adds	r3, #21
 8001378:	79ba      	ldrb	r2, [r7, #6]
 800137a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	4918      	ldr	r1, [pc, #96]	; (80013e0 <LinkTimerBefore+0xbc>)
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3314      	adds	r3, #20
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	4913      	ldr	r1, [pc, #76]	; (80013e0 <LinkTimerBefore+0xbc>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3314      	adds	r3, #20
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80013a4:	e014      	b.n	80013d0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	490d      	ldr	r1, [pc, #52]	; (80013e0 <LinkTimerBefore+0xbc>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3315      	adds	r3, #21
 80013b6:	79ba      	ldrb	r2, [r7, #6]
 80013b8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013ba:	79ba      	ldrb	r2, [r7, #6]
 80013bc:	4908      	ldr	r1, [pc, #32]	; (80013e0 <LinkTimerBefore+0xbc>)
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	3314      	adds	r3, #20
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	701a      	strb	r2, [r3, #0]
  return;
 80013ce:	bf00      	nop
}
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000029c 	.word	0x2000029c
 80013e0:	2000020c 	.word	0x2000020c

080013e4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ee:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <linkTimer+0x144>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b06      	cmp	r3, #6
 80013f6:	d118      	bne.n	800142a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013f8:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <linkTimer+0x144>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b4b      	ldr	r3, [pc, #300]	; (800152c <linkTimer+0x148>)
 8001400:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001402:	4a49      	ldr	r2, [pc, #292]	; (8001528 <linkTimer+0x144>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	4949      	ldr	r1, [pc, #292]	; (8001530 <linkTimer+0x14c>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	3315      	adds	r3, #21
 8001418:	2206      	movs	r2, #6
 800141a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800141c:	4b45      	ldr	r3, [pc, #276]	; (8001534 <linkTimer+0x150>)
 800141e:	f04f 32ff 	mov.w	r2, #4294967295
 8001422:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	81fb      	strh	r3, [r7, #14]
 8001428:	e078      	b.n	800151c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800142a:	f000 f909 	bl	8001640 <ReturnTimeElapsed>
 800142e:	4603      	mov	r3, r0
 8001430:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	493e      	ldr	r1, [pc, #248]	; (8001530 <linkTimer+0x14c>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	3308      	adds	r3, #8
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	4419      	add	r1, r3
 800144a:	4839      	ldr	r0, [pc, #228]	; (8001530 <linkTimer+0x14c>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4403      	add	r3, r0
 8001456:	3308      	adds	r3, #8
 8001458:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4934      	ldr	r1, [pc, #208]	; (8001530 <linkTimer+0x14c>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	3308      	adds	r3, #8
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <linkTimer+0x144>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <linkTimer+0x14c>)
 8001478:	460b      	mov	r3, r1
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	440b      	add	r3, r1
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	3308      	adds	r3, #8
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	429a      	cmp	r2, r3
 800148a:	d337      	bcc.n	80014fc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <linkTimer+0x144>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001492:	7b7a      	ldrb	r2, [r7, #13]
 8001494:	4926      	ldr	r1, [pc, #152]	; (8001530 <linkTimer+0x14c>)
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	3315      	adds	r3, #21
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014a6:	e013      	b.n	80014d0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80014a8:	7b7a      	ldrb	r2, [r7, #13]
 80014aa:	4921      	ldr	r1, [pc, #132]	; (8001530 <linkTimer+0x14c>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	3315      	adds	r3, #21
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80014bc:	7b7a      	ldrb	r2, [r7, #13]
 80014be:	491c      	ldr	r1, [pc, #112]	; (8001530 <linkTimer+0x14c>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	3315      	adds	r3, #21
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014d0:	7b3b      	ldrb	r3, [r7, #12]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d00b      	beq.n	80014ee <linkTimer+0x10a>
 80014d6:	7b3a      	ldrb	r2, [r7, #12]
 80014d8:	4915      	ldr	r1, [pc, #84]	; (8001530 <linkTimer+0x14c>)
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3308      	adds	r3, #8
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d2dc      	bcs.n	80014a8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80014ee:	7b7a      	ldrb	r2, [r7, #13]
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fecf 	bl	8001298 <LinkTimerAfter>
 80014fa:	e00f      	b.n	800151c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <linkTimer+0x144>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff0c 	bl	8001324 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <linkTimer+0x144>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <linkTimer+0x148>)
 8001514:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <linkTimer+0x144>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800151c:	89fb      	ldrh	r3, [r7, #14]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000029c 	.word	0x2000029c
 800152c:	2000029d 	.word	0x2000029d
 8001530:	2000020c 	.word	0x2000020c
 8001534:	200002a0 	.word	0x200002a0

08001538 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	460a      	mov	r2, r1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <UnlinkTimer+0xf8>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	429a      	cmp	r2, r3
 8001552:	d111      	bne.n	8001578 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <UnlinkTimer+0xf8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <UnlinkTimer+0xfc>)
 800155c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800155e:	79fa      	ldrb	r2, [r7, #7]
 8001560:	4935      	ldr	r1, [pc, #212]	; (8001638 <UnlinkTimer+0x100>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3315      	adds	r3, #21
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <UnlinkTimer+0xf8>)
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e03e      	b.n	80015f6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	492f      	ldr	r1, [pc, #188]	; (8001638 <UnlinkTimer+0x100>)
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	3314      	adds	r3, #20
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800158c:	79fa      	ldrb	r2, [r7, #7]
 800158e:	492a      	ldr	r1, [pc, #168]	; (8001638 <UnlinkTimer+0x100>)
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	3315      	adds	r3, #21
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80015a0:	79f9      	ldrb	r1, [r7, #7]
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	4824      	ldr	r0, [pc, #144]	; (8001638 <UnlinkTimer+0x100>)
 80015a6:	460b      	mov	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4403      	add	r3, r0
 80015b0:	3315      	adds	r3, #21
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b2d8      	uxtb	r0, r3
 80015b6:	4920      	ldr	r1, [pc, #128]	; (8001638 <UnlinkTimer+0x100>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	3315      	adds	r3, #21
 80015c4:	4602      	mov	r2, r0
 80015c6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d013      	beq.n	80015f6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80015ce:	79f9      	ldrb	r1, [r7, #7]
 80015d0:	7bba      	ldrb	r2, [r7, #14]
 80015d2:	4819      	ldr	r0, [pc, #100]	; (8001638 <UnlinkTimer+0x100>)
 80015d4:	460b      	mov	r3, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	440b      	add	r3, r1
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4403      	add	r3, r0
 80015de:	3314      	adds	r3, #20
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2d8      	uxtb	r0, r3
 80015e4:	4914      	ldr	r1, [pc, #80]	; (8001638 <UnlinkTimer+0x100>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	3314      	adds	r3, #20
 80015f2:	4602      	mov	r2, r0
 80015f4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	490f      	ldr	r1, [pc, #60]	; (8001638 <UnlinkTimer+0x100>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	330c      	adds	r3, #12
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <UnlinkTimer+0xf8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b06      	cmp	r3, #6
 8001612:	d107      	bne.n	8001624 <UnlinkTimer+0xec>
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d104      	bne.n	8001624 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <UnlinkTimer+0x104>)
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	601a      	str	r2, [r3, #0]
  }

  return;
 8001622:	bf00      	nop
 8001624:	bf00      	nop
}
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	2000029c 	.word	0x2000029c
 8001634:	2000029d 	.word	0x2000029d
 8001638:	2000020c 	.word	0x2000020c
 800163c:	200002a0 	.word	0x200002a0

08001640 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <ReturnTimeElapsed+0x70>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164e:	d026      	beq.n	800169e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001650:	f7ff fe02 	bl	8001258 <ReadRtcSsrValue>
 8001654:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <ReturnTimeElapsed+0x70>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d805      	bhi.n	800166c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <ReturnTimeElapsed+0x70>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	e00a      	b.n	8001682 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <ReturnTimeElapsed+0x74>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <ReturnTimeElapsed+0x70>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	4413      	add	r3, r2
 8001680:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <ReturnTimeElapsed+0x78>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <ReturnTimeElapsed+0x7c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	40d3      	lsrs	r3, r2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	e001      	b.n	80016a2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b29b      	uxth	r3, r3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200002a0 	.word	0x200002a0
 80016b4:	200007b6 	.word	0x200007b6
 80016b8:	200007b5 	.word	0x200007b5
 80016bc:	200007b4 	.word	0x200007b4

080016c0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d108      	bne.n	80016e2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80016d0:	f7ff fdc2 	bl	8001258 <ReadRtcSsrValue>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <RestartWakeupCounter+0xa8>)
 80016d8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80016da:	2003      	movs	r0, #3
 80016dc:	f003 f94b 	bl	8004976 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80016e0:	e03e      	b.n	8001760 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d803      	bhi.n	80016f0 <RestartWakeupCounter+0x30>
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <RestartWakeupCounter+0xac>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d002      	beq.n	80016f6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80016f6:	bf00      	nop
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <RestartWakeupCounter+0xb0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f7      	beq.n	80016f8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <RestartWakeupCounter+0xb0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <RestartWakeupCounter+0xb0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800171c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <RestartWakeupCounter+0xb4>)
 8001720:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001724:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001726:	2003      	movs	r0, #3
 8001728:	f003 f933 	bl	8004992 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <RestartWakeupCounter+0xb8>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	4910      	ldr	r1, [pc, #64]	; (8001778 <RestartWakeupCounter+0xb8>)
 8001738:	4313      	orrs	r3, r2
 800173a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800173c:	f7ff fd8c 	bl	8001258 <ReadRtcSsrValue>
 8001740:	4603      	mov	r3, r0
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <RestartWakeupCounter+0xa8>)
 8001744:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <RestartWakeupCounter+0xb0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <RestartWakeupCounter+0xb0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001758:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800175a:	f3af 8000 	nop.w
  return ;
 800175e:	bf00      	nop
}
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002a0 	.word	0x200002a0
 800176c:	200007b4 	.word	0x200007b4
 8001770:	200007b0 	.word	0x200007b0
 8001774:	58000800 	.word	0x58000800
 8001778:	40002800 	.word	0x40002800

0800177c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <RescheduleTimerList+0x124>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	d108      	bne.n	80017a2 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001790:	bf00      	nop
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <RescheduleTimerList+0x128>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f7      	bne.n	8001792 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80017a2:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <RescheduleTimerList+0x128>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <RescheduleTimerList+0x128>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b4:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <RescheduleTimerList+0x12c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	493b      	ldr	r1, [pc, #236]	; (80018ac <RescheduleTimerList+0x130>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3308      	adds	r3, #8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80017d0:	f7ff ff36 	bl	8001640 <ReturnTimeElapsed>
 80017d4:	4603      	mov	r3, r0
 80017d6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d205      	bcs.n	80017ec <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <RescheduleTimerList+0x134>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e04d      	b.n	8001888 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <RescheduleTimerList+0x138>)
 80017f0:	8812      	ldrh	r2, [r2, #0]
 80017f2:	b292      	uxth	r2, r2
 80017f4:	4413      	add	r3, r2
 80017f6:	461a      	mov	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d906      	bls.n	800180c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <RescheduleTimerList+0x138>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <RescheduleTimerList+0x134>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e03d      	b.n	8001888 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	b29a      	uxth	r2, r3
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <RescheduleTimerList+0x134>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800181c:	e034      	b.n	8001888 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	4922      	ldr	r1, [pc, #136]	; (80018ac <RescheduleTimerList+0x130>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3308      	adds	r3, #8
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20a      	bcs.n	800184c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	491c      	ldr	r1, [pc, #112]	; (80018ac <RescheduleTimerList+0x130>)
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3308      	adds	r3, #8
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e013      	b.n	8001874 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	4917      	ldr	r1, [pc, #92]	; (80018ac <RescheduleTimerList+0x130>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3308      	adds	r3, #8
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	1ac9      	subs	r1, r1, r3
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <RescheduleTimerList+0x130>)
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4403      	add	r3, r0
 8001870:	3308      	adds	r3, #8
 8001872:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	490d      	ldr	r1, [pc, #52]	; (80018ac <RescheduleTimerList+0x130>)
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3315      	adds	r3, #21
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b06      	cmp	r3, #6
 800188c:	d1c7      	bne.n	800181e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800188e:	89bb      	ldrh	r3, [r7, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff15 	bl	80016c0 <RestartWakeupCounter>

  return ;
 8001896:	bf00      	nop
}
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40002800 	.word	0x40002800
 80018a4:	200007b0 	.word	0x200007b0
 80018a8:	2000029c 	.word	0x2000029c
 80018ac:	2000020c 	.word	0x2000020c
 80018b0:	200002a4 	.word	0x200002a4
 80018b4:	200007b8 	.word	0x200007b8

080018b8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018be:	f3ef 8310 	mrs	r3, PRIMASK
 80018c2:	617b      	str	r3, [r7, #20]
  return(result);
 80018c4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80018cc:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	22ca      	movs	r2, #202	; 0xca
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
 80018d6:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2253      	movs	r2, #83	; 0x53
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80018f4:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80018fc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001900:	4954      	ldr	r1, [pc, #336]	; (8001a54 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	330c      	adds	r3, #12
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d172      	bne.n	80019fc <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001916:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800191a:	494e      	ldr	r1, [pc, #312]	; (8001a54 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800192a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800192e:	4949      	ldr	r1, [pc, #292]	; (8001a54 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3310      	adds	r3, #16
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001940:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d050      	beq.n	80019ec <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800194a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800194e:	4941      	ldr	r1, [pc, #260]	; (8001a54 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	330d      	adds	r3, #13
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d126      	bne.n	80019b2 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001968:	2101      	movs	r1, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fde4 	bl	8001538 <UnlinkTimer>
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f383 8810 	msr	PRIMASK, r3
}
 800197a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800197c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001980:	4934      	ldr	r1, [pc, #208]	; (8001a54 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	3304      	adds	r3, #4
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fa68 	bl	8001e6c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	22ca      	movs	r2, #202	; 0xca
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2253      	movs	r2, #83	; 0x53
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
 80019b0:	e014      	b.n	80019dc <HW_TS_RTC_Wakeup_Handler+0x124>
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f383 8810 	msr	PRIMASK, r3
}
 80019bc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80019be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f9c6 	bl	8001d54 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	22ca      	movs	r2, #202	; 0xca
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2253      	movs	r2, #83	; 0x53
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80019dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	4619      	mov	r1, r3
 80019e4:	69b8      	ldr	r0, [r7, #24]
 80019e6:	f000 fac9 	bl	8001f7c <HW_TS_RTC_Int_AppNot>
 80019ea:	e025      	b.n	8001a38 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 80019ec:	f7ff fec6 	bl	800177c <RescheduleTimerList>
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f383 8810 	msr	PRIMASK, r3
}
 80019fa:	e01d      	b.n	8001a38 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80019fc:	bf00      	nop
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f7      	beq.n	80019fe <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a22:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001a26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f383 8810 	msr	PRIMASK, r3
}
 8001a36:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001a42:	bf00      	nop
}
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200007b0 	.word	0x200007b0
 8001a50:	2000029c 	.word	0x2000029c
 8001a54:	2000020c 	.word	0x2000020c
 8001a58:	200002a4 	.word	0x200002a4
 8001a5c:	58000800 	.word	0x58000800

08001a60 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001a6c:	4a64      	ldr	r2, [pc, #400]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	22ca      	movs	r2, #202	; 0xca
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a7c:	4b60      	ldr	r3, [pc, #384]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2253      	movs	r2, #83	; 0x53
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001a86:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HW_TS_Init+0x1a4>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4a5e      	ldr	r2, [pc, #376]	; (8001c04 <HW_TS_Init+0x1a4>)
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001a92:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HW_TS_Init+0x1a4>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f1c3 0304 	rsb	r3, r3, #4
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HW_TS_Init+0x1a8>)
 8001aa6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001aa8:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HW_TS_Init+0x1a4>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ab0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001ab4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d101      	bne.n	8001acc <HW_TS_Init+0x6c>
  {
    return 32U;
 8001ac8:	2220      	movs	r2, #32
 8001aca:	e003      	b.n	8001ad4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	fab2 f282 	clz	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	40d3      	lsrs	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <HW_TS_Init+0x1ac>)
 8001ade:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HW_TS_Init+0x1a4>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HW_TS_Init+0x1b0>)
 8001af2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001af4:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HW_TS_Init+0x1b0>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	4a44      	ldr	r2, [pc, #272]	; (8001c0c <HW_TS_Init+0x1ac>)
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b06:	4a40      	ldr	r2, [pc, #256]	; (8001c08 <HW_TS_Init+0x1a8>)
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	40d3      	lsrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d904      	bls.n	8001b22 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b18:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <HW_TS_Init+0x1b4>)
 8001b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1e:	801a      	strh	r2, [r3, #0]
 8001b20:	e003      	b.n	8001b2a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HW_TS_Init+0x1b4>)
 8001b28:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b2e:	f7ff fb81 	bl	8001234 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b36:	f7ff fb69 	bl	800120c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d143      	bne.n	8001bc8 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HW_TS_Init+0x1b8>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b46:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <HW_TS_Init+0x1bc>)
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	77fb      	strb	r3, [r7, #31]
 8001b52:	e00c      	b.n	8001b6e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001b54:	7ffa      	ldrb	r2, [r7, #31]
 8001b56:	4932      	ldr	r1, [pc, #200]	; (8001c20 <HW_TS_Init+0x1c0>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	330c      	adds	r3, #12
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	77fb      	strb	r3, [r7, #31]
 8001b6e:	7ffb      	ldrb	r3, [r7, #31]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d9ef      	bls.n	8001b54 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HW_TS_Init+0x1c4>)
 8001b76:	2206      	movs	r2, #6
 8001b78:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ba2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HW_TS_Init+0x1c8>)
 8001ba6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001baa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001bac:	2003      	movs	r0, #3
 8001bae:	f002 fef0 	bl	8004992 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	e00a      	b.n	8001bde <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f002 fecc 	bl	8004976 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HW_TS_Init+0x1a0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	22ff      	movs	r2, #255	; 0xff
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001be8:	2200      	movs	r2, #0
 8001bea:	2103      	movs	r1, #3
 8001bec:	2003      	movs	r0, #3
 8001bee:	f002 fe80 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	f002 fe97 	bl	8004926 <HAL_NVIC_EnableIRQ>

  return;
 8001bf8:	bf00      	nop
}
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200007b0 	.word	0x200007b0
 8001c04:	40002800 	.word	0x40002800
 8001c08:	200007b4 	.word	0x200007b4
 8001c0c:	200007b5 	.word	0x200007b5
 8001c10:	200007b6 	.word	0x200007b6
 8001c14:	200007b8 	.word	0x200007b8
 8001c18:	200002a4 	.word	0x200002a4
 8001c1c:	200002a0 	.word	0x200002a0
 8001c20:	2000020c 	.word	0x2000020c
 8001c24:	2000029c 	.word	0x2000029c
 8001c28:	58000800 	.word	0x58000800

08001c2c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b08b      	sub	sp, #44	; 0x2c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c42:	f3ef 8310 	mrs	r3, PRIMASK
 8001c46:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c48:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c50:	e004      	b.n	8001c5c <HW_TS_Create+0x30>
  {
    loop++;
 8001c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c56:	3301      	adds	r3, #1
 8001c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d80c      	bhi.n	8001c7e <HW_TS_Create+0x52>
 8001c64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c68:	492c      	ldr	r1, [pc, #176]	; (8001d1c <HW_TS_Create+0xf0>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	330c      	adds	r3, #12
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1e9      	bne.n	8001c52 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d038      	beq.n	8001cf8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001c86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c8a:	4924      	ldr	r1, [pc, #144]	; (8001d1c <HW_TS_Create+0xf0>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	330c      	adds	r3, #12
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f383 8810 	msr	PRIMASK, r3
}
 8001ca6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001ca8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cac:	491b      	ldr	r1, [pc, #108]	; (8001d1c <HW_TS_Create+0xf0>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3310      	adds	r3, #16
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001cbe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cc2:	4916      	ldr	r1, [pc, #88]	; (8001d1c <HW_TS_Create+0xf0>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	330d      	adds	r3, #13
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001cd4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cd8:	4910      	ldr	r1, [pc, #64]	; (8001d1c <HW_TS_Create+0xf0>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001cee:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cf6:	e008      	b.n	8001d0a <HW_TS_Create+0xde>
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f383 8810 	msr	PRIMASK, r3
}
 8001d02:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	372c      	adds	r7, #44	; 0x2c
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	2000020c 	.word	0x2000020c

08001d20 <HW_TS_Delete>:

void HW_TS_Delete(uint8_t timer_id)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  HW_TS_Stop(timer_id);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f811 	bl	8001d54 <HW_TS_Stop>

  aTimerContext[timer_id].TimerIDStatus = TimerID_Free; /**<  release ID */
 8001d32:	79fa      	ldrb	r2, [r7, #7]
 8001d34:	4906      	ldr	r1, [pc, #24]	; (8001d50 <HW_TS_Delete+0x30>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	330c      	adds	r3, #12
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]

  return;
 8001d46:	bf00      	nop
}
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000020c 	.word	0x2000020c

08001d54 <HW_TS_Stop>:

void HW_TS_Stop(uint8_t timer_id)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d62:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d64:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f002 fde8 	bl	8004942 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <HW_TS_Stop+0x100>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	22ca      	movs	r2, #202	; 0xca
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d7c:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HW_TS_Stop+0x100>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2253      	movs	r2, #83	; 0x53
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	4933      	ldr	r1, [pc, #204]	; (8001e58 <HW_TS_Stop+0x104>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	330c      	adds	r3, #12
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d148      	bne.n	8001e30 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fbc8 	bl	8001538 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HW_TS_Stop+0x108>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dae:	7cfb      	ldrb	r3, [r7, #19]
 8001db0:	2b06      	cmp	r3, #6
 8001db2:	d135      	bne.n	8001e20 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HW_TS_Stop+0x10c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc0:	d108      	bne.n	8001dd4 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001dc2:	bf00      	nop
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HW_TS_Stop+0x100>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f7      	bne.n	8001dc4 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HW_TS_Stop+0x100>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HW_TS_Stop+0x100>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de6:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001de8:	bf00      	nop
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HW_TS_Stop+0x100>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f7      	beq.n	8001dea <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HW_TS_Stop+0x100>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HW_TS_Stop+0x100>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e0e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HW_TS_Stop+0x110>)
 8001e12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e16:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f002 fdba 	bl	8004992 <HAL_NVIC_ClearPendingIRQ>
 8001e1e:	e007      	b.n	8001e30 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HW_TS_Stop+0x114>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	7cfa      	ldrb	r2, [r7, #19]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001e2c:	f7ff fca6 	bl	800177c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HW_TS_Stop+0x100>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ff      	movs	r2, #255	; 0xff
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f002 fd73 	bl	8004926 <HAL_NVIC_EnableIRQ>
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f383 8810 	msr	PRIMASK, r3
}
 8001e4a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e4c:	bf00      	nop
}
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200007b0 	.word	0x200007b0
 8001e58:	2000020c 	.word	0x2000020c
 8001e5c:	2000029c 	.word	0x2000029c
 8001e60:	40002800 	.word	0x40002800
 8001e64:	58000800 	.word	0x58000800
 8001e68:	2000029d 	.word	0x2000029d

08001e6c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e78:	79fa      	ldrb	r2, [r7, #7]
 8001e7a:	493c      	ldr	r1, [pc, #240]	; (8001f6c <HW_TS_Start+0x100>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	330c      	adds	r3, #12
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d103      	bne.n	8001e98 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff5e 	bl	8001d54 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e98:	f3ef 8310 	mrs	r3, PRIMASK
 8001e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea2:	b672      	cpsid	i
}
 8001ea4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f002 fd4b 	bl	8004942 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HW_TS_Start+0x104>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	22ca      	movs	r2, #202	; 0xca
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HW_TS_Start+0x104>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2253      	movs	r2, #83	; 0x53
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	492a      	ldr	r1, [pc, #168]	; (8001f6c <HW_TS_Start+0x100>)
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	330c      	adds	r3, #12
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001ed4:	79fa      	ldrb	r2, [r7, #7]
 8001ed6:	4925      	ldr	r1, [pc, #148]	; (8001f6c <HW_TS_Start+0x100>)
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	4920      	ldr	r1, [pc, #128]	; (8001f6c <HW_TS_Start+0x100>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fa70 	bl	80013e4 <linkTimer>
 8001f04:	4603      	mov	r3, r0
 8001f06:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HW_TS_Start+0x108>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HW_TS_Start+0x10c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	7c7a      	ldrb	r2, [r7, #17]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d002      	beq.n	8001f20 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001f1a:	f7ff fc2f 	bl	800177c <RescheduleTimerList>
 8001f1e:	e013      	b.n	8001f48 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	4912      	ldr	r1, [pc, #72]	; (8001f6c <HW_TS_Start+0x100>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3308      	adds	r3, #8
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	8a7b      	ldrh	r3, [r7, #18]
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	1ac9      	subs	r1, r1, r3
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <HW_TS_Start+0x100>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4403      	add	r3, r0
 8001f44:	3308      	adds	r3, #8
 8001f46:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HW_TS_Start+0x104>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	22ff      	movs	r2, #255	; 0xff
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f52:	2003      	movs	r0, #3
 8001f54:	f002 fce7 	bl	8004926 <HAL_NVIC_EnableIRQ>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f383 8810 	msr	PRIMASK, r3
}
 8001f62:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f64:	bf00      	nop
}
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000020c 	.word	0x2000020c
 8001f70:	200007b0 	.word	0x200007b0
 8001f74:	2000029c 	.word	0x2000029c
 8001f78:	2000029d 	.word	0x2000029d

08001f7c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	460b      	mov	r3, r1
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4798      	blx	r3

  return;
 8001f8e:	bf00      	nop
}
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d10e      	bne.n	8001fd6 <HW_UART_Transmit_DMA+0x3e>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HW_UART_Transmit_DMA+0x80>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HW_UART_Transmit_DMA+0x84>)
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HW_UART_Transmit_DMA+0x88>)
 8001fc2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001fc4:	89bb      	ldrh	r3, [r7, #12]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	4814      	ldr	r0, [pc, #80]	; (800201c <HW_UART_Transmit_DMA+0x84>)
 8001fcc:	f006 feca 	bl	8008d64 <HAL_UART_Transmit_DMA>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	75fb      	strb	r3, [r7, #23]
            break;
 8001fd4:	e000      	b.n	8001fd8 <HW_UART_Transmit_DMA+0x40>
#endif

        default:
            break;
 8001fd6:	bf00      	nop
    }

    switch (hal_status)
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d816      	bhi.n	800200c <HW_UART_Transmit_DMA+0x74>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <HW_UART_Transmit_DMA+0x4c>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08001ffb 	.word	0x08001ffb
 8001fec:	08002001 	.word	0x08002001
 8001ff0:	08002007 	.word	0x08002007
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8001ff8:	e009      	b.n	800200e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8001ffe:	e006      	b.n	800200e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002000:	2302      	movs	r3, #2
 8002002:	75bb      	strb	r3, [r7, #22]
            break;
 8002004:	e003      	b.n	800200e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002006:	2303      	movs	r3, #3
 8002008:	75bb      	strb	r3, [r7, #22]
            break;
 800200a:	e000      	b.n	800200e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800200c:	bf00      	nop
    }

    return hw_status;
 800200e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200007bc 	.word	0x200007bc
 800201c:	200007fc 	.word	0x200007fc
 8002020:	40008000 	.word	0x40008000

08002024 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_UART_TxCpltCallback+0x34>)
 8002034:	429a      	cmp	r2, r3
 8002036:	d107      	bne.n	8002048 <HAL_UART_TxCpltCallback+0x24>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_UART_TxCpltCallback+0x38>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_hlpuart1TxCb();
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_UART_TxCpltCallback+0x38>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4798      	blx	r3
            }
            break;
 8002046:	e001      	b.n	800204c <HAL_UART_TxCpltCallback+0x28>
#endif

        default:
            break;
 8002048:	bf00      	nop
 800204a:	e000      	b.n	800204e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800204c:	bf00      	nop
    }

    return;
 800204e:	bf00      	nop
}
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40008000 	.word	0x40008000
 800205c:	200007bc 	.word	0x200007bc

08002060 <LL_RCC_HSI48_Enable>:
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_HSI48_IsReady>:
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d101      	bne.n	800209a <LL_RCC_HSI48_IsReady+0x18>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_RCC_HSI48_IsReady+0x1a>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_RCC_LSE_SetDriveCapability>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	f023 0218 	bic.w	r2, r3, #24
 80020ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_AHB1_GRP1_EnableClock>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4013      	ands	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_AHB2_GRP1_EnableClock>:
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4313      	orrs	r3, r2
 800211a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002128:	68fb      	ldr	r3, [r7, #12]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_APB1_GRP1_EnableClock>:
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4313      	orrs	r3, r2
 800214c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4013      	ands	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	3220      	adds	r2, #32
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	4a05      	ldr	r2, [pc, #20]	; (8002194 <LL_HSEM_1StepLock+0x2c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d001      	beq.n	8002186 <LL_HSEM_1StepLock+0x1e>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_HSEM_1StepLock+0x20>
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	80000400 	.word	0x80000400

08002198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219c:	f002 f9dc 	bl	8004558 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80021a0:	f7fe fdd0 	bl	8000d44 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a4:	f000 f816 	bl	80021d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021a8:	f000 f870 	bl	800228c <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80021ac:	f000 f896 	bl	80022dc <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphUsbClock_Config();
 80021b0:	f000 f924 	bl	80023fc <PeriphUsbClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021b4:	f000 f915 	bl	80023e2 <MX_GPIO_Init>
  MX_DMA_Init();
 80021b8:	f000 f8f6 	bl	80023a8 <MX_DMA_Init>
  MX_RF_Init();
 80021bc:	f000 f8a2 	bl	8002304 <MX_RF_Init>
  MX_RTC_Init();
 80021c0:	f000 f8be 	bl	8002340 <MX_RTC_Init>
  MX_RNG_Init();
 80021c4:	f000 f8a6 	bl	8002314 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80021c8:	f7fe fdca 	bl	8000d60 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80021cc:	f7fe ffce 	bl	800116c <MX_APPE_Process>
 80021d0:	e7fc      	b.n	80021cc <main+0x34>
	...

080021d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b09a      	sub	sp, #104	; 0x68
 80021d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	2248      	movs	r2, #72	; 0x48
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00f f866 	bl	80112b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021fa:	f004 fda7 	bl	8006d4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff ff51 	bl	80020a6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	4b20      	ldr	r3, [pc, #128]	; (8002288 <SystemClock_Config+0xb4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220c:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <SystemClock_Config+0xb4>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <SystemClock_Config+0xb4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002220:	2307      	movs	r3, #7
 8002222:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800222a:	2301      	movs	r3, #1
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002234:	2340      	movs	r3, #64	; 0x40
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	4618      	mov	r0, r3
 8002242:	f005 f90f 	bl	8007464 <HAL_RCC_OscConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800224c:	f000 f91a 	bl	8002484 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002250:	236f      	movs	r3, #111	; 0x6f
 8002252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002254:	2302      	movs	r3, #2
 8002256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f005 fc6b 	bl	8007b4c <HAL_RCC_ClockConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800227c:	f000 f902 	bl	8002484 <Error_Handler>
  }
}
 8002280:	bf00      	nop
 8002282:	3768      	adds	r7, #104	; 0x68
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	58000400 	.word	0x58000400

0800228c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b094      	sub	sp, #80	; 0x50
 8002290:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002292:	463b      	mov	r3, r7
 8002294:	2250      	movs	r2, #80	; 0x50
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00f f80b 	bl	80112b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800229e:	f643 0303 	movw	r3, #14339	; 0x3803
 80022a2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80022b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80022b8:	2302      	movs	r3, #2
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80022bc:	2310      	movs	r3, #16
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4618      	mov	r0, r3
 80022c4:	f006 f878 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 80022ce:	f000 f8d9 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80022d2:	bf00      	nop
 80022d4:	3750      	adds	r7, #80	; 0x50
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_IPCC_Init+0x20>)
 80022e2:	4a07      	ldr	r2, [pc, #28]	; (8002300 <MX_IPCC_Init+0x24>)
 80022e4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_IPCC_Init+0x20>)
 80022e8:	f002 ff4c 	bl	8005184 <HAL_IPCC_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80022f2:	f000 f8c7 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200007c0 	.word	0x200007c0
 8002300:	58000c00 	.word	0x58000c00

08002304 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <MX_RNG_Init+0x24>)
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <MX_RNG_Init+0x28>)
 800231c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_RNG_Init+0x24>)
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002324:	4804      	ldr	r0, [pc, #16]	; (8002338 <MX_RNG_Init+0x24>)
 8002326:	f006 fb08 	bl	800893a <HAL_RNG_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002330:	f000 f8a8 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200009dc 	.word	0x200009dc
 800233c:	58001000 	.word	0x58001000

08002340 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <MX_RTC_Init+0x60>)
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <MX_RTC_Init+0x64>)
 8002348:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <MX_RTC_Init+0x60>)
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <MX_RTC_Init+0x60>)
 8002352:	220f      	movs	r2, #15
 8002354:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <MX_RTC_Init+0x60>)
 8002358:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800235c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <MX_RTC_Init+0x60>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_RTC_Init+0x60>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <MX_RTC_Init+0x60>)
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <MX_RTC_Init+0x60>)
 8002372:	2200      	movs	r2, #0
 8002374:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002376:	480a      	ldr	r0, [pc, #40]	; (80023a0 <MX_RTC_Init+0x60>)
 8002378:	f006 fb14 	bl	80089a4 <HAL_RTC_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002382:	f000 f87f 	bl	8002484 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_RTC_Init+0x60>)
 800238c:	f006 fbf8 	bl	8008b80 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002396:	f000 f875 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200009f0 	.word	0x200009f0
 80023a4:	40002800 	.word	0x40002800

080023a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023ac:	2004      	movs	r0, #4
 80023ae:	f7ff fe90 	bl	80020d2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff fe8d 	bl	80020d2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023b8:	2002      	movs	r0, #2
 80023ba:	f7ff fe8a 	bl	80020d2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	210f      	movs	r1, #15
 80023c2:	200e      	movs	r0, #14
 80023c4:	f002 fa95 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80023c8:	200e      	movs	r0, #14
 80023ca:	f002 faac 	bl	8004926 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	210f      	movs	r1, #15
 80023d2:	203a      	movs	r0, #58	; 0x3a
 80023d4:	f002 fa8d 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80023d8:	203a      	movs	r0, #58	; 0x3a
 80023da:	f002 faa4 	bl	8004926 <HAL_NVIC_EnableIRQ>

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	2004      	movs	r0, #4
 80023e8:	f7ff fe8c 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7ff fe89 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	2002      	movs	r0, #2
 80023f4:	f7ff fe86 	bl	8002104 <LL_AHB2_GRP1_EnableClock>

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <PeriphUsbClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphUsbClock_Config(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b09a      	sub	sp, #104	; 0x68
 8002400:	af00      	add	r7, sp, #0
  #if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002402:	f107 0318 	add.w	r3, r7, #24
 8002406:	2250      	movs	r2, #80	; 0x50
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f00e ff52 	bl	80112b4 <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8002410:	463b      	mov	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	615a      	str	r2, [r3, #20]

	/**
   * This prevents the CPU2 to disable the HSI48 oscillator when
   * it does not use anymore the RNG IP
   */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002420:	2105      	movs	r1, #5
 8002422:	4817      	ldr	r0, [pc, #92]	; (8002480 <PeriphUsbClock_Config+0x84>)
 8002424:	f7ff fea0 	bl	8002168 <LL_HSEM_1StepLock>

  LL_RCC_HSI48_Enable();
 8002428:	f7ff fe1a 	bl	8002060 <LL_RCC_HSI48_Enable>

	while(!LL_RCC_HSI48_IsReady());
 800242c:	bf00      	nop
 800242e:	f7ff fe28 	bl	8002082 <LL_RCC_HSI48_IsReady>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0fa      	beq.n	800242e <PeriphUsbClock_Config+0x32>

	/* Select HSI48 as USB clock source */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800243e:	2300      	movs	r3, #0
 8002440:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002442:	f107 0318 	add.w	r3, r7, #24
 8002446:	4618      	mov	r0, r3
 8002448:	f005 ffb6 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>

	/*Configure the clock recovery system (CRS)**********************************/

	/* Enable CRS Clock */
	__HAL_RCC_CRS_CLK_ENABLE();
 800244c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002450:	f7ff fe71 	bl	8002136 <LL_APB1_GRP1_EnableClock>

	/* Default Synchro Signal division factor (not divided) */
	RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	603b      	str	r3, [r7, #0]

	/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
	RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8002458:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800245c:	607b      	str	r3, [r7, #4]

	/* HSI48 is synchronized with USB SOF at 1KHz rate */
	RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 800245e:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8002462:	60fb      	str	r3, [r7, #12]
	RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8002464:	2322      	movs	r3, #34	; 0x22
 8002466:	613b      	str	r3, [r7, #16]

	RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]

	/* Set the TRIM[5:0] to the default value*/
	RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 800246c:	2320      	movs	r3, #32
 800246e:	617b      	str	r3, [r7, #20]

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002470:	463b      	mov	r3, r7
 8002472:	4618      	mov	r0, r3
 8002474:	f006 f916 	bl	80086a4 <HAL_RCCEx_CRSConfig>
#endif

	return;
 8002478:	bf00      	nop
}
 800247a:	3768      	adds	r7, #104	; 0x68
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	58001400 	.word	0x58001400

08002484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_RCC_SetRTCClockSource>:
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_RCC_EnableRTC>:
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_AHB3_GRP1_EnableClock>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80024f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002504:	68fb      	ldr	r3, [r7, #12]
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_APB1_GRP1_EnableClock>:
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4313      	orrs	r3, r2
 8002528:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002548:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800254c:	f7ff ffc8 	bl	80024e0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	202e      	movs	r0, #46	; 0x2e
 8002556:	f002 f9cc 	bl	80048f2 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800255a:	202e      	movs	r0, #46	; 0x2e
 800255c:	f002 f9e3 	bl	8004926 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <HAL_IPCC_MspInit+0x44>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d113      	bne.n	800259e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002576:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800257a:	f7ff ffb1 	bl	80024e0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	202c      	movs	r0, #44	; 0x2c
 8002584:	f002 f9b5 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002588:	202c      	movs	r0, #44	; 0x2c
 800258a:	f002 f9cc 	bl	8004926 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	202d      	movs	r0, #45	; 0x2d
 8002594:	f002 f9ad 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002598:	202d      	movs	r0, #45	; 0x2d
 800259a:	f002 f9c4 	bl	8004926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	58000c00 	.word	0x58000c00

080025ac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b096      	sub	sp, #88	; 0x58
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	2250      	movs	r2, #80	; 0x50
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f00e fe79 	bl	80112b4 <memset>
  if(hrng->Instance==RNG)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_RNG_MspInit+0x50>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d113      	bne.n	80025f4 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80025cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80025d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025d6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 feeb 	bl	80083b8 <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80025e8:	f7ff ff4c 	bl	8002484 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80025ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025f0:	f7ff ff76 	bl	80024e0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80025f4:	bf00      	nop
 80025f6:	3758      	adds	r7, #88	; 0x58
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	58001000 	.word	0x58001000

08002600 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0b      	ldr	r2, [pc, #44]	; (800263c <HAL_RTC_MspInit+0x3c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d110      	bne.n	8002634 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002612:	f004 fb9b 	bl	8006d4c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002616:	f004 fb99 	bl	8006d4c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800261a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800261e:	f7ff ff38 	bl	8002492 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002622:	f7ff ff4c 	bl	80024be <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002626:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800262a:	f7ff ff72 	bl	8002512 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f006 fb62 	bl	8008cf8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40002800 	.word	0x40002800

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler+0x4>

0800265a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <UsageFault_Handler+0x4>

08002666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002694:	f001 ffba 	bl	800460c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}

0800269c <USB_LP_IRQHandler>:
  * @brief  This function handles USB FS global interrupt request.
  * @param  None
  * @retval None
  */
void USB_LP_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <USB_LP_IRQHandler+0x10>)
 80026a2:	f002 ff02 	bl	80054aa <HAL_PCD_IRQHandler>
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000ab0 	.word	0x20000ab0

080026b0 <USB_HP_IRQHandler>:
  * @brief  This function handles USB FS global interrupt request.
  * @param  None
  * @retval None
  */
void USB_HP_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <USB_HP_IRQHandler+0x10>)
 80026b6:	f002 fef8 	bl	80054aa <HAL_PCD_IRQHandler>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000ab0 	.word	0x20000ab0

080026c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <DMA1_Channel4_IRQHandler+0x10>)
 80026ca:	f002 faa9 	bl	8004c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000091c 	.word	0x2000091c

080026d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <USART1_IRQHandler+0x10>)
 80026de:	f006 fbd3 	bl	8008e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000088c 	.word	0x2000088c

080026ec <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <LPUART1_IRQHandler+0x10>)
 80026f2:	f006 fbc9 	bl	8008e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200007fc 	.word	0x200007fc

08002700 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002704:	f001 fc50 	bl	8003fa8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002710:	f001 fc82 	bl	8004018 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}

08002718 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800271c:	f002 fd0e 	bl	800513c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <DMA2_Channel4_IRQHandler+0x10>)
 800272a:	f002 fa79 	bl	8004c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000097c 	.word	0x2000097c

08002738 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800273c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002740:	f002 fce4 	bl	800510c <HAL_GPIO_EXTI_IRQHandler>
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}

08002748 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800274c:	f7ff f8b4 	bl	80018b8 <HW_TS_RTC_Wakeup_Handler>
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e00a      	b.n	800277c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002766:	f3af 8000 	nop.w
 800276a:	4601      	mov	r1, r0
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	60ba      	str	r2, [r7, #8]
 8002772:	b2ca      	uxtb	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf0      	blt.n	8002766 <_read+0x12>
	}

return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_close>:
	}
	return len;
}

int _close(int file)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
	return -1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b6:	605a      	str	r2, [r3, #4]
	return 0;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_isatty>:

int _isatty(int file)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	return 1;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
	return 0;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <_sbrk+0x50>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <_sbrk+0x16>
		heap_end = &end;
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <_sbrk+0x50>)
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <_sbrk+0x54>)
 800280c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <_sbrk+0x50>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <_sbrk+0x50>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	466a      	mov	r2, sp
 800281e:	4293      	cmp	r3, r2
 8002820:	d907      	bls.n	8002832 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002822:	f00e fcff 	bl	8011224 <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	220c      	movs	r2, #12
 800282a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e006      	b.n	8002840 <_sbrk+0x48>
	}

	heap_end += incr;
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <_sbrk+0x50>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	4a03      	ldr	r2, [pc, #12]	; (8002848 <_sbrk+0x50>)
 800283c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000a14 	.word	0x20000a14
 800284c:	20002268 	.word	0x20002268

08002850 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <LL_FLASH_GetUDN+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	1fff7580 	.word	0x1fff7580

08002868 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <LL_FLASH_GetDeviceID+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	1fff7584 	.word	0x1fff7584

08002880 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <LL_FLASH_GetSTCompanyID+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0a1b      	lsrs	r3, r3, #8
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	1fff7584 	.word	0x1fff7584

08002898 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b090      	sub	sp, #64	; 0x40
 800289c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <APP_BLE_Init+0xa8>)
 80028a0:	1d3c      	adds	r4, r7, #4
 80028a2:	461d      	mov	r5, r3
 80028a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028b4:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80028b8:	f000 fab8 	bl	8002e2c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80028bc:	2101      	movs	r1, #1
 80028be:	2002      	movs	r0, #2
 80028c0:	f00e fa42 	bl	8010d48 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <APP_BLE_Init+0xac>)
 80028c6:	2100      	movs	r1, #0
 80028c8:	2020      	movs	r0, #32
 80028ca:	f00e fb69 	bl	8010fa0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4618      	mov	r0, r3
 80028d2:	f00c fa05 	bl	800ece0 <SHCI_C2_BLE_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 80028dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <APP_BLE_Init+0x5e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80028e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028e8:	4619      	mov	r1, r3
 80028ea:	4817      	ldr	r0, [pc, #92]	; (8002948 <APP_BLE_Init+0xb0>)
 80028ec:	f00e fdca 	bl	8011484 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80028f0:	f7ff fdc8 	bl	8002484 <Error_Handler>
 80028f4:	e002      	b.n	80028fc <APP_BLE_Init+0x64>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80028f6:	4815      	ldr	r0, [pc, #84]	; (800294c <APP_BLE_Init+0xb4>)
 80028f8:	f00e fdc4 	bl	8011484 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80028fc:	f000 faac 	bl	8002e58 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002900:	f00a ff2e 	bl	800d760 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <APP_BLE_Init+0xb8>)
 8002906:	2100      	movs	r1, #0
 8002908:	2001      	movs	r0, #1
 800290a:	f00e fb49 	bl	8010fa0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800290e:	4a11      	ldr	r2, [pc, #68]	; (8002954 <APP_BLE_Init+0xbc>)
 8002910:	2100      	movs	r1, #0
 8002912:	2002      	movs	r0, #2
 8002914:	f00e fb44 	bl	8010fa0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */

  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <APP_BLE_Init+0xc0>)
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  aci_hal_set_radio_activity_mask(0x0020);
 8002920:	2020      	movs	r0, #32
 8002922:	f00b ff86 	bl	800e832 <aci_hal_set_radio_activity_mask>
#endif
  /**
  * Initialize P2P Client Application
  */
  P2PC_APP_Init();
 8002926:	f000 fd53 	bl	80033d0 <P2PC_APP_Init>

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <APP_BLE_Init+0xc4>)
 800292c:	2200      	movs	r2, #0
 800292e:	490c      	ldr	r1, [pc, #48]	; (8002960 <APP_BLE_Init+0xc8>)
 8002930:	2000      	movs	r0, #0
 8002932:	f7ff f97b 	bl	8001c2c <HW_TS_Create>
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8002936:	bf00      	nop
}
 8002938:	3740      	adds	r7, #64	; 0x40
 800293a:	46bd      	mov	sp, r7
 800293c:	bdb0      	pop	{r4, r5, r7, pc}
 800293e:	bf00      	nop
 8002940:	0801273c 	.word	0x0801273c
 8002944:	0800eefd 	.word	0x0800eefd
 8002948:	080126dc 	.word	0x080126dc
 800294c:	08012714 	.word	0x08012714
 8002950:	080031ad 	.word	0x080031ad
 8002954:	08003209 	.word	0x08003209
 8002958:	200002a8 	.word	0x200002a8
 800295c:	08003285 	.word	0x08003285
 8002960:	20000329 	.word	0x20000329

08002964 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002966:	b09b      	sub	sp, #108	; 0x6c
 8002968:	af06      	add	r7, sp, #24
 800296a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800296c:	2392      	movs	r3, #146	; 0x92
 800296e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  hci_le_advertising_report_event_rp0         *p_le_advertising_event;
  hci_le_phy_update_complete_event_rp0        *p_evt_le_phy_update_complete;
#if (CFG_DEBUG_APP_TRACE != 0)
  hci_le_connection_update_complete_event_rp0 *p_connection_update_complete_event;
#endif /* CFG_DEBUG_APP_TRACE != 0 */
  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3301      	adds	r3, #1
 8002976:	647b      	str	r3, [r7, #68]	; 0x44
  hci_disconnection_complete_event_rp0 *cc = (void *) p_event_pckt->data;
 8002978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297a:	3302      	adds	r3, #2
 800297c:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t adtype, adlength;

  switch (p_event_pckt->evt)
 8002982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2bff      	cmp	r3, #255	; 0xff
 8002988:	d009      	beq.n	800299e <SVCCTL_App_Notification+0x3a>
 800298a:	2bff      	cmp	r3, #255	; 0xff
 800298c:	f300 820b 	bgt.w	8002da6 <SVCCTL_App_Notification+0x442>
 8002990:	2b05      	cmp	r3, #5
 8002992:	f000 8098 	beq.w	8002ac6 <SVCCTL_App_Notification+0x162>
 8002996:	2b3e      	cmp	r3, #62	; 0x3e
 8002998:	f000 80b3 	beq.w	8002b02 <SVCCTL_App_Notification+0x19e>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 800299c:	e203      	b.n	8002da6 <SVCCTL_App_Notification+0x442>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800299e:	4ba0      	ldr	r3, [pc, #640]	; (8002c20 <SVCCTL_App_Notification+0x2bc>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80029a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a6:	3302      	adds	r3, #2
 80029a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch (p_blecore_evt->ecode)
 80029aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f640 0202 	movw	r2, #2050	; 0x802
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d029      	beq.n	8002a0c <SVCCTL_App_Notification+0xa8>
 80029b8:	f640 0202 	movw	r2, #2050	; 0x802
 80029bc:	4293      	cmp	r3, r2
 80029be:	dc7e      	bgt.n	8002abe <SVCCTL_App_Notification+0x15a>
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d071      	beq.n	8002aa8 <SVCCTL_App_Notification+0x144>
 80029c4:	f240 4207 	movw	r2, #1031	; 0x407
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d178      	bne.n	8002abe <SVCCTL_App_Notification+0x15a>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) p_blecore_evt->data;
 80029cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ce:	3302      	adds	r3, #2
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d173      	bne.n	8002ac2 <SVCCTL_App_Notification+0x15e>
              && gap_evt_proc_complete->Status == 0x00)
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d16f      	bne.n	8002ac2 <SVCCTL_App_Notification+0x15e>
            BSP_LED_Off(LED_BLUE);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f001 fcd8 	bl	8004398 <BSP_LED_Off>
            APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n");
 80029e8:	488e      	ldr	r0, [pc, #568]	; (8002c24 <SVCCTL_App_Notification+0x2c0>)
 80029ea:	f00e fde7 	bl	80115bc <puts>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80029ee:	4b8e      	ldr	r3, [pc, #568]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 80029f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d164      	bne.n	8002ac2 <SVCCTL_App_Notification+0x15e>
 80029f8:	4b8b      	ldr	r3, [pc, #556]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 80029fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d05f      	beq.n	8002ac2 <SVCCTL_App_Notification+0x15e>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8002a02:	2100      	movs	r1, #0
 8002a04:	2002      	movs	r0, #2
 8002a06:	f00e faed 	bl	8010fe4 <UTIL_SEQ_SetTask>
        break;
 8002a0a:	e05a      	b.n	8002ac2 <SVCCTL_App_Notification+0x15e>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) p_blecore_evt->data;
 8002a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0e:	3302      	adds	r3, #2
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
          aci_hal_set_radio_activity_mask(0x0000);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f00b ff0d 	bl	800e832 <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	789a      	ldrb	r2, [r3, #2]
 8002a1c:	4b83      	ldr	r3, [pc, #524]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a1e:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 8002a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a22:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a2a:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	4b7d      	ldr	r3, [pc, #500]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a36:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a42:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	4b77      	ldr	r3, [pc, #476]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a4e:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b74      	ldr	r3, [pc, #464]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a5a:	815a      	strh	r2, [r3, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002a5c:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 8002a5e:	8ad8      	ldrh	r0, [r3, #22]
 8002a60:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a62:	8899      	ldrh	r1, [r3, #4]
 8002a64:	4b71      	ldr	r3, [pc, #452]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a66:	88dc      	ldrh	r4, [r3, #6]
 8002a68:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a6a:	891d      	ldrh	r5, [r3, #8]
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a6e:	895b      	ldrh	r3, [r3, #10]
 8002a70:	4a6e      	ldr	r2, [pc, #440]	; (8002c2c <SVCCTL_App_Notification+0x2c8>)
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	2601      	movs	r6, #1
 8002a76:	9604      	str	r6, [sp, #16]
 8002a78:	9203      	str	r2, [sp, #12]
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	9202      	str	r2, [sp, #8]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	9201      	str	r2, [sp, #4]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	462b      	mov	r3, r5
 8002a86:	4622      	mov	r2, r4
 8002a88:	f00c f846 	bl	800eb18 <aci_l2cap_connection_parameter_update_resp>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if(result != BLE_STATUS_SUCCESS) {
 8002a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <SVCCTL_App_Notification+0x13c>
              BSP_LED_On(LED_RED);
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f001 fc62 	bl	8004364 <BSP_LED_On>
          aci_hal_set_radio_activity_mask(0x0020);
 8002aa0:	2020      	movs	r0, #32
 8002aa2:	f00b fec6 	bl	800e832 <aci_hal_set_radio_activity_mask>
        break;
 8002aa6:	e00d      	b.n	8002ac4 <SVCCTL_App_Notification+0x160>
          BSP_LED_On(LED_GREEN);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f001 fc5b 	bl	8004364 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8002aae:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 8002ab0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002ab4:	210a      	movs	r1, #10
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f9d8 	bl	8001e6c <HW_TS_Start>
        break;
 8002abc:	e002      	b.n	8002ac4 <SVCCTL_App_Notification+0x160>
          break;
 8002abe:	bf00      	nop
 8002ac0:	e174      	b.n	8002dac <SVCCTL_App_Notification+0x448>
        break;
 8002ac2:	bf00      	nop
    break;
 8002ac4:	e172      	b.n	8002dac <SVCCTL_App_Notification+0x448>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 8002ad0:	8adb      	ldrh	r3, [r3, #22]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	f040 8169 	bne.w	8002daa <SVCCTL_App_Notification+0x446>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002ade:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n");
 8002ae6:	4852      	ldr	r0, [pc, #328]	; (8002c30 <SVCCTL_App_Notification+0x2cc>)
 8002ae8:	f00e fd68 	bl	80115bc <puts>
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <SVCCTL_App_Notification+0x2bc>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002af2:	4b4d      	ldr	r3, [pc, #308]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 8002af4:	8ada      	ldrh	r2, [r3, #22]
 8002af6:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <SVCCTL_App_Notification+0x2bc>)
 8002af8:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 8002afa:	4849      	ldr	r0, [pc, #292]	; (8002c20 <SVCCTL_App_Notification+0x2bc>)
 8002afc:	f000 fcae 	bl	800345c <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002b00:	e153      	b.n	8002daa <SVCCTL_App_Notification+0x446>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8002b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b04:	3302      	adds	r3, #2
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (p_meta_evt->subevent)
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	2b0b      	cmp	r3, #11
 8002b10:	f200 8145 	bhi.w	8002d9e <SVCCTL_App_Notification+0x43a>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <SVCCTL_App_Notification+0x1b8>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002c59 	.word	0x08002c59
 8002b20:	08002cbb 	.word	0x08002cbb
 8002b24:	08002b4d 	.word	0x08002b4d
 8002b28:	08002d9f 	.word	0x08002d9f
 8002b2c:	08002d9f 	.word	0x08002d9f
 8002b30:	08002d9f 	.word	0x08002d9f
 8002b34:	08002d9f 	.word	0x08002d9f
 8002b38:	08002d9f 	.word	0x08002d9f
 8002b3c:	08002d9f 	.word	0x08002d9f
 8002b40:	08002d9f 	.word	0x08002d9f
 8002b44:	08002d9f 	.word	0x08002d9f
 8002b48:	08002ba5 	.word	0x08002ba5
            p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	3301      	adds	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
            APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8002b52:	4838      	ldr	r0, [pc, #224]	; (8002c34 <SVCCTL_App_Notification+0x2d0>)
 8002b54:	f00e fd32 	bl	80115bc <puts>
                         p_connection_update_complete_event->Conn_Interval*1.25,
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002b5e:	b29b      	uxth	r3, r3
            APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fde1 	bl	8000728 <__aeabi_i2d>
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <SVCCTL_App_Notification+0x2d4>)
 8002b6c:	f7fd fb60 	bl	8000230 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
                         p_connection_update_complete_event->Conn_Latency,
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002b7e:	b29b      	uxth	r3, r3
            APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8002b80:	461c      	mov	r4, r3
                         p_connection_update_complete_event->Supervision_Timeout*10);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	461a      	mov	r2, r3
            APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	9400      	str	r4, [sp, #0]
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4827      	ldr	r0, [pc, #156]	; (8002c3c <SVCCTL_App_Notification+0x2d8>)
 8002b9e:	f00e fc71 	bl	8011484 <iprintf>
            break;
 8002ba2:	e0ff      	b.n	8002da4 <SVCCTL_App_Notification+0x440>
            p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
            APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8002baa:	4825      	ldr	r0, [pc, #148]	; (8002c40 <SVCCTL_App_Notification+0x2dc>)
 8002bac:	f00e fc6a 	bl	8011484 <iprintf>
            if (p_evt_le_phy_update_complete->Status == 0)
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <SVCCTL_App_Notification+0x25c>
              APP_DBG_MSG("status ok \n");
 8002bb8:	4822      	ldr	r0, [pc, #136]	; (8002c44 <SVCCTL_App_Notification+0x2e0>)
 8002bba:	f00e fcff 	bl	80115bc <puts>
 8002bbe:	e002      	b.n	8002bc6 <SVCCTL_App_Notification+0x262>
              APP_DBG_MSG("status nok \n");
 8002bc0:	4821      	ldr	r0, [pc, #132]	; (8002c48 <SVCCTL_App_Notification+0x2e4>)
 8002bc2:	f00e fcfb 	bl	80115bc <puts>
            ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&Tx_phy,&Rx_phy);
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <SVCCTL_App_Notification+0x2c4>)
 8002bc8:	8adb      	ldrh	r3, [r3, #22]
 8002bca:	f107 020e 	add.w	r2, r7, #14
 8002bce:	f107 010f 	add.w	r1, r7, #15
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00b fea5 	bl	800e922 <hci_le_read_phy>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if (ret != BLE_STATUS_SUCCESS)
 8002bde:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <SVCCTL_App_Notification+0x28a>
              APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8002be6:	4819      	ldr	r0, [pc, #100]	; (8002c4c <SVCCTL_App_Notification+0x2e8>)
 8002be8:	f00e fc4c 	bl	8011484 <iprintf>
            break;
 8002bec:	e0da      	b.n	8002da4 <SVCCTL_App_Notification+0x440>
              APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8002bee:	4818      	ldr	r0, [pc, #96]	; (8002c50 <SVCCTL_App_Notification+0x2ec>)
 8002bf0:	f00e fce4 	bl	80115bc <puts>
              if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d10a      	bne.n	8002c10 <SVCCTL_App_Notification+0x2ac>
 8002bfa:	7bbb      	ldrb	r3, [r7, #14]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <SVCCTL_App_Notification+0x2ac>
                APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	4619      	mov	r1, r3
 8002c04:	7bbb      	ldrb	r3, [r7, #14]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4812      	ldr	r0, [pc, #72]	; (8002c54 <SVCCTL_App_Notification+0x2f0>)
 8002c0a:	f00e fc3b 	bl	8011484 <iprintf>
            break;
 8002c0e:	e0c9      	b.n	8002da4 <SVCCTL_App_Notification+0x440>
                APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	4619      	mov	r1, r3
 8002c14:	7bbb      	ldrb	r3, [r7, #14]
 8002c16:	461a      	mov	r2, r3
 8002c18:	480e      	ldr	r0, [pc, #56]	; (8002c54 <SVCCTL_App_Notification+0x2f0>)
 8002c1a:	f00e fc33 	bl	8011484 <iprintf>
            break;
 8002c1e:	e0c1      	b.n	8002da4 <SVCCTL_App_Notification+0x440>
 8002c20:	20000a28 	.word	0x20000a28
 8002c24:	08012774 	.word	0x08012774
 8002c28:	200002a8 	.word	0x200002a8
 8002c2c:	20000a2c 	.word	0x20000a2c
 8002c30:	080127a4 	.word	0x080127a4
 8002c34:	080127cc 	.word	0x080127cc
 8002c38:	3ff40000 	.word	0x3ff40000
 8002c3c:	08012800 	.word	0x08012800
 8002c40:	0801286c 	.word	0x0801286c
 8002c44:	0801289c 	.word	0x0801289c
 8002c48:	080128a8 	.word	0x080128a8
 8002c4c:	080128b4 	.word	0x080128b4
 8002c50:	080128d4 	.word	0x080128d4
 8002c54:	080128f4 	.word	0x080128f4
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <SVCCTL_App_Notification+0x454>)
 8002c68:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002c6a:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <SVCCTL_App_Notification+0x454>)
 8002c6c:	2206      	movs	r2, #6
 8002c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** CONNECTION EVENT WITH SERVER \n");
 8002c72:	4852      	ldr	r0, [pc, #328]	; (8002dbc <SVCCTL_App_Notification+0x458>)
 8002c74:	f00e fca2 	bl	80115bc <puts>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002c78:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <SVCCTL_App_Notification+0x45c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <SVCCTL_App_Notification+0x454>)
 8002c80:	8ada      	ldrh	r2, [r3, #22]
 8002c82:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <SVCCTL_App_Notification+0x45c>)
 8002c84:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 8002c86:	484e      	ldr	r0, [pc, #312]	; (8002dc0 <SVCCTL_App_Notification+0x45c>)
 8002c88:	f000 fbe8 	bl	800345c <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002c8c:	4b4a      	ldr	r3, [pc, #296]	; (8002db8 <SVCCTL_App_Notification+0x454>)
 8002c8e:	8adb      	ldrh	r3, [r3, #22]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00b fa4d 	bl	800e130 <aci_gatt_disc_all_primary_services>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if (result == BLE_STATUS_SUCCESS)
 8002c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <SVCCTL_App_Notification+0x34e>
            APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n");
 8002ca4:	4847      	ldr	r0, [pc, #284]	; (8002dc4 <SVCCTL_App_Notification+0x460>)
 8002ca6:	f00e fc89 	bl	80115bc <puts>
            APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 8002caa:	4847      	ldr	r0, [pc, #284]	; (8002dc8 <SVCCTL_App_Notification+0x464>)
 8002cac:	f00e fbea 	bl	8011484 <iprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002cb0:	e078      	b.n	8002da4 <SVCCTL_App_Notification+0x440>
            APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002cb2:	4846      	ldr	r0, [pc, #280]	; (8002dcc <SVCCTL_App_Notification+0x468>)
 8002cb4:	f00e fbe6 	bl	8011484 <iprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002cb8:	e074      	b.n	8002da4 <SVCCTL_App_Notification+0x440>
          p_le_advertising_event = (hci_le_advertising_report_event_rp0 *) p_meta_evt->data;
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	623b      	str	r3, [r7, #32]
          event_type = p_le_advertising_event->Advertising_Report[0].Event_Type;
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	785b      	ldrb	r3, [r3, #1]
 8002cc4:	77fb      	strb	r3, [r7, #31]
          event_data_size = p_le_advertising_event->Advertising_Report[0].Length_Data;
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	7a5b      	ldrb	r3, [r3, #9]
 8002cca:	77bb      	strb	r3, [r7, #30]
          adv_report_data = (uint8_t*)(&p_le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	3309      	adds	r3, #9
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61bb      	str	r3, [r7, #24]
          k = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
          if (event_type == ADV_IND)
 8002cd8:	7ffb      	ldrb	r3, [r7, #31]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d161      	bne.n	8002da2 <SVCCTL_App_Notification+0x43e>
            while(k < event_data_size)
 8002cde:	e059      	b.n	8002d94 <SVCCTL_App_Notification+0x430>
              adlength = adv_report_data[k];
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	75fb      	strb	r3, [r7, #23]
              adtype = adv_report_data[k + 1];
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	3301      	adds	r3, #1
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	75bb      	strb	r3, [r7, #22]
              switch (adtype)
 8002cf6:	7dbb      	ldrb	r3, [r7, #22]
 8002cf8:	2bff      	cmp	r3, #255	; 0xff
 8002cfa:	d009      	beq.n	8002d10 <SVCCTL_App_Notification+0x3ac>
 8002cfc:	2bff      	cmp	r3, #255	; 0xff
 8002cfe:	dc3f      	bgt.n	8002d80 <SVCCTL_App_Notification+0x41c>
 8002d00:	2b16      	cmp	r3, #22
 8002d02:	d03f      	beq.n	8002d84 <SVCCTL_App_Notification+0x420>
 8002d04:	2b16      	cmp	r3, #22
 8002d06:	dc3b      	bgt.n	8002d80 <SVCCTL_App_Notification+0x41c>
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d03d      	beq.n	8002d88 <SVCCTL_App_Notification+0x424>
 8002d0c:	2b0a      	cmp	r3, #10
                break;
 8002d0e:	e03c      	b.n	8002d8a <SVCCTL_App_Notification+0x426>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d930      	bls.n	8002d78 <SVCCTL_App_Notification+0x414>
 8002d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d18:	3302      	adds	r3, #2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d129      	bne.n	8002d78 <SVCCTL_App_Notification+0x414>
                    APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 8002d24:	482a      	ldr	r0, [pc, #168]	; (8002dd0 <SVCCTL_App_Notification+0x46c>)
 8002d26:	f00e fc49 	bl	80115bc <puts>
                    switch (adv_report_data[k + 3])
 8002d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2c:	3303      	adds	r3, #3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b83      	cmp	r3, #131	; 0x83
 8002d36:	d121      	bne.n	8002d7c <SVCCTL_App_Notification+0x418>
                        APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n");
 8002d38:	4826      	ldr	r0, [pc, #152]	; (8002dd4 <SVCCTL_App_Notification+0x470>)
 8002d3a:	f00e fc3f 	bl	80115bc <puts>
                        BleApplicationContext.DeviceServerFound = 0x01;
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <SVCCTL_App_Notification+0x454>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                        SERVER_REMOTE_BDADDR[0] = p_le_advertising_event->Advertising_Report[0].Address[0];
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	78da      	ldrb	r2, [r3, #3]
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <SVCCTL_App_Notification+0x474>)
 8002d4c:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = p_le_advertising_event->Advertising_Report[0].Address[1];
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	791a      	ldrb	r2, [r3, #4]
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <SVCCTL_App_Notification+0x474>)
 8002d54:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = p_le_advertising_event->Advertising_Report[0].Address[2];
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	795a      	ldrb	r2, [r3, #5]
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <SVCCTL_App_Notification+0x474>)
 8002d5c:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = p_le_advertising_event->Advertising_Report[0].Address[3];
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	799a      	ldrb	r2, [r3, #6]
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <SVCCTL_App_Notification+0x474>)
 8002d64:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = p_le_advertising_event->Advertising_Report[0].Address[4];
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	79da      	ldrb	r2, [r3, #7]
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <SVCCTL_App_Notification+0x474>)
 8002d6c:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = p_le_advertising_event->Advertising_Report[0].Address[5];
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	7a1a      	ldrb	r2, [r3, #8]
 8002d72:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <SVCCTL_App_Notification+0x474>)
 8002d74:	715a      	strb	r2, [r3, #5]
                        break;
 8002d76:	e002      	b.n	8002d7e <SVCCTL_App_Notification+0x41a>
                  }
 8002d78:	bf00      	nop
 8002d7a:	e006      	b.n	8002d8a <SVCCTL_App_Notification+0x426>
                        break;
 8002d7c:	bf00      	nop
                  break;
 8002d7e:	e004      	b.n	8002d8a <SVCCTL_App_Notification+0x426>
                  break;
 8002d80:	bf00      	nop
 8002d82:	e002      	b.n	8002d8a <SVCCTL_App_Notification+0x426>
                  break;
 8002d84:	bf00      	nop
 8002d86:	e000      	b.n	8002d8a <SVCCTL_App_Notification+0x426>
                  break;
 8002d88:	bf00      	nop
              k += adlength + 1;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d90:	4413      	add	r3, r2
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(k < event_data_size)
 8002d94:	7fbb      	ldrb	r3, [r7, #30]
 8002d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dba1      	blt.n	8002ce0 <SVCCTL_App_Notification+0x37c>
          break;
 8002d9c:	e001      	b.n	8002da2 <SVCCTL_App_Notification+0x43e>
          break;
 8002d9e:	bf00      	nop
 8002da0:	e004      	b.n	8002dac <SVCCTL_App_Notification+0x448>
          break;
 8002da2:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8002da4:	e002      	b.n	8002dac <SVCCTL_App_Notification+0x448>
      break;
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <SVCCTL_App_Notification+0x448>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002daa:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002dac:	2301      	movs	r3, #1
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3754      	adds	r7, #84	; 0x54
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200002a8 	.word	0x200002a8
 8002dbc:	08012918 	.word	0x08012918
 8002dc0:	20000a28 	.word	0x20000a28
 8002dc4:	0801293c 	.word	0x0801293c
 8002dc8:	08012970 	.word	0x08012970
 8002dcc:	080129a0 	.word	0x080129a0
 8002dd0:	080129e0 	.word	0x080129e0
 8002dd4:	080129fc 	.word	0x080129fc
 8002dd8:	20000a20 	.word	0x20000a20

08002ddc <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]

  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 8002de8:	8adb      	ldrh	r3, [r3, #22]
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d103      	bne.n	8002df8 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 8002df2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002df6:	e000      	b.n	8002dfa <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	200002a8 	.word	0x200002a8

08002e0c <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 8002e10:	f000 fe88 	bl	8003b24 <P2P_Client_APP_Get_State>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d004      	beq.n	8002e24 <APP_BLE_Key_Button1_Action+0x18>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f00e f8e1 	bl	8010fe4 <UTIL_SEQ_SetTask>
  else
  {
    P2PC_APP_SW1_Button_Action();
  }
#endif 
}
 8002e22:	e001      	b.n	8002e28 <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_SW1_Button_Action();
 8002e24:	f000 fb4c 	bl	80034c0 <P2PC_APP_SW1_Button_Action>
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <Ble_Tl_Init+0x20>)
 8002e34:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <Ble_Tl_Init+0x24>)
 8002e38:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <Ble_Tl_Init+0x28>)
 8002e40:	f00c f840 	bl	800eec4 <hci_init>

  return;
 8002e44:	bf00      	nop
}
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20030028 	.word	0x20030028
 8002e50:	08003399 	.word	0x08003399
 8002e54:	08003361 	.word	0x08003361

08002e58 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b08d      	sub	sp, #52	; 0x34
 8002e5c:	af06      	add	r7, sp, #24
  const uint8_t * p_bd_addr;
#endif
#if (CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR)
  uint32_t a_srd_bd_addr[2];
#endif
  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8002e5e:	2300      	movs	r3, #0
 8002e60:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002e62:	2392      	movs	r3, #146	; 0x92
 8002e64:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8002e66:	48a2      	ldr	r0, [pc, #648]	; (80030f0 <Ble_Hci_Gap_Gatt_Init+0x298>)
 8002e68:	f00e fba8 	bl	80115bc <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8002e6c:	f00b fd35 	bl	800e8da <hci_reset>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	489d      	ldr	r0, [pc, #628]	; (80030f4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8002e80:	f00e fb00 	bl	8011484 <iprintf>
 8002e84:	e002      	b.n	8002e8c <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8002e86:	489c      	ldr	r0, [pc, #624]	; (80030f8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8002e88:	f00e fb98 	bl	80115bc <puts>

  /**
   * Write the BD Address
   */
#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  p_bd_addr = BleGetBdAddress();
 8002e8c:	f000 fa02 	bl	8003294 <BleGetBdAddress>
 8002e90:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	2106      	movs	r1, #6
 8002e96:	2000      	movs	r0, #0
 8002e98:	f00b fbdf 	bl	800e65a <aci_hal_write_config_data>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4894      	ldr	r0, [pc, #592]	; (80030fc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8002eac:	f00e faea 	bl	8011484 <iprintf>
 8002eb0:	e021      	b.n	8002ef6 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8002eb2:	4893      	ldr	r0, [pc, #588]	; (8003100 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8002eb4:	f00e fb82 	bl	80115bc <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	3305      	adds	r3, #5
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461c      	mov	r4, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	3303      	adds	r3, #3
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461d      	mov	r5, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	3301      	adds	r3, #1
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	9101      	str	r1, [sp, #4]
 8002ee8:	9200      	str	r2, [sp, #0]
 8002eea:	462b      	mov	r3, r5
 8002eec:	4622      	mov	r2, r4
 8002eee:	4601      	mov	r1, r0
 8002ef0:	4884      	ldr	r0, [pc, #528]	; (8003104 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8002ef2:	f00e fac7 	bl	8011484 <iprintf>
  }

  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	795a      	ldrb	r2, [r3, #5]
 8002efa:	4b83      	ldr	r3, [pc, #524]	; (8003108 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8002efc:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	791a      	ldrb	r2, [r3, #4]
 8002f02:	4b81      	ldr	r3, [pc, #516]	; (8003108 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8002f04:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	78da      	ldrb	r2, [r3, #3]
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	; (8003108 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8002f0c:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	789a      	ldrb	r2, [r3, #2]
 8002f12:	4b7d      	ldr	r3, [pc, #500]	; (8003108 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8002f14:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	785a      	ldrb	r2, [r3, #1]
 8002f1a:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8002f1c:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	4b79      	ldr	r3, [pc, #484]	; (8003108 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8002f24:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE);
 8002f26:	4a79      	ldr	r2, [pc, #484]	; (800310c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8002f28:	2110      	movs	r1, #16
 8002f2a:	2018      	movs	r0, #24
 8002f2c:	f00b fb95 	bl	800e65a <aci_hal_write_config_data>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <Ble_Hci_Gap_Gatt_Init+0xee>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4874      	ldr	r0, [pc, #464]	; (8003110 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8002f40:	f00e faa0 	bl	8011484 <iprintf>
 8002f44:	e002      	b.n	8002f4c <Ble_Hci_Gap_Gatt_Init+0xf4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8002f46:	4873      	ldr	r0, [pc, #460]	; (8003114 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8002f48:	f00e fb38 	bl	80115bc <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE);
 8002f4c:	4a72      	ldr	r2, [pc, #456]	; (8003118 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8002f4e:	2110      	movs	r1, #16
 8002f50:	2008      	movs	r0, #8
 8002f52:	f00b fb82 	bl	800e65a <aci_hal_write_config_data>
 8002f56:	4603      	mov	r3, r0
 8002f58:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <Ble_Hci_Gap_Gatt_Init+0x114>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	4619      	mov	r1, r3
 8002f64:	486d      	ldr	r0, [pc, #436]	; (800311c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8002f66:	f00e fa8d 	bl	8011484 <iprintf>
 8002f6a:	e002      	b.n	8002f72 <Ble_Hci_Gap_Gatt_Init+0x11a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8002f6c:	486c      	ldr	r0, [pc, #432]	; (8003120 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8002f6e:	f00e fb25 	bl	80115bc <puts>
  }

  /**
   * Set TX Power to 0dBm.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002f72:	2118      	movs	r1, #24
 8002f74:	2001      	movs	r0, #1
 8002f76:	f00b fbf5 	bl	800e764 <aci_hal_set_tx_power_level>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <Ble_Hci_Gap_Gatt_Init+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4866      	ldr	r0, [pc, #408]	; (8003124 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8002f8a:	f00e fa7b 	bl	8011484 <iprintf>
 8002f8e:	e002      	b.n	8002f96 <Ble_Hci_Gap_Gatt_Init+0x13e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8002f90:	4865      	ldr	r0, [pc, #404]	; (8003128 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8002f92:	f00e fb13 	bl	80115bc <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8002f96:	f00a fffd 	bl	800df94 <aci_gatt_init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <Ble_Hci_Gap_Gatt_Init+0x158>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4860      	ldr	r0, [pc, #384]	; (800312c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8002faa:	f00e fa6b 	bl	8011484 <iprintf>
 8002fae:	e002      	b.n	8002fb6 <Ble_Hci_Gap_Gatt_Init+0x15e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8002fb0:	485f      	ldr	r0, [pc, #380]	; (8003130 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8002fb2:	f00e fb03 	bl	80115bc <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02b      	beq.n	8003020 <Ble_Hci_Gap_Gatt_Init+0x1c8>
  {
    const char *name = "HRSTM";
 8002fc8:	4b5a      	ldr	r3, [pc, #360]	; (8003134 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8002fca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8002fcc:	1dba      	adds	r2, r7, #6
 8002fce:	7bf8      	ldrb	r0, [r7, #15]
 8002fd0:	1cbb      	adds	r3, r7, #2
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	2207      	movs	r2, #7
 8002fdc:	2100      	movs	r1, #0
 8002fde:	f00a fd99 	bl	800db14 <aci_gap_init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <Ble_Hci_Gap_Gatt_Init+0x1a0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4851      	ldr	r0, [pc, #324]	; (8003138 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8002ff2:	f00e fa47 	bl	8011484 <iprintf>
 8002ff6:	e002      	b.n	8002ffe <Ble_Hci_Gap_Gatt_Init+0x1a6>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8002ff8:	4850      	ldr	r0, [pc, #320]	; (800313c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8002ffa:	f00e fadf 	bl	80115bc <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8002ffe:	88fc      	ldrh	r4, [r7, #6]
 8003000:	88bd      	ldrh	r5, [r7, #4]
 8003002:	68b8      	ldr	r0, [r7, #8]
 8003004:	f7fd f8bc 	bl	8000180 <strlen>
 8003008:	4603      	mov	r3, r0
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	2200      	movs	r2, #0
 8003014:	4629      	mov	r1, r5
 8003016:	4620      	mov	r0, r4
 8003018:	f00a ffe1 	bl	800dfde <aci_gatt_update_char_value>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003020:	88f8      	ldrh	r0, [r7, #6]
 8003022:	8879      	ldrh	r1, [r7, #2]
 8003024:	463b      	mov	r3, r7
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2302      	movs	r3, #2
 800302a:	2200      	movs	r2, #0
 800302c:	f00a ffd7 	bl	800dfde <aci_gatt_update_char_value>
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8003034:	2202      	movs	r2, #2
 8003036:	2102      	movs	r1, #2
 8003038:	2000      	movs	r0, #0
 800303a:	f00b fcf0 	bl	800ea1e <hci_le_set_default_phy>
 800303e:	4603      	mov	r3, r0
 8003040:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <Ble_Hci_Gap_Gatt_Init+0x1fc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	4619      	mov	r1, r3
 800304c:	483c      	ldr	r0, [pc, #240]	; (8003140 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800304e:	f00e fa19 	bl	8011484 <iprintf>
 8003052:	e002      	b.n	800305a <Ble_Hci_Gap_Gatt_Init+0x202>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8003054:	483b      	ldr	r0, [pc, #236]	; (8003144 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8003056:	f00e fab1 	bl	80115bc <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f00a fc3d 	bl	800d8e4 <aci_gap_set_io_capability>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <Ble_Hci_Gap_Gatt_Init+0x228>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	4619      	mov	r1, r3
 8003078:	4834      	ldr	r0, [pc, #208]	; (800314c <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800307a:	f00e fa03 	bl	8011484 <iprintf>
 800307e:	e002      	b.n	8003086 <Ble_Hci_Gap_Gatt_Init+0x22e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8003080:	4833      	ldr	r0, [pc, #204]	; (8003150 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003082:	f00e fa9b 	bl	80115bc <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003088:	2201      	movs	r2, #1
 800308a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800308c:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800308e:	2208      	movs	r2, #8
 8003090:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003092:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003094:	2210      	movs	r2, #16
 8003096:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800309a:	2201      	movs	r2, #1
 800309c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800309e:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030a0:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80030a2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030ac:	789c      	ldrb	r4, [r3, #2]
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030b0:	785d      	ldrb	r5, [r3, #1]
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	4a24      	ldr	r2, [pc, #144]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030b8:	7952      	ldrb	r2, [r2, #5]
 80030ba:	4923      	ldr	r1, [pc, #140]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030bc:	78c9      	ldrb	r1, [r1, #3]
 80030be:	4822      	ldr	r0, [pc, #136]	; (8003148 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80030c0:	6880      	ldr	r0, [r0, #8]
 80030c2:	2600      	movs	r6, #0
 80030c4:	9604      	str	r6, [sp, #16]
 80030c6:	9003      	str	r0, [sp, #12]
 80030c8:	9102      	str	r1, [sp, #8]
 80030ca:	9201      	str	r2, [sp, #4]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	2200      	movs	r2, #0
 80030d2:	4629      	mov	r1, r5
 80030d4:	4620      	mov	r0, r4
 80030d6:	f00a fc59 	bl	800d98c <aci_gap_set_authentication_requirement>
 80030da:	4603      	mov	r3, r0
 80030dc:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_BLE_ADDRESS_TYPE);
  if (ret != BLE_STATUS_SUCCESS)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d03b      	beq.n	800315c <Ble_Hci_Gap_Gatt_Init+0x304>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	4619      	mov	r1, r3
 80030e8:	481b      	ldr	r0, [pc, #108]	; (8003158 <Ble_Hci_Gap_Gatt_Init+0x300>)
 80030ea:	f00e f9cb 	bl	8011484 <iprintf>
 80030ee:	e038      	b.n	8003162 <Ble_Hci_Gap_Gatt_Init+0x30a>
 80030f0:	08012a20 	.word	0x08012a20
 80030f4:	08012a4c 	.word	0x08012a4c
 80030f8:	08012a7c 	.word	0x08012a7c
 80030fc:	08012a9c 	.word	0x08012a9c
 8003100:	08012af8 	.word	0x08012af8
 8003104:	08012b44 	.word	0x08012b44
 8003108:	20000008 	.word	0x20000008
 800310c:	08013574 	.word	0x08013574
 8003110:	08012b80 	.word	0x08012b80
 8003114:	08012bd8 	.word	0x08012bd8
 8003118:	08013584 	.word	0x08013584
 800311c:	08012c20 	.word	0x08012c20
 8003120:	08012c78 	.word	0x08012c78
 8003124:	08012cc0 	.word	0x08012cc0
 8003128:	08012d00 	.word	0x08012d00
 800312c:	08012d30 	.word	0x08012d30
 8003130:	08012d64 	.word	0x08012d64
 8003134:	08012d88 	.word	0x08012d88
 8003138:	08012d90 	.word	0x08012d90
 800313c:	08012dc0 	.word	0x08012dc0
 8003140:	08012de0 	.word	0x08012de0
 8003144:	08012e1c 	.word	0x08012e1c
 8003148:	200002a8 	.word	0x200002a8
 800314c:	08012e48 	.word	0x08012e48
 8003150:	08012e88 	.word	0x08012e88
 8003154:	0001b207 	.word	0x0001b207
 8003158:	08012eb8 	.word	0x08012eb8
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800315c:	480e      	ldr	r0, [pc, #56]	; (8003198 <Ble_Hci_Gap_Gatt_Init+0x340>)
 800315e:	f00e fa2d 	bl	80115bc <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <Ble_Hci_Gap_Gatt_Init+0x344>)
 8003164:	789b      	ldrb	r3, [r3, #2]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00f      	beq.n	800318a <Ble_Hci_Gap_Gatt_Init+0x332>
  {
    ret = aci_gap_configure_whitelist();
 800316a:	f00a fd80 	bl	800dc6e <aci_gap_configure_whitelist>
 800316e:	4603      	mov	r3, r0
 8003170:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8003172:	7dfb      	ldrb	r3, [r7, #23]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <Ble_Hci_Gap_Gatt_Init+0x32c>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	4619      	mov	r1, r3
 800317c:	4808      	ldr	r0, [pc, #32]	; (80031a0 <Ble_Hci_Gap_Gatt_Init+0x348>)
 800317e:	f00e f981 	bl	8011484 <iprintf>
 8003182:	e002      	b.n	800318a <Ble_Hci_Gap_Gatt_Init+0x332>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 8003186:	f00e fa19 	bl	80115bc <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800318a:	4807      	ldr	r0, [pc, #28]	; (80031a8 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800318c:	f00e f97a 	bl	8011484 <iprintf>
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003198:	08012f04 	.word	0x08012f04
 800319c:	200002a8 	.word	0x200002a8
 80031a0:	08012f40 	.word	0x08012f40
 80031a4:	08012f80 	.word	0x08012f80
 80031a8:	08012fb0 	.word	0x08012fb0

080031ac <Scan_Request>:

static void Scan_Request(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <Scan_Request+0x50>)
 80031b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d01a      	beq.n	80031f2 <Scan_Request+0x46>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 80031bc:	2000      	movs	r0, #0
 80031be:	f001 f8d1 	bl	8004364 <BSP_LED_On>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 80031c2:	2301      	movs	r3, #1
 80031c4:	2200      	movs	r2, #0
 80031c6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80031ca:	f44f 7048 	mov.w	r0, #800	; 0x320
 80031ce:	f00a fd72 	bl	800dcb6 <aci_gap_start_general_discovery_proc>
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <Scan_Request+0x38>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 80031dc:	4808      	ldr	r0, [pc, #32]	; (8003200 <Scan_Request+0x54>)
 80031de:	f00e f951 	bl	8011484 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 80031e2:	e006      	b.n	80031f2 <Scan_Request+0x46>
      BSP_LED_On(LED_RED);
 80031e4:	2002      	movs	r0, #2
 80031e6:	f001 f8bd 	bl	8004364 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 80031ea:	4806      	ldr	r0, [pc, #24]	; (8003204 <Scan_Request+0x58>)
 80031ec:	f00e f94a 	bl	8011484 <iprintf>
  return;
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
}
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200002a8 	.word	0x200002a8
 8003200:	08012fdc 	.word	0x08012fdc
 8003204:	0801300c 	.word	0x0801300c

08003208 <Connect_Request>:

static void Connect_Request(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800320e:	481a      	ldr	r0, [pc, #104]	; (8003278 <Connect_Request+0x70>)
 8003210:	f00e f938 	bl	8011484 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <Connect_Request+0x74>)
 8003216:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800321a:	2b06      	cmp	r3, #6
 800321c:	d028      	beq.n	8003270 <Connect_Request+0x68>
  {
    result = aci_gap_create_connection(SCAN_P,
 800321e:	2310      	movs	r3, #16
 8003220:	9306      	str	r3, [sp, #24]
 8003222:	2310      	movs	r3, #16
 8003224:	9305      	str	r3, [sp, #20]
 8003226:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800322a:	9304      	str	r3, [sp, #16]
 800322c:	2300      	movs	r3, #0
 800322e:	9303      	str	r3, [sp, #12]
 8003230:	2350      	movs	r3, #80	; 0x50
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	2328      	movs	r3, #40	; 0x28
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <Connect_Request+0x78>)
 800323e:	2200      	movs	r2, #0
 8003240:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003244:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003248:	f00a fdc9 	bl	800ddde <aci_gap_create_connection>
 800324c:	4603      	mov	r3, r0
 800324e:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <Connect_Request+0x58>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <Connect_Request+0x74>)
 8003258:	2204      	movs	r2, #4
 800325a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800325e:	e007      	b.n	8003270 <Connect_Request+0x68>
      BSP_LED_On(LED_RED);
 8003260:	2002      	movs	r0, #2
 8003262:	f001 f87f 	bl	8004364 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <Connect_Request+0x74>)
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 800326e:	bf00      	nop
 8003270:	bf00      	nop
}
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0801303c 	.word	0x0801303c
 800327c:	200002a8 	.word	0x200002a8
 8003280:	20000a20 	.word	0x20000a20

08003284 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8003288:	2001      	movs	r0, #1
 800328a:	f001 f885 	bl	8004398 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <BleGetBdAddress>:

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
const uint8_t* BleGetBdAddress(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800329a:	f7ff fad9 	bl	8002850 <LL_FLASH_GetUDN>
 800329e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d023      	beq.n	80032f0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80032a8:	f7ff faea 	bl	8002880 <LL_FLASH_GetSTCompanyID>
 80032ac:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80032ae:	f7ff fadb 	bl	8002868 <LL_FLASH_GetDeviceID>
 80032b2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <BleGetBdAddress+0x80>)
 80032ba:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <BleGetBdAddress+0x80>)
 80032c4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <BleGetBdAddress+0x80>)
 80032cc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <BleGetBdAddress+0x80>)
 80032d4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <BleGetBdAddress+0x80>)
 80032de:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <BleGetBdAddress+0x80>)
 80032e8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)a_BdAddrUdn;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <BleGetBdAddress+0x80>)
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e00b      	b.n	8003308 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f00d f82f 	bl	8010354 <OTP_Read>
 80032f6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e001      	b.n	8003308 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = a_MBdAddr;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <BleGetBdAddress+0x84>)
 8003306:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8003308:	697b      	ldr	r3, [r7, #20]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000a18 	.word	0x20000a18
 8003318:	0801356c 	.word	0x0801356c

0800331c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003324:	2100      	movs	r1, #0
 8003326:	2020      	movs	r0, #32
 8003328:	f00d fe5c 	bl	8010fe4 <UTIL_SEQ_SetTask>

  return;
 800332c:	bf00      	nop
}
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800333c:	2001      	movs	r0, #1
 800333e:	f00d febd 	bl	80110bc <UTIL_SEQ_SetEvt>

  return;
 8003342:	bf00      	nop
}
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003352:	2001      	movs	r0, #1
 8003354:	f00d fed2 	bl	80110fc <UTIL_SEQ_WaitEvt>

  return;
 8003358:	bf00      	nop
}
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	3308      	adds	r3, #8
 8003372:	4618      	mov	r0, r3
 8003374:	f00a fa46 	bl	800d804 <SVCCTL_UserEvtRx>
 8003378:	4603      	mov	r3, r0
 800337a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800337c:	7afb      	ldrb	r3, [r7, #11]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003388:	e003      	b.n	8003392 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
  return;
 8003390:	bf00      	nop
}
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <BLE_StatusNot+0x16>
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d006      	beq.n	80033ba <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 80033ac:	e00b      	b.n	80033c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80033ae:	233f      	movs	r3, #63	; 0x3f
 80033b0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f00d fe42 	bl	801103c <UTIL_SEQ_PauseTask>
      break;
 80033b8:	e005      	b.n	80033c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80033ba:	233f      	movs	r3, #63	; 0x3f
 80033bc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f00d fe5c 	bl	801107c <UTIL_SEQ_ResumeTask>
      break;
 80033c4:	bf00      	nop
  }

  return;
 80033c6:	bf00      	nop
}
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
  uint8_t index =0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 80033da:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <P2PC_APP_Init+0x74>)
 80033dc:	2100      	movs	r1, #0
 80033de:	2004      	movs	r0, #4
 80033e0:	f00d fdde 	bl	8010fa0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 80033e4:	4a18      	ldr	r2, [pc, #96]	; (8003448 <P2PC_APP_Init+0x78>)
 80033e6:	2100      	movs	r1, #0
 80033e8:	2008      	movs	r0, #8
 80033ea:	f00d fdd9 	bl	8010fa0 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <P2PC_APP_Init+0x7c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 80033f4:	4b15      	ldr	r3, [pc, #84]	; (800344c <P2PC_APP_Init+0x7c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <P2PC_APP_Init+0x7c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <P2PC_APP_Init+0x7c>)
 8003402:	2200      	movs	r2, #0
 8003404:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <P2PC_APP_Init+0x7c>)
 8003408:	2201      	movs	r2, #1
 800340a:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <P2PC_APP_Init+0x7c>)
 800340e:	2200      	movs	r2, #0
 8003410:	711a      	strb	r2, [r3, #4]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003412:	2300      	movs	r3, #0
 8003414:	71fb      	strb	r3, [r7, #7]
 8003416:	e008      	b.n	800342a <P2PC_APP_Init+0x5a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <P2PC_APP_Init+0x80>)
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	4413      	add	r3, r2
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	3301      	adds	r3, #1
 8003428:	71fb      	strb	r3, [r7, #7]
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f3      	beq.n	8003418 <P2PC_APP_Init+0x48>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 8003430:	4808      	ldr	r0, [pc, #32]	; (8003454 <P2PC_APP_Init+0x84>)
 8003432:	f00a f9cd 	bl	800d7d0 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 8003436:	4808      	ldr	r0, [pc, #32]	; (8003458 <P2PC_APP_Init+0x88>)
 8003438:	f00e f8c0 	bl	80115bc <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800343c:	bf00      	nop
}
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	08003bf9 	.word	0x08003bf9
 8003448:	08003bb1 	.word	0x08003bb1
 800344c:	2000033c 	.word	0x2000033c
 8003450:	2000032c 	.word	0x2000032c
 8003454:	080034d1 	.word	0x080034d1
 8003458:	08013068 	.word	0x08013068

0800345c <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <P2PC_APP_Notification+0x16>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d005      	beq.n	800347c <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 8003470:	e01e      	b.n	80034b0 <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	885a      	ldrh	r2, [r3, #2]
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <P2PC_APP_Notification+0x5c>)
 8003478:	80da      	strh	r2, [r3, #6]
      break;
 800347a:	e019      	b.n	80034b0 <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <P2PC_APP_Notification+0x5c>)
 8003482:	2200      	movs	r2, #0
 8003484:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003486:	e005      	b.n	8003494 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <P2PC_APP_Notification+0x60>)
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	4413      	add	r3, r2
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	4a07      	ldr	r2, [pc, #28]	; (80034bc <P2PC_APP_Notification+0x60>)
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	4413      	add	r3, r2
 80034a2:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ef      	bne.n	8003488 <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); 
 80034a8:	2000      	movs	r0, #0
 80034aa:	f000 ff75 	bl	8004398 <BSP_LED_Off>
      break;
 80034ae:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 80034b0:	bf00      	nop
}
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	2000033c 	.word	0x2000033c
 80034bc:	2000032c 	.word	0x2000032c

080034c0 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80034c4:	2100      	movs	r1, #0
 80034c6:	2008      	movs	r0, #8
 80034c8:	f00d fd8c 	bl	8010fe4 <UTIL_SEQ_SetTask>

}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b094      	sub	sp, #80	; 0x50
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3301      	adds	r3, #1
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 80034e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2bff      	cmp	r3, #255	; 0xff
 80034ea:	f040 82b7 	bne.w	8003a5c <Event_Handler+0x58c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80034ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f0:	3302      	adds	r3, #2
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	f200 82a0 	bhi.w	8003a44 <Event_Handler+0x574>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <Event_Handler+0x3c>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003851 	.word	0x08003851
 8003510:	08003a45 	.word	0x08003a45
 8003514:	080036f7 	.word	0x080036f7
 8003518:	08003a45 	.word	0x08003a45
 800351c:	08003a45 	.word	0x08003a45
 8003520:	08003a45 	.word	0x08003a45
 8003524:	08003541 	.word	0x08003541
 8003528:	08003a45 	.word	0x08003a45
 800352c:	08003a45 	.word	0x08003a45
 8003530:	08003a45 	.word	0x08003a45
 8003534:	08003a45 	.word	0x08003a45
 8003538:	0800396d 	.word	0x0800396d
 800353c:	080039ef 	.word	0x080039ef
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003542:	3302      	adds	r3, #2
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	4313      	orrs	r3, r2
 8003550:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003558:	e02e      	b.n	80035b8 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800355a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800355e:	4ab8      	ldr	r2, [pc, #736]	; (8003840 <Event_Handler+0x370>)
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	3302      	adds	r3, #2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fc37 	bl	8002ddc <APP_BLE_Get_Client_Connection_Status>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 8003574:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003578:	4ab1      	ldr	r2, [pc, #708]	; (8003840 <Event_Handler+0x370>)
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b06      	cmp	r3, #6
 8003582:	d114      	bne.n	80035ae <Event_Handler+0xde>
 8003584:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003588:	2b00      	cmp	r3, #0
 800358a:	d110      	bne.n	80035ae <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 800358c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003590:	4aab      	ldr	r2, [pc, #684]	; (8003840 <Event_Handler+0x370>)
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	4413      	add	r3, r2
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800359a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800359e:	4aa8      	ldr	r2, [pc, #672]	; (8003840 <Event_Handler+0x370>)
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	3302      	adds	r3, #2
 80035a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035aa:	801a      	strh	r2, [r3, #0]
              break;
 80035ac:	e010      	b.n	80035d0 <Event_Handler+0x100>
            }
            index++;
 80035ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035b2:	3301      	adds	r3, #1
 80035b4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80035b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 80035c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035c4:	4a9e      	ldr	r2, [pc, #632]	; (8003840 <Event_Handler+0x370>)
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1c4      	bne.n	800355a <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80035d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 8237 	bne.w	8003a48 <Event_Handler+0x578>
          {
            aP2PClientContext[index].connHandle= handle;
 80035da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035de:	4a98      	ldr	r2, [pc, #608]	; (8003840 <Event_Handler+0x370>)
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	3302      	adds	r3, #2
 80035e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80035e8:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	78da      	ldrb	r2, [r3, #3]
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	789b      	ldrb	r3, [r3, #2]
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	789b      	ldrb	r3, [r3, #2]
 80035fe:	2b14      	cmp	r3, #20
 8003600:	f040 8222 	bne.w	8003a48 <Event_Handler+0x578>
          {
            idx = 16;
 8003604:	2310      	movs	r3, #16
 8003606:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003610:	e06a      	b.n	80036e8 <Event_Handler+0x218>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8003612:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003618:	4413      	add	r3, r2
 800361a:	791b      	ldrb	r3, [r3, #4]
 800361c:	b29a      	uxth	r2, r3
 800361e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003624:	440b      	add	r3, r1
 8003626:	3304      	adds	r3, #4
 8003628:	3301      	adds	r3, #1
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 8003636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003638:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800363c:	4293      	cmp	r3, r2
 800363e:	d149      	bne.n	80036d4 <Event_Handler+0x204>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 8003640:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003644:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <Event_Handler+0x370>)
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	3302      	adds	r3, #2
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	4619      	mov	r1, r3
 8003650:	487c      	ldr	r0, [pc, #496]	; (8003844 <Event_Handler+0x374>)
 8003652:	f00d ff17 	bl	8011484 <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8003656:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800365a:	3b10      	subs	r3, #16
 800365c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365e:	4413      	add	r3, r2
 8003660:	791b      	ldrb	r3, [r3, #4]
 8003662:	b299      	uxth	r1, r3
 8003664:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003668:	3b10      	subs	r3, #16
 800366a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366c:	4413      	add	r3, r2
 800366e:	3304      	adds	r3, #4
 8003670:	3301      	adds	r3, #1
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	b29a      	uxth	r2, r3
 800367a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800367e:	430a      	orrs	r2, r1
 8003680:	b291      	uxth	r1, r2
 8003682:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <Event_Handler+0x370>)
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4413      	add	r3, r2
 8003688:	3304      	adds	r3, #4
 800368a:	460a      	mov	r2, r1
 800368c:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800368e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003692:	3b0e      	subs	r3, #14
 8003694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003696:	4413      	add	r3, r2
 8003698:	791b      	ldrb	r3, [r3, #4]
 800369a:	b299      	uxth	r1, r3
 800369c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80036a0:	3b0e      	subs	r3, #14
 80036a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	3301      	adds	r3, #1
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80036b6:	430a      	orrs	r2, r1
 80036b8:	b291      	uxth	r1, r2
 80036ba:	4a61      	ldr	r2, [pc, #388]	; (8003840 <Event_Handler+0x370>)
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	3306      	adds	r3, #6
 80036c2:	460a      	mov	r2, r1
 80036c4:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 80036c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80036ca:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <Event_Handler+0x370>)
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	2208      	movs	r2, #8
 80036d2:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 80036d4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80036d8:	3306      	adds	r3, #6
 80036da:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 80036de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036e2:	3301      	adds	r3, #1
 80036e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80036e8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80036ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d38e      	bcc.n	8003612 <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 80036f4:	e1a8      	b.n	8003a48 <Event_Handler+0x578>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 80036f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f8:	3302      	adds	r3, #2
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003702:	e004      	b.n	800370e <Event_Handler+0x23e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8003704:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003708:	3301      	adds	r3, #1
 800370a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800370e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <Event_Handler+0x25e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003716:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800371a:	4a49      	ldr	r2, [pc, #292]	; (8003840 <Event_Handler+0x370>)
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	4413      	add	r3, r2
 8003720:	3302      	adds	r3, #2
 8003722:	881a      	ldrh	r2, [r3, #0]
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800372a:	429a      	cmp	r2, r3
 800372c:	d1ea      	bne.n	8003704 <Event_Handler+0x234>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800372e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 818a 	bne.w	8003a4c <Event_Handler+0x57c>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 8003738:	2311      	movs	r3, #17
 800373a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	789b      	ldrb	r3, [r3, #2]
 8003742:	2b15      	cmp	r3, #21
 8003744:	f040 8182 	bne.w	8003a4c <Event_Handler+0x57c>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	78db      	ldrb	r3, [r3, #3]
 800374c:	3b01      	subs	r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 8003754:	e06f      	b.n	8003836 <Event_Handler+0x366>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8003756:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	4413      	add	r3, r2
 800375e:	791b      	ldrb	r3, [r3, #4]
 8003760:	b29a      	uxth	r2, r3
 8003762:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003768:	440b      	add	r3, r1
 800376a:	3304      	adds	r3, #4
 800376c:	3301      	adds	r3, #1
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	b29b      	uxth	r3, r3
 8003776:	4313      	orrs	r3, r2
 8003778:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800377a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800377e:	3b0e      	subs	r3, #14
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	4413      	add	r3, r2
 8003784:	791b      	ldrb	r3, [r3, #4]
 8003786:	b29a      	uxth	r2, r3
 8003788:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800378c:	3b0e      	subs	r3, #14
 800378e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003790:	440b      	add	r3, r1
 8003792:	3304      	adds	r3, #4
 8003794:	3301      	adds	r3, #1
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	b29b      	uxth	r3, r3
 800379e:	4313      	orrs	r3, r2
 80037a0:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 80037a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037a4:	f64f 6241 	movw	r2, #65089	; 0xfe41
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d11a      	bne.n	80037e2 <Event_Handler+0x312>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80037ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037b0:	4a23      	ldr	r2, [pc, #140]	; (8003840 <Event_Handler+0x370>)
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4413      	add	r3, r2
 80037b6:	3302      	adds	r3, #2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	4822      	ldr	r0, [pc, #136]	; (8003848 <Event_Handler+0x378>)
 80037be:	f00d fe61 	bl	8011484 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 80037c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <Event_Handler+0x370>)
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	2209      	movs	r2, #9
 80037ce:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 80037d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037d4:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <Event_Handler+0x370>)
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4413      	add	r3, r2
 80037da:	3308      	adds	r3, #8
 80037dc:	8c3a      	ldrh	r2, [r7, #32]
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	e01e      	b.n	8003820 <Event_Handler+0x350>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 80037e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037e4:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d119      	bne.n	8003820 <Event_Handler+0x350>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80037ec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <Event_Handler+0x370>)
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	4413      	add	r3, r2
 80037f6:	3302      	adds	r3, #2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	4813      	ldr	r0, [pc, #76]	; (800384c <Event_Handler+0x37c>)
 80037fe:	f00d fe41 	bl	8011484 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 8003802:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <Event_Handler+0x370>)
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	4413      	add	r3, r2
 800380c:	220a      	movs	r2, #10
 800380e:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 8003810:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <Event_Handler+0x370>)
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	4413      	add	r3, r2
 800381a:	330c      	adds	r3, #12
 800381c:	8c3a      	ldrh	r2, [r7, #32]
 800381e:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	78db      	ldrb	r3, [r3, #3]
 8003824:	3b15      	subs	r3, #21
 8003826:	b2da      	uxtb	r2, r3
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800382c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003830:	3315      	adds	r3, #21
 8003832:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d18b      	bne.n	8003756 <Event_Handler+0x286>
#endif
              }
            }
          }
        }
        break;
 800383e:	e105      	b.n	8003a4c <Event_Handler+0x57c>
 8003840:	2000032c 	.word	0x2000032c
 8003844:	08013084 	.word	0x08013084
 8003848:	080130c0 	.word	0x080130c0
 800384c:	080130f8 	.word	0x080130f8

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	3302      	adds	r3, #2
 8003854:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800385c:	e004      	b.n	8003868 <Event_Handler+0x398>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800385e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003862:	3301      	adds	r3, #1
 8003864:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003868:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <Event_Handler+0x3b8>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003870:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003874:	4a7d      	ldr	r2, [pc, #500]	; (8003a6c <Event_Handler+0x59c>)
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4413      	add	r3, r2
 800387a:	3302      	adds	r3, #2
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003884:	429a      	cmp	r2, r3
 8003886:	d1ea      	bne.n	800385e <Event_Handler+0x38e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003888:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800388c:	2b00      	cmp	r3, #0
 800388e:	f040 80df 	bne.w	8003a50 <Event_Handler+0x580>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	78db      	ldrb	r3, [r3, #3]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	789b      	ldrb	r3, [r3, #2]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f040 80d3 	bne.w	8003a50 <Event_Handler+0x580>
            {
              for (i=0; i<numDesc; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80038b0:	e056      	b.n	8003960 <Event_Handler+0x490>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 80038b2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80038c2:	69f9      	ldr	r1, [r7, #28]
 80038c4:	440b      	add	r3, r1
 80038c6:	3304      	adds	r3, #4
 80038c8:	3301      	adds	r3, #1
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 80038d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80038da:	3302      	adds	r3, #2
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	791b      	ldrb	r3, [r3, #4]
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80038e8:	3302      	adds	r3, #2
 80038ea:	69f9      	ldr	r1, [r7, #28]
 80038ec:	440b      	add	r3, r1
 80038ee:	3304      	adds	r3, #4
 80038f0:	3301      	adds	r3, #1
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 80038fe:	8afb      	ldrh	r3, [r7, #22]
 8003900:	f642 1202 	movw	r2, #10498	; 0x2902
 8003904:	4293      	cmp	r3, r2
 8003906:	d121      	bne.n	800394c <Event_Handler+0x47c>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8003908:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800390c:	4a57      	ldr	r2, [pc, #348]	; (8003a6c <Event_Handler+0x59c>)
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4413      	add	r3, r2
 8003912:	3302      	adds	r3, #2
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4619      	mov	r1, r3
 8003918:	4855      	ldr	r0, [pc, #340]	; (8003a70 <Event_Handler+0x5a0>)
 800391a:	f00d fdb3 	bl	8011484 <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800391e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003922:	4a52      	ldr	r2, [pc, #328]	; (8003a6c <Event_Handler+0x59c>)
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b0a      	cmp	r3, #10
 800392c:	d10e      	bne.n	800394c <Event_Handler+0x47c>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800392e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003932:	4a4e      	ldr	r2, [pc, #312]	; (8003a6c <Event_Handler+0x59c>)
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	4413      	add	r3, r2
 8003938:	330e      	adds	r3, #14
 800393a:	8b3a      	ldrh	r2, [r7, #24]
 800393c:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800393e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003942:	4a4a      	ldr	r2, [pc, #296]	; (8003a6c <Event_Handler+0x59c>)
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	4413      	add	r3, r2
 8003948:	220b      	movs	r2, #11
 800394a:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 800394c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003950:	3304      	adds	r3, #4
 8003952:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 8003956:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800395a:	3301      	adds	r3, #1
 800395c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003960:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003964:	7efb      	ldrb	r3, [r7, #27]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3a3      	bcc.n	80038b2 <Event_Handler+0x3e2>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800396a:	e071      	b.n	8003a50 <Event_Handler+0x580>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	3302      	adds	r3, #2
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003978:	e004      	b.n	8003984 <Event_Handler+0x4b4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800397a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800397e:	3301      	adds	r3, #1
 8003980:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003984:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <Event_Handler+0x4d4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800398c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003990:	4a36      	ldr	r2, [pc, #216]	; (8003a6c <Event_Handler+0x59c>)
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	4413      	add	r3, r2
 8003996:	3302      	adds	r3, #2
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1ea      	bne.n	800397a <Event_Handler+0x4aa>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80039a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d153      	bne.n	8003a54 <Event_Handler+0x584>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ae:	885b      	ldrh	r3, [r3, #2]
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039b6:	492d      	ldr	r1, [pc, #180]	; (8003a6c <Event_Handler+0x59c>)
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	440b      	add	r3, r1
 80039bc:	330c      	adds	r3, #12
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d147      	bne.n	8003a54 <Event_Handler+0x584>
                    (pr->Attribute_Value_Length == (lenPayload)) )
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	791b      	ldrb	r3, [r3, #4]
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <Event_Handler+0x5a4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d140      	bne.n	8003a54 <Event_Handler+0x584>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 80039d2:	2302      	movs	r3, #2
 80039d4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 80039d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d8:	791b      	ldrb	r3, [r3, #4]
 80039da:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	3305      	adds	r3, #5
 80039e0:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f848 	bl	8003a7c <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 80039ec:	e032      	b.n	8003a54 <Event_Handler+0x584>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f0:	3302      	adds	r3, #2
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 80039f4:	4820      	ldr	r0, [pc, #128]	; (8003a78 <Event_Handler+0x5a8>)
 80039f6:	f00d fde1 	bl	80115bc <puts>
          APP_DBG_MSG("\n");
 80039fa:	200a      	movs	r0, #10
 80039fc:	f00d fd5a 	bl	80114b4 <putchar>
#endif

          uint8_t index;

          index = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003a06:	e004      	b.n	8003a12 <Event_Handler+0x542>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8003a08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003a12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <Event_Handler+0x562>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003a1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <Event_Handler+0x59c>)
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	4413      	add	r3, r2
 8003a24:	3302      	adds	r3, #2
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d1ea      	bne.n	8003a08 <Event_Handler+0x538>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003a32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10e      	bne.n	8003a58 <Event_Handler+0x588>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2004      	movs	r0, #4
 8003a3e:	f00d fad1 	bl	8010fe4 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8003a42:	e009      	b.n	8003a58 <Event_Handler+0x588>
        default:
          break;
 8003a44:	bf00      	nop
 8003a46:	e00a      	b.n	8003a5e <Event_Handler+0x58e>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e008      	b.n	8003a5e <Event_Handler+0x58e>
        break;
 8003a4c:	bf00      	nop
 8003a4e:	e006      	b.n	8003a5e <Event_Handler+0x58e>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 8003a50:	bf00      	nop
 8003a52:	e004      	b.n	8003a5e <Event_Handler+0x58e>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 8003a54:	bf00      	nop
 8003a56:	e002      	b.n	8003a5e <Event_Handler+0x58e>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8003a58:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003a5a:	e000      	b.n	8003a5e <Event_Handler+0x58e>

    default:
      break;
 8003a5c:	bf00      	nop
  }

  return(return_value);
 8003a5e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 8003a62:	4618      	mov	r0, r3
 8003a64:	3750      	adds	r7, #80	; 0x50
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2000032c 	.word	0x2000032c
 8003a70:	0801313c 	.word	0x0801313c
 8003a74:	20000018 	.word	0x20000018
 8003a78:	08013184 	.word	0x08013184

08003a7c <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d139      	bne.n	8003b00 <Gatt_Notification+0x84>
/* USER CODE END P2P_Client_Evt_Opcode */

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <Gatt_Notification+0x90>)
 8003a94:	705a      	strb	r2, [r3, #1]
      APP_DBG_MSG("Received data= %s\n\r", pNotification->DataTransfered.pPayload);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	481c      	ldr	r0, [pc, #112]	; (8003b10 <Gatt_Notification+0x94>)
 8003a9e:	f00d fcf1 	bl	8011484 <iprintf>
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <Gatt_Notification+0x90>)
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d128      	bne.n	8003afc <Gatt_Notification+0x80>

        case 0x01 : {

          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	785a      	ldrb	r2, [r3, #1]
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <Gatt_Notification+0x90>)
 8003ab2:	709a      	strb	r2, [r3, #2]
          APP_DBG_MSG("Received 1st byte: %d 2nd byte: %d\r\n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4813      	ldr	r0, [pc, #76]	; (8003b14 <Gatt_Notification+0x98>)
 8003ac8:	f00d fcdc 	bl	8011484 <iprintf>

          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <Gatt_Notification+0x90>)
 8003ace:	789b      	ldrb	r3, [r3, #2]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <Gatt_Notification+0x6c>
            BSP_LED_Off(LED_BLUE);
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f000 fc5f 	bl	8004398 <BSP_LED_Off>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 8003ada:	480f      	ldr	r0, [pc, #60]	; (8003b18 <Gatt_Notification+0x9c>)
 8003adc:	f00d fcd2 	bl	8011484 <iprintf>
            APP_DBG_MSG(" \n\r");
 8003ae0:	480e      	ldr	r0, [pc, #56]	; (8003b1c <Gatt_Notification+0xa0>)
 8003ae2:	f00d fccf 	bl	8011484 <iprintf>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
            APP_DBG_MSG(" \n\r");
            BSP_LED_On(LED_BLUE);
          }

          break;
 8003ae6:	e00a      	b.n	8003afe <Gatt_Notification+0x82>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 8003ae8:	480d      	ldr	r0, [pc, #52]	; (8003b20 <Gatt_Notification+0xa4>)
 8003aea:	f00d fccb 	bl	8011484 <iprintf>
            APP_DBG_MSG(" \n\r");
 8003aee:	480b      	ldr	r0, [pc, #44]	; (8003b1c <Gatt_Notification+0xa0>)
 8003af0:	f00d fcc8 	bl	8011484 <iprintf>
            BSP_LED_On(LED_BLUE);
 8003af4:	2000      	movs	r0, #0
 8003af6:	f000 fc35 	bl	8004364 <BSP_LED_On>
          break;
 8003afa:	e000      	b.n	8003afe <Gatt_Notification+0x82>
        }
        default : break;
 8003afc:	bf00      	nop
      }

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 8003afe:	e000      	b.n	8003b02 <Gatt_Notification+0x86>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 8003b00:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 8003b02:	bf00      	nop
}
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000033c 	.word	0x2000033c
 8003b10:	080131b4 	.word	0x080131b4
 8003b14:	080131c8 	.word	0x080131c8
 8003b18:	080131f0 	.word	0x080131f0
 8003b1c:	08013230 	.word	0x08013230
 8003b20:	08013234 	.word	0x08013234

08003b24 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <P2P_Client_APP_Get_State+0x14>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000032c 	.word	0x2000032c

08003b3c <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	603a      	str	r2, [r7, #0]
 8003b46:	80fb      	strh	r3, [r7, #6]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	717b      	strb	r3, [r7, #5]

  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003b4c:	2392      	movs	r3, #146	; 0x92
 8003b4e:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003b54:	e01b      	b.n	8003b8e <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {

    switch(UUID)
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d112      	bne.n	8003b86 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret =aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 8003b60:	7bbb      	ldrb	r3, [r7, #14]
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <Write_Char+0x70>)
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	4413      	add	r3, r2
 8003b68:	3302      	adds	r3, #2
 8003b6a:	8818      	ldrh	r0, [r3, #0]
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	4a0f      	ldr	r2, [pc, #60]	; (8003bac <Write_Char+0x70>)
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	3308      	adds	r3, #8
 8003b76:	8819      	ldrh	r1, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f00a fcd1 	bl	800e522 <aci_gatt_write_without_resp>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);

        break;
 8003b84:	e000      	b.n	8003b88 <Write_Char+0x4c>

      default:
        break;
 8003b86:	bf00      	nop
    }
    index++;
 8003b88:	7bbb      	ldrb	r3, [r7, #14]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003b8e:	7bbb      	ldrb	r3, [r7, #14]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003b94:	7bbb      	ldrb	r3, [r7, #14]
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <Write_Char+0x70>)
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	4413      	add	r3, r2
 8003b9c:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1d9      	bne.n	8003b56 <Write_Char+0x1a>
  }

  return ret;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	2000032c 	.word	0x2000032c

08003bb0 <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0


  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 8003bb4:	480c      	ldr	r0, [pc, #48]	; (8003be8 <Button_Trigger_Received+0x38>)
 8003bb6:	f00d fc65 	bl	8011484 <iprintf>
  APP_DBG_MSG(" \n\r");
 8003bba:	480c      	ldr	r0, [pc, #48]	; (8003bec <Button_Trigger_Received+0x3c>)
 8003bbc:	f00d fc62 	bl	8011484 <iprintf>
  if(P2P_Client_App_Context.ButtonStatus.Button1==0x00){
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <Button_Trigger_Received+0x40>)
 8003bc2:	791b      	ldrb	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <Button_Trigger_Received+0x20>
    P2P_Client_App_Context.ButtonStatus.Button1=0x01;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <Button_Trigger_Received+0x40>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	711a      	strb	r2, [r3, #4]
 8003bce:	e002      	b.n	8003bd6 <Button_Trigger_Received+0x26>
  }else {
    P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <Button_Trigger_Received+0x40>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	711a      	strb	r2, [r3, #4]
  }

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <Button_Trigger_Received+0x44>)
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f64f 6041 	movw	r0, #65089	; 0xfe41
 8003bde:	f7ff ffad 	bl	8003b3c <Write_Char>

  return;
 8003be2:	bf00      	nop
}
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	08013274 	.word	0x08013274
 8003bec:	08013230 	.word	0x08013230
 8003bf0:	2000033c 	.word	0x2000033c
 8003bf4:	2000033f 	.word	0x2000033f

08003bf8 <Update_Service>:

void Update_Service()
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 8003c02:	2300      	movs	r3, #0
 8003c04:	807b      	strh	r3, [r7, #2]

  uint8_t index;

  index = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003c0a:	e0a5      	b.n	8003d58 <Update_Service+0x160>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {


    switch(aP2PClientContext[index].state)
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	4a5a      	ldr	r2, [pc, #360]	; (8003d78 <Update_Service+0x180>)
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4413      	add	r3, r2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	3b07      	subs	r3, #7
 8003c18:	2b05      	cmp	r3, #5
 8003c1a:	f200 8099 	bhi.w	8003d50 <Update_Service+0x158>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <Update_Service+0x2c>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	08003c77 	.word	0x08003c77
 8003c30:	08003cad 	.word	0x08003cad
 8003c34:	08003ce3 	.word	0x08003ce3
 8003c38:	08003d1d 	.word	0x08003d1d
    {

      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 8003c3c:	484f      	ldr	r0, [pc, #316]	; (8003d7c <Update_Service+0x184>)
 8003c3e:	f00d fcbd 	bl	80115bc <puts>
        break;
 8003c42:	e086      	b.n	8003d52 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 8003c44:	484e      	ldr	r0, [pc, #312]	; (8003d80 <Update_Service+0x188>)
 8003c46:	f00d fcb9 	bl	80115bc <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	4a4a      	ldr	r2, [pc, #296]	; (8003d78 <Update_Service+0x180>)
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	3302      	adds	r3, #2
 8003c54:	8818      	ldrh	r0, [r3, #0]
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	4a47      	ldr	r2, [pc, #284]	; (8003d78 <Update_Service+0x180>)
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3304      	adds	r3, #4
 8003c60:	8819      	ldrh	r1, [r3, #0]
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4a44      	ldr	r2, [pc, #272]	; (8003d78 <Update_Service+0x180>)
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	4413      	add	r3, r2
 8003c6a:	3306      	adds	r3, #6
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f00a fab6 	bl	800e1e0 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);

        break;
 8003c74:	e06d      	b.n	8003d52 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
 8003c76:	4843      	ldr	r0, [pc, #268]	; (8003d84 <Update_Service+0x18c>)
 8003c78:	f00d fca0 	bl	80115bc <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <Update_Service+0x180>)
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	4413      	add	r3, r2
 8003c84:	3302      	adds	r3, #2
 8003c86:	8818      	ldrh	r0, [r3, #0]
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <Update_Service+0x180>)
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4413      	add	r3, r2
 8003c90:	3308      	adds	r3, #8
 8003c92:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <Update_Service+0x180>)
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f00a fb1c 	bl	800e2e2 <aci_gatt_disc_all_char_desc>

        break;
 8003caa:	e052      	b.n	8003d52 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
 8003cac:	4836      	ldr	r0, [pc, #216]	; (8003d88 <Update_Service+0x190>)
 8003cae:	f00d fc85 	bl	80115bc <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	4a30      	ldr	r2, [pc, #192]	; (8003d78 <Update_Service+0x180>)
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	4413      	add	r3, r2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	8818      	ldrh	r0, [r3, #0]
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	; (8003d78 <Update_Service+0x180>)
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	4413      	add	r3, r2
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <Update_Service+0x180>)
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	4413      	add	r3, r2
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f00a fb01 	bl	800e2e2 <aci_gatt_disc_all_char_desc>

        break;
 8003ce0:	e037      	b.n	8003d52 <Update_Service+0x15a>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 8003ce2:	482a      	ldr	r0, [pc, #168]	; (8003d8c <Update_Service+0x194>)
 8003ce4:	f00d fc6a 	bl	80115bc <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <Update_Service+0x180>)
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	4413      	add	r3, r2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	8818      	ldrh	r0, [r3, #0]
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <Update_Service+0x180>)
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4413      	add	r3, r2
 8003cfc:	330e      	adds	r3, #14
 8003cfe:	8819      	ldrh	r1, [r3, #0]
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	2202      	movs	r2, #2
 8003d04:	f00a fb6e 	bl	800e3e4 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	4a1b      	ldr	r2, [pc, #108]	; (8003d78 <Update_Service+0x180>)
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	4413      	add	r3, r2
 8003d10:	2206      	movs	r2, #6
 8003d12:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED);
 8003d14:	2002      	movs	r0, #2
 8003d16:	f000 fb3f 	bl	8004398 <BSP_LED_Off>

        break;
 8003d1a:	e01a      	b.n	8003d52 <Update_Service+0x15a>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 8003d1c:	481c      	ldr	r0, [pc, #112]	; (8003d90 <Update_Service+0x198>)
 8003d1e:	f00d fc4d 	bl	80115bc <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <Update_Service+0x180>)
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	4413      	add	r3, r2
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	8818      	ldrh	r0, [r3, #0]
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <Update_Service+0x180>)
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4413      	add	r3, r2
 8003d36:	330e      	adds	r3, #14
 8003d38:	8819      	ldrh	r1, [r3, #0]
 8003d3a:	1cbb      	adds	r3, r7, #2
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f00a fb51 	bl	800e3e4 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <Update_Service+0x180>)
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	4413      	add	r3, r2
 8003d4a:	2206      	movs	r2, #6
 8003d4c:	701a      	strb	r2, [r3, #0]

        break;
 8003d4e:	e000      	b.n	8003d52 <Update_Service+0x15a>
      default:
        break;
 8003d50:	bf00      	nop
    }
    index++;
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	3301      	adds	r3, #1
 8003d56:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <Update_Service+0x178>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <Update_Service+0x180>)
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4413      	add	r3, r2
 8003d66:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f47f af4f 	bne.w	8003c0c <Update_Service+0x14>
  }
  return;
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
}
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	2000032c 	.word	0x2000032c
 8003d7c:	080132b4 	.word	0x080132b4
 8003d80:	080132cc 	.word	0x080132cc
 8003d84:	080132f4 	.word	0x080132f4
 8003d88:	08013330 	.word	0x08013330
 8003d8c:	08013370 	.word	0x08013370
 8003d90:	08013394 	.word	0x08013394

08003d94 <LL_PWR_EnableBootC2>:
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <LL_PWR_EnableBootC2+0x1c>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <LL_PWR_EnableBootC2+0x1c>)
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	58000400 	.word	0x58000400

08003db4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003dbe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003dc2:	4905      	ldr	r1, [pc, #20]	; (8003dd8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	58000800 	.word	0x58000800

08003ddc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003de6:	6a1a      	ldr	r2, [r3, #32]
 8003de8:	4904      	ldr	r1, [pc, #16]	; (8003dfc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	620b      	str	r3, [r1, #32]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	58000800 	.word	0x58000800

08003e00 <LL_AHB3_GRP1_EnableClock>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e24:	68fb      	ldr	r3, [r7, #12]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8003e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <LL_C1_IPCC_EnableIT_TXF>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_C1_IPCC_EnableIT_RXO>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	605a      	str	r2, [r3, #4]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	605a      	str	r2, [r3, #4]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	605a      	str	r2, [r3, #4]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_C1_IPCC_SetFlag_CHx>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	041a      	lsls	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4013      	ands	r3, r2
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d101      	bne.n	8003f6e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d101      	bne.n	8003f98 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003fac:	2102      	movs	r1, #2
 8003fae:	4819      	ldr	r0, [pc, #100]	; (8004014 <HW_IPCC_Rx_Handler+0x6c>)
 8003fb0:	f7ff ffe4 	bl	8003f7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HW_IPCC_Rx_Handler+0x26>
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <HW_IPCC_Rx_Handler+0x6c>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003fc8:	f000 f8da 	bl	8004180 <HW_IPCC_SYS_EvtHandler>
 8003fcc:	e01f      	b.n	800400e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4810      	ldr	r0, [pc, #64]	; (8004014 <HW_IPCC_Rx_Handler+0x6c>)
 8003fd2:	f7ff ffd3 	bl	8003f7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HW_IPCC_Rx_Handler+0x46>
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <HW_IPCC_Rx_Handler+0x6c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003fe8:	f000 f88e 	bl	8004108 <HW_IPCC_BLE_EvtHandler>
 8003fec:	e00f      	b.n	800400e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003fee:	2108      	movs	r1, #8
 8003ff0:	4808      	ldr	r0, [pc, #32]	; (8004014 <HW_IPCC_Rx_Handler+0x6c>)
 8003ff2:	f7ff ffc3 	bl	8003f7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <HW_IPCC_Rx_Handler+0x68>
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HW_IPCC_Rx_Handler+0x6c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	43db      	mvns	r3, r3
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800400a:	f000 f905 	bl	8004218 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800400e:	bf00      	nop
 8004010:	bf00      	nop
}
 8004012:	bd80      	pop	{r7, pc}
 8004014:	58000c00 	.word	0x58000c00

08004018 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800401c:	2102      	movs	r1, #2
 800401e:	481a      	ldr	r0, [pc, #104]	; (8004088 <HW_IPCC_Tx_Handler+0x70>)
 8004020:	f7ff ff97 	bl	8003f52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HW_IPCC_Tx_Handler+0x26>
 800402a:	4b17      	ldr	r3, [pc, #92]	; (8004088 <HW_IPCC_Tx_Handler+0x70>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	43db      	mvns	r3, r3
 8004030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004038:	f000 f896 	bl	8004168 <HW_IPCC_SYS_CmdEvtHandler>
 800403c:	e020      	b.n	8004080 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800403e:	2108      	movs	r1, #8
 8004040:	4811      	ldr	r0, [pc, #68]	; (8004088 <HW_IPCC_Tx_Handler+0x70>)
 8004042:	f7ff ff86 	bl	8003f52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HW_IPCC_Tx_Handler+0x48>
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HW_IPCC_Tx_Handler+0x70>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	43db      	mvns	r3, r3
 8004052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800405a:	f000 f8bf 	bl	80041dc <HW_IPCC_MM_FreeBufHandler>
 800405e:	e00f      	b.n	8004080 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8004060:	2120      	movs	r1, #32
 8004062:	4809      	ldr	r0, [pc, #36]	; (8004088 <HW_IPCC_Tx_Handler+0x70>)
 8004064:	f7ff ff75 	bl	8003f52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HW_IPCC_Tx_Handler+0x6a>
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HW_IPCC_Tx_Handler+0x70>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	43db      	mvns	r3, r3
 8004074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800407c:	f000 f850 	bl	8004120 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8004080:	bf00      	nop
 8004082:	bf00      	nop
}
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	58000c00 	.word	0x58000c00

0800408c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004090:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004094:	f7ff fecd 	bl	8003e32 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004098:	f44f 7000 	mov.w	r0, #512	; 0x200
 800409c:	f7ff fe9e 	bl	8003ddc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80040a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040a4:	f7ff fe86 	bl	8003db4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80040a8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80040aa:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80040ac:	f7ff fe72 	bl	8003d94 <LL_PWR_EnableBootC2>

  return;
 80040b0:	bf00      	nop
}
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80040b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80040bc:	f7ff fea0 	bl	8003e00 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80040c0:	4806      	ldr	r0, [pc, #24]	; (80040dc <HW_IPCC_Init+0x28>)
 80040c2:	f7ff fee2 	bl	8003e8a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80040c6:	4805      	ldr	r0, [pc, #20]	; (80040dc <HW_IPCC_Init+0x28>)
 80040c8:	f7ff fecf 	bl	8003e6a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80040cc:	202c      	movs	r0, #44	; 0x2c
 80040ce:	f000 fc2a 	bl	8004926 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80040d2:	202d      	movs	r0, #45	; 0x2d
 80040d4:	f000 fc27 	bl	8004926 <HAL_NVIC_EnableIRQ>

  return;
 80040d8:	bf00      	nop
}
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	58000c00 	.word	0x58000c00

080040e0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80040e4:	2101      	movs	r1, #1
 80040e6:	4802      	ldr	r0, [pc, #8]	; (80040f0 <HW_IPCC_BLE_Init+0x10>)
 80040e8:	f7ff ff04 	bl	8003ef4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80040ec:	bf00      	nop
}
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	58000c00 	.word	0x58000c00

080040f4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80040f8:	2101      	movs	r1, #1
 80040fa:	4802      	ldr	r0, [pc, #8]	; (8004104 <HW_IPCC_BLE_SendCmd+0x10>)
 80040fc:	f7ff ff1a 	bl	8003f34 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004100:	bf00      	nop
}
 8004102:	bd80      	pop	{r7, pc}
 8004104:	58000c00 	.word	0x58000c00

08004108 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800410c:	f00b fa34 	bl	800f578 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004110:	2101      	movs	r1, #1
 8004112:	4802      	ldr	r0, [pc, #8]	; (800411c <HW_IPCC_BLE_EvtHandler+0x14>)
 8004114:	f7ff ff00 	bl	8003f18 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004118:	bf00      	nop
}
 800411a:	bd80      	pop	{r7, pc}
 800411c:	58000c00 	.word	0x58000c00

08004120 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004124:	2120      	movs	r1, #32
 8004126:	4803      	ldr	r0, [pc, #12]	; (8004134 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004128:	f7ff fed2 	bl	8003ed0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800412c:	f00b fa54 	bl	800f5d8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004130:	bf00      	nop
}
 8004132:	bd80      	pop	{r7, pc}
 8004134:	58000c00 	.word	0x58000c00

08004138 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800413c:	2102      	movs	r1, #2
 800413e:	4802      	ldr	r0, [pc, #8]	; (8004148 <HW_IPCC_SYS_Init+0x10>)
 8004140:	f7ff fed8 	bl	8003ef4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004144:	bf00      	nop
}
 8004146:	bd80      	pop	{r7, pc}
 8004148:	58000c00 	.word	0x58000c00

0800414c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004150:	2102      	movs	r1, #2
 8004152:	4804      	ldr	r0, [pc, #16]	; (8004164 <HW_IPCC_SYS_SendCmd+0x18>)
 8004154:	f7ff feee 	bl	8003f34 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004158:	2102      	movs	r1, #2
 800415a:	4802      	ldr	r0, [pc, #8]	; (8004164 <HW_IPCC_SYS_SendCmd+0x18>)
 800415c:	f7ff fea5 	bl	8003eaa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004160:	bf00      	nop
}
 8004162:	bd80      	pop	{r7, pc}
 8004164:	58000c00 	.word	0x58000c00

08004168 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800416c:	2102      	movs	r1, #2
 800416e:	4803      	ldr	r0, [pc, #12]	; (800417c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004170:	f7ff feae 	bl	8003ed0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004174:	f00b fa80 	bl	800f678 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004178:	bf00      	nop
}
 800417a:	bd80      	pop	{r7, pc}
 800417c:	58000c00 	.word	0x58000c00

08004180 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004184:	f00b fa8e 	bl	800f6a4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004188:	2102      	movs	r1, #2
 800418a:	4802      	ldr	r0, [pc, #8]	; (8004194 <HW_IPCC_SYS_EvtHandler+0x14>)
 800418c:	f7ff fec4 	bl	8003f18 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004190:	bf00      	nop
}
 8004192:	bd80      	pop	{r7, pc}
 8004194:	58000c00 	.word	0x58000c00

08004198 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80041a0:	2108      	movs	r1, #8
 80041a2:	480c      	ldr	r0, [pc, #48]	; (80041d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80041a4:	f7ff fed5 	bl	8003f52 <LL_C1_IPCC_IsActiveFlag_CHx>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80041b4:	2108      	movs	r1, #8
 80041b6:	4807      	ldr	r0, [pc, #28]	; (80041d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80041b8:	f7ff fe77 	bl	8003eaa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80041bc:	e006      	b.n	80041cc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80041c2:	2108      	movs	r1, #8
 80041c4:	4803      	ldr	r0, [pc, #12]	; (80041d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80041c6:	f7ff feb5 	bl	8003f34 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80041ca:	bf00      	nop
}
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	58000c00 	.word	0x58000c00
 80041d8:	20000a38 	.word	0x20000a38

080041dc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80041e0:	2108      	movs	r1, #8
 80041e2:	4806      	ldr	r0, [pc, #24]	; (80041fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80041e4:	f7ff fe74 	bl	8003ed0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80041ee:	2108      	movs	r1, #8
 80041f0:	4802      	ldr	r0, [pc, #8]	; (80041fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80041f2:	f7ff fe9f 	bl	8003f34 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80041f6:	bf00      	nop
}
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	58000c00 	.word	0x58000c00
 8004200:	20000a38 	.word	0x20000a38

08004204 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004208:	2108      	movs	r1, #8
 800420a:	4802      	ldr	r0, [pc, #8]	; (8004214 <HW_IPCC_TRACES_Init+0x10>)
 800420c:	f7ff fe72 	bl	8003ef4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004210:	bf00      	nop
}
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58000c00 	.word	0x58000c00

08004218 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800421c:	f00b faea 	bl	800f7f4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004220:	2108      	movs	r1, #8
 8004222:	4802      	ldr	r0, [pc, #8]	; (800422c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004224:	f7ff fe78 	bl	8003f18 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004228:	bf00      	nop
}
 800422a:	bd80      	pop	{r7, pc}
 800422c:	58000c00 	.word	0x58000c00

08004230 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004230:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004232:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004234:	3304      	adds	r3, #4

08004236 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004236:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004238:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800423a:	d3f9      	bcc.n	8004230 <CopyDataInit>
  bx lr
 800423c:	4770      	bx	lr

0800423e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800423e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004240:	3004      	adds	r0, #4

08004242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004242:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004244:	d3fb      	bcc.n	800423e <FillZerobss>
  bx lr
 8004246:	4770      	bx	lr

08004248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004248:	480c      	ldr	r0, [pc, #48]	; (800427c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800424a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800424c:	f000 f90e 	bl	800446c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004250:	480b      	ldr	r0, [pc, #44]	; (8004280 <LoopForever+0x8>)
 8004252:	490c      	ldr	r1, [pc, #48]	; (8004284 <LoopForever+0xc>)
 8004254:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <LoopForever+0x10>)
 8004256:	2300      	movs	r3, #0
 8004258:	f7ff ffed 	bl	8004236 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800425c:	480b      	ldr	r0, [pc, #44]	; (800428c <LoopForever+0x14>)
 800425e:	490c      	ldr	r1, [pc, #48]	; (8004290 <LoopForever+0x18>)
 8004260:	2300      	movs	r3, #0
 8004262:	f7ff ffee 	bl	8004242 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004266:	480b      	ldr	r0, [pc, #44]	; (8004294 <LoopForever+0x1c>)
 8004268:	490b      	ldr	r1, [pc, #44]	; (8004298 <LoopForever+0x20>)
 800426a:	2300      	movs	r3, #0
 800426c:	f7ff ffe9 	bl	8004242 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004270:	f00c ffde 	bl	8011230 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004274:	f7fd ff90 	bl	8002198 <main>

08004278 <LoopForever>:

LoopForever:
  b LoopForever
 8004278:	e7fe      	b.n	8004278 <LoopForever>
 800427a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800427c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004280:	20000008 	.word	0x20000008
 8004284:	2000020c 	.word	0x2000020c
 8004288:	080136e4 	.word	0x080136e4
  INIT_BSS _sbss, _ebss
 800428c:	20000394 	.word	0x20000394
 8004290:	20002264 	.word	0x20002264
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004294:	200301e4 	.word	0x200301e4
 8004298:	20030a67 	.word	0x20030a67

0800429c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800429c:	e7fe      	b.n	800429c <ADC1_IRQHandler>

0800429e <LL_AHB2_GRP1_EnableClock>:
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80042a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4013      	ands	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042c2:	68fb      	ldr	r3, [r7, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	609a      	str	r2, [r3, #8]
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d103      	bne.n	80042f8 <BSP_LED_Init+0x28>
 80042f0:	2001      	movs	r0, #1
 80042f2:	f7ff ffd4 	bl	800429e <LL_AHB2_GRP1_EnableClock>
 80042f6:	e00c      	b.n	8004312 <BSP_LED_Init+0x42>
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d103      	bne.n	8004306 <BSP_LED_Init+0x36>
 80042fe:	2002      	movs	r0, #2
 8004300:	f7ff ffcd 	bl	800429e <LL_AHB2_GRP1_EnableClock>
 8004304:	e005      	b.n	8004312 <BSP_LED_Init+0x42>
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d102      	bne.n	8004312 <BSP_LED_Init+0x42>
 800430c:	2002      	movs	r0, #2
 800430e:	f7ff ffc6 	bl	800429e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <BSP_LED_Init+0x8c>)
 8004316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800431a:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800431c:	2301      	movs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004324:	2302      	movs	r3, #2
 8004326:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <BSP_LED_Init+0x90>)
 800432c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004330:	f107 020c 	add.w	r2, r7, #12
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fd60 	bl	8004dfc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <BSP_LED_Init+0x90>)
 8004340:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	4a05      	ldr	r2, [pc, #20]	; (800435c <BSP_LED_Init+0x8c>)
 8004348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800434c:	2200      	movs	r2, #0
 800434e:	4619      	mov	r1, r3
 8004350:	f000 fec4 	bl	80050dc <HAL_GPIO_WritePin>
}
 8004354:	bf00      	nop
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	08013594 	.word	0x08013594
 8004360:	2000001c 	.word	0x2000001c

08004364 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <BSP_LED_On+0x2c>)
 8004372:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	4a06      	ldr	r2, [pc, #24]	; (8004394 <BSP_LED_On+0x30>)
 800437a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437e:	2201      	movs	r2, #1
 8004380:	4619      	mov	r1, r3
 8004382:	f000 feab 	bl	80050dc <HAL_GPIO_WritePin>
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	2000001c 	.word	0x2000001c
 8004394:	08013594 	.word	0x08013594

08004398 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	4a07      	ldr	r2, [pc, #28]	; (80043c4 <BSP_LED_Off+0x2c>)
 80043a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <BSP_LED_Off+0x30>)
 80043ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043b2:	2200      	movs	r2, #0
 80043b4:	4619      	mov	r1, r3
 80043b6:	f000 fe91 	bl	80050dc <HAL_GPIO_WritePin>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2000001c 	.word	0x2000001c
 80043c8:	08013594 	.word	0x08013594

080043cc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	460a      	mov	r2, r1
 80043d6:	71fb      	strb	r3, [r7, #7]
 80043d8:	4613      	mov	r3, r2
 80043da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80043dc:	f107 030c 	add.w	r3, r7, #12
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80043ec:	2001      	movs	r0, #1
 80043ee:	f7ff ff56 	bl	800429e <LL_AHB2_GRP1_EnableClock>

  if(ButtonMode == BUTTON_MODE_GPIO)
 80043f2:	79bb      	ldrb	r3, [r7, #6]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d112      	bne.n	800441e <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80043f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043fc:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004402:	2301      	movs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004406:	2302      	movs	r3, #2
 8004408:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <BSP_PB_Init+0x9c>)
 800440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004412:	f107 020c 	add.w	r2, r7, #12
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fcef 	bl	8004dfc <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 800441e:	79bb      	ldrb	r3, [r7, #6]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d11d      	bne.n	8004460 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004428:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800442e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004432:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <BSP_PB_Init+0x9c>)
 8004438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443c:	f107 020c 	add.w	r2, r7, #12
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fcda 	bl	8004dfc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004448:	2328      	movs	r3, #40	; 0x28
 800444a:	b25b      	sxtb	r3, r3
 800444c:	2200      	movs	r2, #0
 800444e:	210f      	movs	r1, #15
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fa4e 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004456:	2328      	movs	r3, #40	; 0x28
 8004458:	b25b      	sxtb	r3, r3
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fa63 	bl	8004926 <HAL_NVIC_EnableIRQ>
  }
}
 8004460:	bf00      	nop
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000028 	.word	0x20000028

0800446c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004470:	4b26      	ldr	r3, [pc, #152]	; (800450c <SystemInit+0xa0>)
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004476:	4b25      	ldr	r3, [pc, #148]	; (800450c <SystemInit+0xa0>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	4a23      	ldr	r2, [pc, #140]	; (800450c <SystemInit+0xa0>)
 800447e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004482:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800449e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80044a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <SystemInit+0xa4>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044bc:	f023 0305 	bic.w	r3, r3, #5
 80044c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80044d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044dc:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <SystemInit+0xa8>)
 80044de:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e4:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <SystemInit+0xa8>)
 80044e6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000ed00 	.word	0xe000ed00
 8004510:	faf6fefb 	.word	0xfaf6fefb
 8004514:	22041000 	.word	0x22041000

08004518 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4a04      	ldr	r2, [pc, #16]	; (8004534 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6053      	str	r3, [r2, #4]
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e0042000 	.word	0xe0042000

08004538 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004542:	f043 0302 	orr.w	r3, r3, #2
 8004546:	6053      	str	r3, [r2, #4]
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e0042000 	.word	0xe0042000

08004558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_Init+0x3c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <HAL_Init+0x3c>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800456e:	2003      	movs	r0, #3
 8004570:	f000 f9b4 	bl	80048dc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004574:	2000      	movs	r0, #0
 8004576:	f000 f80f 	bl	8004598 <HAL_InitTick>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	71fb      	strb	r3, [r7, #7]
 8004584:	e001      	b.n	800458a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004586:	f7fd ffdd 	bl	8002544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800458a:	79fb      	ldrb	r3, [r7, #7]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	58004000 	.word	0x58004000

08004598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80045a4:	4b17      	ldr	r3, [pc, #92]	; (8004604 <HAL_InitTick+0x6c>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d024      	beq.n	80045f6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80045ac:	f003 fc7a 	bl	8007ea4 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <HAL_InitTick+0x6c>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f9ca 	bl	800495e <HAL_SYSTICK_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10f      	bne.n	80045f0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	d809      	bhi.n	80045ea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045d6:	2200      	movs	r2, #0
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	f04f 30ff 	mov.w	r0, #4294967295
 80045de:	f000 f988 	bl	80048f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_InitTick+0x70>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	e007      	b.n	80045fa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e004      	b.n	80045fa <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e001      	b.n	80045fa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000034 	.word	0x20000034
 8004608:	20000030 	.word	0x20000030

0800460c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_IncTick+0x20>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_IncTick+0x24>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4413      	add	r3, r2
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <HAL_IncTick+0x24>)
 800461e:	6013      	str	r3, [r2, #0]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000034 	.word	0x20000034
 8004630:	20000a3c 	.word	0x20000a3c

08004634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return uwTick;
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <HAL_GetTick+0x14>)
 800463a:	681b      	ldr	r3, [r3, #0]
}
 800463c:	4618      	mov	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000a3c 	.word	0x20000a3c

0800464c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004650:	4b03      	ldr	r3, [pc, #12]	; (8004660 <HAL_GetTickPrio+0x14>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000030 	.word	0x20000030

08004664 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004668:	f7ff ff56 	bl	8004518 <LL_DBGMCU_EnableDBGSleepMode>
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004674:	f7ff ff60 	bl	8004538 <LL_DBGMCU_EnableDBGStopMode>
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}

0800467c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <__NVIC_SetPriorityGrouping+0x44>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004698:	4013      	ands	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ae:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <__NVIC_SetPriorityGrouping+0x44>)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	60d3      	str	r3, [r2, #12]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <__NVIC_GetPriorityGrouping+0x18>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	f003 0307 	and.w	r3, r3, #7
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db0b      	blt.n	800470a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	f003 021f 	and.w	r2, r3, #31
 80046f8:	4907      	ldr	r1, [pc, #28]	; (8004718 <__NVIC_EnableIRQ+0x38>)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2001      	movs	r0, #1
 8004702:	fa00 f202 	lsl.w	r2, r0, r2
 8004706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	e000e100 	.word	0xe000e100

0800471c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db12      	blt.n	8004754 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	490a      	ldr	r1, [pc, #40]	; (8004760 <__NVIC_DisableIRQ+0x44>)
 8004736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2001      	movs	r0, #1
 800473e:	fa00 f202 	lsl.w	r2, r0, r2
 8004742:	3320      	adds	r3, #32
 8004744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004748:	f3bf 8f4f 	dsb	sy
}
 800474c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800474e:	f3bf 8f6f 	isb	sy
}
 8004752:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000e100 	.word	0xe000e100

08004764 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800476e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004772:	2b00      	cmp	r3, #0
 8004774:	db0c      	blt.n	8004790 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	f003 021f 	and.w	r2, r3, #31
 800477c:	4907      	ldr	r1, [pc, #28]	; (800479c <__NVIC_SetPendingIRQ+0x38>)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2001      	movs	r0, #1
 8004786:	fa00 f202 	lsl.w	r2, r0, r2
 800478a:	3340      	adds	r3, #64	; 0x40
 800478c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000e100 	.word	0xe000e100

080047a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0c      	blt.n	80047cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <__NVIC_ClearPendingIRQ+0x38>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	3360      	adds	r3, #96	; 0x60
 80047c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000e100 	.word	0xe000e100

080047dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	db0a      	blt.n	8004806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	490c      	ldr	r1, [pc, #48]	; (8004828 <__NVIC_SetPriority+0x4c>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	0112      	lsls	r2, r2, #4
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	440b      	add	r3, r1
 8004800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004804:	e00a      	b.n	800481c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4908      	ldr	r1, [pc, #32]	; (800482c <__NVIC_SetPriority+0x50>)
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	3b04      	subs	r3, #4
 8004814:	0112      	lsls	r2, r2, #4
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	440b      	add	r3, r1
 800481a:	761a      	strb	r2, [r3, #24]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000e100 	.word	0xe000e100
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f1c3 0307 	rsb	r3, r3, #7
 800484a:	2b04      	cmp	r3, #4
 800484c:	bf28      	it	cs
 800484e:	2304      	movcs	r3, #4
 8004850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3304      	adds	r3, #4
 8004856:	2b06      	cmp	r3, #6
 8004858:	d902      	bls.n	8004860 <NVIC_EncodePriority+0x30>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3b03      	subs	r3, #3
 800485e:	e000      	b.n	8004862 <NVIC_EncodePriority+0x32>
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	401a      	ands	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004878:	f04f 31ff 	mov.w	r1, #4294967295
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	43d9      	mvns	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004888:	4313      	orrs	r3, r2
         );
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048a8:	d301      	bcc.n	80048ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00f      	b.n	80048ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <SysTick_Config+0x40>)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048b6:	210f      	movs	r1, #15
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f7ff ff8e 	bl	80047dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <SysTick_Config+0x40>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048c6:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <SysTick_Config+0x40>)
 80048c8:	2207      	movs	r2, #7
 80048ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000e010 	.word	0xe000e010

080048dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff fec9 	bl	800467c <__NVIC_SetPriorityGrouping>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004900:	f7ff fee0 	bl	80046c4 <__NVIC_GetPriorityGrouping>
 8004904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff ff90 	bl	8004830 <NVIC_EncodePriority>
 8004910:	4602      	mov	r2, r0
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ff5f 	bl	80047dc <__NVIC_SetPriority>
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	4603      	mov	r3, r0
 800492e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fed3 	bl	80046e0 <__NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	4603      	mov	r3, r0
 800494a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800494c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fee3 	bl	800471c <__NVIC_DisableIRQ>
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ff96 	bl	8004898 <SysTick_Config>
 800496c:	4603      	mov	r3, r0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	4603      	mov	r3, r0
 800497e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff feed 	bl	8004764 <__NVIC_SetPendingIRQ>
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	4603      	mov	r3, r0
 800499a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800499c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fefd 	bl	80047a0 <__NVIC_ClearPendingIRQ>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_DMA_Start_IT+0x20>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e066      	b.n	8004a9c <HAL_DMA_Start_IT+0xee>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d155      	bne.n	8004a8e <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f9b9 	bl	8004d7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 020e 	orr.w	r2, r2, #14
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e00f      	b.n	8004a46 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0204 	bic.w	r2, r2, #4
 8004a34:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 020a 	orr.w	r2, r2, #10
 8004a44:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a62:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a7a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e005      	b.n	8004a9a <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
 8004a98:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e04f      	b.n	8004b56 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d008      	beq.n	8004ad4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e040      	b.n	8004b56 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 020e 	bic.w	r2, r2, #14
 8004ae2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f003 021c 	and.w	r2, r3, #28
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d005      	beq.n	8004b86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	e047      	b.n	8004c16 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 020e 	bic.w	r2, r2, #14
 8004b94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	f003 021c 	and.w	r2, r3, #28
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bd2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00c      	beq.n	8004bf6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bf4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
    }
  }
  return status;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	f003 031c 	and.w	r3, r3, #28
 8004c40:	2204      	movs	r2, #4
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d026      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x7a>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d021      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0204 	bic.w	r2, r2, #4
 8004c72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f003 021c 	and.w	r2, r3, #28
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2104      	movs	r1, #4
 8004c82:	fa01 f202 	lsl.w	r2, r1, r2
 8004c86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d071      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c98:	e06c      	b.n	8004d74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f003 031c 	and.w	r3, r3, #28
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	409a      	lsls	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d02e      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xec>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d029      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 020a 	bic.w	r2, r2, #10
 8004cd4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f003 021c 	and.w	r2, r3, #28
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2102      	movs	r1, #2
 8004cec:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d038      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d0a:	e033      	b.n	8004d74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	f003 031c 	and.w	r3, r3, #28
 8004d14:	2208      	movs	r2, #8
 8004d16:	409a      	lsls	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02a      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x156>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d025      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 020e 	bic.w	r2, r2, #14
 8004d38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f003 021c 	and.w	r2, r3, #28
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2101      	movs	r1, #1
 8004d48:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
}
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d94:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	f003 021c 	and.w	r2, r3, #28
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d108      	bne.n	8004dde <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ddc:	e007      	b.n	8004dee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	60da      	str	r2, [r3, #12]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e0a:	e14c      	b.n	80050a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2101      	movs	r1, #1
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	4013      	ands	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 813e 	beq.w	80050a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d005      	beq.n	8004e3c <HAL_GPIO_Init+0x40>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d130      	bne.n	8004e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	2203      	movs	r2, #3
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e72:	2201      	movs	r2, #1
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 0201 	and.w	r2, r3, #1
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d017      	beq.n	8004eda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d123      	bne.n	8004f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	08da      	lsrs	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3208      	adds	r2, #8
 8004eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	220f      	movs	r2, #15
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4013      	ands	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	08da      	lsrs	r2, r3, #3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3208      	adds	r2, #8
 8004f28:	6939      	ldr	r1, [r7, #16]
 8004f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	2203      	movs	r2, #3
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4013      	ands	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0203 	and.w	r2, r3, #3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8098 	beq.w	80050a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f70:	4a54      	ldr	r2, [pc, #336]	; (80050c4 <HAL_GPIO_Init+0x2c8>)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	089b      	lsrs	r3, r3, #2
 8004f76:	3302      	adds	r3, #2
 8004f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	220f      	movs	r2, #15
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f9a:	d019      	beq.n	8004fd0 <HAL_GPIO_Init+0x1d4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a4a      	ldr	r2, [pc, #296]	; (80050c8 <HAL_GPIO_Init+0x2cc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <HAL_GPIO_Init+0x1d0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a49      	ldr	r2, [pc, #292]	; (80050cc <HAL_GPIO_Init+0x2d0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00d      	beq.n	8004fc8 <HAL_GPIO_Init+0x1cc>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a48      	ldr	r2, [pc, #288]	; (80050d0 <HAL_GPIO_Init+0x2d4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <HAL_GPIO_Init+0x1c8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a47      	ldr	r2, [pc, #284]	; (80050d4 <HAL_GPIO_Init+0x2d8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <HAL_GPIO_Init+0x1c4>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	e008      	b.n	8004fd2 <HAL_GPIO_Init+0x1d6>
 8004fc0:	2307      	movs	r3, #7
 8004fc2:	e006      	b.n	8004fd2 <HAL_GPIO_Init+0x1d6>
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e004      	b.n	8004fd2 <HAL_GPIO_Init+0x1d6>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e002      	b.n	8004fd2 <HAL_GPIO_Init+0x1d6>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <HAL_GPIO_Init+0x1d6>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	f002 0203 	and.w	r2, r2, #3
 8004fd8:	0092      	lsls	r2, r2, #2
 8004fda:	4093      	lsls	r3, r2
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fe2:	4938      	ldr	r1, [pc, #224]	; (80050c4 <HAL_GPIO_Init+0x2c8>)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	089b      	lsrs	r3, r3, #2
 8004fe8:	3302      	adds	r3, #2
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ff0:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005014:	4a30      	ldr	r2, [pc, #192]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800501a:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	43db      	mvns	r3, r3
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4013      	ands	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800503e:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005044:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005072:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 8005074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	43db      	mvns	r3, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4013      	ands	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005098:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <HAL_GPIO_Init+0x2dc>)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	3301      	adds	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f47f aeab 	bne.w	8004e0c <HAL_GPIO_Init+0x10>
  }
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40010000 	.word	0x40010000
 80050c8:	48000400 	.word	0x48000400
 80050cc:	48000800 	.word	0x48000800
 80050d0:	48000c00 	.word	0x48000c00
 80050d4:	48001000 	.word	0x48001000
 80050d8:	58000800 	.word	0x58000800

080050dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
 80050e8:	4613      	mov	r3, r2
 80050ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050ec:	787b      	ldrb	r3, [r7, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050f8:	e002      	b.n	8005100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d006      	beq.n	8005130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005122:	4a05      	ldr	r2, [pc, #20]	; (8005138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc f85c 	bl	80011e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	58000800 	.word	0x58000800

0800513c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <HAL_HSEM_IRQHandler+0x30>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005148:	4b08      	ldr	r3, [pc, #32]	; (800516c <HAL_HSEM_IRQHandler+0x30>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	43db      	mvns	r3, r3
 8005150:	4906      	ldr	r1, [pc, #24]	; (800516c <HAL_HSEM_IRQHandler+0x30>)
 8005152:	4013      	ands	r3, r2
 8005154:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <HAL_HSEM_IRQHandler+0x30>)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f807 	bl	8005170 <HAL_HSEM_FreeCallback>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	58001500 	.word	0x58001500

08005170 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01e      	beq.n	80051d4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <HAL_IPCC_Init+0x60>)
 8005198:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd f9dc 	bl	8002564 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80051ac:	68b8      	ldr	r0, [r7, #8]
 80051ae:	f000 f85b 	bl	8005268 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f82c 	bl	800521c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80051d2:	e001      	b.n	80051d8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	58000c00 	.word	0x58000c00

080051e8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e00f      	b.n	800524a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <IPCC_SetDefaultCallbacks+0x44>)
 8005234:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3306      	adds	r3, #6
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	4a08      	ldr	r2, [pc, #32]	; (8005264 <IPCC_SetDefaultCallbacks+0x48>)
 8005242:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b05      	cmp	r3, #5
 800524e:	d9ec      	bls.n	800522a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	080051e9 	.word	0x080051e9
 8005264:	08005203 	.word	0x08005203

08005268 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800527c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	223f      	movs	r2, #63	; 0x3f
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005292:	b08b      	sub	sp, #44	; 0x2c
 8005294:	af06      	add	r7, sp, #24
 8005296:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e0dd      	b.n	800545e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f00a fb2f 	bl	800f91a <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2203      	movs	r2, #3
 80052c0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f004 faca 	bl	8009868 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	e04d      	b.n	8005376 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	3305      	adds	r3, #5
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	440b      	add	r3, r1
 8005300:	3304      	adds	r3, #4
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	b298      	uxth	r0, r3
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	333a      	adds	r3, #58	; 0x3a
 800531a:	4602      	mov	r2, r0
 800531c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	440b      	add	r3, r1
 800532e:	3307      	adds	r3, #7
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	440b      	add	r3, r1
 8005342:	333c      	adds	r3, #60	; 0x3c
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005348:	7bfa      	ldrb	r2, [r7, #15]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	440b      	add	r3, r1
 8005356:	3340      	adds	r3, #64	; 0x40
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	3344      	adds	r3, #68	; 0x44
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	3301      	adds	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3ac      	bcc.n	80052da <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	e044      	b.n	8005410 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80053ae:	7bfa      	ldrb	r2, [r7, #15]
 80053b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053b2:	7bfa      	ldrb	r2, [r7, #15]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	440b      	add	r3, r1
 80053d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053de:	7bfa      	ldrb	r2, [r7, #15]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3301      	adds	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
 8005410:	7bfa      	ldrb	r2, [r7, #15]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d3b5      	bcc.n	8005386 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	687e      	ldr	r6, [r7, #4]
 8005422:	466d      	mov	r5, sp
 8005424:	f106 0410 	add.w	r4, r6, #16
 8005428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800542a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800542c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005430:	e885 0003 	stmia.w	r5, {r0, r1}
 8005434:	1d33      	adds	r3, r6, #4
 8005436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005438:	6838      	ldr	r0, [r7, #0]
 800543a:	f004 fa30 	bl	800989e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d102      	bne.n	800545c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 fc42 	bl	8006ce0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005466 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_PCD_Start+0x16>
 8005478:	2302      	movs	r3, #2
 800547a:	e012      	b.n	80054a2 <HAL_PCD_Start+0x3c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f004 f9d6 	bl	800983a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f006 fc14 	bl	800bcc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f006 fc19 	bl	800bcee <USB_ReadInterrupts>
 80054bc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb30 	bl	8005b2e <PCD_EP_ISR_Handler>

    return;
 80054ce:	e110      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d013      	beq.n	8005502 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ec:	b292      	uxth	r2, r2
 80054ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f00a fa7a 	bl	800f9ec <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80054f8:	2100      	movs	r1, #0
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8fc 	bl	80056f8 <HAL_PCD_SetAddress>

    return;
 8005500:	e0f7      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00c      	beq.n	8005526 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800551e:	b292      	uxth	r2, r2
 8005520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005524:	e0e5      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00c      	beq.n	800554a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005542:	b292      	uxth	r2, r2
 8005544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005548:	e0d3      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d034      	beq.n	80055be <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	b292      	uxth	r2, r2
 8005568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0208 	bic.w	r2, r2, #8
 800557e:	b292      	uxth	r2, r2
 8005580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005596:	2100      	movs	r1, #0
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fbcb 	bl	8006d34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f00a fa47 	bl	800fa32 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055b6:	b292      	uxth	r2, r2
 80055b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80055bc:	e099      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d027      	beq.n	8005618 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0208 	orr.w	r2, r2, #8
 80055da:	b292      	uxth	r2, r2
 80055dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055f2:	b292      	uxth	r2, r2
 80055f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005600:	b29a      	uxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0204 	orr.w	r2, r2, #4
 800560a:	b292      	uxth	r2, r2
 800560c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f00a fa00 	bl	800fa16 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005616:	e06c      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d040      	beq.n	80056a4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005634:	b292      	uxth	r2, r2
 8005636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d12b      	bne.n	800569c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0204 	orr.w	r2, r2, #4
 8005656:	b292      	uxth	r2, r2
 8005658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0208 	orr.w	r2, r2, #8
 800566e:	b292      	uxth	r2, r2
 8005670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005684:	b29b      	uxth	r3, r3
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005692:	2101      	movs	r1, #1
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fb4d 	bl	8006d34 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800569a:	e02a      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f00a f9ba 	bl	800fa16 <HAL_PCD_SuspendCallback>
    return;
 80056a2:	e026      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00f      	beq.n	80056ce <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056c0:	b292      	uxth	r2, r2
 80056c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f00a f982 	bl	800f9d0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80056cc:	e011      	b.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ea:	b292      	uxth	r2, r2
 80056ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80056f0:	bf00      	nop
  }
}
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_PCD_SetAddress+0x1a>
 800570e:	2302      	movs	r3, #2
 8005710:	e013      	b.n	800573a <HAL_PCD_SetAddress+0x42>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f006 fab4 	bl	800bc98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	461a      	mov	r2, r3
 8005750:	4603      	mov	r3, r0
 8005752:	70fb      	strb	r3, [r7, #3]
 8005754:	460b      	mov	r3, r1
 8005756:	803b      	strh	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005764:	2b00      	cmp	r3, #0
 8005766:	da0f      	bge.n	8005788 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	4413      	add	r3, r2
 800577c:	3304      	adds	r3, #4
 800577e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	705a      	strb	r2, [r3, #1]
 8005786:	e00f      	b.n	80057a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	f003 0207 	and.w	r2, r3, #7
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4413      	add	r3, r2
 800579e:	3304      	adds	r3, #4
 80057a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057b4:	883a      	ldrh	r2, [r7, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	78ba      	ldrb	r2, [r7, #2]
 80057be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057d2:	78bb      	ldrb	r3, [r7, #2]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d102      	bne.n	80057de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_PCD_EP_Open+0xaa>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e00e      	b.n	800580a <HAL_PCD_EP_Open+0xc8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f004 f870 	bl	80098e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8005808:	7afb      	ldrb	r3, [r7, #11]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800581e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005822:	2b00      	cmp	r3, #0
 8005824:	da0f      	bge.n	8005846 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	3304      	adds	r3, #4
 800583c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	705a      	strb	r2, [r3, #1]
 8005844:	e00f      	b.n	8005866 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	f003 0207 	and.w	r2, r3, #7
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	b2da      	uxtb	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_PCD_EP_Close+0x6e>
 800587c:	2302      	movs	r3, #2
 800587e:	e00e      	b.n	800589e <HAL_PCD_EP_Close+0x8c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	4618      	mov	r0, r3
 8005890:	f004 fbe0 	bl	800a054 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	460b      	mov	r3, r1
 80058b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	f003 0207 	and.w	r2, r3, #7
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	3304      	adds	r3, #4
 80058ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2200      	movs	r2, #0
 80058e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058e8:	7afb      	ldrb	r3, [r7, #11]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058f4:	7afb      	ldrb	r3, [r7, #11]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	4618      	mov	r0, r3
 8005906:	f004 fd92 	bl	800a42e <USB_EPStartXfer>
 800590a:	e005      	b.n	8005918 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6979      	ldr	r1, [r7, #20]
 8005912:	4618      	mov	r0, r3
 8005914:	f004 fd8b 	bl	800a42e <USB_EPStartXfer>
  }

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	f003 0207 	and.w	r2, r3, #7
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	440b      	add	r3, r1
 8005940:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005944:	681b      	ldr	r3, [r3, #0]
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	460b      	mov	r3, r1
 8005960:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	3304      	adds	r3, #4
 8005978:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2200      	movs	r2, #0
 8005998:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2201      	movs	r2, #1
 800599e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059a0:	7afb      	ldrb	r3, [r7, #11]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6979      	ldr	r1, [r7, #20]
 80059bc:	4618      	mov	r0, r3
 80059be:	f004 fd36 	bl	800a42e <USB_EPStartXfer>
 80059c2:	e005      	b.n	80059d0 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f004 fd2f 	bl	800a42e <USB_EPStartXfer>
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	f003 0207 	and.w	r2, r3, #7
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d901      	bls.n	80059f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e040      	b.n	8005a7a <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	da0f      	bge.n	8005a20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	3304      	adds	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	705a      	strb	r2, [r3, #1]
 8005a1e:	e00d      	b.n	8005a3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a20:	78fa      	ldrb	r2, [r7, #3]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4413      	add	r3, r2
 8005a32:	3304      	adds	r3, #4
 8005a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_PCD_EP_SetStall+0x82>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e00e      	b.n	8005a7a <HAL_PCD_EP_SetStall+0xa0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f006 f815 	bl	800ba9a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d901      	bls.n	8005aa0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e042      	b.n	8005b26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da0f      	bge.n	8005ac8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	705a      	strb	r2, [r3, #1]
 8005ac6:	e00f      	b.n	8005ae8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	f003 0207 	and.w	r2, r3, #7
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_PCD_EP_ClrStall+0x86>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e00e      	b.n	8005b26 <HAL_PCD_EP_ClrStall+0xa4>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f006 f810 	bl	800bb3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b096      	sub	sp, #88	; 0x58
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b36:	e3a9      	b.n	800628c <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005b44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005b52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 8169 	bne.w	8005e2e <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005b5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d150      	bne.n	8005c0a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b78:	81fb      	strh	r3, [r7, #14]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	332c      	adds	r3, #44	; 0x2c
 8005b90:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	4413      	add	r3, r2
 8005bac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	441a      	add	r2, r3
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f009 fee6 	bl	800f99c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8357 	beq.w	800628c <PCD_EP_ISR_Handler+0x75e>
 8005bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f040 8352 	bne.w	800628c <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005c08:	e340      	b.n	800628c <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005c10:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005c1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d032      	beq.n	8005c8e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	4413      	add	r3, r2
 8005c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8005c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f006 f895 	bl	800bd92 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c74:	4013      	ands	r3, r2
 8005c76:	823b      	strh	r3, [r7, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	8a3a      	ldrh	r2, [r7, #16]
 8005c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c82:	b292      	uxth	r2, r2
 8005c84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f009 fe5b 	bl	800f942 <HAL_PCD_SetupStageCallback>
 8005c8c:	e2fe      	b.n	800628c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c8e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f280 82fa 	bge.w	800628c <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	83fb      	strh	r3, [r7, #30]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	8bfa      	ldrh	r2, [r7, #30]
 8005cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cdc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d019      	beq.n	8005d1a <PCD_EP_ISR_Handler+0x1ec>
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d015      	beq.n	8005d1a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	6959      	ldr	r1, [r3, #20]
 8005cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f006 f847 	bl	800bd92 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	441a      	add	r2, r3
 8005d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d10:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005d12:	2100      	movs	r1, #0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f009 fe26 	bl	800f966 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005d24:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f040 82ad 	bne.w	800628c <PCD_EP_ISR_Handler+0x75e>
 8005d32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d3e:	f000 82a5 	beq.w	800628c <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	4413      	add	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b3e      	cmp	r3, #62	; 0x3e
 8005d68:	d918      	bls.n	8005d9c <PCD_EP_ISR_Handler+0x26e>
 8005d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	647b      	str	r3, [r7, #68]	; 0x44
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <PCD_EP_ISR_Handler+0x256>
 8005d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d80:	3b01      	subs	r3, #1
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44
 8005d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e029      	b.n	8005df0 <PCD_EP_ISR_Handler+0x2c2>
 8005d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d112      	bne.n	8005dca <PCD_EP_ISR_Handler+0x29c>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e012      	b.n	8005df0 <PCD_EP_ISR_Handler+0x2c2>
 8005dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <PCD_EP_ISR_Handler+0x2b6>
 8005dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de0:	3301      	adds	r3, #1
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
 8005de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	827b      	strh	r3, [r7, #18]
 8005e02:	8a7b      	ldrh	r3, [r7, #18]
 8005e04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e08:	827b      	strh	r3, [r7, #18]
 8005e0a:	8a7b      	ldrh	r3, [r7, #18]
 8005e0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e10:	827b      	strh	r3, [r7, #18]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	8a7b      	ldrh	r3, [r7, #18]
 8005e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	8013      	strh	r3, [r2, #0]
 8005e2c:	e22e      	b.n	800628c <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e42:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f280 80f7 	bge.w	800603a <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e62:	4013      	ands	r3, r2
 8005e64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005e82:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	3304      	adds	r3, #4
 8005e98:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9c:	7b1b      	ldrb	r3, [r3, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d123      	bne.n	8005eea <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005eca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 808e 	beq.w	8005ff0 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eda:	6959      	ldr	r1, [r3, #20]
 8005edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ede:	88da      	ldrh	r2, [r3, #6]
 8005ee0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ee4:	f005 ff55 	bl	800bd92 <USB_ReadPMA>
 8005ee8:	e082      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eec:	78db      	ldrb	r3, [r3, #3]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d10a      	bne.n	8005f08 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005ef2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f9d4 	bl	80062a8 <HAL_PCD_EP_DB_Receive>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f06:	e073      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d022      	beq.n	8005fac <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4413      	add	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005f8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02c      	beq.n	8005ff0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	6959      	ldr	r1, [r3, #20]
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa0:	891a      	ldrh	r2, [r3, #8]
 8005fa2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fa6:	f005 fef4 	bl	800bd92 <USB_ReadPMA>
 8005faa:	e021      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005fd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe2:	6959      	ldr	r1, [r3, #20]
 8005fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe6:	895a      	ldrh	r2, [r3, #10]
 8005fe8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fec:	f005 fed1 	bl	800bd92 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ff8:	441a      	add	r2, r3
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006006:	441a      	add	r2, r3
 8006008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800600c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <PCD_EP_ISR_Handler+0x4f2>
 8006014:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	429a      	cmp	r2, r3
 800601e:	d206      	bcs.n	800602e <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f009 fc9d 	bl	800f966 <HAL_PCD_DataOutStageCallback>
 800602c:	e005      	b.n	800603a <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006034:	4618      	mov	r0, r3
 8006036:	f004 f9fa 	bl	800a42e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800603a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8122 	beq.w	800628c <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006048:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	3304      	adds	r3, #4
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006078:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800608e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800609a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609c:	78db      	ldrb	r3, [r3, #3]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	f040 80a2 	bne.w	80061e8 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 80060a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a6:	2200      	movs	r2, #0
 80060a8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80060aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ac:	7b1b      	ldrb	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8093 	beq.w	80061da <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80060b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d046      	beq.n	800614e <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d126      	bne.n	8006116 <PCD_EP_ISR_Handler+0x5e8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	4413      	add	r3, r2
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
 80060e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	00da      	lsls	r2, r3, #3
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	4413      	add	r3, r2
 80060ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610e:	b29a      	uxth	r2, r3
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	e061      	b.n	80061da <PCD_EP_ISR_Handler+0x6ac>
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d15d      	bne.n	80061da <PCD_EP_ISR_Handler+0x6ac>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612c:	b29b      	uxth	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	4413      	add	r3, r2
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	00da      	lsls	r2, r3, #3
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	4413      	add	r3, r2
 8006140:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	2200      	movs	r2, #0
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	e045      	b.n	80061da <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d126      	bne.n	80061aa <PCD_EP_ISR_Handler+0x67c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616a:	b29b      	uxth	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006170:	4413      	add	r3, r2
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
 8006174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	00da      	lsls	r2, r3, #3
 800617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617c:	4413      	add	r3, r2
 800617e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800618e:	b29a      	uxth	r2, r3
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e017      	b.n	80061da <PCD_EP_ISR_Handler+0x6ac>
 80061aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d113      	bne.n	80061da <PCD_EP_ISR_Handler+0x6ac>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c0:	4413      	add	r3, r2
 80061c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	00da      	lsls	r2, r3, #3
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	4413      	add	r3, r2
 80061ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2200      	movs	r2, #0
 80061d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80061da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f009 fbdb 	bl	800f99c <HAL_PCD_DataInStageCallback>
 80061e6:	e051      	b.n	800628c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80061e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d144      	bne.n	800627e <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	4413      	add	r3, r2
 800620e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006218:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006224:	429a      	cmp	r2, r3
 8006226:	d907      	bls.n	8006238 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8006228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006234:	619a      	str	r2, [r3, #24]
 8006236:	e002      	b.n	800623e <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8006238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623a:	2200      	movs	r2, #0
 800623c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f009 fba5 	bl	800f99c <HAL_PCD_DataInStageCallback>
 8006252:	e01b      	b.n	800628c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800625c:	441a      	add	r2, r3
 800625e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006260:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800626a:	441a      	add	r2, r3
 800626c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006276:	4618      	mov	r0, r3
 8006278:	f004 f8d9 	bl	800a42e <USB_EPStartXfer>
 800627c:	e006      	b.n	800628c <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800627e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006282:	461a      	mov	r2, r3
 8006284:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f917 	bl	80064ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006294:	b29b      	uxth	r3, r3
 8006296:	b21b      	sxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	f6ff ac4d 	blt.w	8005b38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3758      	adds	r7, #88	; 0x58
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d07c      	beq.n	80063ba <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	4413      	add	r3, r2
 80062da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	8b7b      	ldrh	r3, [r7, #26]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d306      	bcc.n	80062fe <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	8b7b      	ldrh	r3, [r7, #26]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	619a      	str	r2, [r3, #24]
 80062fc:	e002      	b.n	8006304 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d123      	bne.n	8006354 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006326:	833b      	strh	r3, [r7, #24]
 8006328:	8b3b      	ldrh	r3, [r7, #24]
 800632a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800632e:	833b      	strh	r3, [r7, #24]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	441a      	add	r2, r3
 800633e:	8b3b      	ldrh	r3, [r7, #24]
 8006340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006350:	b29b      	uxth	r3, r3
 8006352:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01f      	beq.n	800639e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006378:	82fb      	strh	r3, [r7, #22]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	8afb      	ldrh	r3, [r7, #22]
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800639e:	8b7b      	ldrh	r3, [r7, #26]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8085 	beq.w	80064b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6959      	ldr	r1, [r3, #20]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	891a      	ldrh	r2, [r3, #8]
 80063b2:	8b7b      	ldrh	r3, [r7, #26]
 80063b4:	f005 fced 	bl	800bd92 <USB_ReadPMA>
 80063b8:	e07a      	b.n	80064b0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	8b7b      	ldrh	r3, [r7, #26]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d306      	bcc.n	80063f8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	8b7b      	ldrh	r3, [r7, #26]
 80063f0:	1ad2      	subs	r2, r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	619a      	str	r2, [r3, #24]
 80063f6:	e002      	b.n	80063fe <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d123      	bne.n	800644e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	83fb      	strh	r3, [r7, #30]
 8006422:	8bfb      	ldrh	r3, [r7, #30]
 8006424:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006428:	83fb      	strh	r3, [r7, #30]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	8bfb      	ldrh	r3, [r7, #30]
 800643a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644a:	b29b      	uxth	r3, r3
 800644c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11f      	bne.n	8006498 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	83bb      	strh	r3, [r7, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	441a      	add	r2, r3
 8006482:	8bbb      	ldrh	r3, [r7, #28]
 8006484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006498:	8b7b      	ldrh	r3, [r7, #26]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6959      	ldr	r1, [r3, #20]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	895a      	ldrh	r2, [r3, #10]
 80064aa:	8b7b      	ldrh	r3, [r7, #26]
 80064ac:	f005 fc71 	bl	800bd92 <USB_ReadPMA>
    }
  }

  return count;
 80064b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b0a2      	sub	sp, #136	; 0x88
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	4613      	mov	r3, r2
 80064c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 81c5 	beq.w	800685e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	4413      	add	r3, r2
 80064ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006504:	429a      	cmp	r2, r3
 8006506:	d907      	bls.n	8006518 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006510:	1ad2      	subs	r2, r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	619a      	str	r2, [r3, #24]
 8006516:	e002      	b.n	800651e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 80b9 	bne.w	800669a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d126      	bne.n	800657e <HAL_PCD_EP_DB_Transmit+0xc4>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	4413      	add	r3, r2
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	00da      	lsls	r2, r3, #3
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	4413      	add	r3, r2
 8006552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006562:	b29a      	uxth	r2, r3
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006576:	b29a      	uxth	r2, r3
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	e01a      	b.n	80065b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d116      	bne.n	80065b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	633b      	str	r3, [r7, #48]	; 0x30
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	4413      	add	r3, r2
 800659c:	633b      	str	r3, [r7, #48]	; 0x30
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	00da      	lsls	r2, r3, #3
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	4413      	add	r3, r2
 80065a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	2200      	movs	r2, #0
 80065b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d126      	bne.n	8006610 <HAL_PCD_EP_DB_Transmit+0x156>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	61bb      	str	r3, [r7, #24]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	4413      	add	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	00da      	lsls	r2, r3, #3
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e017      	b.n	8006640 <HAL_PCD_EP_DB_Transmit+0x186>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d113      	bne.n	8006640 <HAL_PCD_EP_DB_Transmit+0x186>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	4413      	add	r3, r2
 8006628:	623b      	str	r3, [r7, #32]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	00da      	lsls	r2, r3, #3
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	4413      	add	r3, r2
 8006634:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	2200      	movs	r2, #0
 800663e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	4619      	mov	r1, r3
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f009 f9a8 	bl	800f99c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 82d2 	beq.w	8006bfc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006672:	827b      	strh	r3, [r7, #18]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	8a7b      	ldrh	r3, [r7, #18]
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]
 8006698:	e2b0      	b.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d021      	beq.n	80066e8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	f040 8284 	bne.w	8006bfc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80066fc:	441a      	add	r2, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800670a:	441a      	add	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d309      	bcc.n	8006730 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	1ad2      	subs	r2, r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	621a      	str	r2, [r3, #32]
 800672e:	e015      	b.n	800675c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d107      	bne.n	8006748 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800673c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006746:	e009      	b.n	800675c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2200      	movs	r2, #0
 800675a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d155      	bne.n	8006810 <HAL_PCD_EP_DB_Transmit+0x356>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	63bb      	str	r3, [r7, #56]	; 0x38
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	4413      	add	r3, r2
 800677a:	63bb      	str	r3, [r7, #56]	; 0x38
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	00da      	lsls	r2, r3, #3
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	4413      	add	r3, r2
 8006786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
 800678c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678e:	2b3e      	cmp	r3, #62	; 0x3e
 8006790:	d916      	bls.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x306>
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	64bb      	str	r3, [r7, #72]	; 0x48
 8006798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80067a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a4:	3b01      	subs	r3, #1
 80067a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e043      	b.n	8006848 <HAL_PCD_EP_DB_Transmit+0x38e>
 80067c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d112      	bne.n	80067ec <HAL_PCD_EP_DB_Transmit+0x332>
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e02d      	b.n	8006848 <HAL_PCD_EP_DB_Transmit+0x38e>
 80067ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_PCD_EP_DB_Transmit+0x348>
 80067fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fe:	3301      	adds	r3, #1
 8006800:	64bb      	str	r3, [r7, #72]	; 0x48
 8006802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006804:	b29b      	uxth	r3, r3
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	b29a      	uxth	r2, r3
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	e01b      	b.n	8006848 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d117      	bne.n	8006848 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006826:	b29b      	uxth	r3, r3
 8006828:	461a      	mov	r2, r3
 800682a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800682c:	4413      	add	r3, r2
 800682e:	643b      	str	r3, [r7, #64]	; 0x40
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	00da      	lsls	r2, r3, #3
 8006836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006838:	4413      	add	r3, r2
 800683a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006842:	b29a      	uxth	r2, r3
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6959      	ldr	r1, [r3, #20]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	891a      	ldrh	r2, [r3, #8]
 8006854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006856:	b29b      	uxth	r3, r3
 8006858:	f005 fa59 	bl	800bd0e <USB_WritePMA>
 800685c:	e1ce      	b.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4413      	add	r3, r2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	4413      	add	r3, r2
 8006878:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006882:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800688e:	429a      	cmp	r2, r3
 8006890:	d307      	bcc.n	80068a2 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800689a:	1ad2      	subs	r2, r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	619a      	str	r2, [r3, #24]
 80068a0:	e002      	b.n	80068a8 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2200      	movs	r2, #0
 80068a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 80c4 	bne.w	8006a3a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d126      	bne.n	8006908 <HAL_PCD_EP_DB_Transmit+0x44e>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ce:	4413      	add	r3, r2
 80068d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	00da      	lsls	r2, r3, #3
 80068d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068da:	4413      	add	r3, r2
 80068dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068e0:	667b      	str	r3, [r7, #100]	; 0x64
 80068e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006900:	b29a      	uxth	r2, r3
 8006902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e01a      	b.n	800693e <HAL_PCD_EP_DB_Transmit+0x484>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d116      	bne.n	800693e <HAL_PCD_EP_DB_Transmit+0x484>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	673b      	str	r3, [r7, #112]	; 0x70
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006924:	4413      	add	r3, r2
 8006926:	673b      	str	r3, [r7, #112]	; 0x70
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	00da      	lsls	r2, r3, #3
 800692e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006930:	4413      	add	r3, r2
 8006932:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693a:	2200      	movs	r2, #0
 800693c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d12f      	bne.n	80069ac <HAL_PCD_EP_DB_Transmit+0x4f2>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695c:	b29b      	uxth	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006964:	4413      	add	r3, r2
 8006966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	00da      	lsls	r2, r3, #3
 8006970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006974:	4413      	add	r3, r2
 8006976:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800697a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800697e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e017      	b.n	80069dc <HAL_PCD_EP_DB_Transmit+0x522>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d113      	bne.n	80069dc <HAL_PCD_EP_DB_Transmit+0x522>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069bc:	b29b      	uxth	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069c2:	4413      	add	r3, r2
 80069c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	00da      	lsls	r2, r3, #3
 80069cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069ce:	4413      	add	r3, r2
 80069d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d8:	2200      	movs	r2, #0
 80069da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f008 ffda 	bl	800f99c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f040 8104 	bne.w	8006bfc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	8013      	strh	r3, [r2, #0]
 8006a38:	e0e0      	b.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d121      	bne.n	8006a88 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	f040 80b4 	bne.w	8006bfc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	69da      	ldr	r2, [r3, #28]
 8006aa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006aaa:	441a      	add	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6a1a      	ldr	r2, [r3, #32]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d309      	bcc.n	8006ad0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac8:	1ad2      	subs	r2, r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	621a      	str	r2, [r3, #32]
 8006ace:	e015      	b.n	8006afc <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006ad8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006adc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006ae6:	e009      	b.n	8006afc <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2200      	movs	r2, #0
 8006af2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	663b      	str	r3, [r7, #96]	; 0x60
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d155      	bne.n	8006bb6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b1e:	4413      	add	r3, r2
 8006b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	00da      	lsls	r2, r3, #3
 8006b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b30:	657b      	str	r3, [r7, #84]	; 0x54
 8006b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b34:	2b3e      	cmp	r3, #62	; 0x3e
 8006b36:	d916      	bls.n	8006b66 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <HAL_PCD_EP_DB_Transmit+0x694>
 8006b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	029b      	lsls	r3, r3, #10
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	e040      	b.n	8006be8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d112      	bne.n	8006b92 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	e02a      	b.n	8006be8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	677b      	str	r3, [r7, #116]	; 0x74
 8006b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8006ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	e018      	b.n	8006be8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d114      	bne.n	8006be8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bcc:	4413      	add	r3, r2
 8006bce:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	00da      	lsls	r2, r3, #3
 8006bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd8:	4413      	add	r3, r2
 8006bda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6959      	ldr	r1, [r3, #20]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	895a      	ldrh	r2, [r3, #10]
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f005 f889 	bl	800bd0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c16:	823b      	strh	r3, [r7, #16]
 8006c18:	8a3b      	ldrh	r3, [r7, #16]
 8006c1a:	f083 0310 	eor.w	r3, r3, #16
 8006c1e:	823b      	strh	r3, [r7, #16]
 8006c20:	8a3b      	ldrh	r3, [r7, #16]
 8006c22:	f083 0320 	eor.w	r3, r3, #32
 8006c26:	823b      	strh	r3, [r7, #16]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	8a3b      	ldrh	r3, [r7, #16]
 8006c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3788      	adds	r7, #136	; 0x88
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b087      	sub	sp, #28
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	817b      	strh	r3, [r7, #10]
 8006c64:	4613      	mov	r3, r2
 8006c66:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006c68:	897b      	ldrh	r3, [r7, #10]
 8006c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00c      	beq.n	8006c8e <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c74:	897b      	ldrh	r3, [r7, #10]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	3304      	adds	r3, #4
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	e00a      	b.n	8006ca4 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c8e:	897a      	ldrh	r2, [r7, #10]
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006ca4:	893b      	ldrh	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d107      	bne.n	8006cba <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2200      	movs	r2, #0
 8006cae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	80da      	strh	r2, [r3, #6]
 8006cb8:	e00b      	b.n	8006cd2 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f043 0302 	orr.w	r3, r3, #2
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d5a:	6013      	str	r3, [r2, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	58000400 	.word	0x58000400

08006d6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	58000400 	.word	0x58000400

08006d88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006d8c:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a04      	ldr	r2, [pc, #16]	; (8006da4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d96:	6053      	str	r3, [r2, #4]
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	58000400 	.word	0x58000400

08006da8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dba:	d101      	bne.n	8006dc0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <LL_RCC_HSE_Enable>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dde:	6013      	str	r3, [r2, #0]
}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <LL_RCC_HSE_Disable>:
{
 8006dea:	b480      	push	{r7}
 8006dec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <LL_RCC_HSE_IsReady>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e1a:	d101      	bne.n	8006e20 <LL_RCC_HSE_IsReady+0x18>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <LL_RCC_HSE_IsReady+0x1a>
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <LL_RCC_HSI_Enable>:
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3e:	6013      	str	r3, [r2, #0]
}
 8006e40:	bf00      	nop
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <LL_RCC_HSI_Disable>:
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e5c:	6013      	str	r3, [r2, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <LL_RCC_HSI_IsReady>:
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7a:	d101      	bne.n	8006e80 <LL_RCC_HSI_IsReady+0x18>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <LL_RCC_HSI_IsReady+0x1a>
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <LL_RCC_HSI_SetCalibTrimming>:
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	061b      	lsls	r3, r3, #24
 8006ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	604b      	str	r3, [r1, #4]
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <LL_RCC_HSI48_Enable>:
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006ece:	bf00      	nop
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <LL_RCC_HSI48_Disable>:
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006ef0:	bf00      	nop
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <LL_RCC_HSI48_IsReady>:
{
 8006efa:	b480      	push	{r7}
 8006efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d101      	bne.n	8006f12 <LL_RCC_HSI48_IsReady+0x18>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <LL_RCC_HSI48_IsReady+0x1a>
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <LL_RCC_LSE_Enable>:
{
 8006f1e:	b480      	push	{r7}
 8006f20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f36:	bf00      	nop
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <LL_RCC_LSE_Disable>:
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <LL_RCC_LSE_EnableBypass>:
{
 8006f62:	b480      	push	{r7}
 8006f64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f72:	f043 0304 	orr.w	r3, r3, #4
 8006f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f7a:	bf00      	nop
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <LL_RCC_LSE_DisableBypass>:
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f94:	f023 0304 	bic.w	r3, r3, #4
 8006f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f9c:	bf00      	nop
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <LL_RCC_LSE_IsReady>:
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d101      	bne.n	8006fbe <LL_RCC_LSE_IsReady+0x18>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <LL_RCC_LSE_IsReady+0x1a>
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <LL_RCC_LSI1_Enable>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006fe2:	bf00      	nop
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <LL_RCC_LSI1_Disable>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <LL_RCC_LSI1_IsReady>:
{
 800700e:	b480      	push	{r7}
 8007010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b02      	cmp	r3, #2
 8007020:	d101      	bne.n	8007026 <LL_RCC_LSI1_IsReady+0x18>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <LL_RCC_LSI1_IsReady+0x1a>
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <LL_RCC_LSI2_Enable>:
{
 8007032:	b480      	push	{r7}
 8007034:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800703e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007042:	f043 0304 	orr.w	r3, r3, #4
 8007046:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800704a:	bf00      	nop
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <LL_RCC_LSI2_Disable>:
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007064:	f023 0304 	bic.w	r3, r3, #4
 8007068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800706c:	bf00      	nop
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <LL_RCC_LSI2_IsReady>:
{
 8007076:	b480      	push	{r7}
 8007078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800707a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b08      	cmp	r3, #8
 8007088:	d101      	bne.n	800708e <LL_RCC_LSI2_IsReady+0x18>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <LL_RCC_LSI2_IsReady+0x1a>
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <LL_RCC_LSI2_SetTrimming>:
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80070a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <LL_RCC_MSI_Enable>:
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80070cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <LL_RCC_MSI_Disable>:
{
 80070e6:	b480      	push	{r7}
 80070e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80070ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f4:	f023 0301 	bic.w	r3, r3, #1
 80070f8:	6013      	str	r3, [r2, #0]
}
 80070fa:	bf00      	nop
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <LL_RCC_MSI_IsReady>:
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b02      	cmp	r3, #2
 8007114:	d101      	bne.n	800711a <LL_RCC_MSI_IsReady+0x16>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <LL_RCC_MSI_IsReady+0x18>
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <LL_RCC_MSI_SetRange>:
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800712e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4313      	orrs	r3, r2
 8007140:	600b      	str	r3, [r1, #0]
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <LL_RCC_MSI_GetRange>:
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800715e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2bb0      	cmp	r3, #176	; 0xb0
 8007164:	d901      	bls.n	800716a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007166:	23b0      	movs	r3, #176	; 0xb0
 8007168:	607b      	str	r3, [r7, #4]
  return msiRange;
 800716a:	687b      	ldr	r3, [r7, #4]
}
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007192:	4313      	orrs	r3, r2
 8007194:	604b      	str	r3, [r1, #4]
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <LL_RCC_SetSysClkSource>:
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80071aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f023 0203 	bic.w	r2, r3, #3
 80071b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <LL_RCC_GetSysClkSource>:
{
 80071ca:	b480      	push	{r7}
 80071cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80071ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 030c 	and.w	r3, r3, #12
}
 80071d8:	4618      	mov	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <LL_RCC_SetAHBPrescaler>:
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80071ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	608b      	str	r3, [r1, #8]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <LL_C2_RCC_SetAHBPrescaler>:
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007216:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800721a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800721e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <LL_RCC_SetAHB4Prescaler>:
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800723e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007242:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007246:	f023 020f 	bic.w	r2, r3, #15
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <LL_RCC_SetAPB1Prescaler>:
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800726c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4313      	orrs	r3, r2
 800727e:	608b      	str	r3, [r1, #8]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <LL_RCC_SetAPB2Prescaler>:
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800729e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	608b      	str	r3, [r1, #8]
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <LL_RCC_GetAHBPrescaler>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80072b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <LL_RCC_GetAHB4Prescaler>:
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80072d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <LL_RCC_PLL_Enable>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80072ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072fa:	6013      	str	r3, [r2, #0]
}
 80072fc:	bf00      	nop
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <LL_RCC_PLL_Disable>:
{
 8007306:	b480      	push	{r7}
 8007308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800730a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007318:	6013      	str	r3, [r2, #0]
}
 800731a:	bf00      	nop
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <LL_RCC_PLL_IsReady>:
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007336:	d101      	bne.n	800733c <LL_RCC_PLL_IsReady+0x18>
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <LL_RCC_PLL_IsReady+0x1a>
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <LL_RCC_PLL_GetN>:
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800734c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007358:	4618      	mov	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <LL_RCC_PLL_GetR>:
{
 8007362:	b480      	push	{r7}
 8007364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007370:	4618      	mov	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <LL_RCC_PLL_GetDivider>:
{
 800737a:	b480      	push	{r7}
 800737c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800737e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007388:	4618      	mov	r0, r3
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <LL_RCC_PLL_GetMainSource>:
{
 8007392:	b480      	push	{r7}
 8007394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0303 	and.w	r3, r3, #3
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <LL_RCC_IsActiveFlag_HPRE>:
{
 80073aa:	b480      	push	{r7}
 80073ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80073ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073bc:	d101      	bne.n	80073c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80073ce:	b480      	push	{r7}
 80073d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80073d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80073da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e2:	d101      	bne.n	80073e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80073f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007408:	d101      	bne.n	800740e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800741a:	b480      	push	{r7}
 800741c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800741e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800742c:	d101      	bne.n	8007432 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800743e:	b480      	push	{r7}
 8007440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800744c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007450:	d101      	bne.n	8007456 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
	...

08007464 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b08d      	sub	sp, #52	; 0x34
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e363      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 808d 	beq.w	800759e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007484:	f7ff fea1 	bl	80071ca <LL_RCC_GetSysClkSource>
 8007488:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800748a:	f7ff ff82 	bl	8007392 <LL_RCC_PLL_GetMainSource>
 800748e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_RCC_OscConfig+0x3e>
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	2b0c      	cmp	r3, #12
 800749a:	d147      	bne.n	800752c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d144      	bne.n	800752c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e347      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80074b2:	f7ff fe4c 	bl	800714e <LL_RCC_MSI_GetRange>
 80074b6:	4603      	mov	r3, r0
 80074b8:	429c      	cmp	r4, r3
 80074ba:	d914      	bls.n	80074e6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fd03 	bl	8007ecc <RCC_SetFlashLatencyFromMSIRange>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e336      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fe26 	bl	8007126 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fe4a 	bl	8007178 <LL_RCC_MSI_SetCalibTrimming>
 80074e4:	e013      	b.n	800750e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fe1b 	bl	8007126 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fe3f 	bl	8007178 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fce4 	bl	8007ecc <RCC_SetFlashLatencyFromMSIRange>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e317      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800750e:	f000 fcc9 	bl	8007ea4 <HAL_RCC_GetHCLKFreq>
 8007512:	4603      	mov	r3, r0
 8007514:	4aa4      	ldr	r2, [pc, #656]	; (80077a8 <HAL_RCC_OscConfig+0x344>)
 8007516:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007518:	4ba4      	ldr	r3, [pc, #656]	; (80077ac <HAL_RCC_OscConfig+0x348>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f7fd f83b 	bl	8004598 <HAL_InitTick>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d039      	beq.n	800759c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e308      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01e      	beq.n	8007572 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007534:	f7ff fdc8 	bl	80070c8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007538:	f7fd f87c 	bl	8004634 <HAL_GetTick>
 800753c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007540:	f7fd f878 	bl	8004634 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e2f5      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007552:	f7ff fdd7 	bl	8007104 <LL_RCC_MSI_IsReady>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0f1      	beq.n	8007540 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff fde0 	bl	8007126 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fe04 	bl	8007178 <LL_RCC_MSI_SetCalibTrimming>
 8007570:	e015      	b.n	800759e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007572:	f7ff fdb8 	bl	80070e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007576:	f7fd f85d 	bl	8004634 <HAL_GetTick>
 800757a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800757e:	f7fd f859 	bl	8004634 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e2d6      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007590:	f7ff fdb8 	bl	8007104 <LL_RCC_MSI_IsReady>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f1      	bne.n	800757e <HAL_RCC_OscConfig+0x11a>
 800759a:	e000      	b.n	800759e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800759c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d047      	beq.n	800763a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075aa:	f7ff fe0e 	bl	80071ca <LL_RCC_GetSysClkSource>
 80075ae:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075b0:	f7ff feef 	bl	8007392 <LL_RCC_PLL_GetMainSource>
 80075b4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d005      	beq.n	80075c8 <HAL_RCC_OscConfig+0x164>
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	2b0c      	cmp	r3, #12
 80075c0:	d108      	bne.n	80075d4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d105      	bne.n	80075d4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d134      	bne.n	800763a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e2b4      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075dc:	d102      	bne.n	80075e4 <HAL_RCC_OscConfig+0x180>
 80075de:	f7ff fbf5 	bl	8006dcc <LL_RCC_HSE_Enable>
 80075e2:	e001      	b.n	80075e8 <HAL_RCC_OscConfig+0x184>
 80075e4:	f7ff fc01 	bl	8006dea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f0:	f7fd f820 	bl	8004634 <HAL_GetTick>
 80075f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075f8:	f7fd f81c 	bl	8004634 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b64      	cmp	r3, #100	; 0x64
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e299      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800760a:	f7ff fbfd 	bl	8006e08 <LL_RCC_HSE_IsReady>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f1      	beq.n	80075f8 <HAL_RCC_OscConfig+0x194>
 8007614:	e011      	b.n	800763a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007616:	f7fd f80d 	bl	8004634 <HAL_GetTick>
 800761a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800761c:	e008      	b.n	8007630 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800761e:	f7fd f809 	bl	8004634 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b64      	cmp	r3, #100	; 0x64
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e286      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007630:	f7ff fbea 	bl	8006e08 <LL_RCC_HSE_IsReady>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f1      	bne.n	800761e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d04c      	beq.n	80076e0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007646:	f7ff fdc0 	bl	80071ca <LL_RCC_GetSysClkSource>
 800764a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800764c:	f7ff fea1 	bl	8007392 <LL_RCC_PLL_GetMainSource>
 8007650:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b04      	cmp	r3, #4
 8007656:	d005      	beq.n	8007664 <HAL_RCC_OscConfig+0x200>
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b0c      	cmp	r3, #12
 800765c:	d10e      	bne.n	800767c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d10b      	bne.n	800767c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e266      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fc09 	bl	8006e8c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800767a:	e031      	b.n	80076e0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007684:	f7ff fbd2 	bl	8006e2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007688:	f7fc ffd4 	bl	8004634 <HAL_GetTick>
 800768c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007690:	f7fc ffd0 	bl	8004634 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e24d      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80076a2:	f7ff fbe1 	bl	8006e68 <LL_RCC_HSI_IsReady>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0f1      	beq.n	8007690 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff fbeb 	bl	8006e8c <LL_RCC_HSI_SetCalibTrimming>
 80076b6:	e013      	b.n	80076e0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076b8:	f7ff fbc7 	bl	8006e4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076bc:	f7fc ffba 	bl	8004634 <HAL_GetTick>
 80076c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076c4:	f7fc ffb6 	bl	8004634 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e233      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80076d6:	f7ff fbc7 	bl	8006e68 <LL_RCC_HSI_IsReady>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f1      	bne.n	80076c4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80a3 	beq.w	8007840 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d076      	beq.n	80077f0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b00      	cmp	r3, #0
 800770c:	d046      	beq.n	800779c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800770e:	f7ff fc7e 	bl	800700e <LL_RCC_LSI1_IsReady>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d113      	bne.n	8007740 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007718:	f7ff fc57 	bl	8006fca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800771c:	f7fc ff8a 	bl	8004634 <HAL_GetTick>
 8007720:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007724:	f7fc ff86 	bl	8004634 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e203      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007736:	f7ff fc6a 	bl	800700e <LL_RCC_LSI1_IsReady>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0f1      	beq.n	8007724 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007740:	f7ff fc77 	bl	8007032 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007744:	f7fc ff76 	bl	8004634 <HAL_GetTick>
 8007748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800774c:	f7fc ff72 	bl	8004634 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e1ef      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800775e:	f7ff fc8a 	bl	8007076 <LL_RCC_LSI2_IsReady>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f1      	beq.n	800774c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fc94 	bl	800709a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007772:	f7ff fc3b 	bl	8006fec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007776:	f7fc ff5d 	bl	8004634 <HAL_GetTick>
 800777a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800777e:	f7fc ff59 	bl	8004634 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e1d6      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007790:	f7ff fc3d 	bl	800700e <LL_RCC_LSI1_IsReady>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f1      	bne.n	800777e <HAL_RCC_OscConfig+0x31a>
 800779a:	e051      	b.n	8007840 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800779c:	f7ff fc15 	bl	8006fca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a0:	f7fc ff48 	bl	8004634 <HAL_GetTick>
 80077a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80077a6:	e00c      	b.n	80077c2 <HAL_RCC_OscConfig+0x35e>
 80077a8:	2000002c 	.word	0x2000002c
 80077ac:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80077b0:	f7fc ff40 	bl	8004634 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e1bd      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80077c2:	f7ff fc24 	bl	800700e <LL_RCC_LSI1_IsReady>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0f1      	beq.n	80077b0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80077cc:	f7ff fc42 	bl	8007054 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80077d2:	f7fc ff2f 	bl	8004634 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e1ac      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80077e4:	f7ff fc47 	bl	8007076 <LL_RCC_LSI2_IsReady>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f1      	bne.n	80077d2 <HAL_RCC_OscConfig+0x36e>
 80077ee:	e027      	b.n	8007840 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80077f0:	f7ff fc30 	bl	8007054 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f4:	f7fc ff1e 	bl	8004634 <HAL_GetTick>
 80077f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80077fc:	f7fc ff1a 	bl	8004634 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b03      	cmp	r3, #3
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e197      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800780e:	f7ff fc32 	bl	8007076 <LL_RCC_LSI2_IsReady>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f1      	bne.n	80077fc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007818:	f7ff fbe8 	bl	8006fec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781c:	f7fc ff0a 	bl	8004634 <HAL_GetTick>
 8007820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007824:	f7fc ff06 	bl	8004634 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e183      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007836:	f7ff fbea 	bl	800700e <LL_RCC_LSI1_IsReady>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f1      	bne.n	8007824 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d05b      	beq.n	8007904 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800784c:	4ba7      	ldr	r3, [pc, #668]	; (8007aec <HAL_RCC_OscConfig+0x688>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d114      	bne.n	8007882 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007858:	f7ff fa78 	bl	8006d4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800785c:	f7fc feea 	bl	8004634 <HAL_GetTick>
 8007860:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007862:	e008      	b.n	8007876 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007864:	f7fc fee6 	bl	8004634 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e163      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007876:	4b9d      	ldr	r3, [pc, #628]	; (8007aec <HAL_RCC_OscConfig+0x688>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0f0      	beq.n	8007864 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d102      	bne.n	8007890 <HAL_RCC_OscConfig+0x42c>
 800788a:	f7ff fb48 	bl	8006f1e <LL_RCC_LSE_Enable>
 800788e:	e00c      	b.n	80078aa <HAL_RCC_OscConfig+0x446>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b05      	cmp	r3, #5
 8007896:	d104      	bne.n	80078a2 <HAL_RCC_OscConfig+0x43e>
 8007898:	f7ff fb63 	bl	8006f62 <LL_RCC_LSE_EnableBypass>
 800789c:	f7ff fb3f 	bl	8006f1e <LL_RCC_LSE_Enable>
 80078a0:	e003      	b.n	80078aa <HAL_RCC_OscConfig+0x446>
 80078a2:	f7ff fb4d 	bl	8006f40 <LL_RCC_LSE_Disable>
 80078a6:	f7ff fb6d 	bl	8006f84 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d014      	beq.n	80078dc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b2:	f7fc febf 	bl	8004634 <HAL_GetTick>
 80078b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80078b8:	e00a      	b.n	80078d0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ba:	f7fc febb 	bl	8004634 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e136      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80078d0:	f7ff fb69 	bl	8006fa6 <LL_RCC_LSE_IsReady>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0ef      	beq.n	80078ba <HAL_RCC_OscConfig+0x456>
 80078da:	e013      	b.n	8007904 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078dc:	f7fc feaa 	bl	8004634 <HAL_GetTick>
 80078e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80078e2:	e00a      	b.n	80078fa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078e4:	f7fc fea6 	bl	8004634 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e121      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80078fa:	f7ff fb54 	bl	8006fa6 <LL_RCC_LSE_IsReady>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1ef      	bne.n	80078e4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	d02c      	beq.n	800796a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	2b00      	cmp	r3, #0
 8007916:	d014      	beq.n	8007942 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007918:	f7ff facd 	bl	8006eb6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791c:	f7fc fe8a 	bl	8004634 <HAL_GetTick>
 8007920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007924:	f7fc fe86 	bl	8004634 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e103      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007936:	f7ff fae0 	bl	8006efa <LL_RCC_HSI48_IsReady>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0f1      	beq.n	8007924 <HAL_RCC_OscConfig+0x4c0>
 8007940:	e013      	b.n	800796a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007942:	f7ff fac9 	bl	8006ed8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007946:	f7fc fe75 	bl	8004634 <HAL_GetTick>
 800794a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800794c:	e008      	b.n	8007960 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800794e:	f7fc fe71 	bl	8004634 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e0ee      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007960:	f7ff facb 	bl	8006efa <LL_RCC_HSI48_IsReady>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1f1      	bne.n	800794e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80e4 	beq.w	8007b3c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007974:	f7ff fc29 	bl	80071ca <LL_RCC_GetSysClkSource>
 8007978:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	2b02      	cmp	r3, #2
 8007988:	f040 80b4 	bne.w	8007af4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0203 	and.w	r2, r3, #3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	429a      	cmp	r2, r3
 8007998:	d123      	bne.n	80079e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d11c      	bne.n	80079e2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d114      	bne.n	80079e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d10d      	bne.n	80079e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d106      	bne.n	80079e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80079de:	429a      	cmp	r2, r3
 80079e0:	d05d      	beq.n	8007a9e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b0c      	cmp	r3, #12
 80079e6:	d058      	beq.n	8007a9a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80079e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e0a1      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80079fa:	f7ff fc84 	bl	8007306 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079fe:	f7fc fe19 	bl	8004634 <HAL_GetTick>
 8007a02:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a06:	f7fc fe15 	bl	8004634 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e092      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1ef      	bne.n	8007a06 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	4b30      	ldr	r3, [pc, #192]	; (8007af0 <HAL_RCC_OscConfig+0x68c>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a38:	4311      	orrs	r1, r2
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a3e:	0212      	lsls	r2, r2, #8
 8007a40:	4311      	orrs	r1, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a46:	4311      	orrs	r1, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a4c:	4311      	orrs	r1, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a52:	430a      	orrs	r2, r1
 8007a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a5c:	f7ff fc44 	bl	80072e8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a70:	f7fc fde0 	bl	8004634 <HAL_GetTick>
 8007a74:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a78:	f7fc fddc 	bl	8004634 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e059      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0ef      	beq.n	8007a78 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a98:	e050      	b.n	8007b3c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e04f      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d147      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007aac:	f7ff fc1c 	bl	80072e8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ac0:	f7fc fdb8 	bl	8004634 <HAL_GetTick>
 8007ac4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ac6:	e008      	b.n	8007ada <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac8:	f7fc fdb4 	bl	8004634 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e031      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0ef      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x664>
 8007ae8:	e028      	b.n	8007b3c <HAL_RCC_OscConfig+0x6d8>
 8007aea:	bf00      	nop
 8007aec:	58000400 	.word	0x58000400
 8007af0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b0c      	cmp	r3, #12
 8007af8:	d01e      	beq.n	8007b38 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afa:	f7ff fc04 	bl	8007306 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afe:	f7fc fd99 	bl	8004634 <HAL_GetTick>
 8007b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b06:	f7fc fd95 	bl	8004634 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e012      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1ef      	bne.n	8007b06 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <HAL_RCC_OscConfig+0x6e4>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	60cb      	str	r3, [r1, #12]
 8007b36:	e001      	b.n	8007b3c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3734      	adds	r7, #52	; 0x34
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd90      	pop	{r4, r7, pc}
 8007b46:	bf00      	nop
 8007b48:	eefefffc 	.word	0xeefefffc

08007b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e12d      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b60:	4b98      	ldr	r3, [pc, #608]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d91b      	bls.n	8007ba6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6e:	4b95      	ldr	r3, [pc, #596]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f023 0207 	bic.w	r2, r3, #7
 8007b76:	4993      	ldr	r1, [pc, #588]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7e:	f7fc fd59 	bl	8004634 <HAL_GetTick>
 8007b82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b84:	e008      	b.n	8007b98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b86:	f7fc fd55 	bl	8004634 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e111      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b98:	4b8a      	ldr	r3, [pc, #552]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d1ef      	bne.n	8007b86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d016      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff fb13 	bl	80071e2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007bbc:	f7fc fd3a 	bl	8004634 <HAL_GetTick>
 8007bc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007bc4:	f7fc fd36 	bl	8004634 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e0f2      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007bd6:	f7ff fbe8 	bl	80073aa <LL_RCC_IsActiveFlag_HPRE>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f1      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d016      	beq.n	8007c1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fb0a 	bl	800720a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007bf6:	f7fc fd1d 	bl	8004634 <HAL_GetTick>
 8007bfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007bfc:	e008      	b.n	8007c10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007bfe:	f7fc fd19 	bl	8004634 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e0d5      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007c10:	f7ff fbdd 	bl	80073ce <LL_RCC_IsActiveFlag_C2HPRE>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f1      	beq.n	8007bfe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d016      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fb03 	bl	8007236 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c30:	f7fc fd00 	bl	8004634 <HAL_GetTick>
 8007c34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c38:	f7fc fcfc 	bl	8004634 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e0b8      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007c4a:	f7ff fbd3 	bl	80073f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f1      	beq.n	8007c38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d016      	beq.n	8007c8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fafd 	bl	8007264 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c6a:	f7fc fce3 	bl	8004634 <HAL_GetTick>
 8007c6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c72:	f7fc fcdf 	bl	8004634 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e09b      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007c84:	f7ff fbc9 	bl	800741a <LL_RCC_IsActiveFlag_PPRE1>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f1      	beq.n	8007c72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d017      	beq.n	8007cca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff faf3 	bl	800728c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ca6:	f7fc fcc5 	bl	8004634 <HAL_GetTick>
 8007caa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007cae:	f7fc fcc1 	bl	8004634 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e07d      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007cc0:	f7ff fbbd 	bl	800743e <LL_RCC_IsActiveFlag_PPRE2>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f1      	beq.n	8007cae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d043      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d106      	bne.n	8007cec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007cde:	f7ff f893 	bl	8006e08 <LL_RCC_HSE_IsReady>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d11e      	bne.n	8007d26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e067      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d106      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007cf4:	f7ff fb16 	bl	8007324 <LL_RCC_PLL_IsReady>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d113      	bne.n	8007d26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e05c      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d106      	bne.n	8007d18 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007d0a:	f7ff f9fb 	bl	8007104 <LL_RCC_MSI_IsReady>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d108      	bne.n	8007d26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e051      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007d18:	f7ff f8a6 	bl	8006e68 <LL_RCC_HSI_IsReady>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e04a      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fa39 	bl	80071a2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d30:	f7fc fc80 	bl	8004634 <HAL_GetTick>
 8007d34:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d36:	e00a      	b.n	8007d4e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d38:	f7fc fc7c 	bl	8004634 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e036      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4e:	f7ff fa3c 	bl	80071ca <LL_RCC_GetSysClkSource>
 8007d52:	4602      	mov	r2, r0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d1ec      	bne.n	8007d38 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d5e:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d21b      	bcs.n	8007da4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6c:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f023 0207 	bic.w	r2, r3, #7
 8007d74:	4913      	ldr	r1, [pc, #76]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7c:	f7fc fc5a 	bl	8004634 <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007d84:	f7fc fc56 	bl	8004634 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e012      	b.n	8007dbc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCC_ClockConfig+0x278>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d1ef      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007da4:	f000 f87e 	bl	8007ea4 <HAL_RCC_GetHCLKFreq>
 8007da8:	4603      	mov	r3, r0
 8007daa:	4a07      	ldr	r2, [pc, #28]	; (8007dc8 <HAL_RCC_ClockConfig+0x27c>)
 8007dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007dae:	f7fc fc4d 	bl	800464c <HAL_GetTickPrio>
 8007db2:	4603      	mov	r3, r0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fc fbef 	bl	8004598 <HAL_InitTick>
 8007dba:	4603      	mov	r3, r0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	58004000 	.word	0x58004000
 8007dc8:	2000002c 	.word	0x2000002c

08007dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dcc:	b590      	push	{r4, r7, lr}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dd2:	f7ff f9fa 	bl	80071ca <LL_RCC_GetSysClkSource>
 8007dd6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007dde:	f7ff f9b6 	bl	800714e <LL_RCC_MSI_GetRange>
 8007de2:	4603      	mov	r3, r0
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	4a2b      	ldr	r2, [pc, #172]	; (8007e98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	e04b      	b.n	8007e8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d102      	bne.n	8007e00 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dfa:	4b28      	ldr	r3, [pc, #160]	; (8007e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e045      	b.n	8007e8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	d10a      	bne.n	8007e1c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e06:	f7fe ffcf 	bl	8006da8 <LL_RCC_HSE_IsEnabledDiv2>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d102      	bne.n	8007e16 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007e10:	4b22      	ldr	r3, [pc, #136]	; (8007e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e03a      	b.n	8007e8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	e037      	b.n	8007e8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007e1c:	f7ff fab9 	bl	8007392 <LL_RCC_PLL_GetMainSource>
 8007e20:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d003      	beq.n	8007e30 <HAL_RCC_GetSysClockFreq+0x64>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d003      	beq.n	8007e36 <HAL_RCC_GetSysClockFreq+0x6a>
 8007e2e:	e00d      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007e30:	4b1a      	ldr	r3, [pc, #104]	; (8007e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007e32:	60bb      	str	r3, [r7, #8]
        break;
 8007e34:	e015      	b.n	8007e62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e36:	f7fe ffb7 	bl	8006da8 <LL_RCC_HSE_IsEnabledDiv2>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d102      	bne.n	8007e46 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007e40:	4b16      	ldr	r3, [pc, #88]	; (8007e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007e42:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007e44:	e00d      	b.n	8007e62 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007e46:	4b16      	ldr	r3, [pc, #88]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007e48:	60bb      	str	r3, [r7, #8]
        break;
 8007e4a:	e00a      	b.n	8007e62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007e4c:	f7ff f97f 	bl	800714e <LL_RCC_MSI_GetRange>
 8007e50:	4603      	mov	r3, r0
 8007e52:	091b      	lsrs	r3, r3, #4
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	4a0f      	ldr	r2, [pc, #60]	; (8007e98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5e:	60bb      	str	r3, [r7, #8]
        break;
 8007e60:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007e62:	f7ff fa71 	bl	8007348 <LL_RCC_PLL_GetN>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	fb03 f402 	mul.w	r4, r3, r2
 8007e6e:	f7ff fa84 	bl	800737a <LL_RCC_PLL_GetDivider>
 8007e72:	4603      	mov	r3, r0
 8007e74:	091b      	lsrs	r3, r3, #4
 8007e76:	3301      	adds	r3, #1
 8007e78:	fbb4 f4f3 	udiv	r4, r4, r3
 8007e7c:	f7ff fa71 	bl	8007362 <LL_RCC_PLL_GetR>
 8007e80:	4603      	mov	r3, r0
 8007e82:	0f5b      	lsrs	r3, r3, #29
 8007e84:	3301      	adds	r3, #1
 8007e86:	fbb4 f3f3 	udiv	r3, r4, r3
 8007e8a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd90      	pop	{r4, r7, pc}
 8007e96:	bf00      	nop
 8007e98:	080135dc 	.word	0x080135dc
 8007e9c:	00f42400 	.word	0x00f42400
 8007ea0:	01e84800 	.word	0x01e84800

08007ea4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ea4:	b598      	push	{r3, r4, r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007ea8:	f7ff ff90 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 8007eac:	4604      	mov	r4, r0
 8007eae:	f7ff fa01 	bl	80072b4 <LL_RCC_GetAHBPrescaler>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	091b      	lsrs	r3, r3, #4
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	4a03      	ldr	r2, [pc, #12]	; (8007ec8 <HAL_RCC_GetHCLKFreq+0x24>)
 8007ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	bd98      	pop	{r3, r4, r7, pc}
 8007ec8:	0801359c 	.word	0x0801359c

08007ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2bb0      	cmp	r3, #176	; 0xb0
 8007ed8:	d903      	bls.n	8007ee2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e007      	b.n	8007ef2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	4a11      	ldr	r2, [pc, #68]	; (8007f30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007ef2:	f7ff f9eb 	bl	80072cc <LL_RCC_GetAHB4Prescaler>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	091b      	lsrs	r3, r3, #4
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	; (8007f38 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	0c9c      	lsrs	r4, r3, #18
 8007f16:	f7fe ff29 	bl	8006d6c <HAL_PWREx_GetVoltageRange>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 f80c 	bl	8007f3c <RCC_SetFlashLatency>
 8007f24:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd90      	pop	{r4, r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	080135dc 	.word	0x080135dc
 8007f34:	0801359c 	.word	0x0801359c
 8007f38:	431bde83 	.word	0x431bde83

08007f3c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007f3c:	b590      	push	{r4, r7, lr}
 8007f3e:	b093      	sub	sp, #76	; 0x4c
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007f46:	4b37      	ldr	r3, [pc, #220]	; (8008024 <RCC_SetFlashLatency+0xe8>)
 8007f48:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007f52:	4a35      	ldr	r2, [pc, #212]	; (8008028 <RCC_SetFlashLatency+0xec>)
 8007f54:	f107 031c 	add.w	r3, r7, #28
 8007f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007f5e:	4b33      	ldr	r3, [pc, #204]	; (800802c <RCC_SetFlashLatency+0xf0>)
 8007f60:	f107 040c 	add.w	r4, r7, #12
 8007f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f74:	d11a      	bne.n	8007fac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007f76:	2300      	movs	r3, #0
 8007f78:	643b      	str	r3, [r7, #64]	; 0x40
 8007f7a:	e013      	b.n	8007fa4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	3348      	adds	r3, #72	; 0x48
 8007f82:	443b      	add	r3, r7
 8007f84:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d807      	bhi.n	8007f9e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	3348      	adds	r3, #72	; 0x48
 8007f94:	443b      	add	r3, r7
 8007f96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007f9a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007f9c:	e020      	b.n	8007fe0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d9e8      	bls.n	8007f7c <RCC_SetFlashLatency+0x40>
 8007faa:	e019      	b.n	8007fe0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007fac:	2300      	movs	r3, #0
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb0:	e013      	b.n	8007fda <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	3348      	adds	r3, #72	; 0x48
 8007fb8:	443b      	add	r3, r7
 8007fba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d807      	bhi.n	8007fd4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	3348      	adds	r3, #72	; 0x48
 8007fca:	443b      	add	r3, r7
 8007fcc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007fd0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007fd2:	e005      	b.n	8007fe0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d9e8      	bls.n	8007fb2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007fe0:	4b13      	ldr	r3, [pc, #76]	; (8008030 <RCC_SetFlashLatency+0xf4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f023 0207 	bic.w	r2, r3, #7
 8007fe8:	4911      	ldr	r1, [pc, #68]	; (8008030 <RCC_SetFlashLatency+0xf4>)
 8007fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fec:	4313      	orrs	r3, r2
 8007fee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ff0:	f7fc fb20 	bl	8004634 <HAL_GetTick>
 8007ff4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ff6:	e008      	b.n	800800a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ff8:	f7fc fb1c 	bl	8004634 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d901      	bls.n	800800a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e007      	b.n	800801a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <RCC_SetFlashLatency+0xf4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008014:	429a      	cmp	r2, r3
 8008016:	d1ef      	bne.n	8007ff8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	374c      	adds	r7, #76	; 0x4c
 800801e:	46bd      	mov	sp, r7
 8008020:	bd90      	pop	{r4, r7, pc}
 8008022:	bf00      	nop
 8008024:	080133bc 	.word	0x080133bc
 8008028:	080133cc 	.word	0x080133cc
 800802c:	080133d8 	.word	0x080133d8
 8008030:	58004000 	.word	0x58004000

08008034 <LL_RCC_LSE_IsEnabled>:
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <LL_RCC_LSE_IsEnabled+0x18>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <LL_RCC_LSE_IsEnabled+0x1a>
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <LL_RCC_LSE_IsReady>:
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800805c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b02      	cmp	r3, #2
 800806a:	d101      	bne.n	8008070 <LL_RCC_LSE_IsReady+0x18>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <LL_RCC_LSE_IsReady+0x1a>
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <LL_RCC_SetRFWKPClockSource>:
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800808c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4313      	orrs	r3, r2
 8008098:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <LL_RCC_SetSMPSClockSource>:
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80080b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	f023 0203 	bic.w	r2, r3, #3
 80080ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <LL_RCC_SetSMPSPrescaler>:
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80080d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	624b      	str	r3, [r1, #36]	; 0x24
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <LL_RCC_SetUSARTClockSource>:
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008108:	f023 0203 	bic.w	r2, r3, #3
 800810c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4313      	orrs	r3, r2
 8008114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <LL_RCC_SetLPUARTClockSource>:
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800812c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008134:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4313      	orrs	r3, r2
 8008140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <LL_RCC_SetI2CClockSource>:
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	091b      	lsrs	r3, r3, #4
 8008164:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008168:	43db      	mvns	r3, r3
 800816a:	401a      	ands	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008178:	4313      	orrs	r3, r2
 800817a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <LL_RCC_SetLPTIMClockSource>:
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008196:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	43db      	mvns	r3, r3
 80081a2:	401a      	ands	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	041b      	lsls	r3, r3, #16
 80081a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <LL_RCC_SetSAIClockSource>:
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80081c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4313      	orrs	r3, r2
 80081da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <LL_RCC_SetRNGClockSource>:
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80081f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80081fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <LL_RCC_SetCLK48ClockSource>:
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800821e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800822a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4313      	orrs	r3, r2
 8008232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <LL_RCC_SetUSBClockSource>:
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff ffe3 	bl	8008216 <LL_RCC_SetCLK48ClockSource>
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <LL_RCC_SetADCClockSource>:
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008268:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800826c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <LL_RCC_SetRTCClockSource>:
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800828c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4313      	orrs	r3, r2
 80082a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <LL_RCC_GetRTCClockSource>:
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80082b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <LL_RCC_ForceBackupDomainReset>:
{
 80082ca:	b480      	push	{r7}
 80082cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80082ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80082e2:	bf00      	nop
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <LL_RCC_ReleaseBackupDomainReset>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80082f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008304:	bf00      	nop
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <LL_RCC_PLLSAI1_Enable>:
{
 800830e:	b480      	push	{r7}
 8008310:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800831c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008320:	6013      	str	r3, [r2, #0]
}
 8008322:	bf00      	nop
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <LL_RCC_PLLSAI1_Disable>:
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800833a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800833e:	6013      	str	r3, [r2, #0]
}
 8008340:	bf00      	nop
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <LL_RCC_PLLSAI1_IsReady>:
{
 800834a:	b480      	push	{r7}
 800834c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800834e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800835c:	d101      	bne.n	8008362 <LL_RCC_PLLSAI1_IsReady+0x18>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <LL_APB1_GRP1_ForceReset>:
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8008376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800837a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4313      	orrs	r3, r2
 8008384:	638b      	str	r3, [r1, #56]	; 0x38
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <LL_APB1_GRP1_ReleaseReset>:
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800839a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800839e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	43db      	mvns	r3, r3
 80083a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083a8:	4013      	ands	r3, r2
 80083aa:	638b      	str	r3, [r1, #56]	; 0x38
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80083c0:	2300      	movs	r3, #0
 80083c2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80083c4:	2300      	movs	r3, #0
 80083c6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d034      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083dc:	d021      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80083de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083e2:	d81b      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083e8:	d01d      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80083ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ee:	d815      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00b      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x54>
 80083f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f8:	d110      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80083fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008408:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800840a:	e00d      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3304      	adds	r3, #4
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f981 	bl	8008718 <RCCEx_PLLSAI1_ConfigNP>
 8008416:	4603      	mov	r3, r0
 8008418:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800841a:	e005      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	77fb      	strb	r3, [r7, #31]
        break;
 8008420:	e002      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008422:	bf00      	nop
 8008424:	e000      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008428:	7ffb      	ldrb	r3, [r7, #31]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff fec3 	bl	80081be <LL_RCC_SetSAIClockSource>
 8008438:	e001      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843a:	7ffb      	ldrb	r3, [r7, #31]
 800843c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008446:	2b00      	cmp	r3, #0
 8008448:	d046      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800844a:	f7ff ff31 	bl	80082b0 <LL_RCC_GetRTCClockSource>
 800844e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	429a      	cmp	r2, r3
 8008458:	d03c      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800845a:	f7fe fc77 	bl	8006d4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d105      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff ff0b 	bl	8008284 <LL_RCC_SetRTCClockSource>
 800846e:	e02e      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008478:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800847a:	f7ff ff26 	bl	80082ca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800847e:	f7ff ff35 	bl	80082ec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800849a:	f7ff fdcb 	bl	8008034 <LL_RCC_LSE_IsEnabled>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d114      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084a4:	f7fc f8c6 	bl	8004634 <HAL_GetTick>
 80084a8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80084aa:	e00b      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ac:	f7fc f8c2 	bl	8004634 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d902      	bls.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	77fb      	strb	r3, [r7, #31]
              break;
 80084c2:	e004      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80084c4:	f7ff fdc8 	bl	8008058 <LL_RCC_LSE_IsReady>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d1ee      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80084ce:	7ffb      	ldrb	r3, [r7, #31]
 80084d0:	77bb      	strb	r3, [r7, #30]
 80084d2:	e001      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d4:	7ffb      	ldrb	r3, [r7, #31]
 80084d6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fe05 	bl	80080f8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fe10 	bl	8008124 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fe38 	bl	800818a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fe2d 	bl	800818a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d004      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff fe05 	bl	8008150 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fdfa 	bl	8008150 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d022      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fe68 	bl	8008242 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800857a:	d107      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800857c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800858a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008594:	d10b      	bne.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3304      	adds	r3, #4
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f917 	bl	80087ce <RCCEx_PLLSAI1_ConfigNQ>
 80085a0:	4603      	mov	r3, r0
 80085a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80085a4:	7ffb      	ldrb	r3, [r7, #31]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80085aa:	7ffb      	ldrb	r3, [r7, #31]
 80085ac:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d02b      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c2:	d008      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085cc:	d003      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fe05 	bl	80081ea <LL_RCC_SetRNGClockSource>
 80085e0:	e00a      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	2000      	movs	r0, #0
 80085ee:	f7ff fdfc 	bl	80081ea <LL_RCC_SetRNGClockSource>
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7ff fe0f 	bl	8008216 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008600:	d107      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800860c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008610:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800861a:	2b00      	cmp	r3, #0
 800861c:	d022      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fe18 	bl	8008258 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008630:	d107      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800863c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008640:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800864a:	d10b      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f917 	bl	8008884 <RCCEx_PLLSAI1_ConfigNR>
 8008656:	4603      	mov	r3, r0
 8008658:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800865a:	7ffb      	ldrb	r3, [r7, #31]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008660:	7ffb      	ldrb	r3, [r7, #31]
 8008662:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d004      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fd01 	bl	800807c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d009      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fd20 	bl	80080d0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fd07 	bl	80080a8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800869a:	7fbb      	ldrb	r3, [r7, #30]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3720      	adds	r7, #32
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80086ac:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80086b0:	f7ff fe5d 	bl	800836e <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80086b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80086b8:	f7ff fe6b 	bl	8008392 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	041b      	lsls	r3, r3, #16
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80086e4:	4a0b      	ldr	r2, [pc, #44]	; (8008714 <HAL_RCCEx_CRSConfig+0x70>)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <HAL_RCCEx_CRSConfig+0x70>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	4906      	ldr	r1, [pc, #24]	; (8008714 <HAL_RCCEx_CRSConfig+0x70>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80086fe:	4b05      	ldr	r3, [pc, #20]	; (8008714 <HAL_RCCEx_CRSConfig+0x70>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a04      	ldr	r2, [pc, #16]	; (8008714 <HAL_RCCEx_CRSConfig+0x70>)
 8008704:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008708:	6013      	str	r3, [r2, #0]
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40006000 	.word	0x40006000

08008718 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008724:	f7ff fe02 	bl	800832c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008728:	f7fb ff84 	bl	8004634 <HAL_GetTick>
 800872c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800872e:	e009      	b.n	8008744 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008730:	f7fb ff80 	bl	8004634 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d902      	bls.n	8008744 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
      break;
 8008742:	e004      	b.n	800874e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008744:	f7ff fe01 	bl	800834a <LL_RCC_PLLSAI1_IsReady>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1f0      	bne.n	8008730 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d137      	bne.n	80087c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008768:	4313      	orrs	r3, r2
 800876a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800876c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800877e:	4313      	orrs	r3, r2
 8008780:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008782:	f7ff fdc4 	bl	800830e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008786:	f7fb ff55 	bl	8004634 <HAL_GetTick>
 800878a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800878c:	e009      	b.n	80087a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800878e:	f7fb ff51 	bl	8004634 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d902      	bls.n	80087a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	73fb      	strb	r3, [r7, #15]
        break;
 80087a0:	e004      	b.n	80087ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80087a2:	f7ff fdd2 	bl	800834a <LL_RCC_PLLSAI1_IsReady>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d1f0      	bne.n	800878e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d108      	bne.n	80087c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80087b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087c0:	4313      	orrs	r3, r2
 80087c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80087da:	f7ff fda7 	bl	800832c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80087de:	f7fb ff29 	bl	8004634 <HAL_GetTick>
 80087e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80087e4:	e009      	b.n	80087fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087e6:	f7fb ff25 	bl	8004634 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d902      	bls.n	80087fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	73fb      	strb	r3, [r7, #15]
      break;
 80087f8:	e004      	b.n	8008804 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80087fa:	f7ff fda6 	bl	800834a <LL_RCC_PLLSAI1_IsReady>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1f0      	bne.n	80087e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d137      	bne.n	800887a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800880a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800881e:	4313      	orrs	r3, r2
 8008820:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008834:	4313      	orrs	r3, r2
 8008836:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008838:	f7ff fd69 	bl	800830e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800883c:	f7fb fefa 	bl	8004634 <HAL_GetTick>
 8008840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008842:	e009      	b.n	8008858 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008844:	f7fb fef6 	bl	8004634 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d902      	bls.n	8008858 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	73fb      	strb	r3, [r7, #15]
        break;
 8008856:	e004      	b.n	8008862 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008858:	f7ff fd77 	bl	800834a <LL_RCC_PLLSAI1_IsReady>
 800885c:	4603      	mov	r3, r0
 800885e:	2b01      	cmp	r3, #1
 8008860:	d1f0      	bne.n	8008844 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d108      	bne.n	800887a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008876:	4313      	orrs	r3, r2
 8008878:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008890:	f7ff fd4c 	bl	800832c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008894:	f7fb fece 	bl	8004634 <HAL_GetTick>
 8008898:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800889a:	e009      	b.n	80088b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800889c:	f7fb feca 	bl	8004634 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d902      	bls.n	80088b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	73fb      	strb	r3, [r7, #15]
      break;
 80088ae:	e004      	b.n	80088ba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80088b0:	f7ff fd4b 	bl	800834a <LL_RCC_PLLSAI1_IsReady>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f0      	bne.n	800889c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d137      	bne.n	8008930 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80088c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088d4:	4313      	orrs	r3, r2
 80088d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80088d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088ea:	4313      	orrs	r3, r2
 80088ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80088ee:	f7ff fd0e 	bl	800830e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f2:	f7fb fe9f 	bl	8004634 <HAL_GetTick>
 80088f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80088f8:	e009      	b.n	800890e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088fa:	f7fb fe9b 	bl	8004634 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d902      	bls.n	800890e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	73fb      	strb	r3, [r7, #15]
        break;
 800890c:	e004      	b.n	8008918 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800890e:	f7ff fd1c 	bl	800834a <LL_RCC_PLLSAI1_IsReady>
 8008912:	4603      	mov	r3, r0
 8008914:	2b01      	cmp	r3, #1
 8008916:	d1f0      	bne.n	80088fa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d108      	bne.n	8008930 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800891e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800892c:	4313      	orrs	r3, r2
 800892e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e027      	b.n	800899c <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7a5b      	ldrb	r3, [r3, #9]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7f9 fe25 	bl	80025ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f023 0120 	bic.w	r1, r3, #32
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f042 0204 	orr.w	r2, r2, #4
 800898c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e090      	b.n	8008ad8 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7f9 fe18 	bl	8002600 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	22ca      	movs	r2, #202	; 0xca
 80089de:	625a      	str	r2, [r3, #36]	; 0x24
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2253      	movs	r2, #83	; 0x53
 80089e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f89f 	bl	8008b2c <RTC_EnterInitMode>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d009      	beq.n	8008a08 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	22ff      	movs	r2, #255	; 0xff
 80089fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2204      	movs	r2, #4
 8008a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e067      	b.n	8008ad8 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6812      	ldr	r2, [r2, #0]
 8008a12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a1a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6899      	ldr	r1, [r3, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	68d2      	ldr	r2, [r2, #12]
 8008a42:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6919      	ldr	r1, [r3, #16]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	041a      	lsls	r2, r3, #16
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a66:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0203 	bic.w	r2, r2, #3
 8008a76:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69da      	ldr	r2, [r3, #28]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d113      	bne.n	8008ac6 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f81e 	bl	8008ae0 <HAL_RTC_WaitForSynchro>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00d      	beq.n	8008ac6 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	22ff      	movs	r2, #255	; 0xff
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e008      	b.n	8008ad8 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	22ff      	movs	r2, #255	; 0xff
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
  }
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008af6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008af8:	f7fb fd9c 	bl	8004634 <HAL_GetTick>
 8008afc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008afe:	e009      	b.n	8008b14 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b00:	f7fb fd98 	bl	8004634 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b0e:	d901      	bls.n	8008b14 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e007      	b.n	8008b24 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0ee      	beq.n	8008b00 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d119      	bne.n	8008b76 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008b4c:	f7fb fd72 	bl	8004634 <HAL_GetTick>
 8008b50:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008b52:	e009      	b.n	8008b68 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008b54:	f7fb fd6e 	bl	8004634 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b62:	d901      	bls.n	8008b68 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e007      	b.n	8008b78 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0ee      	beq.n	8008b54 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e0a8      	b.n	8008cec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	22ca      	movs	r2, #202	; 0xca
 8008bb0:	625a      	str	r2, [r3, #36]	; 0x24
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2253      	movs	r2, #83	; 0x53
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d020      	beq.n	8008c0a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8008bc8:	f7fb fd34 	bl	8004634 <HAL_GetTick>
 8008bcc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008bce:	e015      	b.n	8008bfc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008bd0:	f7fb fd30 	bl	8004634 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bde:	d90d      	bls.n	8008bfc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	22ff      	movs	r2, #255	; 0xff
 8008be6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2203      	movs	r2, #3
 8008bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e077      	b.n	8008cec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e2      	bne.n	8008bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c18:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008c2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008c2c:	f7fb fd02 	bl	8004634 <HAL_GetTick>
 8008c30:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008c32:	e015      	b.n	8008c60 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c34:	f7fb fcfe 	bl	8004634 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c42:	d90d      	bls.n	8008c60 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	22ff      	movs	r2, #255	; 0xff
 8008c4a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e045      	b.n	8008cec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f003 0304 	and.w	r3, r3, #4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0e2      	beq.n	8008c34 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0207 	bic.w	r2, r2, #7
 8008c84:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6899      	ldr	r1, [r3, #8]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008c96:	4b17      	ldr	r3, [pc, #92]	; (8008cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c9c:	4a15      	ldr	r2, [pc, #84]	; (8008cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ca2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008ca6:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a12      	ldr	r2, [pc, #72]	; (8008cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cb0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cc0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cd0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	22ff      	movs	r2, #255	; 0xff
 8008cd8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	58000800 	.word	0x58000800

08008cf8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_RTCEx_EnableBypassShadow+0x16>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e024      	b.n	8008d58 <HAL_RTCEx_EnableBypassShadow+0x60>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	22ca      	movs	r2, #202	; 0xca
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2253      	movs	r2, #83	; 0x53
 8008d2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f042 0220 	orr.w	r2, r2, #32
 8008d3c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	22ff      	movs	r2, #255	; 0xff
 8008d44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08a      	sub	sp, #40	; 0x28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d17a      	bne.n	8008e72 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_UART_Transmit_DMA+0x24>
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e073      	b.n	8008e74 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d101      	bne.n	8008d9a <HAL_UART_Transmit_DMA+0x36>
 8008d96:	2302      	movs	r3, #2
 8008d98:	e06c      	b.n	8008e74 <HAL_UART_Transmit_DMA+0x110>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	88fa      	ldrh	r2, [r7, #6]
 8008dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	88fa      	ldrh	r2, [r7, #6]
 8008db4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2221      	movs	r2, #33	; 0x21
 8008dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d02c      	beq.n	8008e2a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dd4:	4a29      	ldr	r2, [pc, #164]	; (8008e7c <HAL_UART_Transmit_DMA+0x118>)
 8008dd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ddc:	4a28      	ldr	r2, [pc, #160]	; (8008e80 <HAL_UART_Transmit_DMA+0x11c>)
 8008dde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008de4:	4a27      	ldr	r2, [pc, #156]	; (8008e84 <HAL_UART_Transmit_DMA+0x120>)
 8008de6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dec:	2200      	movs	r2, #0
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df8:	4619      	mov	r1, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3328      	adds	r3, #40	; 0x28
 8008e00:	461a      	mov	r2, r3
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	f7fb fdd3 	bl	80049ae <HAL_DMA_Start_IT>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00d      	beq.n	8008e2a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2210      	movs	r2, #16
 8008e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e024      	b.n	8008e74 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2240      	movs	r2, #64	; 0x40
 8008e30:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5a:	623a      	str	r2, [r7, #32]
 8008e5c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	69f9      	ldr	r1, [r7, #28]
 8008e60:	6a3a      	ldr	r2, [r7, #32]
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e5      	bne.n	8008e3a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e000      	b.n	8008e74 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008e72:	2302      	movs	r3, #2
  }
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3728      	adds	r7, #40	; 0x28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	08009647 	.word	0x08009647
 8008e80:	080096e1 	.word	0x080096e1
 8008e84:	080096fd 	.word	0x080096fd

08008e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b0ba      	sub	sp, #232	; 0xe8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008eae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008eb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d11b      	bne.n	8008efc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec8:	f003 0320 	and.w	r3, r3, #32
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d015      	beq.n	8008efc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d105      	bne.n	8008ee8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 82d6 	beq.w	800949e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	4798      	blx	r3
      }
      return;
 8008efa:	e2d0      	b.n	800949e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 811f 	beq.w	8009144 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008f0a:	4b8b      	ldr	r3, [pc, #556]	; (8009138 <HAL_UART_IRQHandler+0x2b0>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f16:	4b89      	ldr	r3, [pc, #548]	; (800913c <HAL_UART_IRQHandler+0x2b4>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 8112 	beq.w	8009144 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d011      	beq.n	8008f50 <HAL_UART_IRQHandler+0xc8>
 8008f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f46:	f043 0201 	orr.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d011      	beq.n	8008f80 <HAL_UART_IRQHandler+0xf8>
 8008f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f76:	f043 0204 	orr.w	r2, r3, #4
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d011      	beq.n	8008fb0 <HAL_UART_IRQHandler+0x128>
 8008f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2204      	movs	r2, #4
 8008f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa6:	f043 0202 	orr.w	r2, r3, #2
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb4:	f003 0308 	and.w	r3, r3, #8
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d017      	beq.n	8008fec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d105      	bne.n	8008fd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fcc:	4b5a      	ldr	r3, [pc, #360]	; (8009138 <HAL_UART_IRQHandler+0x2b0>)
 8008fce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2208      	movs	r2, #8
 8008fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe2:	f043 0208 	orr.w	r2, r3, #8
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d012      	beq.n	800901e <HAL_UART_IRQHandler+0x196>
 8008ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00c      	beq.n	800901e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800900c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009014:	f043 0220 	orr.w	r2, r3, #32
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 823c 	beq.w	80094a2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800902a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b00      	cmp	r3, #0
 8009034:	d013      	beq.n	800905e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d105      	bne.n	800904e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d005      	beq.n	8009082 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800907a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800907e:	2b00      	cmp	r3, #0
 8009080:	d04f      	beq.n	8009122 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa79 	bl	800957a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009092:	2b40      	cmp	r3, #64	; 0x40
 8009094:	d141      	bne.n	800911a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3308      	adds	r3, #8
 800909c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3308      	adds	r3, #8
 80090be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1d9      	bne.n	8009096 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d013      	beq.n	8009112 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090ee:	4a14      	ldr	r2, [pc, #80]	; (8009140 <HAL_UART_IRQHandler+0x2b8>)
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fb fd33 	bl	8004b62 <HAL_DMA_Abort_IT>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d017      	beq.n	8009132 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800910c:	4610      	mov	r0, r2
 800910e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	e00f      	b.n	8009132 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9da 	bl	80094cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009118:	e00b      	b.n	8009132 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9d6 	bl	80094cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009120:	e007      	b.n	8009132 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9d2 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009130:	e1b7      	b.n	80094a2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009132:	bf00      	nop
    return;
 8009134:	e1b5      	b.n	80094a2 <HAL_UART_IRQHandler+0x61a>
 8009136:	bf00      	nop
 8009138:	10000001 	.word	0x10000001
 800913c:	04000120 	.word	0x04000120
 8009140:	0800977d 	.word	0x0800977d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009148:	2b01      	cmp	r3, #1
 800914a:	f040 814a 	bne.w	80093e2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	f003 0310 	and.w	r3, r3, #16
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8143 	beq.w	80093e2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800915c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 813c 	beq.w	80093e2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2210      	movs	r2, #16
 8009170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917c:	2b40      	cmp	r3, #64	; 0x40
 800917e:	f040 80b5 	bne.w	80092ec <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800918e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8187 	beq.w	80094a6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800919e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a2:	429a      	cmp	r2, r3
 80091a4:	f080 817f 	bcs.w	80094a6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f040 8086 	bne.w	80092d0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1da      	bne.n	80091c4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3308      	adds	r3, #8
 8009214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800921e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009220:	f023 0301 	bic.w	r3, r3, #1
 8009224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3308      	adds	r3, #8
 800922e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800923a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e1      	bne.n	800920e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800925a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800925c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800926e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800927c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e3      	bne.n	800924a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800929e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a0:	f023 0310 	bic.w	r3, r3, #16
 80092a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80092b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e4      	bne.n	8009290 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fb fbea 	bl	8004aa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092dc:	b29b      	uxth	r3, r3
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8fb 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80092ea:	e0dc      	b.n	80094a6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009306:	b29b      	uxth	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80ce 	beq.w	80094aa <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800930e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80c9 	beq.w	80094aa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800932c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800933a:	647b      	str	r3, [r7, #68]	; 0x44
 800933c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e4      	bne.n	8009318 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3308      	adds	r3, #8
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	623b      	str	r3, [r7, #32]
   return(result);
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009364:	f023 0301 	bic.w	r3, r3, #1
 8009368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3308      	adds	r3, #8
 8009372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009376:	633a      	str	r2, [r7, #48]	; 0x30
 8009378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800937c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e1      	bne.n	800934e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0310 	bic.w	r3, r3, #16
 80093b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	69b9      	ldr	r1, [r7, #24]
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	617b      	str	r3, [r7, #20]
   return(result);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e4      	bne.n	800939e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f880 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80093e0:	e063      	b.n	80094aa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00e      	beq.n	800940c <HAL_UART_IRQHandler+0x584>
 80093ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d008      	beq.n	800940c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009402:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f9fa 	bl	80097fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800940a:	e051      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009414:	2b00      	cmp	r3, #0
 8009416:	d014      	beq.n	8009442 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d008      	beq.n	8009442 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009434:	2b00      	cmp	r3, #0
 8009436:	d03a      	beq.n	80094ae <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
    }
    return;
 8009440:	e035      	b.n	80094ae <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b00      	cmp	r3, #0
 800944c:	d009      	beq.n	8009462 <HAL_UART_IRQHandler+0x5da>
 800944e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f9a4 	bl	80097a8 <UART_EndTransmit_IT>
    return;
 8009460:	e026      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <HAL_UART_IRQHandler+0x5fa>
 800946e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009472:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f9d3 	bl	8009826 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009480:	e016      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d010      	beq.n	80094b0 <HAL_UART_IRQHandler+0x628>
 800948e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009492:	2b00      	cmp	r3, #0
 8009494:	da0c      	bge.n	80094b0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9bb 	bl	8009812 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800949c:	e008      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
      return;
 800949e:	bf00      	nop
 80094a0:	e006      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
    return;
 80094a2:	bf00      	nop
 80094a4:	e004      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
      return;
 80094a6:	bf00      	nop
 80094a8:	e002      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
      return;
 80094aa:	bf00      	nop
 80094ac:	e000      	b.n	80094b0 <HAL_UART_IRQHandler+0x628>
    return;
 80094ae:	bf00      	nop
  }
}
 80094b0:	37e8      	adds	r7, #232	; 0xe8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop

080094b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b08f      	sub	sp, #60	; 0x3c
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	61fb      	str	r3, [r7, #28]
   return(result);
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009514:	637b      	str	r3, [r7, #52]	; 0x34
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009520:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e6      	bne.n	8009500 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	60bb      	str	r3, [r7, #8]
   return(result);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009548:	633b      	str	r3, [r7, #48]	; 0x30
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3308      	adds	r3, #8
 8009550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009552:	61ba      	str	r2, [r7, #24]
 8009554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	6979      	ldr	r1, [r7, #20]
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	613b      	str	r3, [r7, #16]
   return(result);
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e5      	bne.n	8009532 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800956e:	bf00      	nop
 8009570:	373c      	adds	r7, #60	; 0x3c
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800957a:	b480      	push	{r7}
 800957c:	b095      	sub	sp, #84	; 0x54
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a0:	643b      	str	r3, [r7, #64]	; 0x40
 80095a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3308      	adds	r3, #8
 80095ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ca:	f023 0301 	bic.w	r3, r3, #1
 80095ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3308      	adds	r3, #8
 80095d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e3      	bne.n	80095b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d118      	bne.n	8009626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	60bb      	str	r3, [r7, #8]
   return(result);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f023 0310 	bic.w	r3, r3, #16
 8009608:	647b      	str	r3, [r7, #68]	; 0x44
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009612:	61bb      	str	r3, [r7, #24]
 8009614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6979      	ldr	r1, [r7, #20]
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	613b      	str	r3, [r7, #16]
   return(result);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e6      	bne.n	80095f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	671a      	str	r2, [r3, #112]	; 0x70
}
 800963a:	bf00      	nop
 800963c:	3754      	adds	r7, #84	; 0x54
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b090      	sub	sp, #64	; 0x40
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b00      	cmp	r3, #0
 8009660:	d137      	bne.n	80096d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009664:	2200      	movs	r2, #0
 8009666:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800966a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	623b      	str	r3, [r7, #32]
   return(result);
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009680:	63bb      	str	r3, [r7, #56]	; 0x38
 8009682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800968a:	633a      	str	r2, [r7, #48]	; 0x30
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e5      	bne.n	800966a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800969e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b2:	637b      	str	r3, [r7, #52]	; 0x34
 80096b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096bc:	61fb      	str	r3, [r7, #28]
 80096be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	69b9      	ldr	r1, [r7, #24]
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	617b      	str	r3, [r7, #20]
   return(result);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e6      	bne.n	800969e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096d0:	e002      	b.n	80096d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80096d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80096d4:	f7f8 fca6 	bl	8002024 <HAL_UART_TxCpltCallback>
}
 80096d8:	bf00      	nop
 80096da:	3740      	adds	r7, #64	; 0x40
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7ff fee2 	bl	80094b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f4:	bf00      	nop
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009710:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009718:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d109      	bne.n	800973c <UART_DMAError+0x40>
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b21      	cmp	r3, #33	; 0x21
 800972c:	d106      	bne.n	800973c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2200      	movs	r2, #0
 8009732:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009736:	6978      	ldr	r0, [r7, #20]
 8009738:	f7ff fede 	bl	80094f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009746:	2b40      	cmp	r3, #64	; 0x40
 8009748:	d109      	bne.n	800975e <UART_DMAError+0x62>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b22      	cmp	r3, #34	; 0x22
 800974e:	d106      	bne.n	800975e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2200      	movs	r2, #0
 8009754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009758:	6978      	ldr	r0, [r7, #20]
 800975a:	f7ff ff0e 	bl	800957a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009764:	f043 0210 	orr.w	r2, r3, #16
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800976e:	6978      	ldr	r0, [r7, #20]
 8009770:	f7ff feac 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009774:	bf00      	nop
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff fe96 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097c4:	61fb      	str	r3, [r7, #28]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6979      	ldr	r1, [r7, #20]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	613b      	str	r3, [r7, #16]
   return(result);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e6      	bne.n	80097b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7f8 fc17 	bl	8002024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097f6:	bf00      	nop
 80097f8:	3720      	adds	r7, #32
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097fe:	b480      	push	{r7}
 8009800:	b083      	sub	sp, #12
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009806:	bf00      	nop
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800981a:	bf00      	nop
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800984a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800984e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009870:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800987c:	b29a      	uxth	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	b29b      	uxth	r3, r3
 8009882:	43db      	mvns	r3, r3
 8009884:	b29b      	uxth	r3, r3
 8009886:	4013      	ands	r3, r2
 8009888:	b29a      	uxth	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800989e:	b084      	sub	sp, #16
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	f107 0014 	add.w	r0, r7, #20
 80098ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	b004      	add	sp, #16
 80098de:	4770      	bx	lr

080098e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b09d      	sub	sp, #116	; 0x74
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009906:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	78db      	ldrb	r3, [r3, #3]
 800990e:	2b03      	cmp	r3, #3
 8009910:	d81f      	bhi.n	8009952 <USB_ActivateEndpoint+0x72>
 8009912:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <USB_ActivateEndpoint+0x38>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	08009929 	.word	0x08009929
 800991c:	08009945 	.word	0x08009945
 8009920:	0800995b 	.word	0x0800995b
 8009924:	08009937 	.word	0x08009937
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009928:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800992c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009930:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009934:	e012      	b.n	800995c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009936:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800993a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800993e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009942:	e00b      	b.n	800995c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009944:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800994c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009950:	e004      	b.n	800995c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009958:	e000      	b.n	800995c <USB_ActivateEndpoint+0x7c>
      break;
 800995a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	441a      	add	r2, r3
 8009966:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800996a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997a:	b29b      	uxth	r3, r3
 800997c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b29b      	uxth	r3, r3
 800998c:	b21b      	sxth	r3, r3
 800998e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009996:	b21a      	sxth	r2, r3
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b21b      	sxth	r3, r3
 800999e:	4313      	orrs	r3, r2
 80099a0:	b21b      	sxth	r3, r3
 80099a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	441a      	add	r2, r3
 80099b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80099b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	7b1b      	ldrb	r3, [r3, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f040 816e 	bne.w	8009cae <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	785b      	ldrb	r3, [r3, #1]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 8084 	beq.w	8009ae4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	61bb      	str	r3, [r7, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	461a      	mov	r2, r3
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	4413      	add	r3, r2
 80099ee:	61bb      	str	r3, [r7, #24]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	00da      	lsls	r2, r3, #3
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	88db      	ldrh	r3, [r3, #6]
 8009a04:	085b      	lsrs	r3, r3, #1
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	827b      	strh	r3, [r7, #18]
 8009a1e:	8a7b      	ldrh	r3, [r7, #18]
 8009a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01b      	beq.n	8009a60 <USB_ActivateEndpoint+0x180>
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3e:	823b      	strh	r3, [r7, #16]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	441a      	add	r2, r3
 8009a4a:	8a3b      	ldrh	r3, [r7, #16]
 8009a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	78db      	ldrb	r3, [r3, #3]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d020      	beq.n	8009aaa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a7e:	81bb      	strh	r3, [r7, #12]
 8009a80:	89bb      	ldrh	r3, [r7, #12]
 8009a82:	f083 0320 	eor.w	r3, r3, #32
 8009a86:	81bb      	strh	r3, [r7, #12]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	441a      	add	r2, r3
 8009a92:	89bb      	ldrh	r3, [r7, #12]
 8009a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	8013      	strh	r3, [r2, #0]
 8009aa8:	e2cb      	b.n	800a042 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac0:	81fb      	strh	r3, [r7, #14]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	441a      	add	r2, r3
 8009acc:	89fb      	ldrh	r3, [r7, #14]
 8009ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	8013      	strh	r3, [r2, #0]
 8009ae2:	e2ae      	b.n	800a042 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	461a      	mov	r2, r3
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	4413      	add	r3, r2
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	00da      	lsls	r2, r3, #3
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	4413      	add	r3, r2
 8009b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	88db      	ldrh	r3, [r3, #6]
 8009b0c:	085b      	lsrs	r3, r3, #1
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	461a      	mov	r2, r3
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	4413      	add	r3, r2
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	00da      	lsls	r2, r3, #3
 8009b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b34:	4413      	add	r3, r2
 8009b36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	2b3e      	cmp	r3, #62	; 0x3e
 8009b42:	d918      	bls.n	8009b76 <USB_ActivateEndpoint+0x296>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	095b      	lsrs	r3, r3, #5
 8009b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	f003 031f 	and.w	r3, r3, #31
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <USB_ActivateEndpoint+0x27e>
 8009b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	029b      	lsls	r3, r3, #10
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	801a      	strh	r2, [r3, #0]
 8009b74:	e029      	b.n	8009bca <USB_ActivateEndpoint+0x2ea>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d112      	bne.n	8009ba4 <USB_ActivateEndpoint+0x2c4>
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	801a      	strh	r2, [r3, #0]
 8009ba2:	e012      	b.n	8009bca <USB_ActivateEndpoint+0x2ea>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	085b      	lsrs	r3, r3, #1
 8009baa:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <USB_ActivateEndpoint+0x2de>
 8009bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bba:	3301      	adds	r3, #1
 8009bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	029b      	lsls	r3, r3, #10
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01b      	beq.n	8009c1a <USB_ActivateEndpoint+0x33a>
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf8:	843b      	strh	r3, [r7, #32]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	441a      	add	r2, r3
 8009c04:	8c3b      	ldrh	r3, [r7, #32]
 8009c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d124      	bne.n	8009c6c <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c38:	83bb      	strh	r3, [r7, #28]
 8009c3a:	8bbb      	ldrh	r3, [r7, #28]
 8009c3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c40:	83bb      	strh	r3, [r7, #28]
 8009c42:	8bbb      	ldrh	r3, [r7, #28]
 8009c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c48:	83bb      	strh	r3, [r7, #28]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	441a      	add	r2, r3
 8009c54:	8bbb      	ldrh	r3, [r7, #28]
 8009c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	8013      	strh	r3, [r2, #0]
 8009c6a:	e1ea      	b.n	800a042 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c82:	83fb      	strh	r3, [r7, #30]
 8009c84:	8bfb      	ldrh	r3, [r7, #30]
 8009c86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c8a:	83fb      	strh	r3, [r7, #30]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	441a      	add	r2, r3
 8009c96:	8bfb      	ldrh	r3, [r7, #30]
 8009c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	8013      	strh	r3, [r2, #0]
 8009cac:	e1c9      	b.n	800a042 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	78db      	ldrb	r3, [r3, #3]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d11e      	bne.n	8009cf4 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ccc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	441a      	add	r2, r3
 8009cda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	8013      	strh	r3, [r2, #0]
 8009cf2:	e01d      	b.n	8009d30 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	441a      	add	r2, r3
 8009d18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d40:	4413      	add	r3, r2
 8009d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	00da      	lsls	r2, r3, #3
 8009d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	891b      	ldrh	r3, [r3, #8]
 8009d58:	085b      	lsrs	r3, r3, #1
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d62:	801a      	strh	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	657b      	str	r3, [r7, #84]	; 0x54
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d74:	4413      	add	r3, r2
 8009d76:	657b      	str	r3, [r7, #84]	; 0x54
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	00da      	lsls	r2, r3, #3
 8009d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d80:	4413      	add	r3, r2
 8009d82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d86:	653b      	str	r3, [r7, #80]	; 0x50
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	895b      	ldrh	r3, [r3, #10]
 8009d8c:	085b      	lsrs	r3, r3, #1
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	005b      	lsls	r3, r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 8093 	bne.w	8009ec8 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009db2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d01b      	beq.n	8009df6 <USB_ActivateEndpoint+0x516>
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	441a      	add	r2, r3
 8009de0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009e04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d01b      	beq.n	8009e46 <USB_ActivateEndpoint+0x566>
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e24:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	441a      	add	r2, r3
 8009e30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e64:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e6c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	441a      	add	r2, r3
 8009e78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ea4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	441a      	add	r2, r3
 8009eb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	8013      	strh	r3, [r2, #0]
 8009ec6:	e0bc      	b.n	800a042 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d01d      	beq.n	8009f20 <USB_ActivateEndpoint+0x640>
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009efa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	441a      	add	r2, r3
 8009f08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	881b      	ldrh	r3, [r3, #0]
 8009f2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009f30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01d      	beq.n	8009f78 <USB_ActivateEndpoint+0x698>
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	441a      	add	r2, r3
 8009f60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	78db      	ldrb	r3, [r3, #3]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d024      	beq.n	8009fca <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	881b      	ldrh	r3, [r3, #0]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f9e:	f083 0320 	eor.w	r3, r3, #32
 8009fa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	441a      	add	r2, r3
 8009fb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	8013      	strh	r3, [r2, #0]
 8009fc8:	e01d      	b.n	800a006 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fe0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	441a      	add	r2, r3
 8009fee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a002:	b29b      	uxth	r3, r3
 800a004:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	441a      	add	r2, r3
 800a02a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a02e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03e:	b29b      	uxth	r3, r3
 800a040:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a042:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a046:	4618      	mov	r0, r3
 800a048:	3774      	adds	r7, #116	; 0x74
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop

0800a054 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a054:	b480      	push	{r7}
 800a056:	b08d      	sub	sp, #52	; 0x34
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	7b1b      	ldrb	r3, [r3, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f040 808e 	bne.w	800a184 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	785b      	ldrb	r3, [r3, #1]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d044      	beq.n	800a0fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	81bb      	strh	r3, [r7, #12]
 800a07e:	89bb      	ldrh	r3, [r7, #12]
 800a080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a084:	2b00      	cmp	r3, #0
 800a086:	d01b      	beq.n	800a0c0 <USB_DeactivateEndpoint+0x6c>
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	b29b      	uxth	r3, r3
 800a096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09e:	817b      	strh	r3, [r7, #10]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	441a      	add	r2, r3
 800a0aa:	897b      	ldrh	r3, [r7, #10]
 800a0ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d6:	813b      	strh	r3, [r7, #8]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	441a      	add	r2, r3
 800a0e2:	893b      	ldrh	r3, [r7, #8]
 800a0e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	8013      	strh	r3, [r2, #0]
 800a0f8:	e192      	b.n	800a420 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	827b      	strh	r3, [r7, #18]
 800a108:	8a7b      	ldrh	r3, [r7, #18]
 800a10a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01b      	beq.n	800a14a <USB_DeactivateEndpoint+0xf6>
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a128:	823b      	strh	r3, [r7, #16]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	441a      	add	r2, r3
 800a134:	8a3b      	ldrh	r3, [r7, #16]
 800a136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a13a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a13e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a146:	b29b      	uxth	r3, r3
 800a148:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	b29b      	uxth	r3, r3
 800a158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a15c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a160:	81fb      	strh	r3, [r7, #14]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	441a      	add	r2, r3
 800a16c:	89fb      	ldrh	r3, [r7, #14]
 800a16e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a17a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17e:	b29b      	uxth	r3, r3
 800a180:	8013      	strh	r3, [r2, #0]
 800a182:	e14d      	b.n	800a420 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f040 80a5 	bne.w	800a2d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	843b      	strh	r3, [r7, #32]
 800a19c:	8c3b      	ldrh	r3, [r7, #32]
 800a19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01b      	beq.n	800a1de <USB_DeactivateEndpoint+0x18a>
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1bc:	83fb      	strh	r3, [r7, #30]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	441a      	add	r2, r3
 800a1c8:	8bfb      	ldrh	r3, [r7, #30]
 800a1ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	83bb      	strh	r3, [r7, #28]
 800a1ec:	8bbb      	ldrh	r3, [r7, #28]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d01b      	beq.n	800a22e <USB_DeactivateEndpoint+0x1da>
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20c:	837b      	strh	r3, [r7, #26]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	441a      	add	r2, r3
 800a218:	8b7b      	ldrh	r3, [r7, #26]
 800a21a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a21e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a244:	833b      	strh	r3, [r7, #24]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	441a      	add	r2, r3
 800a250:	8b3b      	ldrh	r3, [r7, #24]
 800a252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a25a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a25e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a262:	b29b      	uxth	r3, r3
 800a264:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	881b      	ldrh	r3, [r3, #0]
 800a272:	b29b      	uxth	r3, r3
 800a274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27c:	82fb      	strh	r3, [r7, #22]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	441a      	add	r2, r3
 800a288:	8afb      	ldrh	r3, [r7, #22]
 800a28a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a28e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b4:	82bb      	strh	r3, [r7, #20]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	441a      	add	r2, r3
 800a2c0:	8abb      	ldrh	r3, [r7, #20]
 800a2c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	8013      	strh	r3, [r2, #0]
 800a2d6:	e0a3      	b.n	800a420 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01b      	beq.n	800a328 <USB_DeactivateEndpoint+0x2d4>
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	881b      	ldrh	r3, [r3, #0]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a306:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	441a      	add	r2, r3
 800a312:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a31c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a324:	b29b      	uxth	r3, r3
 800a326:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a336:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01b      	beq.n	800a378 <USB_DeactivateEndpoint+0x324>
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a356:	853b      	strh	r3, [r7, #40]	; 0x28
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	441a      	add	r2, r3
 800a362:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a36c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a374:	b29b      	uxth	r3, r3
 800a376:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a38e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	441a      	add	r2, r3
 800a39a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a39c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	441a      	add	r2, r3
 800a3d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fe:	847b      	strh	r3, [r7, #34]	; 0x22
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	441a      	add	r2, r3
 800a40a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a40c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3734      	adds	r7, #52	; 0x34
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b0c2      	sub	sp, #264	; 0x108
 800a432:	af00      	add	r7, sp, #0
 800a434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a43c:	6018      	str	r0, [r3, #0]
 800a43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a446:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	785b      	ldrb	r3, [r3, #1]
 800a454:	2b01      	cmp	r3, #1
 800a456:	f040 867b 	bne.w	800b150 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	699a      	ldr	r2, [r3, #24]
 800a466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	429a      	cmp	r2, r3
 800a474:	d908      	bls.n	800a488 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a486:	e007      	b.n	800a498 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	7b1b      	ldrb	r3, [r3, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d13a      	bne.n	800a51e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a4a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	6959      	ldr	r1, [r3, #20]
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	88da      	ldrh	r2, [r3, #6]
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4ce:	6800      	ldr	r0, [r0, #0]
 800a4d0:	f001 fc1d 	bl	800bd0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	613b      	str	r3, [r7, #16]
 800a4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	00da      	lsls	r2, r3, #3
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	4413      	add	r3, r2
 800a50a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a514:	b29a      	uxth	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	801a      	strh	r2, [r3, #0]
 800a51a:	f000 bde3 	b.w	800b0e4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	78db      	ldrb	r3, [r3, #3]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	f040 843a 	bne.w	800ada4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6a1a      	ldr	r2, [r3, #32]
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	429a      	cmp	r2, r3
 800a54a:	f240 83b7 	bls.w	800acbc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a574:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	441a      	add	r2, r3
 800a592:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a59a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a59e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6a1a      	ldr	r2, [r3, #32]
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ba:	1ad2      	subs	r2, r2, r3
 800a5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	881b      	ldrh	r3, [r3, #0]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 81b3 	beq.w	800a956 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	633b      	str	r3, [r7, #48]	; 0x30
 800a5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	785b      	ldrb	r3, [r3, #1]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d16d      	bne.n	800a6e8 <USB_EPStartXfer+0x2ba>
 800a60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	62bb      	str	r3, [r7, #40]	; 0x28
 800a618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a626:	b29b      	uxth	r3, r3
 800a628:	461a      	mov	r2, r3
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	4413      	add	r3, r2
 800a62e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	00da      	lsls	r2, r3, #3
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	4413      	add	r3, r2
 800a642:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a646:	627b      	str	r3, [r7, #36]	; 0x24
 800a648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64c:	2b3e      	cmp	r3, #62	; 0x3e
 800a64e:	d91c      	bls.n	800a68a <USB_EPStartXfer+0x25c>
 800a650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a654:	095b      	lsrs	r3, r3, #5
 800a656:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	2b00      	cmp	r3, #0
 800a664:	d104      	bne.n	800a670 <USB_EPStartXfer+0x242>
 800a666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a66a:	3b01      	subs	r3, #1
 800a66c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a670:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a674:	b29b      	uxth	r3, r3
 800a676:	029b      	lsls	r3, r3, #10
 800a678:	b29b      	uxth	r3, r3
 800a67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a682:	b29a      	uxth	r2, r3
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	801a      	strh	r2, [r3, #0]
 800a688:	e053      	b.n	800a732 <USB_EPStartXfer+0x304>
 800a68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d112      	bne.n	800a6b8 <USB_EPStartXfer+0x28a>
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	b29b      	uxth	r3, r3
 800a698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	801a      	strh	r2, [r3, #0]
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	e03c      	b.n	800a732 <USB_EPStartXfer+0x304>
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6bc:	085b      	lsrs	r3, r3, #1
 800a6be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d004      	beq.n	800a6d8 <USB_EPStartXfer+0x2aa>
 800a6ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	029b      	lsls	r3, r3, #10
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	801a      	strh	r2, [r3, #0]
 800a6e6:	e024      	b.n	800a732 <USB_EPStartXfer+0x304>
 800a6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d11c      	bne.n	800a732 <USB_EPStartXfer+0x304>
 800a6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a706:	b29b      	uxth	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	4413      	add	r3, r2
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30
 800a710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	00da      	lsls	r2, r3, #3
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	4413      	add	r3, r2
 800a722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	895b      	ldrh	r3, [r3, #10]
 800a73e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6959      	ldr	r1, [r3, #20]
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a752:	b29b      	uxth	r3, r3
 800a754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a758:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a75c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a760:	6800      	ldr	r0, [r0, #0]
 800a762:	f001 fad4 	bl	800bd0e <USB_WritePMA>
            ep->xfer_buff += len;
 800a766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	695a      	ldr	r2, [r3, #20]
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a776:	441a      	add	r2, r3
 800a778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6a1a      	ldr	r2, [r3, #32]
 800a790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d90f      	bls.n	800a7c0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6a1a      	ldr	r2, [r3, #32]
 800a7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b0:	1ad2      	subs	r2, r2, r3
 800a7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	621a      	str	r2, [r3, #32]
 800a7be:	e00e      	b.n	800a7de <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	785b      	ldrb	r3, [r3, #1]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d16d      	bne.n	800a8ca <USB_EPStartXfer+0x49c>
 800a7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a808:	b29b      	uxth	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	4413      	add	r3, r2
 800a810:	61bb      	str	r3, [r7, #24]
 800a812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	00da      	lsls	r2, r3, #3
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	4413      	add	r3, r2
 800a824:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a828:	617b      	str	r3, [r7, #20]
 800a82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82e:	2b3e      	cmp	r3, #62	; 0x3e
 800a830:	d91c      	bls.n	800a86c <USB_EPStartXfer+0x43e>
 800a832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a840:	f003 031f 	and.w	r3, r3, #31
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <USB_EPStartXfer+0x424>
 800a848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a84c:	3b01      	subs	r3, #1
 800a84e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a856:	b29b      	uxth	r3, r3
 800a858:	029b      	lsls	r3, r3, #10
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a864:	b29a      	uxth	r2, r3
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	801a      	strh	r2, [r3, #0]
 800a86a:	e059      	b.n	800a920 <USB_EPStartXfer+0x4f2>
 800a86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a870:	2b00      	cmp	r3, #0
 800a872:	d112      	bne.n	800a89a <USB_EPStartXfer+0x46c>
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a87e:	b29a      	uxth	r2, r3
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	801a      	strh	r2, [r3, #0]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	b29b      	uxth	r3, r3
 800a88a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a88e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a892:	b29a      	uxth	r2, r3
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	801a      	strh	r2, [r3, #0]
 800a898:	e042      	b.n	800a920 <USB_EPStartXfer+0x4f2>
 800a89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89e:	085b      	lsrs	r3, r3, #1
 800a8a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <USB_EPStartXfer+0x48c>
 800a8b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	029b      	lsls	r3, r3, #10
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	801a      	strh	r2, [r3, #0]
 800a8c8:	e02a      	b.n	800a920 <USB_EPStartXfer+0x4f2>
 800a8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	785b      	ldrb	r3, [r3, #1]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d122      	bne.n	800a920 <USB_EPStartXfer+0x4f2>
 800a8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	623b      	str	r3, [r7, #32]
 800a8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	623b      	str	r3, [r7, #32]
 800a8fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	00da      	lsls	r2, r3, #3
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	4413      	add	r3, r2
 800a910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a914:	61fb      	str	r3, [r7, #28]
 800a916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	891b      	ldrh	r3, [r3, #8]
 800a92c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	6959      	ldr	r1, [r3, #20]
 800a93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a940:	b29b      	uxth	r3, r3
 800a942:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a946:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a94a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a94e:	6800      	ldr	r0, [r0, #0]
 800a950:	f001 f9dd 	bl	800bd0e <USB_WritePMA>
 800a954:	e3c6      	b.n	800b0e4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	785b      	ldrb	r3, [r3, #1]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d16d      	bne.n	800aa42 <USB_EPStartXfer+0x614>
 800a966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a96a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	64bb      	str	r3, [r7, #72]	; 0x48
 800a972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a980:	b29b      	uxth	r3, r3
 800a982:	461a      	mov	r2, r3
 800a984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a986:	4413      	add	r3, r2
 800a988:	64bb      	str	r3, [r7, #72]	; 0x48
 800a98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	00da      	lsls	r2, r3, #3
 800a998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a99a:	4413      	add	r3, r2
 800a99c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9a0:	647b      	str	r3, [r7, #68]	; 0x44
 800a9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a6:	2b3e      	cmp	r3, #62	; 0x3e
 800a9a8:	d91c      	bls.n	800a9e4 <USB_EPStartXfer+0x5b6>
 800a9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ae:	095b      	lsrs	r3, r3, #5
 800a9b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b8:	f003 031f 	and.w	r3, r3, #31
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d104      	bne.n	800a9ca <USB_EPStartXfer+0x59c>
 800a9c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	029b      	lsls	r3, r3, #10
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e0:	801a      	strh	r2, [r3, #0]
 800a9e2:	e059      	b.n	800aa98 <USB_EPStartXfer+0x66a>
 800a9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d112      	bne.n	800aa12 <USB_EPStartXfer+0x5e4>
 800a9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fa:	801a      	strh	r2, [r3, #0]
 800a9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa0e:	801a      	strh	r2, [r3, #0]
 800aa10:	e042      	b.n	800aa98 <USB_EPStartXfer+0x66a>
 800aa12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <USB_EPStartXfer+0x604>
 800aa28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	029b      	lsls	r3, r3, #10
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	e02a      	b.n	800aa98 <USB_EPStartXfer+0x66a>
 800aa42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	785b      	ldrb	r3, [r3, #1]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d122      	bne.n	800aa98 <USB_EPStartXfer+0x66a>
 800aa52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	653b      	str	r3, [r7, #80]	; 0x50
 800aa5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	461a      	mov	r2, r3
 800aa70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa72:	4413      	add	r3, r2
 800aa74:	653b      	str	r3, [r7, #80]	; 0x50
 800aa76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	00da      	lsls	r2, r3, #3
 800aa84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa86:	4413      	add	r3, r2
 800aa88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aa98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	891b      	ldrh	r3, [r3, #8]
 800aaa4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aaa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6959      	ldr	r1, [r3, #20]
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aabe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aac2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aac6:	6800      	ldr	r0, [r0, #0]
 800aac8:	f001 f921 	bl	800bd0e <USB_WritePMA>
            ep->xfer_buff += len;
 800aacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	695a      	ldr	r2, [r3, #20]
 800aad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aadc:	441a      	add	r2, r3
 800aade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aaea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6a1a      	ldr	r2, [r3, #32]
 800aaf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d90f      	bls.n	800ab26 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800ab06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6a1a      	ldr	r2, [r3, #32]
 800ab12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab16:	1ad2      	subs	r2, r2, r3
 800ab18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	621a      	str	r2, [r3, #32]
 800ab24:	e00e      	b.n	800ab44 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ab36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2200      	movs	r2, #0
 800ab42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	785b      	ldrb	r3, [r3, #1]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d16d      	bne.n	800ac3c <USB_EPStartXfer+0x80e>
 800ab60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	4413      	add	r3, r2
 800ab82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	00da      	lsls	r2, r3, #3
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	4413      	add	r3, r2
 800ab96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba0:	2b3e      	cmp	r3, #62	; 0x3e
 800aba2:	d91c      	bls.n	800abde <USB_EPStartXfer+0x7b0>
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	095b      	lsrs	r3, r3, #5
 800abaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb2:	f003 031f 	and.w	r3, r3, #31
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d104      	bne.n	800abc4 <USB_EPStartXfer+0x796>
 800abba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abbe:	3b01      	subs	r3, #1
 800abc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc8:	b29b      	uxth	r3, r3
 800abca:	029b      	lsls	r3, r3, #10
 800abcc:	b29b      	uxth	r3, r3
 800abce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abda:	801a      	strh	r2, [r3, #0]
 800abdc:	e053      	b.n	800ac86 <USB_EPStartXfer+0x858>
 800abde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d112      	bne.n	800ac0c <USB_EPStartXfer+0x7de>
 800abe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	b29b      	uxth	r3, r3
 800abec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf4:	801a      	strh	r2, [r3, #0]
 800abf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac08:	801a      	strh	r2, [r3, #0]
 800ac0a:	e03c      	b.n	800ac86 <USB_EPStartXfer+0x858>
 800ac0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac10:	085b      	lsrs	r3, r3, #1
 800ac12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d004      	beq.n	800ac2c <USB_EPStartXfer+0x7fe>
 800ac22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac26:	3301      	adds	r3, #1
 800ac28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	029b      	lsls	r3, r3, #10
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac38:	801a      	strh	r2, [r3, #0]
 800ac3a:	e024      	b.n	800ac86 <USB_EPStartXfer+0x858>
 800ac3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d11c      	bne.n	800ac86 <USB_EPStartXfer+0x858>
 800ac4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac60:	4413      	add	r3, r2
 800ac62:	643b      	str	r3, [r7, #64]	; 0x40
 800ac64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	00da      	lsls	r2, r3, #3
 800ac72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac74:	4413      	add	r3, r2
 800ac76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	895b      	ldrh	r3, [r3, #10]
 800ac92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6959      	ldr	r1, [r3, #20]
 800aca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800acac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800acb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acb4:	6800      	ldr	r0, [r0, #0]
 800acb6:	f001 f82a 	bl	800bd0e <USB_WritePMA>
 800acba:	e213      	b.n	800b0e4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800acbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6a1b      	ldr	r3, [r3, #32]
 800acc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800accc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800acee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800acf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	441a      	add	r2, r3
 800ad10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	461a      	mov	r2, r3
 800ad46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad48:	4413      	add	r3, r2
 800ad4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	00da      	lsls	r2, r3, #3
 800ad5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad62:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	891b      	ldrh	r3, [r3, #8]
 800ad7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6959      	ldr	r1, [r3, #20]
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad9c:	6800      	ldr	r0, [r0, #0]
 800ad9e:	f000 ffb6 	bl	800bd0e <USB_WritePMA>
 800ada2:	e19f      	b.n	800b0e4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ada4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6a1a      	ldr	r2, [r3, #32]
 800adb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb4:	1ad2      	subs	r2, r2, r3
 800adb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800adc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29b      	uxth	r3, r3
 800ade0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 80bc 	beq.w	800af62 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800adea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	673b      	str	r3, [r7, #112]	; 0x70
 800adf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	785b      	ldrb	r3, [r3, #1]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d16d      	bne.n	800aee2 <USB_EPStartXfer+0xab4>
 800ae06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	461a      	mov	r2, r3
 800ae24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae26:	4413      	add	r3, r2
 800ae28:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	00da      	lsls	r2, r3, #3
 800ae38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae40:	667b      	str	r3, [r7, #100]	; 0x64
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae46:	2b3e      	cmp	r3, #62	; 0x3e
 800ae48:	d91c      	bls.n	800ae84 <USB_EPStartXfer+0xa56>
 800ae4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4e:	095b      	lsrs	r3, r3, #5
 800ae50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae58:	f003 031f 	and.w	r3, r3, #31
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d104      	bne.n	800ae6a <USB_EPStartXfer+0xa3c>
 800ae60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae64:	3b01      	subs	r3, #1
 800ae66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	029b      	lsls	r3, r3, #10
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae80:	801a      	strh	r2, [r3, #0]
 800ae82:	e053      	b.n	800af2c <USB_EPStartXfer+0xafe>
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d112      	bne.n	800aeb2 <USB_EPStartXfer+0xa84>
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9a:	801a      	strh	r2, [r3, #0]
 800ae9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeae:	801a      	strh	r2, [r3, #0]
 800aeb0:	e03c      	b.n	800af2c <USB_EPStartXfer+0xafe>
 800aeb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb6:	085b      	lsrs	r3, r3, #1
 800aeb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d004      	beq.n	800aed2 <USB_EPStartXfer+0xaa4>
 800aec8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aecc:	3301      	adds	r3, #1
 800aece:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aed2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	029b      	lsls	r3, r3, #10
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aede:	801a      	strh	r2, [r3, #0]
 800aee0:	e024      	b.n	800af2c <USB_EPStartXfer+0xafe>
 800aee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	785b      	ldrb	r3, [r3, #1]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d11c      	bne.n	800af2c <USB_EPStartXfer+0xafe>
 800aef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af00:	b29b      	uxth	r3, r3
 800af02:	461a      	mov	r2, r3
 800af04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af06:	4413      	add	r3, r2
 800af08:	673b      	str	r3, [r7, #112]	; 0x70
 800af0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	00da      	lsls	r2, r3, #3
 800af18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af1a:	4413      	add	r3, r2
 800af1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af20:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af26:	b29a      	uxth	r2, r3
 800af28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800af2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	895b      	ldrh	r3, [r3, #10]
 800af38:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	6959      	ldr	r1, [r3, #20]
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af52:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af56:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af5a:	6800      	ldr	r0, [r0, #0]
 800af5c:	f000 fed7 	bl	800bd0e <USB_WritePMA>
 800af60:	e0c0      	b.n	800b0e4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d16d      	bne.n	800b04e <USB_EPStartXfer+0xc20>
 800af72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	461a      	mov	r2, r3
 800af90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af92:	4413      	add	r3, r2
 800af94:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	00da      	lsls	r2, r3, #3
 800afa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afa6:	4413      	add	r3, r2
 800afa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afac:	67bb      	str	r3, [r7, #120]	; 0x78
 800afae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb2:	2b3e      	cmp	r3, #62	; 0x3e
 800afb4:	d91c      	bls.n	800aff0 <USB_EPStartXfer+0xbc2>
 800afb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afba:	095b      	lsrs	r3, r3, #5
 800afbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc4:	f003 031f 	and.w	r3, r3, #31
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <USB_EPStartXfer+0xba8>
 800afcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800afd0:	3b01      	subs	r3, #1
 800afd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800afd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800afda:	b29b      	uxth	r3, r3
 800afdc:	029b      	lsls	r3, r3, #10
 800afde:	b29b      	uxth	r3, r3
 800afe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe8:	b29a      	uxth	r2, r3
 800afea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afec:	801a      	strh	r2, [r3, #0]
 800afee:	e05f      	b.n	800b0b0 <USB_EPStartXfer+0xc82>
 800aff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d112      	bne.n	800b01e <USB_EPStartXfer+0xbf0>
 800aff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	b29b      	uxth	r3, r3
 800affe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b002:	b29a      	uxth	r2, r3
 800b004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b006:	801a      	strh	r2, [r3, #0]
 800b008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b016:	b29a      	uxth	r2, r3
 800b018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b01a:	801a      	strh	r2, [r3, #0]
 800b01c:	e048      	b.n	800b0b0 <USB_EPStartXfer+0xc82>
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	085b      	lsrs	r3, r3, #1
 800b024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <USB_EPStartXfer+0xc10>
 800b034:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b038:	3301      	adds	r3, #1
 800b03a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b03e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b042:	b29b      	uxth	r3, r3
 800b044:	029b      	lsls	r3, r3, #10
 800b046:	b29a      	uxth	r2, r3
 800b048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b04a:	801a      	strh	r2, [r3, #0]
 800b04c:	e030      	b.n	800b0b0 <USB_EPStartXfer+0xc82>
 800b04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	785b      	ldrb	r3, [r3, #1]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d128      	bne.n	800b0b0 <USB_EPStartXfer+0xc82>
 800b05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b06c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	461a      	mov	r2, r3
 800b07e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b082:	4413      	add	r3, r2
 800b084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	00da      	lsls	r2, r3, #3
 800b096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b09a:	4413      	add	r3, r2
 800b09c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	891b      	ldrh	r3, [r3, #8]
 800b0bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6959      	ldr	r1, [r3, #20]
 800b0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b0d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0de:	6800      	ldr	r0, [r0, #0]
 800b0e0:	f000 fe15 	bl	800bd0e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	b29b      	uxth	r3, r3
 800b102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b10a:	817b      	strh	r3, [r7, #10]
 800b10c:	897b      	ldrh	r3, [r7, #10]
 800b10e:	f083 0310 	eor.w	r3, r3, #16
 800b112:	817b      	strh	r3, [r7, #10]
 800b114:	897b      	ldrh	r3, [r7, #10]
 800b116:	f083 0320 	eor.w	r3, r3, #32
 800b11a:	817b      	strh	r3, [r7, #10]
 800b11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	441a      	add	r2, r3
 800b136:	897b      	ldrh	r3, [r7, #10]
 800b138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b148:	b29b      	uxth	r3, r3
 800b14a:	8013      	strh	r3, [r2, #0]
 800b14c:	f000 bc9f 	b.w	800ba8e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	7b1b      	ldrb	r3, [r3, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f040 80ae 	bne.w	800b2be <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	699a      	ldr	r2, [r3, #24]
 800b16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d917      	bls.n	800b1ae <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	699a      	ldr	r2, [r3, #24]
 800b19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19e:	1ad2      	subs	r2, r2, r3
 800b1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	619a      	str	r2, [r3, #24]
 800b1ac:	e00e      	b.n	800b1cc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	00da      	lsls	r2, r3, #3
 800b204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b208:	4413      	add	r3, r2
 800b20a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b20e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b216:	2b3e      	cmp	r3, #62	; 0x3e
 800b218:	d91d      	bls.n	800b256 <USB_EPStartXfer+0xe28>
 800b21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b21e:	095b      	lsrs	r3, r3, #5
 800b220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b228:	f003 031f 	and.w	r3, r3, #31
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d104      	bne.n	800b23a <USB_EPStartXfer+0xe0c>
 800b230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b234:	3b01      	subs	r3, #1
 800b236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b23a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b23e:	b29b      	uxth	r3, r3
 800b240:	029b      	lsls	r3, r3, #10
 800b242:	b29b      	uxth	r3, r3
 800b244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b252:	801a      	strh	r2, [r3, #0]
 800b254:	e3e1      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
 800b256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d116      	bne.n	800b28c <USB_EPStartXfer+0xe5e>
 800b25e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b262:	881b      	ldrh	r3, [r3, #0]
 800b264:	b29b      	uxth	r3, r3
 800b266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b270:	801a      	strh	r2, [r3, #0]
 800b272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b27e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b282:	b29a      	uxth	r2, r3
 800b284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b288:	801a      	strh	r2, [r3, #0]
 800b28a:	e3c6      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
 800b28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b290:	085b      	lsrs	r3, r3, #1
 800b292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <USB_EPStartXfer+0xe7e>
 800b2a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	029b      	lsls	r3, r3, #10
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ba:	801a      	strh	r2, [r3, #0]
 800b2bc:	e3ad      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	78db      	ldrb	r3, [r3, #3]
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	f040 8200 	bne.w	800b6d0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8091 	bne.w	800b404 <USB_EPStartXfer+0xfd6>
 800b2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	461a      	mov	r2, r3
 800b302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b306:	4413      	add	r3, r2
 800b308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	00da      	lsls	r2, r3, #3
 800b31a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b31e:	4413      	add	r3, r2
 800b320:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	2b3e      	cmp	r3, #62	; 0x3e
 800b336:	d925      	bls.n	800b384 <USB_EPStartXfer+0xf56>
 800b338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	095b      	lsrs	r3, r3, #5
 800b346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 031f 	and.w	r3, r3, #31
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d104      	bne.n	800b368 <USB_EPStartXfer+0xf3a>
 800b35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b362:	3b01      	subs	r3, #1
 800b364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	029b      	lsls	r3, r3, #10
 800b370:	b29b      	uxth	r3, r3
 800b372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b380:	801a      	strh	r2, [r3, #0]
 800b382:	e074      	b.n	800b46e <USB_EPStartXfer+0x1040>
 800b384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d116      	bne.n	800b3c2 <USB_EPStartXfer+0xf94>
 800b394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3a6:	801a      	strh	r2, [r3, #0]
 800b3a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3be:	801a      	strh	r2, [r3, #0]
 800b3c0:	e055      	b.n	800b46e <USB_EPStartXfer+0x1040>
 800b3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	085b      	lsrs	r3, r3, #1
 800b3d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d004      	beq.n	800b3f2 <USB_EPStartXfer+0xfc4>
 800b3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	029b      	lsls	r3, r3, #10
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b400:	801a      	strh	r2, [r3, #0]
 800b402:	e034      	b.n	800b46e <USB_EPStartXfer+0x1040>
 800b404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	785b      	ldrb	r3, [r3, #1]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d12c      	bne.n	800b46e <USB_EPStartXfer+0x1040>
 800b414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b430:	b29b      	uxth	r3, r3
 800b432:	461a      	mov	r2, r3
 800b434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b438:	4413      	add	r3, r2
 800b43a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	00da      	lsls	r2, r3, #3
 800b44c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b450:	4413      	add	r3, r2
 800b452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	b29a      	uxth	r2, r3
 800b468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b46c:	801a      	strh	r2, [r3, #0]
 800b46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	785b      	ldrb	r3, [r3, #1]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f040 8091 	bne.w	800b5b0 <USB_EPStartXfer+0x1182>
 800b48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	00da      	lsls	r2, r3, #3
 800b4c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	2b3e      	cmp	r3, #62	; 0x3e
 800b4e2:	d925      	bls.n	800b530 <USB_EPStartXfer+0x1102>
 800b4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	095b      	lsrs	r3, r3, #5
 800b4f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	f003 031f 	and.w	r3, r3, #31
 800b506:	2b00      	cmp	r3, #0
 800b508:	d104      	bne.n	800b514 <USB_EPStartXfer+0x10e6>
 800b50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b50e:	3b01      	subs	r3, #1
 800b510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b518:	b29b      	uxth	r3, r3
 800b51a:	029b      	lsls	r3, r3, #10
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b526:	b29a      	uxth	r2, r3
 800b528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b52c:	801a      	strh	r2, [r3, #0]
 800b52e:	e06d      	b.n	800b60c <USB_EPStartXfer+0x11de>
 800b530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d116      	bne.n	800b56e <USB_EPStartXfer+0x1140>
 800b540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29b      	uxth	r3, r3
 800b548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b552:	801a      	strh	r2, [r3, #0]
 800b554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b564:	b29a      	uxth	r2, r3
 800b566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e04e      	b.n	800b60c <USB_EPStartXfer+0x11de>
 800b56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	085b      	lsrs	r3, r3, #1
 800b57c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	d004      	beq.n	800b59e <USB_EPStartXfer+0x1170>
 800b594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b598:	3301      	adds	r3, #1
 800b59a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	029b      	lsls	r3, r3, #10
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	e02d      	b.n	800b60c <USB_EPStartXfer+0x11de>
 800b5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	785b      	ldrb	r3, [r3, #1]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d125      	bne.n	800b60c <USB_EPStartXfer+0x11de>
 800b5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	00da      	lsls	r2, r3, #3
 800b5ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	b29a      	uxth	r2, r3
 800b606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b60a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	69db      	ldr	r3, [r3, #28]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 81fe 	beq.w	800ba1a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b63e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d005      	beq.n	800b656 <USB_EPStartXfer+0x1228>
 800b64a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10d      	bne.n	800b672 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b656:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b65a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f040 81db 	bne.w	800ba1a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b664:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f040 81d4 	bne.w	800ba1a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b698:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	441a      	add	r2, r3
 800b6b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b6ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	8013      	strh	r3, [r2, #0]
 800b6ce:	e1a4      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	78db      	ldrb	r3, [r3, #3]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	f040 819a 	bne.w	800ba16 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	699a      	ldr	r2, [r3, #24]
 800b6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d917      	bls.n	800b72e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699a      	ldr	r2, [r3, #24]
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	619a      	str	r2, [r3, #24]
 800b72c:	e00e      	b.n	800b74c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b73e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2200      	movs	r2, #0
 800b74a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d178      	bne.n	800b84e <USB_EPStartXfer+0x1420>
 800b75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b778:	b29b      	uxth	r3, r3
 800b77a:	461a      	mov	r2, r3
 800b77c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b780:	4413      	add	r3, r2
 800b782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	00da      	lsls	r2, r3, #3
 800b794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b798:	4413      	add	r3, r2
 800b79a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b79e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	2b3e      	cmp	r3, #62	; 0x3e
 800b7a8:	d91d      	bls.n	800b7e6 <USB_EPStartXfer+0x13b8>
 800b7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ae:	095b      	lsrs	r3, r3, #5
 800b7b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b8:	f003 031f 	and.w	r3, r3, #31
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <USB_EPStartXfer+0x139c>
 800b7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	029b      	lsls	r3, r3, #10
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7e2:	801a      	strh	r2, [r3, #0]
 800b7e4:	e064      	b.n	800b8b0 <USB_EPStartXfer+0x1482>
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d116      	bne.n	800b81c <USB_EPStartXfer+0x13ee>
 800b7ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b800:	801a      	strh	r2, [r3, #0]
 800b802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	b29b      	uxth	r3, r3
 800b80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b812:	b29a      	uxth	r2, r3
 800b814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b818:	801a      	strh	r2, [r3, #0]
 800b81a:	e049      	b.n	800b8b0 <USB_EPStartXfer+0x1482>
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b820:	085b      	lsrs	r3, r3, #1
 800b822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d004      	beq.n	800b83c <USB_EPStartXfer+0x140e>
 800b832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b836:	3301      	adds	r3, #1
 800b838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b840:	b29b      	uxth	r3, r3
 800b842:	029b      	lsls	r3, r3, #10
 800b844:	b29a      	uxth	r2, r3
 800b846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b84a:	801a      	strh	r2, [r3, #0]
 800b84c:	e030      	b.n	800b8b0 <USB_EPStartXfer+0x1482>
 800b84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	785b      	ldrb	r3, [r3, #1]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d128      	bne.n	800b8b0 <USB_EPStartXfer+0x1482>
 800b85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	461a      	mov	r2, r3
 800b87e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b882:	4413      	add	r3, r2
 800b884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	00da      	lsls	r2, r3, #3
 800b896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b89a:	4413      	add	r3, r2
 800b89c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	785b      	ldrb	r3, [r3, #1]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d178      	bne.n	800b9c0 <USB_EPStartXfer+0x1592>
 800b8ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	00da      	lsls	r2, r3, #3
 800b906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b90a:	4413      	add	r3, r2
 800b90c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b918:	2b3e      	cmp	r3, #62	; 0x3e
 800b91a:	d91d      	bls.n	800b958 <USB_EPStartXfer+0x152a>
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	095b      	lsrs	r3, r3, #5
 800b922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92a:	f003 031f 	and.w	r3, r3, #31
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d104      	bne.n	800b93c <USB_EPStartXfer+0x150e>
 800b932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b936:	3b01      	subs	r3, #1
 800b938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b93c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b940:	b29b      	uxth	r3, r3
 800b942:	029b      	lsls	r3, r3, #10
 800b944:	b29b      	uxth	r3, r3
 800b946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b94a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b94e:	b29a      	uxth	r2, r3
 800b950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b954:	801a      	strh	r2, [r3, #0]
 800b956:	e060      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d116      	bne.n	800b98e <USB_EPStartXfer+0x1560>
 800b960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	b29b      	uxth	r3, r3
 800b968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b972:	801a      	strh	r2, [r3, #0]
 800b974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b984:	b29a      	uxth	r2, r3
 800b986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b98a:	801a      	strh	r2, [r3, #0]
 800b98c:	e045      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
 800b98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b992:	085b      	lsrs	r3, r3, #1
 800b994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99c:	f003 0301 	and.w	r3, r3, #1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d004      	beq.n	800b9ae <USB_EPStartXfer+0x1580>
 800b9a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	029b      	lsls	r3, r3, #10
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9bc:	801a      	strh	r2, [r3, #0]
 800b9be:	e02c      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
 800b9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d124      	bne.n	800ba1a <USB_EPStartXfer+0x15ec>
 800b9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	00da      	lsls	r2, r3, #3
 800b9fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9fe:	4413      	add	r3, r2
 800ba00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba12:	801a      	strh	r2, [r3, #0]
 800ba14:	e001      	b.n	800ba1a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e03a      	b.n	800ba90 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	441a      	add	r2, r3
 800ba76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b085      	sub	sp, #20
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d020      	beq.n	800baee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800babe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bac2:	81bb      	strh	r3, [r7, #12]
 800bac4:	89bb      	ldrh	r3, [r7, #12]
 800bac6:	f083 0310 	eor.w	r3, r3, #16
 800baca:	81bb      	strh	r3, [r7, #12]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	441a      	add	r2, r3
 800bad6:	89bb      	ldrh	r3, [r7, #12]
 800bad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800badc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae8:	b29b      	uxth	r3, r3
 800baea:	8013      	strh	r3, [r2, #0]
 800baec:	e01f      	b.n	800bb2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb04:	81fb      	strh	r3, [r7, #14]
 800bb06:	89fb      	ldrh	r3, [r7, #14]
 800bb08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bb0c:	81fb      	strh	r3, [r7, #14]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	441a      	add	r2, r3
 800bb18:	89fb      	ldrh	r3, [r7, #14]
 800bb1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	7b1b      	ldrb	r3, [r3, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f040 809d 	bne.w	800bc8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d04c      	beq.n	800bbf2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	823b      	strh	r3, [r7, #16]
 800bb66:	8a3b      	ldrh	r3, [r7, #16]
 800bb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d01b      	beq.n	800bba8 <USB_EPClearStall+0x6c>
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb86:	81fb      	strh	r3, [r7, #14]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	441a      	add	r2, r3
 800bb92:	89fb      	ldrh	r3, [r7, #14]
 800bb94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	78db      	ldrb	r3, [r3, #3]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d06c      	beq.n	800bc8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc6:	81bb      	strh	r3, [r7, #12]
 800bbc8:	89bb      	ldrh	r3, [r7, #12]
 800bbca:	f083 0320 	eor.w	r3, r3, #32
 800bbce:	81bb      	strh	r3, [r7, #12]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	441a      	add	r2, r3
 800bbda:	89bb      	ldrh	r3, [r7, #12]
 800bbdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	8013      	strh	r3, [r2, #0]
 800bbf0:	e04b      	b.n	800bc8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	82fb      	strh	r3, [r7, #22]
 800bc00:	8afb      	ldrh	r3, [r7, #22]
 800bc02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d01b      	beq.n	800bc42 <USB_EPClearStall+0x106>
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc20:	82bb      	strh	r3, [r7, #20]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	441a      	add	r2, r3
 800bc2c:	8abb      	ldrh	r3, [r7, #20]
 800bc2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc58:	827b      	strh	r3, [r7, #18]
 800bc5a:	8a7b      	ldrh	r3, [r7, #18]
 800bc5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc60:	827b      	strh	r3, [r7, #18]
 800bc62:	8a7b      	ldrh	r3, [r7, #18]
 800bc64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc68:	827b      	strh	r3, [r7, #18]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	441a      	add	r2, r3
 800bc74:	8a7b      	ldrh	r3, [r7, #18]
 800bc76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	371c      	adds	r7, #28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bca4:	78fb      	ldrb	r3, [r7, #3]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d103      	bne.n	800bcb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2280      	movs	r2, #128	; 0x80
 800bcae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bd00:	68fb      	ldr	r3, [r7, #12]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b08b      	sub	sp, #44	; 0x2c
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	60f8      	str	r0, [r7, #12]
 800bd16:	60b9      	str	r1, [r7, #8]
 800bd18:	4611      	mov	r1, r2
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	80fb      	strh	r3, [r7, #6]
 800bd20:	4613      	mov	r3, r2
 800bd22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd24:	88bb      	ldrh	r3, [r7, #4]
 800bd26:	3301      	adds	r3, #1
 800bd28:	085b      	lsrs	r3, r3, #1
 800bd2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd34:	88fa      	ldrh	r2, [r7, #6]
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd3e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	627b      	str	r3, [r7, #36]	; 0x24
 800bd44:	e01b      	b.n	800bd7e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	021b      	lsls	r3, r3, #8
 800bd54:	b21a      	sxth	r2, r3
 800bd56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	b21b      	sxth	r3, r3
 800bd5e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bd60:	6a3b      	ldr	r3, [r7, #32]
 800bd62:	8a7a      	ldrh	r2, [r7, #18]
 800bd64:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	3302      	adds	r3, #2
 800bd6a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	3301      	adds	r3, #1
 800bd76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1e0      	bne.n	800bd46 <USB_WritePMA+0x38>
  }
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	372c      	adds	r7, #44	; 0x2c
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b08b      	sub	sp, #44	; 0x2c
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	461a      	mov	r2, r3
 800bda0:	460b      	mov	r3, r1
 800bda2:	80fb      	strh	r3, [r7, #6]
 800bda4:	4613      	mov	r3, r2
 800bda6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bda8:	88bb      	ldrh	r3, [r7, #4]
 800bdaa:	085b      	lsrs	r3, r3, #1
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bdb8:	88fa      	ldrh	r2, [r7, #6]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdc2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800bdc8:	e018      	b.n	800bdfc <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bdca:	6a3b      	ldr	r3, [r7, #32]
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	3302      	adds	r3, #2
 800bdd6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	3301      	adds	r3, #1
 800bde4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	0a1b      	lsrs	r3, r3, #8
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1e3      	bne.n	800bdca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800be02:	88bb      	ldrh	r3, [r7, #4]
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d007      	beq.n	800be1e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	b29b      	uxth	r3, r3
 800be14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	701a      	strb	r2, [r3, #0]
  }
}
 800be1e:	bf00      	nop
 800be20:	372c      	adds	r7, #44	; 0x2c
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be36:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be3a:	f005 fa1d 	bl	8011278 <malloc>
 800be3e:	4603      	mov	r3, r0
 800be40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d105      	bne.n	800be54 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800be50:	2302      	movs	r3, #2
 800be52:	e066      	b.n	800bf22 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	7c1b      	ldrb	r3, [r3, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d119      	bne.n	800be98 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be68:	2202      	movs	r2, #2
 800be6a:	2181      	movs	r1, #129	; 0x81
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f003 fe42 	bl	800faf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be7c:	2202      	movs	r2, #2
 800be7e:	2101      	movs	r1, #1
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f003 fe38 	bl	800faf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2210      	movs	r2, #16
 800be92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800be96:	e016      	b.n	800bec6 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be98:	2340      	movs	r3, #64	; 0x40
 800be9a:	2202      	movs	r2, #2
 800be9c:	2181      	movs	r1, #129	; 0x81
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f003 fe29 	bl	800faf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800beaa:	2340      	movs	r3, #64	; 0x40
 800beac:	2202      	movs	r2, #2
 800beae:	2101      	movs	r1, #1
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f003 fe20 	bl	800faf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2210      	movs	r2, #16
 800bec2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bec6:	2308      	movs	r3, #8
 800bec8:	2203      	movs	r2, #3
 800beca:	2182      	movs	r1, #130	; 0x82
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f003 fe12 	bl	800faf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7c1b      	ldrb	r3, [r3, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d109      	bne.n	800bf10 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf06:	2101      	movs	r1, #1
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f003 fe9c 	bl	800fc46 <USBD_LL_PrepareReceive>
 800bf0e:	e007      	b.n	800bf20 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf16:	2340      	movs	r3, #64	; 0x40
 800bf18:	2101      	movs	r1, #1
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f003 fe93 	bl	800fc46 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b082      	sub	sp, #8
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bf36:	2181      	movs	r1, #129	; 0x81
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f003 fdf6 	bl	800fb2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bf44:	2101      	movs	r1, #1
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f003 fdef 	bl	800fb2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bf54:	2182      	movs	r1, #130	; 0x82
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f003 fde7 	bl	800fb2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00e      	beq.n	800bf94 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf86:	4618      	mov	r0, r3
 800bf88:	f005 f97e 	bl	8011288 <free>
    pdev->pClassData = NULL;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e0af      	b.n	800c128 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d03f      	beq.n	800c054 <USBD_CDC_Setup+0xb4>
 800bfd4:	2b20      	cmp	r3, #32
 800bfd6:	f040 809f 	bne.w	800c118 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	88db      	ldrh	r3, [r3, #6]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d02e      	beq.n	800c040 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	b25b      	sxtb	r3, r3
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	da16      	bge.n	800c01a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bff8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	88d2      	ldrh	r2, [r2, #6]
 800bffe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	88db      	ldrh	r3, [r3, #6]
 800c004:	2b07      	cmp	r3, #7
 800c006:	bf28      	it	cs
 800c008:	2307      	movcs	r3, #7
 800c00a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	89fa      	ldrh	r2, [r7, #14]
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f001 faa5 	bl	800d562 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c018:	e085      	b.n	800c126 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	785a      	ldrb	r2, [r3, #1]
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	88db      	ldrh	r3, [r3, #6]
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c030:	6939      	ldr	r1, [r7, #16]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	88db      	ldrh	r3, [r3, #6]
 800c036:	461a      	mov	r2, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 fabe 	bl	800d5ba <USBD_CtlPrepareRx>
      break;
 800c03e:	e072      	b.n	800c126 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	7850      	ldrb	r0, [r2, #1]
 800c04c:	2200      	movs	r2, #0
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	4798      	blx	r3
      break;
 800c052:	e068      	b.n	800c126 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	2b0b      	cmp	r3, #11
 800c05a:	d852      	bhi.n	800c102 <USBD_CDC_Setup+0x162>
 800c05c:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <USBD_CDC_Setup+0xc4>)
 800c05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c062:	bf00      	nop
 800c064:	0800c095 	.word	0x0800c095
 800c068:	0800c111 	.word	0x0800c111
 800c06c:	0800c103 	.word	0x0800c103
 800c070:	0800c103 	.word	0x0800c103
 800c074:	0800c103 	.word	0x0800c103
 800c078:	0800c103 	.word	0x0800c103
 800c07c:	0800c103 	.word	0x0800c103
 800c080:	0800c103 	.word	0x0800c103
 800c084:	0800c103 	.word	0x0800c103
 800c088:	0800c103 	.word	0x0800c103
 800c08c:	0800c0bf 	.word	0x0800c0bf
 800c090:	0800c0e9 	.word	0x0800c0e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d107      	bne.n	800c0b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c0a0:	f107 030a 	add.w	r3, r7, #10
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f001 fa5a 	bl	800d562 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0ae:	e032      	b.n	800c116 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f001 f9e4 	bl	800d480 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	75fb      	strb	r3, [r7, #23]
          break;
 800c0bc:	e02b      	b.n	800c116 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d107      	bne.n	800c0da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c0ca:	f107 030d 	add.w	r3, r7, #13
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f001 fa45 	bl	800d562 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0d8:	e01d      	b.n	800c116 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f001 f9cf 	bl	800d480 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	75fb      	strb	r3, [r7, #23]
          break;
 800c0e6:	e016      	b.n	800c116 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d00f      	beq.n	800c114 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f001 f9c2 	bl	800d480 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c100:	e008      	b.n	800c114 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 f9bb 	bl	800d480 <USBD_CtlError>
          ret = USBD_FAIL;
 800c10a:	2303      	movs	r3, #3
 800c10c:	75fb      	strb	r3, [r7, #23]
          break;
 800c10e:	e002      	b.n	800c116 <USBD_CDC_Setup+0x176>
          break;
 800c110:	bf00      	nop
 800c112:	e008      	b.n	800c126 <USBD_CDC_Setup+0x186>
          break;
 800c114:	bf00      	nop
      }
      break;
 800c116:	e006      	b.n	800c126 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f001 f9b0 	bl	800d480 <USBD_CtlError>
      ret = USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	75fb      	strb	r3, [r7, #23]
      break;
 800c124:	bf00      	nop
  }

  return (uint8_t)ret;
 800c126:	7dfb      	ldrb	r3, [r7, #23]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c14e:	2303      	movs	r3, #3
 800c150:	e04f      	b.n	800c1f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c158:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c15a:	78fa      	ldrb	r2, [r7, #3]
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	4613      	mov	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	440b      	add	r3, r1
 800c168:	3318      	adds	r3, #24
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d029      	beq.n	800c1c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c170:	78fa      	ldrb	r2, [r7, #3]
 800c172:	6879      	ldr	r1, [r7, #4]
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	440b      	add	r3, r1
 800c17e:	3318      	adds	r3, #24
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	78f9      	ldrb	r1, [r7, #3]
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	460b      	mov	r3, r1
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	440b      	add	r3, r1
 800c18c:	00db      	lsls	r3, r3, #3
 800c18e:	4403      	add	r3, r0
 800c190:	333c      	adds	r3, #60	; 0x3c
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	fbb2 f1f3 	udiv	r1, r2, r3
 800c198:	fb01 f303 	mul.w	r3, r1, r3
 800c19c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d110      	bne.n	800c1c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c1a2:	78fa      	ldrb	r2, [r7, #3]
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	4413      	add	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	440b      	add	r3, r1
 800c1b0:	3318      	adds	r3, #24
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1b6:	78f9      	ldrb	r1, [r7, #3]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f003 fd2d 	bl	800fc1c <USBD_LL_Transmit>
 800c1c2:	e015      	b.n	800c1f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00b      	beq.n	800c1f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	460b      	mov	r3, r1
 800c204:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c20c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c214:	2b00      	cmp	r3, #0
 800c216:	d101      	bne.n	800c21c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c218:	2303      	movs	r3, #3
 800c21a:	e015      	b.n	800c248 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c21c:	78fb      	ldrb	r3, [r7, #3]
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f003 fd25 	bl	800fc70 <USBD_LL_GetRxDataSize>
 800c226:	4602      	mov	r2, r0
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c242:	4611      	mov	r1, r2
 800c244:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c25e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c266:	2303      	movs	r3, #3
 800c268:	e01b      	b.n	800c2a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d015      	beq.n	800c2a0 <USBD_CDC_EP0_RxReady+0x50>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c27a:	2bff      	cmp	r3, #255	; 0xff
 800c27c:	d010      	beq.n	800c2a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c28c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c294:	b292      	uxth	r2, r2
 800c296:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	22ff      	movs	r2, #255	; 0xff
 800c29c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2243      	movs	r2, #67	; 0x43
 800c2b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c2ba:	4b03      	ldr	r3, [pc, #12]	; (800c2c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	200000c0 	.word	0x200000c0

0800c2cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2243      	movs	r2, #67	; 0x43
 800c2d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c2da:	4b03      	ldr	r3, [pc, #12]	; (800c2e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	2000007c 	.word	0x2000007c

0800c2ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2243      	movs	r2, #67	; 0x43
 800c2f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c2fa:	4b03      	ldr	r3, [pc, #12]	; (800c308 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	20000104 	.word	0x20000104

0800c30c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	220a      	movs	r2, #10
 800c318:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c31a:	4b03      	ldr	r3, [pc, #12]	; (800c328 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	20000038 	.word	0x20000038

0800c32c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e004      	b.n	800c34a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c356:	b480      	push	{r7}
 800c358:	b087      	sub	sp, #28
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c368:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c370:	2303      	movs	r3, #3
 800c372:	e008      	b.n	800c386 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c392:	b480      	push	{r7}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d101      	bne.n	800c3ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	e004      	b.n	800c3b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e01a      	b.n	800c41c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d114      	bne.n	800c41a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c40e:	2181      	movs	r1, #129	; 0x81
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f003 fc03 	bl	800fc1c <USBD_LL_Transmit>

    ret = USBD_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c432:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c43e:	2303      	movs	r3, #3
 800c440:	e016      	b.n	800c470 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	7c1b      	ldrb	r3, [r3, #16]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d109      	bne.n	800c45e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c450:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c454:	2101      	movs	r1, #1
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f003 fbf5 	bl	800fc46 <USBD_LL_PrepareReceive>
 800c45c:	e007      	b.n	800c46e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	2101      	movs	r1, #1
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f003 fbec 	bl	800fc46 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	4613      	mov	r3, r2
 800c484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e01f      	b.n	800c4d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	79fa      	ldrb	r2, [r7, #7]
 800c4c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f003 fac3 	bl	800fa50 <USBD_LL_Init>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3718      	adds	r7, #24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e016      	b.n	800c51e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50c:	f107 020e 	add.w	r2, r7, #14
 800c510:	4610      	mov	r0, r2
 800c512:	4798      	blx	r3
 800c514:	4602      	mov	r2, r0
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f003 fad2 	bl	800fad8 <USBD_LL_Start>
 800c534:	4603      	mov	r3, r0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c53e:	b480      	push	{r7}
 800c540:	b083      	sub	sp, #12
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c560:	2303      	movs	r3, #3
 800c562:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d009      	beq.n	800c582 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	78fa      	ldrb	r2, [r7, #3]
 800c578:	4611      	mov	r1, r2
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	4798      	blx	r3
 800c57e:	4603      	mov	r3, r0
 800c580:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c582:	7bfb      	ldrb	r3, [r7, #15]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	460b      	mov	r3, r1
 800c596:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d007      	beq.n	800c5b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	78fa      	ldrb	r2, [r7, #3]
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
  }

  return USBD_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 ff1c 	bl	800d40c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c5f0:	f003 031f 	and.w	r3, r3, #31
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d01a      	beq.n	800c62e <USBD_LL_SetupStage+0x72>
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d822      	bhi.n	800c642 <USBD_LL_SetupStage+0x86>
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <USBD_LL_SetupStage+0x4a>
 800c600:	2b01      	cmp	r3, #1
 800c602:	d00a      	beq.n	800c61a <USBD_LL_SetupStage+0x5e>
 800c604:	e01d      	b.n	800c642 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f9ee 	bl	800c9f0 <USBD_StdDevReq>
 800c614:	4603      	mov	r3, r0
 800c616:	73fb      	strb	r3, [r7, #15]
      break;
 800c618:	e020      	b.n	800c65c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fa52 	bl	800cacc <USBD_StdItfReq>
 800c628:	4603      	mov	r3, r0
 800c62a:	73fb      	strb	r3, [r7, #15]
      break;
 800c62c:	e016      	b.n	800c65c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fa91 	bl	800cb5e <USBD_StdEPReq>
 800c63c:	4603      	mov	r3, r0
 800c63e:	73fb      	strb	r3, [r7, #15]
      break;
 800c640:	e00c      	b.n	800c65c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c648:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f003 fa7d 	bl	800fb50 <USBD_LL_StallEP>
 800c656:	4603      	mov	r3, r0
 800c658:	73fb      	strb	r3, [r7, #15]
      break;
 800c65a:	bf00      	nop
  }

  return ret;
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	460b      	mov	r3, r1
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c674:	7afb      	ldrb	r3, [r7, #11]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d138      	bne.n	800c6ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c680:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c688:	2b03      	cmp	r3, #3
 800c68a:	d14a      	bne.n	800c722 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	689a      	ldr	r2, [r3, #8]
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	429a      	cmp	r2, r3
 800c696:	d913      	bls.n	800c6c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	689a      	ldr	r2, [r3, #8]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	1ad2      	subs	r2, r2, r3
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	68da      	ldr	r2, [r3, #12]
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	bf28      	it	cs
 800c6b2:	4613      	movcs	r3, r2
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	6879      	ldr	r1, [r7, #4]
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 ff9b 	bl	800d5f4 <USBD_CtlContinueRx>
 800c6be:	e030      	b.n	800c722 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d10b      	bne.n	800c6e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d005      	beq.n	800c6e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6de:	691b      	ldr	r3, [r3, #16]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 ff96 	bl	800d616 <USBD_CtlSendStatus>
 800c6ea:	e01a      	b.n	800c722 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d114      	bne.n	800c722 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00e      	beq.n	800c722 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	7afa      	ldrb	r2, [r7, #11]
 800c70e:	4611      	mov	r1, r2
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	4798      	blx	r3
 800c714:	4603      	mov	r3, r0
 800c716:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
 800c720:	e000      	b.n	800c724 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	460b      	mov	r3, r1
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c73a:	7afb      	ldrb	r3, [r7, #11]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d16b      	bne.n	800c818 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3314      	adds	r3, #20
 800c744:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d156      	bne.n	800c7fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	689a      	ldr	r2, [r3, #8]
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d914      	bls.n	800c786 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	1ad2      	subs	r2, r2, r3
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	461a      	mov	r2, r3
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 ff10 	bl	800d598 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c778:	2300      	movs	r3, #0
 800c77a:	2200      	movs	r2, #0
 800c77c:	2100      	movs	r1, #0
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f003 fa61 	bl	800fc46 <USBD_LL_PrepareReceive>
 800c784:	e03b      	b.n	800c7fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	68da      	ldr	r2, [r3, #12]
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d11c      	bne.n	800c7cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d316      	bcc.n	800c7cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d20f      	bcs.n	800c7cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 fef1 	bl	800d598 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7be:	2300      	movs	r3, #0
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f003 fa3e 	bl	800fc46 <USBD_LL_PrepareReceive>
 800c7ca:	e018      	b.n	800c7fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d10b      	bne.n	800c7f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d005      	beq.n	800c7f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7f0:	2180      	movs	r1, #128	; 0x80
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f003 f9ac 	bl	800fb50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f000 ff1f 	bl	800d63c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c804:	2b01      	cmp	r3, #1
 800c806:	d122      	bne.n	800c84e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f7ff fe98 	bl	800c53e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c816:	e01a      	b.n	800c84e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b03      	cmp	r3, #3
 800c822:	d114      	bne.n	800c84e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00e      	beq.n	800c84e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	7afa      	ldrb	r2, [r7, #11]
 800c83a:	4611      	mov	r1, r2
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	4798      	blx	r3
 800c840:	4603      	mov	r3, r0
 800c842:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	e000      	b.n	800c850 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3718      	adds	r7, #24
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c888:	2303      	movs	r3, #3
 800c88a:	e02f      	b.n	800c8ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00f      	beq.n	800c8b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d009      	beq.n	800c8b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	6852      	ldr	r2, [r2, #4]
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f003 f91a 	bl	800faf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2240      	movs	r2, #64	; 0x40
 800c8ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2180      	movs	r1, #128	; 0x80
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f003 f90c 	bl	800faf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2240      	movs	r2, #64	; 0x40
 800c8e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	78fa      	ldrb	r2, [r7, #3]
 800c904:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c922:	b2da      	uxtb	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2204      	movs	r2, #4
 800c92e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b04      	cmp	r3, #4
 800c952:	d106      	bne.n	800c962 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d101      	bne.n	800c986 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c982:	2303      	movs	r3, #3
 800c984:	e012      	b.n	800c9ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b03      	cmp	r3, #3
 800c990:	d10b      	bne.n	800c9aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d005      	beq.n	800c9aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a4:	69db      	ldr	r3, [r3, #28]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9d2:	8a3b      	ldrh	r3, [r7, #16]
 800c9d4:	021b      	lsls	r3, r3, #8
 800c9d6:	b21a      	sxth	r2, r3
 800c9d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	b21b      	sxth	r3, r3
 800c9e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9e2:	89fb      	ldrh	r3, [r7, #14]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	371c      	adds	r7, #28
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca06:	2b40      	cmp	r3, #64	; 0x40
 800ca08:	d005      	beq.n	800ca16 <USBD_StdDevReq+0x26>
 800ca0a:	2b40      	cmp	r3, #64	; 0x40
 800ca0c:	d853      	bhi.n	800cab6 <USBD_StdDevReq+0xc6>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00b      	beq.n	800ca2a <USBD_StdDevReq+0x3a>
 800ca12:	2b20      	cmp	r3, #32
 800ca14:	d14f      	bne.n	800cab6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	4798      	blx	r3
 800ca24:	4603      	mov	r3, r0
 800ca26:	73fb      	strb	r3, [r7, #15]
      break;
 800ca28:	e04a      	b.n	800cac0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b09      	cmp	r3, #9
 800ca30:	d83b      	bhi.n	800caaa <USBD_StdDevReq+0xba>
 800ca32:	a201      	add	r2, pc, #4	; (adr r2, 800ca38 <USBD_StdDevReq+0x48>)
 800ca34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca38:	0800ca8d 	.word	0x0800ca8d
 800ca3c:	0800caa1 	.word	0x0800caa1
 800ca40:	0800caab 	.word	0x0800caab
 800ca44:	0800ca97 	.word	0x0800ca97
 800ca48:	0800caab 	.word	0x0800caab
 800ca4c:	0800ca6b 	.word	0x0800ca6b
 800ca50:	0800ca61 	.word	0x0800ca61
 800ca54:	0800caab 	.word	0x0800caab
 800ca58:	0800ca83 	.word	0x0800ca83
 800ca5c:	0800ca75 	.word	0x0800ca75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f9de 	bl	800ce24 <USBD_GetDescriptor>
          break;
 800ca68:	e024      	b.n	800cab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fb43 	bl	800d0f8 <USBD_SetAddress>
          break;
 800ca72:	e01f      	b.n	800cab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fb82 	bl	800d180 <USBD_SetConfig>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]
          break;
 800ca80:	e018      	b.n	800cab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fc21 	bl	800d2cc <USBD_GetConfig>
          break;
 800ca8a:	e013      	b.n	800cab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fc52 	bl	800d338 <USBD_GetStatus>
          break;
 800ca94:	e00e      	b.n	800cab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fc81 	bl	800d3a0 <USBD_SetFeature>
          break;
 800ca9e:	e009      	b.n	800cab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fc90 	bl	800d3c8 <USBD_ClrFeature>
          break;
 800caa8:	e004      	b.n	800cab4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fce7 	bl	800d480 <USBD_CtlError>
          break;
 800cab2:	bf00      	nop
      }
      break;
 800cab4:	e004      	b.n	800cac0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fce1 	bl	800d480 <USBD_CtlError>
      break;
 800cabe:	bf00      	nop
  }

  return ret;
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop

0800cacc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cae2:	2b40      	cmp	r3, #64	; 0x40
 800cae4:	d005      	beq.n	800caf2 <USBD_StdItfReq+0x26>
 800cae6:	2b40      	cmp	r3, #64	; 0x40
 800cae8:	d82f      	bhi.n	800cb4a <USBD_StdItfReq+0x7e>
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <USBD_StdItfReq+0x26>
 800caee:	2b20      	cmp	r3, #32
 800caf0:	d12b      	bne.n	800cb4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	3b01      	subs	r3, #1
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d81d      	bhi.n	800cb3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	889b      	ldrh	r3, [r3, #4]
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d813      	bhi.n	800cb32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	4798      	blx	r3
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	88db      	ldrh	r3, [r3, #6]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d110      	bne.n	800cb46 <USBD_StdItfReq+0x7a>
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10d      	bne.n	800cb46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fd73 	bl	800d616 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb30:	e009      	b.n	800cb46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fca3 	bl	800d480 <USBD_CtlError>
          break;
 800cb3a:	e004      	b.n	800cb46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fc9e 	bl	800d480 <USBD_CtlError>
          break;
 800cb44:	e000      	b.n	800cb48 <USBD_StdItfReq+0x7c>
          break;
 800cb46:	bf00      	nop
      }
      break;
 800cb48:	e004      	b.n	800cb54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fc97 	bl	800d480 <USBD_CtlError>
      break;
 800cb52:	bf00      	nop
  }

  return ret;
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	889b      	ldrh	r3, [r3, #4]
 800cb70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb7a:	2b40      	cmp	r3, #64	; 0x40
 800cb7c:	d007      	beq.n	800cb8e <USBD_StdEPReq+0x30>
 800cb7e:	2b40      	cmp	r3, #64	; 0x40
 800cb80:	f200 8145 	bhi.w	800ce0e <USBD_StdEPReq+0x2b0>
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00c      	beq.n	800cba2 <USBD_StdEPReq+0x44>
 800cb88:	2b20      	cmp	r3, #32
 800cb8a:	f040 8140 	bne.w	800ce0e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	4798      	blx	r3
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]
      break;
 800cba0:	e13a      	b.n	800ce18 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	785b      	ldrb	r3, [r3, #1]
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d007      	beq.n	800cbba <USBD_StdEPReq+0x5c>
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	f300 8129 	bgt.w	800ce02 <USBD_StdEPReq+0x2a4>
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d07f      	beq.n	800ccb4 <USBD_StdEPReq+0x156>
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d03c      	beq.n	800cc32 <USBD_StdEPReq+0xd4>
 800cbb8:	e123      	b.n	800ce02 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d002      	beq.n	800cbcc <USBD_StdEPReq+0x6e>
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d016      	beq.n	800cbf8 <USBD_StdEPReq+0x9a>
 800cbca:	e02c      	b.n	800cc26 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbcc:	7bbb      	ldrb	r3, [r7, #14]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00d      	beq.n	800cbee <USBD_StdEPReq+0x90>
 800cbd2:	7bbb      	ldrb	r3, [r7, #14]
 800cbd4:	2b80      	cmp	r3, #128	; 0x80
 800cbd6:	d00a      	beq.n	800cbee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbd8:	7bbb      	ldrb	r3, [r7, #14]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f002 ffb7 	bl	800fb50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbe2:	2180      	movs	r1, #128	; 0x80
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f002 ffb3 	bl	800fb50 <USBD_LL_StallEP>
 800cbea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbec:	e020      	b.n	800cc30 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fc45 	bl	800d480 <USBD_CtlError>
              break;
 800cbf6:	e01b      	b.n	800cc30 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	885b      	ldrh	r3, [r3, #2]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10e      	bne.n	800cc1e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc00:	7bbb      	ldrb	r3, [r7, #14]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00b      	beq.n	800cc1e <USBD_StdEPReq+0xc0>
 800cc06:	7bbb      	ldrb	r3, [r7, #14]
 800cc08:	2b80      	cmp	r3, #128	; 0x80
 800cc0a:	d008      	beq.n	800cc1e <USBD_StdEPReq+0xc0>
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	88db      	ldrh	r3, [r3, #6]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
 800cc16:	4619      	mov	r1, r3
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f002 ff99 	bl	800fb50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fcf9 	bl	800d616 <USBD_CtlSendStatus>

              break;
 800cc24:	e004      	b.n	800cc30 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cc26:	6839      	ldr	r1, [r7, #0]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fc29 	bl	800d480 <USBD_CtlError>
              break;
 800cc2e:	bf00      	nop
          }
          break;
 800cc30:	e0ec      	b.n	800ce0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d002      	beq.n	800cc44 <USBD_StdEPReq+0xe6>
 800cc3e:	2b03      	cmp	r3, #3
 800cc40:	d016      	beq.n	800cc70 <USBD_StdEPReq+0x112>
 800cc42:	e030      	b.n	800cca6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00d      	beq.n	800cc66 <USBD_StdEPReq+0x108>
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	2b80      	cmp	r3, #128	; 0x80
 800cc4e:	d00a      	beq.n	800cc66 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
 800cc52:	4619      	mov	r1, r3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f002 ff7b 	bl	800fb50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc5a:	2180      	movs	r1, #128	; 0x80
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f002 ff77 	bl	800fb50 <USBD_LL_StallEP>
 800cc62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc64:	e025      	b.n	800ccb2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fc09 	bl	800d480 <USBD_CtlError>
              break;
 800cc6e:	e020      	b.n	800ccb2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	885b      	ldrh	r3, [r3, #2]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d11b      	bne.n	800ccb0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
 800cc7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f002 ff75 	bl	800fb76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fcc2 	bl	800d616 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3
 800cca0:	4603      	mov	r3, r0
 800cca2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cca4:	e004      	b.n	800ccb0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fbe9 	bl	800d480 <USBD_CtlError>
              break;
 800ccae:	e000      	b.n	800ccb2 <USBD_StdEPReq+0x154>
              break;
 800ccb0:	bf00      	nop
          }
          break;
 800ccb2:	e0ab      	b.n	800ce0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d002      	beq.n	800ccc6 <USBD_StdEPReq+0x168>
 800ccc0:	2b03      	cmp	r3, #3
 800ccc2:	d032      	beq.n	800cd2a <USBD_StdEPReq+0x1cc>
 800ccc4:	e097      	b.n	800cdf6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccc6:	7bbb      	ldrb	r3, [r7, #14]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d007      	beq.n	800ccdc <USBD_StdEPReq+0x17e>
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
 800ccce:	2b80      	cmp	r3, #128	; 0x80
 800ccd0:	d004      	beq.n	800ccdc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fbd3 	bl	800d480 <USBD_CtlError>
                break;
 800ccda:	e091      	b.n	800ce00 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	da0b      	bge.n	800ccfc <USBD_StdEPReq+0x19e>
 800cce4:	7bbb      	ldrb	r3, [r7, #14]
 800cce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccea:	4613      	mov	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	3310      	adds	r3, #16
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	e00b      	b.n	800cd14 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccfc:	7bbb      	ldrb	r3, [r7, #14]
 800ccfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd02:	4613      	mov	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	4413      	add	r3, r2
 800cd12:	3304      	adds	r3, #4
 800cd14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2202      	movs	r2, #2
 800cd20:	4619      	mov	r1, r3
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fc1d 	bl	800d562 <USBD_CtlSendData>
              break;
 800cd28:	e06a      	b.n	800ce00 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	da11      	bge.n	800cd56 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd32:	7bbb      	ldrb	r3, [r7, #14]
 800cd34:	f003 020f 	and.w	r2, r3, #15
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	440b      	add	r3, r1
 800cd44:	3324      	adds	r3, #36	; 0x24
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d117      	bne.n	800cd7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd4c:	6839      	ldr	r1, [r7, #0]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fb96 	bl	800d480 <USBD_CtlError>
                  break;
 800cd54:	e054      	b.n	800ce00 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd56:	7bbb      	ldrb	r3, [r7, #14]
 800cd58:	f003 020f 	and.w	r2, r3, #15
 800cd5c:	6879      	ldr	r1, [r7, #4]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	440b      	add	r3, r1
 800cd68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d104      	bne.n	800cd7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd72:	6839      	ldr	r1, [r7, #0]
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fb83 	bl	800d480 <USBD_CtlError>
                  break;
 800cd7a:	e041      	b.n	800ce00 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	da0b      	bge.n	800cd9c <USBD_StdEPReq+0x23e>
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	3310      	adds	r3, #16
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	4413      	add	r3, r2
 800cd98:	3304      	adds	r3, #4
 800cd9a:	e00b      	b.n	800cdb4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cda2:	4613      	mov	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdb6:	7bbb      	ldrb	r3, [r7, #14]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <USBD_StdEPReq+0x264>
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
 800cdbe:	2b80      	cmp	r3, #128	; 0x80
 800cdc0:	d103      	bne.n	800cdca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	e00e      	b.n	800cde8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f002 fee4 	bl	800fb9c <USBD_LL_IsStallEP>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d003      	beq.n	800cde2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2201      	movs	r2, #1
 800cdde:	601a      	str	r2, [r3, #0]
 800cde0:	e002      	b.n	800cde8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2202      	movs	r2, #2
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fbb7 	bl	800d562 <USBD_CtlSendData>
              break;
 800cdf4:	e004      	b.n	800ce00 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fb41 	bl	800d480 <USBD_CtlError>
              break;
 800cdfe:	bf00      	nop
          }
          break;
 800ce00:	e004      	b.n	800ce0c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 fb3b 	bl	800d480 <USBD_CtlError>
          break;
 800ce0a:	bf00      	nop
      }
      break;
 800ce0c:	e004      	b.n	800ce18 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 fb35 	bl	800d480 <USBD_CtlError>
      break;
 800ce16:	bf00      	nop
  }

  return ret;
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
	...

0800ce24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	885b      	ldrh	r3, [r3, #2]
 800ce3e:	0a1b      	lsrs	r3, r3, #8
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	3b01      	subs	r3, #1
 800ce44:	2b06      	cmp	r3, #6
 800ce46:	f200 8128 	bhi.w	800d09a <USBD_GetDescriptor+0x276>
 800ce4a:	a201      	add	r2, pc, #4	; (adr r2, 800ce50 <USBD_GetDescriptor+0x2c>)
 800ce4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce50:	0800ce6d 	.word	0x0800ce6d
 800ce54:	0800ce85 	.word	0x0800ce85
 800ce58:	0800cec5 	.word	0x0800cec5
 800ce5c:	0800d09b 	.word	0x0800d09b
 800ce60:	0800d09b 	.word	0x0800d09b
 800ce64:	0800d03b 	.word	0x0800d03b
 800ce68:	0800d067 	.word	0x0800d067
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	7c12      	ldrb	r2, [r2, #16]
 800ce78:	f107 0108 	add.w	r1, r7, #8
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	4798      	blx	r3
 800ce80:	60f8      	str	r0, [r7, #12]
      break;
 800ce82:	e112      	b.n	800d0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	7c1b      	ldrb	r3, [r3, #16]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10d      	bne.n	800cea8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce94:	f107 0208 	add.w	r2, r7, #8
 800ce98:	4610      	mov	r0, r2
 800ce9a:	4798      	blx	r3
 800ce9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	3301      	adds	r3, #1
 800cea2:	2202      	movs	r2, #2
 800cea4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cea6:	e100      	b.n	800d0aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb0:	f107 0208 	add.w	r2, r7, #8
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	4798      	blx	r3
 800ceb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	3301      	adds	r3, #1
 800cebe:	2202      	movs	r2, #2
 800cec0:	701a      	strb	r2, [r3, #0]
      break;
 800cec2:	e0f2      	b.n	800d0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	885b      	ldrh	r3, [r3, #2]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b05      	cmp	r3, #5
 800cecc:	f200 80ac 	bhi.w	800d028 <USBD_GetDescriptor+0x204>
 800ced0:	a201      	add	r2, pc, #4	; (adr r2, 800ced8 <USBD_GetDescriptor+0xb4>)
 800ced2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced6:	bf00      	nop
 800ced8:	0800cef1 	.word	0x0800cef1
 800cedc:	0800cf25 	.word	0x0800cf25
 800cee0:	0800cf59 	.word	0x0800cf59
 800cee4:	0800cf8d 	.word	0x0800cf8d
 800cee8:	0800cfc1 	.word	0x0800cfc1
 800ceec:	0800cff5 	.word	0x0800cff5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00b      	beq.n	800cf14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	7c12      	ldrb	r2, [r2, #16]
 800cf08:	f107 0108 	add.w	r1, r7, #8
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	4798      	blx	r3
 800cf10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf12:	e091      	b.n	800d038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf14:	6839      	ldr	r1, [r7, #0]
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fab2 	bl	800d480 <USBD_CtlError>
            err++;
 800cf1c:	7afb      	ldrb	r3, [r7, #11]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	72fb      	strb	r3, [r7, #11]
          break;
 800cf22:	e089      	b.n	800d038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	7c12      	ldrb	r2, [r2, #16]
 800cf3c:	f107 0108 	add.w	r1, r7, #8
 800cf40:	4610      	mov	r0, r2
 800cf42:	4798      	blx	r3
 800cf44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf46:	e077      	b.n	800d038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 fa98 	bl	800d480 <USBD_CtlError>
            err++;
 800cf50:	7afb      	ldrb	r3, [r7, #11]
 800cf52:	3301      	adds	r3, #1
 800cf54:	72fb      	strb	r3, [r7, #11]
          break;
 800cf56:	e06f      	b.n	800d038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00b      	beq.n	800cf7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	7c12      	ldrb	r2, [r2, #16]
 800cf70:	f107 0108 	add.w	r1, r7, #8
 800cf74:	4610      	mov	r0, r2
 800cf76:	4798      	blx	r3
 800cf78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf7a:	e05d      	b.n	800d038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fa7e 	bl	800d480 <USBD_CtlError>
            err++;
 800cf84:	7afb      	ldrb	r3, [r7, #11]
 800cf86:	3301      	adds	r3, #1
 800cf88:	72fb      	strb	r3, [r7, #11]
          break;
 800cf8a:	e055      	b.n	800d038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	7c12      	ldrb	r2, [r2, #16]
 800cfa4:	f107 0108 	add.w	r1, r7, #8
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfae:	e043      	b.n	800d038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fa64 	bl	800d480 <USBD_CtlError>
            err++;
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	72fb      	strb	r3, [r7, #11]
          break;
 800cfbe:	e03b      	b.n	800d038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00b      	beq.n	800cfe4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	7c12      	ldrb	r2, [r2, #16]
 800cfd8:	f107 0108 	add.w	r1, r7, #8
 800cfdc:	4610      	mov	r0, r2
 800cfde:	4798      	blx	r3
 800cfe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfe2:	e029      	b.n	800d038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fa4a 	bl	800d480 <USBD_CtlError>
            err++;
 800cfec:	7afb      	ldrb	r3, [r7, #11]
 800cfee:	3301      	adds	r3, #1
 800cff0:	72fb      	strb	r3, [r7, #11]
          break;
 800cff2:	e021      	b.n	800d038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	7c12      	ldrb	r2, [r2, #16]
 800d00c:	f107 0108 	add.w	r1, r7, #8
 800d010:	4610      	mov	r0, r2
 800d012:	4798      	blx	r3
 800d014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d016:	e00f      	b.n	800d038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa30 	bl	800d480 <USBD_CtlError>
            err++;
 800d020:	7afb      	ldrb	r3, [r7, #11]
 800d022:	3301      	adds	r3, #1
 800d024:	72fb      	strb	r3, [r7, #11]
          break;
 800d026:	e007      	b.n	800d038 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fa28 	bl	800d480 <USBD_CtlError>
          err++;
 800d030:	7afb      	ldrb	r3, [r7, #11]
 800d032:	3301      	adds	r3, #1
 800d034:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d036:	bf00      	nop
      }
      break;
 800d038:	e037      	b.n	800d0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7c1b      	ldrb	r3, [r3, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d109      	bne.n	800d056 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04a:	f107 0208 	add.w	r2, r7, #8
 800d04e:	4610      	mov	r0, r2
 800d050:	4798      	blx	r3
 800d052:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d054:	e029      	b.n	800d0aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fa11 	bl	800d480 <USBD_CtlError>
        err++;
 800d05e:	7afb      	ldrb	r3, [r7, #11]
 800d060:	3301      	adds	r3, #1
 800d062:	72fb      	strb	r3, [r7, #11]
      break;
 800d064:	e021      	b.n	800d0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7c1b      	ldrb	r3, [r3, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10d      	bne.n	800d08a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d076:	f107 0208 	add.w	r2, r7, #8
 800d07a:	4610      	mov	r0, r2
 800d07c:	4798      	blx	r3
 800d07e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3301      	adds	r3, #1
 800d084:	2207      	movs	r2, #7
 800d086:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d088:	e00f      	b.n	800d0aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f9f7 	bl	800d480 <USBD_CtlError>
        err++;
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	3301      	adds	r3, #1
 800d096:	72fb      	strb	r3, [r7, #11]
      break;
 800d098:	e007      	b.n	800d0aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f9ef 	bl	800d480 <USBD_CtlError>
      err++;
 800d0a2:	7afb      	ldrb	r3, [r7, #11]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d0a8:	bf00      	nop
  }

  if (err != 0U)
 800d0aa:	7afb      	ldrb	r3, [r7, #11]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d11e      	bne.n	800d0ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	88db      	ldrh	r3, [r3, #6]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d016      	beq.n	800d0e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d0b8:	893b      	ldrh	r3, [r7, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00e      	beq.n	800d0dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	88da      	ldrh	r2, [r3, #6]
 800d0c2:	893b      	ldrh	r3, [r7, #8]
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	bf28      	it	cs
 800d0c8:	4613      	movcs	r3, r2
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0ce:	893b      	ldrh	r3, [r7, #8]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	68f9      	ldr	r1, [r7, #12]
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fa44 	bl	800d562 <USBD_CtlSendData>
 800d0da:	e009      	b.n	800d0f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f9ce 	bl	800d480 <USBD_CtlError>
 800d0e4:	e004      	b.n	800d0f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fa95 	bl	800d616 <USBD_CtlSendStatus>
 800d0ec:	e000      	b.n	800d0f0 <USBD_GetDescriptor+0x2cc>
    return;
 800d0ee:	bf00      	nop
  }
}
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop

0800d0f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	889b      	ldrh	r3, [r3, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d131      	bne.n	800d16e <USBD_SetAddress+0x76>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	88db      	ldrh	r3, [r3, #6]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d12d      	bne.n	800d16e <USBD_SetAddress+0x76>
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	885b      	ldrh	r3, [r3, #2]
 800d116:	2b7f      	cmp	r3, #127	; 0x7f
 800d118:	d829      	bhi.n	800d16e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	885b      	ldrh	r3, [r3, #2]
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d124:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b03      	cmp	r3, #3
 800d130:	d104      	bne.n	800d13c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f9a3 	bl	800d480 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d13a:	e01d      	b.n	800d178 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	7bfa      	ldrb	r2, [r7, #15]
 800d140:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	4619      	mov	r1, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f002 fd54 	bl	800fbf6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fa61 	bl	800d616 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d004      	beq.n	800d164 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2202      	movs	r2, #2
 800d15e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d162:	e009      	b.n	800d178 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16c:	e004      	b.n	800d178 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f985 	bl	800d480 <USBD_CtlError>
  }
}
 800d176:	bf00      	nop
 800d178:	bf00      	nop
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	885b      	ldrh	r3, [r3, #2]
 800d192:	b2da      	uxtb	r2, r3
 800d194:	4b4c      	ldr	r3, [pc, #304]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d196:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d198:	4b4b      	ldr	r3, [pc, #300]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d905      	bls.n	800d1ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1a0:	6839      	ldr	r1, [r7, #0]
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f96c 	bl	800d480 <USBD_CtlError>
    return USBD_FAIL;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	e088      	b.n	800d2be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d002      	beq.n	800d1be <USBD_SetConfig+0x3e>
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d025      	beq.n	800d208 <USBD_SetConfig+0x88>
 800d1bc:	e071      	b.n	800d2a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1be:	4b42      	ldr	r3, [pc, #264]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d01c      	beq.n	800d200 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d1c6:	4b40      	ldr	r3, [pc, #256]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1d0:	4b3d      	ldr	r3, [pc, #244]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7ff f9bc 	bl	800c554 <USBD_SetClassConfig>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d004      	beq.n	800d1f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f949 	bl	800d480 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d1ee:	e065      	b.n	800d2bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fa10 	bl	800d616 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2203      	movs	r2, #3
 800d1fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d1fe:	e05d      	b.n	800d2bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fa08 	bl	800d616 <USBD_CtlSendStatus>
      break;
 800d206:	e059      	b.n	800d2bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d208:	4b2f      	ldr	r3, [pc, #188]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d112      	bne.n	800d236 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2202      	movs	r2, #2
 800d214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d218:	4b2b      	ldr	r3, [pc, #172]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	461a      	mov	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d222:	4b29      	ldr	r3, [pc, #164]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7ff f9af 	bl	800c58c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f9f1 	bl	800d616 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d234:	e042      	b.n	800d2bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d236:	4b24      	ldr	r3, [pc, #144]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	429a      	cmp	r2, r3
 800d242:	d02a      	beq.n	800d29a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff f99d 	bl	800c58c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d252:	4b1d      	ldr	r3, [pc, #116]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	461a      	mov	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d25c:	4b1a      	ldr	r3, [pc, #104]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff f976 	bl	800c554 <USBD_SetClassConfig>
 800d268:	4603      	mov	r3, r0
 800d26a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00f      	beq.n	800d292 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 f903 	bl	800d480 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7ff f982 	bl	800c58c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2202      	movs	r2, #2
 800d28c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d290:	e014      	b.n	800d2bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f9bf 	bl	800d616 <USBD_CtlSendStatus>
      break;
 800d298:	e010      	b.n	800d2bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f9bb 	bl	800d616 <USBD_CtlSendStatus>
      break;
 800d2a0:	e00c      	b.n	800d2bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f8eb 	bl	800d480 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2aa:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <USBD_SetConfig+0x148>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7ff f96b 	bl	800c58c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ba:	bf00      	nop
  }

  return ret;
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20000a40 	.word	0x20000a40

0800d2cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	88db      	ldrh	r3, [r3, #6]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d004      	beq.n	800d2e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d2de:	6839      	ldr	r1, [r7, #0]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 f8cd 	bl	800d480 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2e6:	e023      	b.n	800d330 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	dc02      	bgt.n	800d2fa <USBD_GetConfig+0x2e>
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	dc03      	bgt.n	800d300 <USBD_GetConfig+0x34>
 800d2f8:	e015      	b.n	800d326 <USBD_GetConfig+0x5a>
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d00b      	beq.n	800d316 <USBD_GetConfig+0x4a>
 800d2fe:	e012      	b.n	800d326 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3308      	adds	r3, #8
 800d30a:	2201      	movs	r2, #1
 800d30c:	4619      	mov	r1, r3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f927 	bl	800d562 <USBD_CtlSendData>
        break;
 800d314:	e00c      	b.n	800d330 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	3304      	adds	r3, #4
 800d31a:	2201      	movs	r2, #1
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f91f 	bl	800d562 <USBD_CtlSendData>
        break;
 800d324:	e004      	b.n	800d330 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f8a9 	bl	800d480 <USBD_CtlError>
        break;
 800d32e:	bf00      	nop
}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	3b01      	subs	r3, #1
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d81e      	bhi.n	800d38e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	88db      	ldrh	r3, [r3, #6]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d004      	beq.n	800d362 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f890 	bl	800d480 <USBD_CtlError>
        break;
 800d360:	e01a      	b.n	800d398 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d005      	beq.n	800d37e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	f043 0202 	orr.w	r2, r3, #2
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	330c      	adds	r3, #12
 800d382:	2202      	movs	r2, #2
 800d384:	4619      	mov	r1, r3
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f8eb 	bl	800d562 <USBD_CtlSendData>
      break;
 800d38c:	e004      	b.n	800d398 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 f875 	bl	800d480 <USBD_CtlError>
      break;
 800d396:	bf00      	nop
  }
}
 800d398:	bf00      	nop
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	885b      	ldrh	r3, [r3, #2]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d106      	bne.n	800d3c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f92b 	bl	800d616 <USBD_CtlSendStatus>
  }
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	2b02      	cmp	r3, #2
 800d3de:	d80b      	bhi.n	800d3f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	885b      	ldrh	r3, [r3, #2]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d10c      	bne.n	800d402 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f910 	bl	800d616 <USBD_CtlSendStatus>
      }
      break;
 800d3f6:	e004      	b.n	800d402 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f840 	bl	800d480 <USBD_CtlError>
      break;
 800d400:	e000      	b.n	800d404 <USBD_ClrFeature+0x3c>
      break;
 800d402:	bf00      	nop
  }
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	781a      	ldrb	r2, [r3, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3301      	adds	r3, #1
 800d426:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	781a      	ldrb	r2, [r3, #0]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	3301      	adds	r3, #1
 800d434:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7ff fabc 	bl	800c9b4 <SWAPBYTE>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3301      	adds	r3, #1
 800d448:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3301      	adds	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff faaf 	bl	800c9b4 <SWAPBYTE>
 800d456:	4603      	mov	r3, r0
 800d458:	461a      	mov	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3301      	adds	r3, #1
 800d462:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3301      	adds	r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff faa2 	bl	800c9b4 <SWAPBYTE>
 800d470:	4603      	mov	r3, r0
 800d472:	461a      	mov	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	80da      	strh	r2, [r3, #6]
}
 800d478:	bf00      	nop
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d48a:	2180      	movs	r1, #128	; 0x80
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f002 fb5f 	bl	800fb50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d492:	2100      	movs	r1, #0
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f002 fb5b 	bl	800fb50 <USBD_LL_StallEP>
}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b086      	sub	sp, #24
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	60f8      	str	r0, [r7, #12]
 800d4aa:	60b9      	str	r1, [r7, #8]
 800d4ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d036      	beq.n	800d526 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d4bc:	6938      	ldr	r0, [r7, #16]
 800d4be:	f000 f836 	bl	800d52e <USBD_GetLen>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	005b      	lsls	r3, r3, #1
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d4d0:	7dfb      	ldrb	r3, [r7, #23]
 800d4d2:	68ba      	ldr	r2, [r7, #8]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	7812      	ldrb	r2, [r2, #0]
 800d4da:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	2203      	movs	r2, #3
 800d4ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d4f2:	e013      	b.n	800d51c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	7812      	ldrb	r2, [r2, #0]
 800d4fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	3301      	adds	r3, #1
 800d504:	613b      	str	r3, [r7, #16]
    idx++;
 800d506:	7dfb      	ldrb	r3, [r7, #23]
 800d508:	3301      	adds	r3, #1
 800d50a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d50c:	7dfb      	ldrb	r3, [r7, #23]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	4413      	add	r3, r2
 800d512:	2200      	movs	r2, #0
 800d514:	701a      	strb	r2, [r3, #0]
    idx++;
 800d516:	7dfb      	ldrb	r3, [r7, #23]
 800d518:	3301      	adds	r3, #1
 800d51a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1e7      	bne.n	800d4f4 <USBD_GetString+0x52>
 800d524:	e000      	b.n	800d528 <USBD_GetString+0x86>
    return;
 800d526:	bf00      	nop
  }
}
 800d528:	3718      	adds	r7, #24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d52e:	b480      	push	{r7}
 800d530:	b085      	sub	sp, #20
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d53e:	e005      	b.n	800d54c <USBD_GetLen+0x1e>
  {
    len++;
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	3301      	adds	r3, #1
 800d544:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	3301      	adds	r3, #1
 800d54a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1f5      	bne.n	800d540 <USBD_GetLen+0x12>
  }

  return len;
 800d554:	7bfb      	ldrb	r3, [r7, #15]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	60f8      	str	r0, [r7, #12]
 800d56a:	60b9      	str	r1, [r7, #8]
 800d56c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2202      	movs	r2, #2
 800d572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	2100      	movs	r1, #0
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f002 fb47 	bl	800fc1c <USBD_LL_Transmit>

  return USBD_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f002 fb36 	bl	800fc1c <USBD_LL_Transmit>

  return USBD_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2203      	movs	r2, #3
 800d5ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f002 fb2e 	bl	800fc46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68ba      	ldr	r2, [r7, #8]
 800d604:	2100      	movs	r1, #0
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f002 fb1d 	bl	800fc46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2204      	movs	r2, #4
 800d622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d626:	2300      	movs	r3, #0
 800d628:	2200      	movs	r2, #0
 800d62a:	2100      	movs	r1, #0
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f002 faf5 	bl	800fc1c <USBD_LL_Transmit>

  return USBD_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2205      	movs	r2, #5
 800d648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d64c:	2300      	movs	r3, #0
 800d64e:	2200      	movs	r2, #0
 800d650:	2100      	movs	r1, #0
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f002 faf7 	bl	800fc46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800d662:	b480      	push	{r7}
 800d664:	af00      	add	r7, sp, #0
  return;
 800d666:	bf00      	nop
}
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800d670:	b480      	push	{r7}
 800d672:	af00      	add	r7, sp, #0
  return;
 800d674:	bf00      	nop
}
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800d67e:	b480      	push	{r7}
 800d680:	af00      	add	r7, sp, #0
  return;
 800d682:	bf00      	nop
}
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800d68c:	b480      	push	{r7}
 800d68e:	af00      	add	r7, sp, #0
  return;
 800d690:	bf00      	nop
}
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800d69a:	b480      	push	{r7}
 800d69c:	af00      	add	r7, sp, #0
  return;
 800d69e:	bf00      	nop
}
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	af00      	add	r7, sp, #0
  return;
 800d6ac:	bf00      	nop
}
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800d6b6:	b480      	push	{r7}
 800d6b8:	af00      	add	r7, sp, #0
  return;
 800d6ba:	bf00      	nop
}
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	af00      	add	r7, sp, #0
  return;
 800d6c8:	bf00      	nop
}
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	af00      	add	r7, sp, #0
  return;
 800d6d6:	bf00      	nop
}
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	af00      	add	r7, sp, #0
  return;
 800d6e4:	bf00      	nop
}
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	af00      	add	r7, sp, #0
  return;
 800d6f2:	bf00      	nop
}
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	af00      	add	r7, sp, #0
  return;
 800d700:	bf00      	nop
}
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800d70a:	b480      	push	{r7}
 800d70c:	af00      	add	r7, sp, #0
  return;
 800d70e:	bf00      	nop
}
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800d718:	b480      	push	{r7}
 800d71a:	af00      	add	r7, sp, #0
  return;
 800d71c:	bf00      	nop
}
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800d726:	b480      	push	{r7}
 800d728:	af00      	add	r7, sp, #0
  return;
 800d72a:	bf00      	nop
}
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800d734:	b480      	push	{r7}
 800d736:	af00      	add	r7, sp, #0
  return;
 800d738:	bf00      	nop
}
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800d742:	b480      	push	{r7}
 800d744:	af00      	add	r7, sp, #0
  return;
 800d746:	bf00      	nop
}
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800d750:	b480      	push	{r7}
 800d752:	af00      	add	r7, sp, #0
  return;
 800d754:	bf00      	nop
}
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
	...

0800d760 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d764:	4b04      	ldr	r3, [pc, #16]	; (800d778 <SVCCTL_Init+0x18>)
 800d766:	2200      	movs	r2, #0
 800d768:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d76a:	4b04      	ldr	r3, [pc, #16]	; (800d77c <SVCCTL_Init+0x1c>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800d770:	f000 f806 	bl	800d780 <SVCCTL_SvcInit>

  return;
 800d774:	bf00      	nop
}
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20000344 	.word	0x20000344
 800d77c:	20000364 	.word	0x20000364

0800d780 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	af00      	add	r7, sp, #0
  BAS_Init();
 800d784:	f7ff ff6d 	bl	800d662 <BAS_Init>

  BLS_Init();
 800d788:	f7ff ff72 	bl	800d670 <BLS_Init>

  CRS_STM_Init();
 800d78c:	f7ff ff77 	bl	800d67e <CRS_STM_Init>

  DIS_Init();
 800d790:	f7ff ff7c 	bl	800d68c <DIS_Init>

  EDS_STM_Init();
 800d794:	f7ff ff81 	bl	800d69a <EDS_STM_Init>

  HIDS_Init();
 800d798:	f7ff ff86 	bl	800d6a8 <HIDS_Init>

  HRS_Init();
 800d79c:	f7ff ff8b 	bl	800d6b6 <HRS_Init>

  HTS_Init();
 800d7a0:	f7ff ff90 	bl	800d6c4 <HTS_Init>

  IAS_Init();
 800d7a4:	f7ff ff95 	bl	800d6d2 <IAS_Init>

  LLS_Init();
 800d7a8:	f7ff ff9a 	bl	800d6e0 <LLS_Init>

  TPS_Init();
 800d7ac:	f7ff ff9f 	bl	800d6ee <TPS_Init>

  MOTENV_STM_Init();
 800d7b0:	f7ff ffa4 	bl	800d6fc <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d7b4:	f7ff ffa9 	bl	800d70a <P2PS_STM_Init>

  ZDD_STM_Init();
 800d7b8:	f7ff ffae 	bl	800d718 <ZDD_STM_Init>

  OTAS_STM_Init();
 800d7bc:	f7ff ffb3 	bl	800d726 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800d7c0:	f7ff ffbf 	bl	800d742 <BVOPUS_STM_Init>

  MESH_Init();
 800d7c4:	f7ff ffb6 	bl	800d734 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800d7c8:	f7ff ffc2 	bl	800d750 <SVCCTL_InitCustomSvc>
  
  return;
 800d7cc:	bf00      	nop
}
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800d7d8:	4b09      	ldr	r3, [pc, #36]	; (800d800 <SVCCTL_RegisterCltHandler+0x30>)
 800d7da:	791b      	ldrb	r3, [r3, #4]
 800d7dc:	4619      	mov	r1, r3
 800d7de:	4a08      	ldr	r2, [pc, #32]	; (800d800 <SVCCTL_RegisterCltHandler+0x30>)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800d7e6:	4b06      	ldr	r3, [pc, #24]	; (800d800 <SVCCTL_RegisterCltHandler+0x30>)
 800d7e8:	791b      	ldrb	r3, [r3, #4]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	4b04      	ldr	r3, [pc, #16]	; (800d800 <SVCCTL_RegisterCltHandler+0x30>)
 800d7f0:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800d7f2:	bf00      	nop
}
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	20000364 	.word	0x20000364

0800d804 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3301      	adds	r3, #1
 800d810:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800d812:	2300      	movs	r3, #0
 800d814:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2bff      	cmp	r3, #255	; 0xff
 800d81c:	d13f      	bne.n	800d89e <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	3302      	adds	r3, #2
 800d822:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d82e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d832:	d132      	bne.n	800d89a <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d834:	2300      	movs	r3, #0
 800d836:	757b      	strb	r3, [r7, #21]
 800d838:	e00d      	b.n	800d856 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800d83a:	7d7b      	ldrb	r3, [r7, #21]
 800d83c:	4a27      	ldr	r2, [pc, #156]	; (800d8dc <SVCCTL_UserEvtRx+0xd8>)
 800d83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	4798      	blx	r3
 800d846:	4603      	mov	r3, r0
 800d848:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d84a:	7dfb      	ldrb	r3, [r7, #23]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d108      	bne.n	800d862 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d850:	7d7b      	ldrb	r3, [r7, #21]
 800d852:	3301      	adds	r3, #1
 800d854:	757b      	strb	r3, [r7, #21]
 800d856:	4b21      	ldr	r3, [pc, #132]	; (800d8dc <SVCCTL_UserEvtRx+0xd8>)
 800d858:	7f1b      	ldrb	r3, [r3, #28]
 800d85a:	7d7a      	ldrb	r2, [r7, #21]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d3ec      	bcc.n	800d83a <SVCCTL_UserEvtRx+0x36>
 800d860:	e000      	b.n	800d864 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800d862:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800d864:	2300      	movs	r3, #0
 800d866:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800d868:	2300      	movs	r3, #0
 800d86a:	757b      	strb	r3, [r7, #21]
 800d86c:	e00d      	b.n	800d88a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800d86e:	7d7b      	ldrb	r3, [r7, #21]
 800d870:	4a1b      	ldr	r2, [pc, #108]	; (800d8e0 <SVCCTL_UserEvtRx+0xdc>)
 800d872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	4798      	blx	r3
 800d87a:	4603      	mov	r3, r0
 800d87c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d87e:	7dfb      	ldrb	r3, [r7, #23]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d108      	bne.n	800d896 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800d884:	7d7b      	ldrb	r3, [r7, #21]
 800d886:	3301      	adds	r3, #1
 800d888:	757b      	strb	r3, [r7, #21]
 800d88a:	4b15      	ldr	r3, [pc, #84]	; (800d8e0 <SVCCTL_UserEvtRx+0xdc>)
 800d88c:	791b      	ldrb	r3, [r3, #4]
 800d88e:	7d7a      	ldrb	r2, [r7, #21]
 800d890:	429a      	cmp	r2, r3
 800d892:	d3ec      	bcc.n	800d86e <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800d894:	e002      	b.n	800d89c <SVCCTL_UserEvtRx+0x98>
              break;
 800d896:	bf00      	nop
          break;
 800d898:	e000      	b.n	800d89c <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800d89a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d89c:	e000      	b.n	800d8a0 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800d89e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d00f      	beq.n	800d8c6 <SVCCTL_UserEvtRx+0xc2>
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	dc10      	bgt.n	800d8cc <SVCCTL_UserEvtRx+0xc8>
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d002      	beq.n	800d8b4 <SVCCTL_UserEvtRx+0xb0>
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d006      	beq.n	800d8c0 <SVCCTL_UserEvtRx+0xbc>
 800d8b2:	e00b      	b.n	800d8cc <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7f5 f855 	bl	8002964 <SVCCTL_App_Notification>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	75bb      	strb	r3, [r7, #22]
      break;
 800d8be:	e008      	b.n	800d8d2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	75bb      	strb	r3, [r7, #22]
      break;
 800d8c4:	e005      	b.n	800d8d2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	75bb      	strb	r3, [r7, #22]
      break;
 800d8ca:	e002      	b.n	800d8d2 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	75bb      	strb	r3, [r7, #22]
      break;
 800d8d0:	bf00      	nop
  }

  return (return_status);
 800d8d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	20000344 	.word	0x20000344
 800d8e0:	20000364 	.word	0x20000364

0800d8e4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b0cc      	sub	sp, #304	; 0x130
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d8f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d8f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800d8f6:	f107 0310 	add.w	r3, r7, #16
 800d8fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d8fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d902:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d906:	2200      	movs	r2, #0
 800d908:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800d910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d914:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d918:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d91c:	7812      	ldrb	r2, [r2, #0]
 800d91e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d924:	3301      	adds	r3, #1
 800d926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d92a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d92e:	2218      	movs	r2, #24
 800d930:	2100      	movs	r1, #0
 800d932:	4618      	mov	r0, r3
 800d934:	f001 f9c4 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d938:	233f      	movs	r3, #63	; 0x3f
 800d93a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800d93e:	2385      	movs	r3, #133	; 0x85
 800d940:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d944:	f107 0310 	add.w	r3, r7, #16
 800d948:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d94c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d950:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d954:	f107 030f 	add.w	r3, r7, #15
 800d958:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d95c:	2301      	movs	r3, #1
 800d95e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d966:	2100      	movs	r1, #0
 800d968:	4618      	mov	r0, r3
 800d96a:	f001 fb15 	bl	800ef98 <hci_send_req>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	da01      	bge.n	800d978 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800d974:	23ff      	movs	r3, #255	; 0xff
 800d976:	e004      	b.n	800d982 <aci_gap_set_io_capability+0x9e>
  return status;
 800d978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d97c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d980:	781b      	ldrb	r3, [r3, #0]
}
 800d982:	4618      	mov	r0, r3
 800d984:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800d98c:	b5b0      	push	{r4, r5, r7, lr}
 800d98e:	b0cc      	sub	sp, #304	; 0x130
 800d990:	af00      	add	r7, sp, #0
 800d992:	4605      	mov	r5, r0
 800d994:	460c      	mov	r4, r1
 800d996:	4610      	mov	r0, r2
 800d998:	4619      	mov	r1, r3
 800d99a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d99e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d9a2:	462a      	mov	r2, r5
 800d9a4:	701a      	strb	r2, [r3, #0]
 800d9a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d9aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	701a      	strb	r2, [r3, #0]
 800d9b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d9b6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	701a      	strb	r2, [r3, #0]
 800d9be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d9c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d9c6:	460a      	mov	r2, r1
 800d9c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800d9ca:	f107 0310 	add.w	r3, r7, #16
 800d9ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d9d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d9d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d9da:	2200      	movs	r2, #0
 800d9dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800d9e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d9ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d9f0:	7812      	ldrb	r2, [r2, #0]
 800d9f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d9f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d9fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800da02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800da06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800da0a:	7812      	ldrb	r2, [r2, #0]
 800da0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800da0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da12:	3301      	adds	r3, #1
 800da14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800da18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800da1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800da20:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800da24:	7812      	ldrb	r2, [r2, #0]
 800da26:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800da28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da2c:	3301      	adds	r3, #1
 800da2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800da32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800da36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800da3a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800da3e:	7812      	ldrb	r2, [r2, #0]
 800da40:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800da42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da46:	3301      	adds	r3, #1
 800da48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800da4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800da50:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800da54:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800da56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da5a:	3301      	adds	r3, #1
 800da5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800da60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800da64:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800da68:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800da6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da6e:	3301      	adds	r3, #1
 800da70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800da74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800da78:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800da7c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800da7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da82:	3301      	adds	r3, #1
 800da84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800da88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800da8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800da90:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800da94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da98:	3304      	adds	r3, #4
 800da9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800da9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800daa2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800daa6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800daa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800daac:	3301      	adds	r3, #1
 800daae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dab2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dab6:	2218      	movs	r2, #24
 800dab8:	2100      	movs	r1, #0
 800daba:	4618      	mov	r0, r3
 800dabc:	f001 f900 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dac0:	233f      	movs	r3, #63	; 0x3f
 800dac2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800dac6:	2386      	movs	r3, #134	; 0x86
 800dac8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dacc:	f107 0310 	add.w	r3, r7, #16
 800dad0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dad8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dadc:	f107 030f 	add.w	r3, r7, #15
 800dae0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dae4:	2301      	movs	r3, #1
 800dae6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800daea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800daee:	2100      	movs	r1, #0
 800daf0:	4618      	mov	r0, r3
 800daf2:	f001 fa51 	bl	800ef98 <hci_send_req>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da01      	bge.n	800db00 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800dafc:	23ff      	movs	r3, #255	; 0xff
 800dafe:	e004      	b.n	800db0a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800db00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db04:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800db08:	781b      	ldrb	r3, [r3, #0]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800db10:	46bd      	mov	sp, r7
 800db12:	bdb0      	pop	{r4, r5, r7, pc}

0800db14 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800db14:	b590      	push	{r4, r7, lr}
 800db16:	b0cd      	sub	sp, #308	; 0x134
 800db18:	af00      	add	r7, sp, #0
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	4611      	mov	r1, r2
 800db20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800db24:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800db28:	6013      	str	r3, [r2, #0]
 800db2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800db32:	4622      	mov	r2, r4
 800db34:	701a      	strb	r2, [r3, #0]
 800db36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800db3e:	4602      	mov	r2, r0
 800db40:	701a      	strb	r2, [r3, #0]
 800db42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db46:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800db4a:	460a      	mov	r2, r1
 800db4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800db4e:	f107 0310 	add.w	r3, r7, #16
 800db52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800db56:	f107 0308 	add.w	r3, r7, #8
 800db5a:	2207      	movs	r2, #7
 800db5c:	2100      	movs	r1, #0
 800db5e:	4618      	mov	r0, r3
 800db60:	f001 f8ae 	bl	800ecc0 <Osal_MemSet>
  int index_input = 0;
 800db64:	2300      	movs	r3, #0
 800db66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800db6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800db72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800db76:	7812      	ldrb	r2, [r2, #0]
 800db78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800db7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db7e:	3301      	adds	r3, #1
 800db80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800db84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800db8c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800db90:	7812      	ldrb	r2, [r2, #0]
 800db92:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800db94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db98:	3301      	adds	r3, #1
 800db9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800db9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dba2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dba6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800dbaa:	7812      	ldrb	r2, [r2, #0]
 800dbac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dbae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dbbc:	2218      	movs	r2, #24
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f001 f87d 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dbc6:	233f      	movs	r3, #63	; 0x3f
 800dbc8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800dbcc:	238a      	movs	r3, #138	; 0x8a
 800dbce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dbd2:	f107 0310 	add.w	r3, r7, #16
 800dbd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dbda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dbde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800dbe2:	f107 0308 	add.w	r3, r7, #8
 800dbe6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800dbea:	2307      	movs	r3, #7
 800dbec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f001 f9ce 	bl	800ef98 <hci_send_req>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da01      	bge.n	800dc06 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800dc02:	23ff      	movs	r3, #255	; 0xff
 800dc04:	e02e      	b.n	800dc64 <aci_gap_init+0x150>
  if ( resp.Status )
 800dc06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d005      	beq.n	800dc20 <aci_gap_init+0x10c>
    return resp.Status;
 800dc14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc18:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	e021      	b.n	800dc64 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800dc20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dc28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800dc3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dc42:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800dc4c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800dc4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dc56:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dc60:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd90      	pop	{r4, r7, pc}

0800dc6e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b088      	sub	sp, #32
 800dc72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc78:	f107 0308 	add.w	r3, r7, #8
 800dc7c:	2218      	movs	r2, #24
 800dc7e:	2100      	movs	r1, #0
 800dc80:	4618      	mov	r0, r3
 800dc82:	f001 f81d 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc86:	233f      	movs	r3, #63	; 0x3f
 800dc88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800dc8a:	2392      	movs	r3, #146	; 0x92
 800dc8c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dc8e:	1dfb      	adds	r3, r7, #7
 800dc90:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dc92:	2301      	movs	r3, #1
 800dc94:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc96:	f107 0308 	add.w	r3, r7, #8
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f001 f97b 	bl	800ef98 <hci_send_req>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	da01      	bge.n	800dcac <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dca8:	23ff      	movs	r3, #255	; 0xff
 800dcaa:	e000      	b.n	800dcae <aci_gap_configure_whitelist+0x40>
  return status;
 800dcac:	79fb      	ldrb	r3, [r7, #7]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3720      	adds	r7, #32
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 800dcb6:	b5b0      	push	{r4, r5, r7, lr}
 800dcb8:	b0cc      	sub	sp, #304	; 0x130
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dcc8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dccc:	462a      	mov	r2, r5
 800dcce:	801a      	strh	r2, [r3, #0]
 800dcd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dcd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dcd8:	4622      	mov	r2, r4
 800dcda:	801a      	strh	r2, [r3, #0]
 800dcdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dce0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800dce4:	4602      	mov	r2, r0
 800dce6:	701a      	strb	r2, [r3, #0]
 800dce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dcec:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800dcf0:	460a      	mov	r2, r1
 800dcf2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800dcf4:	f107 0310 	add.w	r3, r7, #16
 800dcf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dcfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd00:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dd04:	2200      	movs	r2, #0
 800dd06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800dd0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd16:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dd1a:	8812      	ldrh	r2, [r2, #0]
 800dd1c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dd1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd22:	3302      	adds	r3, #2
 800dd24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 800dd28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd30:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800dd34:	8812      	ldrh	r2, [r2, #0]
 800dd36:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800dd38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd3c:	3302      	adds	r3, #2
 800dd3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800dd42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd4a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800dd4e:	7812      	ldrb	r2, [r2, #0]
 800dd50:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800dd52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd56:	3301      	adds	r3, #1
 800dd58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 800dd5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd64:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800dd68:	7812      	ldrb	r2, [r2, #0]
 800dd6a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800dd6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd70:	3301      	adds	r3, #1
 800dd72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dd7a:	2218      	movs	r2, #24
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 ff9e 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dd84:	233f      	movs	r3, #63	; 0x3f
 800dd86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 800dd8a:	2397      	movs	r3, #151	; 0x97
 800dd8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800dd90:	230f      	movs	r3, #15
 800dd92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800dd96:	f107 0310 	add.w	r3, r7, #16
 800dd9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dd9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dda2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dda6:	f107 030f 	add.w	r3, r7, #15
 800ddaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ddb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f001 f8ec 	bl	800ef98 <hci_send_req>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	da01      	bge.n	800ddca <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 800ddc6:	23ff      	movs	r3, #255	; 0xff
 800ddc8:	e004      	b.n	800ddd4 <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 800ddca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ddce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ddd2:	781b      	ldrb	r3, [r3, #0]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bdb0      	pop	{r4, r5, r7, pc}

0800ddde <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 800ddde:	b590      	push	{r4, r7, lr}
 800dde0:	b0cf      	sub	sp, #316	; 0x13c
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	4604      	mov	r4, r0
 800dde6:	4608      	mov	r0, r1
 800dde8:	4611      	mov	r1, r2
 800ddea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ddee:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800ddf2:	6013      	str	r3, [r2, #0]
 800ddf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ddf8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ddfc:	4622      	mov	r2, r4
 800ddfe:	801a      	strh	r2, [r3, #0]
 800de00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800de04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800de08:	4602      	mov	r2, r0
 800de0a:	801a      	strh	r2, [r3, #0]
 800de0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800de10:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800de14:	460a      	mov	r2, r1
 800de16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800de18:	f107 0318 	add.w	r3, r7, #24
 800de1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800de20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800de24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800de28:	2200      	movs	r2, #0
 800de2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800de2c:	2300      	movs	r3, #0
 800de2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800de32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800de36:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800de3a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800de3e:	8812      	ldrh	r2, [r2, #0]
 800de40:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800de42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de46:	3302      	adds	r3, #2
 800de48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 800de4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800de50:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800de54:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800de58:	8812      	ldrh	r2, [r2, #0]
 800de5a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800de5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de60:	3302      	adds	r3, #2
 800de62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 800de66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800de6a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800de6e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800de72:	7812      	ldrb	r2, [r2, #0]
 800de74:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800de76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de7a:	3301      	adds	r3, #1
 800de7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 800de80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800de84:	1d58      	adds	r0, r3, #5
 800de86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800de8a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800de8e:	2206      	movs	r2, #6
 800de90:	6819      	ldr	r1, [r3, #0]
 800de92:	f000 ff05 	bl	800eca0 <Osal_MemCpy>
  index_input += 6;
 800de96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de9a:	3306      	adds	r3, #6
 800de9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 800dea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dea4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800dea8:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800deaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800deae:	3301      	adds	r3, #1
 800deb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800deb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800deb8:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800debc:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800debe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dec2:	3302      	adds	r3, #2
 800dec4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800dec8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800decc:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800ded0:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800ded2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ded6:	3302      	adds	r3, #2
 800ded8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 800dedc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dee0:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800dee4:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800dee6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800deea:	3302      	adds	r3, #2
 800deec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 800def0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800def4:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800def8:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800defa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800defe:	3302      	adds	r3, #2
 800df00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800df04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800df08:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800df0c:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800df0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800df12:	3302      	adds	r3, #2
 800df14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800df18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800df1c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800df20:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800df22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800df26:	3302      	adds	r3, #2
 800df28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800df30:	2218      	movs	r2, #24
 800df32:	2100      	movs	r1, #0
 800df34:	4618      	mov	r0, r3
 800df36:	f000 fec3 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800df3a:	233f      	movs	r3, #63	; 0x3f
 800df3c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800df40:	239c      	movs	r3, #156	; 0x9c
 800df42:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800df46:	230f      	movs	r3, #15
 800df48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800df4c:	f107 0318 	add.w	r3, r7, #24
 800df50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800df54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800df58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800df5c:	f107 0317 	add.w	r3, r7, #23
 800df60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800df64:	2301      	movs	r3, #1
 800df66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800df6e:	2100      	movs	r1, #0
 800df70:	4618      	mov	r0, r3
 800df72:	f001 f811 	bl	800ef98 <hci_send_req>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	da01      	bge.n	800df80 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800df7c:	23ff      	movs	r3, #255	; 0xff
 800df7e:	e004      	b.n	800df8a <aci_gap_create_connection+0x1ac>
  return status;
 800df80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800df84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800df88:	781b      	ldrb	r3, [r3, #0]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800df90:	46bd      	mov	sp, r7
 800df92:	bd90      	pop	{r4, r7, pc}

0800df94 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df9e:	f107 0308 	add.w	r3, r7, #8
 800dfa2:	2218      	movs	r2, #24
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 fe8a 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dfac:	233f      	movs	r3, #63	; 0x3f
 800dfae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800dfb0:	f240 1301 	movw	r3, #257	; 0x101
 800dfb4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dfb6:	1dfb      	adds	r3, r7, #7
 800dfb8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dfbe:	f107 0308 	add.w	r3, r7, #8
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 ffe7 	bl	800ef98 <hci_send_req>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	da01      	bge.n	800dfd4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800dfd0:	23ff      	movs	r3, #255	; 0xff
 800dfd2:	e000      	b.n	800dfd6 <aci_gatt_init+0x42>
  return status;
 800dfd4:	79fb      	ldrb	r3, [r7, #7]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3720      	adds	r7, #32
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800dfde:	b5b0      	push	{r4, r5, r7, lr}
 800dfe0:	b0cc      	sub	sp, #304	; 0x130
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	4610      	mov	r0, r2
 800dfea:	4619      	mov	r1, r3
 800dfec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dff0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dff4:	462a      	mov	r2, r5
 800dff6:	801a      	strh	r2, [r3, #0]
 800dff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e000:	4622      	mov	r2, r4
 800e002:	801a      	strh	r2, [r3, #0]
 800e004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e008:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e00c:	4602      	mov	r2, r0
 800e00e:	701a      	strb	r2, [r3, #0]
 800e010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e014:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e018:	460a      	mov	r2, r1
 800e01a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800e01c:	f107 0310 	add.w	r3, r7, #16
 800e020:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e028:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e02c:	2200      	movs	r2, #0
 800e02e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800e036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e03a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e03e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e042:	8812      	ldrh	r2, [r2, #0]
 800e044:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e04a:	3302      	adds	r3, #2
 800e04c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800e050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e054:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e058:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e05c:	8812      	ldrh	r2, [r2, #0]
 800e05e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e064:	3302      	adds	r3, #2
 800e066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800e06a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e06e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e072:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e076:	7812      	ldrb	r2, [r2, #0]
 800e078:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e07a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e07e:	3301      	adds	r3, #1
 800e080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800e084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e088:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e08c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e090:	7812      	ldrb	r2, [r2, #0]
 800e092:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e098:	3301      	adds	r3, #1
 800e09a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800e09e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e0a2:	1d98      	adds	r0, r3, #6
 800e0a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e0a8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800e0b4:	f000 fdf4 	bl	800eca0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800e0b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e0bc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e0c6:	4413      	add	r3, r2
 800e0c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e0cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e0d0:	2218      	movs	r2, #24
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f000 fdf3 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e0da:	233f      	movs	r3, #63	; 0x3f
 800e0dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800e0e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e0e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e0e8:	f107 0310 	add.w	r3, r7, #16
 800e0ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e0f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e0f8:	f107 030f 	add.w	r3, r7, #15
 800e0fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e100:	2301      	movs	r3, #1
 800e102:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e106:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e10a:	2100      	movs	r1, #0
 800e10c:	4618      	mov	r0, r3
 800e10e:	f000 ff43 	bl	800ef98 <hci_send_req>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	da01      	bge.n	800e11c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800e118:	23ff      	movs	r3, #255	; 0xff
 800e11a:	e004      	b.n	800e126 <aci_gatt_update_char_value+0x148>
  return status;
 800e11c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e120:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e124:	781b      	ldrb	r3, [r3, #0]
}
 800e126:	4618      	mov	r0, r3
 800e128:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bdb0      	pop	{r4, r5, r7, pc}

0800e130 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b0cc      	sub	sp, #304	; 0x130
 800e134:	af00      	add	r7, sp, #0
 800e136:	4602      	mov	r2, r0
 800e138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e13c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e140:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800e142:	f107 0310 	add.w	r3, r7, #16
 800e146:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e14a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e14e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e152:	2200      	movs	r2, #0
 800e154:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e156:	2300      	movs	r3, #0
 800e158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e15c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e160:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e164:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e168:	8812      	ldrh	r2, [r2, #0]
 800e16a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e16c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e170:	3302      	adds	r3, #2
 800e172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e176:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e17a:	2218      	movs	r2, #24
 800e17c:	2100      	movs	r1, #0
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 fd9e 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e184:	233f      	movs	r3, #63	; 0x3f
 800e186:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800e18a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800e18e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800e192:	230f      	movs	r3, #15
 800e194:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800e198:	f107 0310 	add.w	r3, r7, #16
 800e19c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e1a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e1a8:	f107 030f 	add.w	r3, r7, #15
 800e1ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e1b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f000 feeb 	bl	800ef98 <hci_send_req>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	da01      	bge.n	800e1cc <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 800e1c8:	23ff      	movs	r3, #255	; 0xff
 800e1ca:	e004      	b.n	800e1d6 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 800e1cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e1d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e1d4:	781b      	ldrb	r3, [r3, #0]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800e1e0:	b590      	push	{r4, r7, lr}
 800e1e2:	b0cd      	sub	sp, #308	; 0x134
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	4608      	mov	r0, r1
 800e1ea:	4611      	mov	r1, r2
 800e1ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e1f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e1f4:	4622      	mov	r2, r4
 800e1f6:	801a      	strh	r2, [r3, #0]
 800e1f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e1fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e200:	4602      	mov	r2, r0
 800e202:	801a      	strh	r2, [r3, #0]
 800e204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e208:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e20c:	460a      	mov	r2, r1
 800e20e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800e210:	f107 0310 	add.w	r3, r7, #16
 800e214:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e21c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e220:	2200      	movs	r2, #0
 800e222:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e22a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e22e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e232:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e236:	8812      	ldrh	r2, [r2, #0]
 800e238:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e23a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e23e:	3302      	adds	r3, #2
 800e240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 800e244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e248:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e24c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e250:	8812      	ldrh	r2, [r2, #0]
 800e252:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e258:	3302      	adds	r3, #2
 800e25a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800e25e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e262:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e266:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e26a:	8812      	ldrh	r2, [r2, #0]
 800e26c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800e26e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e272:	3302      	adds	r3, #2
 800e274:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e278:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e27c:	2218      	movs	r2, #24
 800e27e:	2100      	movs	r1, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f000 fd1d 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e286:	233f      	movs	r3, #63	; 0x3f
 800e288:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800e28c:	f240 1315 	movw	r3, #277	; 0x115
 800e290:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800e294:	230f      	movs	r3, #15
 800e296:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800e29a:	f107 0310 	add.w	r3, r7, #16
 800e29e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e2a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e2aa:	f107 030f 	add.w	r3, r7, #15
 800e2ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e2b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e2bc:	2100      	movs	r1, #0
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 fe6a 	bl	800ef98 <hci_send_req>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	da01      	bge.n	800e2ce <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 800e2ca:	23ff      	movs	r3, #255	; 0xff
 800e2cc:	e004      	b.n	800e2d8 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 800e2ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e2d6:	781b      	ldrb	r3, [r3, #0]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd90      	pop	{r4, r7, pc}

0800e2e2 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800e2e2:	b590      	push	{r4, r7, lr}
 800e2e4:	b0cd      	sub	sp, #308	; 0x134
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	4608      	mov	r0, r1
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e2f6:	4622      	mov	r2, r4
 800e2f8:	801a      	strh	r2, [r3, #0]
 800e2fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e302:	4602      	mov	r2, r0
 800e304:	801a      	strh	r2, [r3, #0]
 800e306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e30a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e30e:	460a      	mov	r2, r1
 800e310:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800e312:	f107 0310 	add.w	r3, r7, #16
 800e316:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e31e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e322:	2200      	movs	r2, #0
 800e324:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e326:	2300      	movs	r3, #0
 800e328:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e32c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e330:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e334:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e338:	8812      	ldrh	r2, [r2, #0]
 800e33a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e33c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e340:	3302      	adds	r3, #2
 800e342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800e346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e34a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e34e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e352:	8812      	ldrh	r2, [r2, #0]
 800e354:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e356:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e35a:	3302      	adds	r3, #2
 800e35c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800e360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e364:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e368:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e36c:	8812      	ldrh	r2, [r2, #0]
 800e36e:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800e370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e374:	3302      	adds	r3, #2
 800e376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e37a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e37e:	2218      	movs	r2, #24
 800e380:	2100      	movs	r1, #0
 800e382:	4618      	mov	r0, r3
 800e384:	f000 fc9c 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e388:	233f      	movs	r3, #63	; 0x3f
 800e38a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800e38e:	f240 1317 	movw	r3, #279	; 0x117
 800e392:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800e396:	230f      	movs	r3, #15
 800e398:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800e39c:	f107 0310 	add.w	r3, r7, #16
 800e3a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e3a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e3ac:	f107 030f 	add.w	r3, r7, #15
 800e3b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e3ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e3be:	2100      	movs	r1, #0
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 fde9 	bl	800ef98 <hci_send_req>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	da01      	bge.n	800e3d0 <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 800e3cc:	23ff      	movs	r3, #255	; 0xff
 800e3ce:	e004      	b.n	800e3da <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 800e3d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3d4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e3d8:	781b      	ldrb	r3, [r3, #0]
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd90      	pop	{r4, r7, pc}

0800e3e4 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b0cf      	sub	sp, #316	; 0x13c
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e3f4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800e3f8:	6013      	str	r3, [r2, #0]
 800e3fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e3fe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e402:	4622      	mov	r2, r4
 800e404:	801a      	strh	r2, [r3, #0]
 800e406:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e40a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e40e:	4602      	mov	r2, r0
 800e410:	801a      	strh	r2, [r3, #0]
 800e412:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e416:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e41a:	460a      	mov	r2, r1
 800e41c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800e41e:	f107 0318 	add.w	r3, r7, #24
 800e422:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800e426:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e42a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e42e:	2200      	movs	r2, #0
 800e430:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800e438:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e43c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e440:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e444:	8812      	ldrh	r2, [r2, #0]
 800e446:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e448:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e44c:	3302      	adds	r3, #2
 800e44e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800e452:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e456:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e45a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e45e:	8812      	ldrh	r2, [r2, #0]
 800e460:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e466:	3302      	adds	r3, #2
 800e468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800e46c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e470:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e474:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e478:	7812      	ldrb	r2, [r2, #0]
 800e47a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e47c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e480:	3301      	adds	r3, #1
 800e482:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800e486:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e48a:	1d58      	adds	r0, r3, #5
 800e48c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e490:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e494:	781a      	ldrb	r2, [r3, #0]
 800e496:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e49a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e49e:	6819      	ldr	r1, [r3, #0]
 800e4a0:	f000 fbfe 	bl	800eca0 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800e4a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e4a8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e4b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e4bc:	2218      	movs	r2, #24
 800e4be:	2100      	movs	r1, #0
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 fbfd 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e4c6:	233f      	movs	r3, #63	; 0x3f
 800e4c8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800e4cc:	f240 1321 	movw	r3, #289	; 0x121
 800e4d0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800e4d4:	230f      	movs	r3, #15
 800e4d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800e4da:	f107 0318 	add.w	r3, r7, #24
 800e4de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e4e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e4e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800e4ea:	f107 0317 	add.w	r3, r7, #23
 800e4ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e4f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 fd4a 	bl	800ef98 <hci_send_req>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	da01      	bge.n	800e50e <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800e50a:	23ff      	movs	r3, #255	; 0xff
 800e50c:	e004      	b.n	800e518 <aci_gatt_write_char_desc+0x134>
  return status;
 800e50e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e512:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e516:	781b      	ldrb	r3, [r3, #0]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd90      	pop	{r4, r7, pc}

0800e522 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 800e522:	b590      	push	{r4, r7, lr}
 800e524:	b0cf      	sub	sp, #316	; 0x13c
 800e526:	af00      	add	r7, sp, #0
 800e528:	4604      	mov	r4, r0
 800e52a:	4608      	mov	r0, r1
 800e52c:	4611      	mov	r1, r2
 800e52e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e532:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e53c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e540:	4622      	mov	r2, r4
 800e542:	801a      	strh	r2, [r3, #0]
 800e544:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e54c:	4602      	mov	r2, r0
 800e54e:	801a      	strh	r2, [r3, #0]
 800e550:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e554:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e558:	460a      	mov	r2, r1
 800e55a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 800e55c:	f107 0318 	add.w	r3, r7, #24
 800e560:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800e564:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e568:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e56c:	2200      	movs	r2, #0
 800e56e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e570:	2300      	movs	r3, #0
 800e572:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800e576:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e57a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e57e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e582:	8812      	ldrh	r2, [r2, #0]
 800e584:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e58a:	3302      	adds	r3, #2
 800e58c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800e590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e594:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e598:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e59c:	8812      	ldrh	r2, [r2, #0]
 800e59e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e5a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e5a4:	3302      	adds	r3, #2
 800e5a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800e5aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e5ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e5b2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e5b6:	7812      	ldrb	r2, [r2, #0]
 800e5b8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e5ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e5be:	3301      	adds	r3, #1
 800e5c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800e5c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e5c8:	1d58      	adds	r0, r3, #5
 800e5ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5ce:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e5d2:	781a      	ldrb	r2, [r3, #0]
 800e5d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e5dc:	6819      	ldr	r1, [r3, #0]
 800e5de:	f000 fb5f 	bl	800eca0 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800e5e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5e6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800e5f0:	4413      	add	r3, r2
 800e5f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e5f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e5fa:	2218      	movs	r2, #24
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 fb5e 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e604:	233f      	movs	r3, #63	; 0x3f
 800e606:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 800e60a:	f240 1323 	movw	r3, #291	; 0x123
 800e60e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e612:	f107 0318 	add.w	r3, r7, #24
 800e616:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e61a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e61e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800e622:	f107 0317 	add.w	r3, r7, #23
 800e626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800e62a:	2301      	movs	r3, #1
 800e62c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e630:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e634:	2100      	movs	r1, #0
 800e636:	4618      	mov	r0, r3
 800e638:	f000 fcae 	bl	800ef98 <hci_send_req>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	da01      	bge.n	800e646 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 800e642:	23ff      	movs	r3, #255	; 0xff
 800e644:	e004      	b.n	800e650 <aci_gatt_write_without_resp+0x12e>
  return status;
 800e646:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e64a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e64e:	781b      	ldrb	r3, [r3, #0]
}
 800e650:	4618      	mov	r0, r3
 800e652:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800e656:	46bd      	mov	sp, r7
 800e658:	bd90      	pop	{r4, r7, pc}

0800e65a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b0cc      	sub	sp, #304	; 0x130
 800e65e:	af00      	add	r7, sp, #0
 800e660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e668:	601a      	str	r2, [r3, #0]
 800e66a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e66e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e672:	4602      	mov	r2, r0
 800e674:	701a      	strb	r2, [r3, #0]
 800e676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e67a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e67e:	460a      	mov	r2, r1
 800e680:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800e682:	f107 0310 	add.w	r3, r7, #16
 800e686:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e68a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e68e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800e69c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e6a8:	7812      	ldrb	r2, [r2, #0]
 800e6aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e6ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800e6b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e6c2:	7812      	ldrb	r2, [r2, #0]
 800e6c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e6c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e6d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6d4:	1c98      	adds	r0, r3, #2
 800e6d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e6da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e6de:	781a      	ldrb	r2, [r3, #0]
 800e6e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e6e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e6e8:	6819      	ldr	r1, [r3, #0]
 800e6ea:	f000 fad9 	bl	800eca0 <Osal_MemCpy>
  index_input += Length;
 800e6ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e6f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e6fc:	4413      	add	r3, r2
 800e6fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e702:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e706:	2218      	movs	r2, #24
 800e708:	2100      	movs	r1, #0
 800e70a:	4618      	mov	r0, r3
 800e70c:	f000 fad8 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e710:	233f      	movs	r3, #63	; 0x3f
 800e712:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800e716:	230c      	movs	r3, #12
 800e718:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e71c:	f107 0310 	add.w	r3, r7, #16
 800e720:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e728:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e72c:	f107 030f 	add.w	r3, r7, #15
 800e730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e734:	2301      	movs	r3, #1
 800e736:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e73a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e73e:	2100      	movs	r1, #0
 800e740:	4618      	mov	r0, r3
 800e742:	f000 fc29 	bl	800ef98 <hci_send_req>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	da01      	bge.n	800e750 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e74c:	23ff      	movs	r3, #255	; 0xff
 800e74e:	e004      	b.n	800e75a <aci_hal_write_config_data+0x100>
  return status;
 800e750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e754:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e758:	781b      	ldrb	r3, [r3, #0]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b0cc      	sub	sp, #304	; 0x130
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4602      	mov	r2, r0
 800e76c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e770:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e774:	701a      	strb	r2, [r3, #0]
 800e776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e77a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e77e:	460a      	mov	r2, r1
 800e780:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800e782:	f107 0310 	add.w	r3, r7, #16
 800e786:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e78a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e78e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e792:	2200      	movs	r2, #0
 800e794:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800e79c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e7a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e7a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e7a8:	7812      	ldrb	r2, [r2, #0]
 800e7aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e7ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800e7b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e7ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e7be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e7c2:	7812      	ldrb	r2, [r2, #0]
 800e7c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e7c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e7d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7d4:	2218      	movs	r2, #24
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 fa71 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e7de:	233f      	movs	r3, #63	; 0x3f
 800e7e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800e7e4:	230f      	movs	r3, #15
 800e7e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e7ea:	f107 0310 	add.w	r3, r7, #16
 800e7ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e7f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e7fa:	f107 030f 	add.w	r3, r7, #15
 800e7fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e802:	2301      	movs	r3, #1
 800e804:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e808:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e80c:	2100      	movs	r1, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f000 fbc2 	bl	800ef98 <hci_send_req>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	da01      	bge.n	800e81e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800e81a:	23ff      	movs	r3, #255	; 0xff
 800e81c:	e004      	b.n	800e828 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800e81e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e822:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e826:	781b      	ldrb	r3, [r3, #0]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b0cc      	sub	sp, #304	; 0x130
 800e836:	af00      	add	r7, sp, #0
 800e838:	4602      	mov	r2, r0
 800e83a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e83e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e842:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800e844:	f107 0310 	add.w	r3, r7, #16
 800e848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e84c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e850:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e854:	2200      	movs	r2, #0
 800e856:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800e85e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e866:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e86a:	8812      	ldrh	r2, [r2, #0]
 800e86c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e86e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e872:	3302      	adds	r3, #2
 800e874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e87c:	2218      	movs	r2, #24
 800e87e:	2100      	movs	r1, #0
 800e880:	4618      	mov	r0, r3
 800e882:	f000 fa1d 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e886:	233f      	movs	r3, #63	; 0x3f
 800e888:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800e88c:	2318      	movs	r3, #24
 800e88e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e892:	f107 0310 	add.w	r3, r7, #16
 800e896:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e89a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e89e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e8a2:	f107 030f 	add.w	r3, r7, #15
 800e8a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e8b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f000 fb6e 	bl	800ef98 <hci_send_req>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	da01      	bge.n	800e8c6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800e8c2:	23ff      	movs	r3, #255	; 0xff
 800e8c4:	e004      	b.n	800e8d0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800e8c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e8ce:	781b      	ldrb	r3, [r3, #0]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b088      	sub	sp, #32
 800e8de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e8e4:	f107 0308 	add.w	r3, r7, #8
 800e8e8:	2218      	movs	r2, #24
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 f9e7 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x03;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e8fa:	1dfb      	adds	r3, r7, #7
 800e8fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e8fe:	2301      	movs	r3, #1
 800e900:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e902:	f107 0308 	add.w	r3, r7, #8
 800e906:	2100      	movs	r1, #0
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 fb45 	bl	800ef98 <hci_send_req>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	da01      	bge.n	800e918 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e914:	23ff      	movs	r3, #255	; 0xff
 800e916:	e000      	b.n	800e91a <hci_reset+0x40>
  return status;
 800e918:	79fb      	ldrb	r3, [r7, #7]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3720      	adds	r7, #32
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b0ce      	sub	sp, #312	; 0x138
 800e926:	af00      	add	r7, sp, #0
 800e928:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e92c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e930:	6019      	str	r1, [r3, #0]
 800e932:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e936:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e93a:	601a      	str	r2, [r3, #0]
 800e93c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e940:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e944:	4602      	mov	r2, r0
 800e946:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800e948:	f107 0318 	add.w	r3, r7, #24
 800e94c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e950:	f107 0310 	add.w	r3, r7, #16
 800e954:	2205      	movs	r2, #5
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 f9b1 	bl	800ecc0 <Osal_MemSet>
  int index_input = 0;
 800e95e:	2300      	movs	r3, #0
 800e960:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800e964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e968:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e96c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e970:	8812      	ldrh	r2, [r2, #0]
 800e972:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e974:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e978:	3302      	adds	r3, #2
 800e97a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e97e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e982:	2218      	movs	r2, #24
 800e984:	2100      	movs	r1, #0
 800e986:	4618      	mov	r0, r3
 800e988:	f000 f99a 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x08;
 800e98c:	2308      	movs	r3, #8
 800e98e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800e992:	2330      	movs	r3, #48	; 0x30
 800e994:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e998:	f107 0318 	add.w	r3, r7, #24
 800e99c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e9a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e9a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800e9a8:	f107 0310 	add.w	r3, r7, #16
 800e9ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800e9b0:	2305      	movs	r3, #5
 800e9b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e9b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 faeb 	bl	800ef98 <hci_send_req>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	da01      	bge.n	800e9cc <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800e9c8:	23ff      	movs	r3, #255	; 0xff
 800e9ca:	e023      	b.n	800ea14 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800e9cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e9d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d005      	beq.n	800e9e6 <hci_le_read_phy+0xc4>
    return resp.Status;
 800e9da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e9de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	e016      	b.n	800ea14 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800e9e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e9ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e9ee:	78da      	ldrb	r2, [r3, #3]
 800e9f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e9f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800e9fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ea04:	791a      	ldrb	r2, [r3, #4]
 800ea06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800ea1e:	b590      	push	{r4, r7, lr}
 800ea20:	b0cd      	sub	sp, #308	; 0x134
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	4604      	mov	r4, r0
 800ea26:	4608      	mov	r0, r1
 800ea28:	4611      	mov	r1, r2
 800ea2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ea32:	4622      	mov	r2, r4
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ea3e:	4602      	mov	r2, r0
 800ea40:	701a      	strb	r2, [r3, #0]
 800ea42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea46:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ea4a:	460a      	mov	r2, r1
 800ea4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800ea4e:	f107 0310 	add.w	r3, r7, #16
 800ea52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ea56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea5a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ea5e:	2200      	movs	r2, #0
 800ea60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ea68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ea70:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ea74:	7812      	ldrb	r2, [r2, #0]
 800ea76:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ea78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ea82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ea8a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ea8e:	7812      	ldrb	r2, [r2, #0]
 800ea90:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ea92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea96:	3301      	adds	r3, #1
 800ea98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ea9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eaa0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eaa4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800eaa8:	7812      	ldrb	r2, [r2, #0]
 800eaaa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800eaac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eab0:	3301      	adds	r3, #1
 800eab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eaba:	2218      	movs	r2, #24
 800eabc:	2100      	movs	r1, #0
 800eabe:	4618      	mov	r0, r3
 800eac0:	f000 f8fe 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x08;
 800eac4:	2308      	movs	r3, #8
 800eac6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800eaca:	2331      	movs	r3, #49	; 0x31
 800eacc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ead0:	f107 0310 	add.w	r3, r7, #16
 800ead4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ead8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eadc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800eae0:	f107 030f 	add.w	r3, r7, #15
 800eae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800eae8:	2301      	movs	r3, #1
 800eaea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eaee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f000 fa4f 	bl	800ef98 <hci_send_req>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	da01      	bge.n	800eb04 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800eb00:	23ff      	movs	r3, #255	; 0xff
 800eb02:	e004      	b.n	800eb0e <hci_le_set_default_phy+0xf0>
  return status;
 800eb04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb08:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800eb0c:	781b      	ldrb	r3, [r3, #0]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd90      	pop	{r4, r7, pc}

0800eb18 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 800eb18:	b5b0      	push	{r4, r5, r7, lr}
 800eb1a:	b0cc      	sub	sp, #304	; 0x130
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4605      	mov	r5, r0
 800eb20:	460c      	mov	r4, r1
 800eb22:	4610      	mov	r0, r2
 800eb24:	4619      	mov	r1, r3
 800eb26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb2a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800eb2e:	462a      	mov	r2, r5
 800eb30:	801a      	strh	r2, [r3, #0]
 800eb32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800eb3a:	4622      	mov	r2, r4
 800eb3c:	801a      	strh	r2, [r3, #0]
 800eb3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb42:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800eb46:	4602      	mov	r2, r0
 800eb48:	801a      	strh	r2, [r3, #0]
 800eb4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb52:	460a      	mov	r2, r1
 800eb54:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 800eb56:	f107 0310 	add.w	r3, r7, #16
 800eb5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800eb5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800eb66:	2200      	movs	r2, #0
 800eb68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800eb70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eb78:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800eb7c:	8812      	ldrh	r2, [r2, #0]
 800eb7e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800eb80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb84:	3302      	adds	r3, #2
 800eb86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800eb8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eb92:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800eb96:	8812      	ldrh	r2, [r2, #0]
 800eb98:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800eb9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb9e:	3302      	adds	r3, #2
 800eba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800eba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eba8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ebac:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800ebb0:	8812      	ldrh	r2, [r2, #0]
 800ebb2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800ebb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebb8:	3302      	adds	r3, #2
 800ebba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 800ebbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ebc6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800ebca:	8812      	ldrh	r2, [r2, #0]
 800ebcc:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800ebce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebd2:	3302      	adds	r3, #2
 800ebd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800ebd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebdc:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800ebe0:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800ebe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebe6:	3302      	adds	r3, #2
 800ebe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800ebec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebf0:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800ebf4:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800ebf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebfa:	3302      	adds	r3, #2
 800ebfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800ec00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec04:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800ec08:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800ec0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec0e:	3302      	adds	r3, #2
 800ec10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 800ec14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec18:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ec1c:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800ec1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec22:	3301      	adds	r3, #1
 800ec24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 800ec28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec2c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ec30:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 800ec32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec36:	3301      	adds	r3, #1
 800ec38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ec3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec40:	2218      	movs	r2, #24
 800ec42:	2100      	movs	r1, #0
 800ec44:	4618      	mov	r0, r3
 800ec46:	f000 f83b 	bl	800ecc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ec4a:	233f      	movs	r3, #63	; 0x3f
 800ec4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800ec50:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800ec54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ec58:	f107 0310 	add.w	r3, r7, #16
 800ec5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ec60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ec68:	f107 030f 	add.w	r3, r7, #15
 800ec6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ec70:	2301      	movs	r3, #1
 800ec72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 f98b 	bl	800ef98 <hci_send_req>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	da01      	bge.n	800ec8c <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 800ec88:	23ff      	movs	r3, #255	; 0xff
 800ec8a:	e004      	b.n	800ec96 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 800ec8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec90:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ec94:	781b      	ldrb	r3, [r3, #0]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bdb0      	pop	{r4, r5, r7, pc}

0800eca0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	68b9      	ldr	r1, [r7, #8]
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f002 faf1 	bl	8011298 <memcpy>
 800ecb6:	4603      	mov	r3, r0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3710      	adds	r7, #16
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	68b9      	ldr	r1, [r7, #8]
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f002 faef 	bl	80112b4 <memset>
 800ecd6:	4603      	mov	r3, r0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ece8:	f107 030c 	add.w	r3, r7, #12
 800ecec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	212c      	movs	r1, #44	; 0x2c
 800ecf8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800ecfc:	f000 fae2 	bl	800f2c4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	330b      	adds	r3, #11
 800ed04:	78db      	ldrb	r3, [r3, #3]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3720      	adds	r7, #32
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b088      	sub	sp, #32
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ed16:	f107 030c 	add.w	r3, r7, #12
 800ed1a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	210f      	movs	r1, #15
 800ed26:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800ed2a:	f000 facb 	bl	800f2c4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	330b      	adds	r3, #11
 800ed32:	78db      	ldrb	r3, [r3, #3]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3720      	adds	r7, #32
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b088      	sub	sp, #32
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ed44:	f107 030c 	add.w	r3, r7, #12
 800ed48:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	210e      	movs	r1, #14
 800ed50:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800ed54:	f000 fab6 	bl	800f2c4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	330b      	adds	r3, #11
 800ed5c:	78db      	ldrb	r3, [r3, #3]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3720      	adds	r7, #32
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b08b      	sub	sp, #44	; 0x2c
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ed74:	2300      	movs	r3, #0
 800ed76:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ed84:	2300      	movs	r3, #0
 800ed86:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ed90:	4b4a      	ldr	r3, [pc, #296]	; (800eebc <SHCI_GetWirelessFwInfo+0x154>)
 800ed92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed98:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eda2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4a44      	ldr	r2, [pc, #272]	; (800eec0 <SHCI_GetWirelessFwInfo+0x158>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d10f      	bne.n	800edd4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	695b      	ldr	r3, [r3, #20]
 800edb8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	699b      	ldr	r3, [r3, #24]
 800edbe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	69db      	ldr	r3, [r3, #28]
 800edc4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	617b      	str	r3, [r7, #20]
 800edd2:	e01a      	b.n	800ee0a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eddc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800ede0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	691b      	ldr	r3, [r3, #16]
 800ede8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0c:	0e1b      	lsrs	r3, r3, #24
 800ee0e:	b2da      	uxtb	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	0c1b      	lsrs	r3, r3, #16
 800ee18:	b2da      	uxtb	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee20:	0a1b      	lsrs	r3, r3, #8
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ee28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2a:	091b      	lsrs	r3, r3, #4
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	f003 030f 	and.w	r3, r3, #15
 800ee32:	b2da      	uxtb	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	f003 030f 	and.w	r3, r3, #15
 800ee40:	b2da      	uxtb	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ee46:	6a3b      	ldr	r3, [r7, #32]
 800ee48:	0e1b      	lsrs	r3, r3, #24
 800ee4a:	b2da      	uxtb	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ee50:	6a3b      	ldr	r3, [r7, #32]
 800ee52:	0c1b      	lsrs	r3, r3, #16
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	0a1b      	lsrs	r3, r3, #8
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	0e1b      	lsrs	r3, r3, #24
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	0c1b      	lsrs	r3, r3, #16
 800ee82:	b2da      	uxtb	r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	0a1b      	lsrs	r3, r3, #8
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	0e1b      	lsrs	r3, r3, #24
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	0c1b      	lsrs	r3, r3, #16
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	372c      	adds	r7, #44	; 0x2c
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	58004000 	.word	0x58004000
 800eec0:	a94656b9 	.word	0xa94656b9

0800eec4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	4a08      	ldr	r2, [pc, #32]	; (800eef4 <hci_init+0x30>)
 800eed4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800eed6:	4a08      	ldr	r2, [pc, #32]	; (800eef8 <hci_init+0x34>)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800eedc:	4806      	ldr	r0, [pc, #24]	; (800eef8 <hci_init+0x34>)
 800eede:	f000 f973 	bl	800f1c8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f000 f8d4 	bl	800f094 <TlInit>

  return;
 800eeec:	bf00      	nop
}
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	20000a6c 	.word	0x20000a6c
 800eef8:	20000a44 	.word	0x20000a44

0800eefc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ef02:	4822      	ldr	r0, [pc, #136]	; (800ef8c <hci_user_evt_proc+0x90>)
 800ef04:	f001 fa5e 	bl	80103c4 <LST_is_empty>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d12b      	bne.n	800ef66 <hci_user_evt_proc+0x6a>
 800ef0e:	4b20      	ldr	r3, [pc, #128]	; (800ef90 <hci_user_evt_proc+0x94>)
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d027      	beq.n	800ef66 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ef16:	f107 030c 	add.w	r3, r7, #12
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	481b      	ldr	r0, [pc, #108]	; (800ef8c <hci_user_evt_proc+0x90>)
 800ef1e:	f001 fae0 	bl	80104e2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ef22:	4b1c      	ldr	r3, [pc, #112]	; (800ef94 <hci_user_evt_proc+0x98>)
 800ef24:	69db      	ldr	r3, [r3, #28]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00c      	beq.n	800ef44 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ef32:	4b18      	ldr	r3, [pc, #96]	; (800ef94 <hci_user_evt_proc+0x98>)
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	1d3a      	adds	r2, r7, #4
 800ef38:	4610      	mov	r0, r2
 800ef3a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ef3c:	793a      	ldrb	r2, [r7, #4]
 800ef3e:	4b14      	ldr	r3, [pc, #80]	; (800ef90 <hci_user_evt_proc+0x94>)
 800ef40:	701a      	strb	r2, [r3, #0]
 800ef42:	e002      	b.n	800ef4a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ef44:	4b12      	ldr	r3, [pc, #72]	; (800ef90 <hci_user_evt_proc+0x94>)
 800ef46:	2201      	movs	r2, #1
 800ef48:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ef4a:	4b11      	ldr	r3, [pc, #68]	; (800ef90 <hci_user_evt_proc+0x94>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d004      	beq.n	800ef5c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 fc03 	bl	800f760 <TL_MM_EvtDone>
 800ef5a:	e004      	b.n	800ef66 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	4619      	mov	r1, r3
 800ef60:	480a      	ldr	r0, [pc, #40]	; (800ef8c <hci_user_evt_proc+0x90>)
 800ef62:	f001 fa51 	bl	8010408 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ef66:	4809      	ldr	r0, [pc, #36]	; (800ef8c <hci_user_evt_proc+0x90>)
 800ef68:	f001 fa2c 	bl	80103c4 <LST_is_empty>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d107      	bne.n	800ef82 <hci_user_evt_proc+0x86>
 800ef72:	4b07      	ldr	r3, [pc, #28]	; (800ef90 <hci_user_evt_proc+0x94>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d003      	beq.n	800ef82 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ef7a:	4804      	ldr	r0, [pc, #16]	; (800ef8c <hci_user_evt_proc+0x90>)
 800ef7c:	f7f4 f9ce 	bl	800331c <hci_notify_asynch_evt>
  }


  return;
 800ef80:	bf00      	nop
 800ef82:	bf00      	nop
}
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20000370 	.word	0x20000370
 800ef90:	2000037c 	.word	0x2000037c
 800ef94:	20000a44 	.word	0x20000a44

0800ef98 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b088      	sub	sp, #32
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800efa4:	2000      	movs	r0, #0
 800efa6:	f000 f8cb 	bl	800f140 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800efaa:	2300      	movs	r3, #0
 800efac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	885b      	ldrh	r3, [r3, #2]
 800efb2:	b21b      	sxth	r3, r3
 800efb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efb8:	b21a      	sxth	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	029b      	lsls	r3, r3, #10
 800efc0:	b21b      	sxth	r3, r3
 800efc2:	4313      	orrs	r3, r2
 800efc4:	b21b      	sxth	r3, r3
 800efc6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	b2d9      	uxtb	r1, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	689a      	ldr	r2, [r3, #8]
 800efd2:	8bbb      	ldrh	r3, [r7, #28]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 f88d 	bl	800f0f4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800efda:	e04e      	b.n	800f07a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800efdc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800efe0:	f7f4 f9b3 	bl	800334a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800efe4:	e043      	b.n	800f06e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800efe6:	f107 030c 	add.w	r3, r7, #12
 800efea:	4619      	mov	r1, r3
 800efec:	4828      	ldr	r0, [pc, #160]	; (800f090 <hci_send_req+0xf8>)
 800efee:	f001 fa78 	bl	80104e2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	7a5b      	ldrb	r3, [r3, #9]
 800eff6:	2b0f      	cmp	r3, #15
 800eff8:	d114      	bne.n	800f024 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	330b      	adds	r3, #11
 800effe:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	885b      	ldrh	r3, [r3, #2]
 800f004:	b29b      	uxth	r3, r3
 800f006:	8bba      	ldrh	r2, [r7, #28]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d104      	bne.n	800f016 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	693a      	ldr	r2, [r7, #16]
 800f012:	7812      	ldrb	r2, [r2, #0]
 800f014:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	785b      	ldrb	r3, [r3, #1]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d027      	beq.n	800f06e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f01e:	2301      	movs	r3, #1
 800f020:	77fb      	strb	r3, [r7, #31]
 800f022:	e024      	b.n	800f06e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	330b      	adds	r3, #11
 800f028:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f030:	b29b      	uxth	r3, r3
 800f032:	8bba      	ldrh	r2, [r7, #28]
 800f034:	429a      	cmp	r2, r3
 800f036:	d114      	bne.n	800f062 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	7a9b      	ldrb	r3, [r3, #10]
 800f03c:	3b03      	subs	r3, #3
 800f03e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	695a      	ldr	r2, [r3, #20]
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	429a      	cmp	r2, r3
 800f048:	bfa8      	it	ge
 800f04a:	461a      	movge	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6918      	ldr	r0, [r3, #16]
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	1cd9      	adds	r1, r3, #3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	695b      	ldr	r3, [r3, #20]
 800f05c:	461a      	mov	r2, r3
 800f05e:	f002 f91b 	bl	8011298 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f06a:	2301      	movs	r3, #1
 800f06c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f06e:	4808      	ldr	r0, [pc, #32]	; (800f090 <hci_send_req+0xf8>)
 800f070:	f001 f9a8 	bl	80103c4 <LST_is_empty>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d0b5      	beq.n	800efe6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800f07a:	7ffb      	ldrb	r3, [r7, #31]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d0ad      	beq.n	800efdc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800f080:	2001      	movs	r0, #1
 800f082:	f000 f85d 	bl	800f140 <NotifyCmdStatus>

  return 0;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3720      	adds	r7, #32
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20000a64 	.word	0x20000a64

0800f094 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800f09c:	480f      	ldr	r0, [pc, #60]	; (800f0dc <TlInit+0x48>)
 800f09e:	f001 f981 	bl	80103a4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800f0a2:	4a0f      	ldr	r2, [pc, #60]	; (800f0e0 <TlInit+0x4c>)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800f0a8:	480e      	ldr	r0, [pc, #56]	; (800f0e4 <TlInit+0x50>)
 800f0aa:	f001 f97b 	bl	80103a4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f0ae:	4b0e      	ldr	r3, [pc, #56]	; (800f0e8 <TlInit+0x54>)
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800f0b4:	4b0d      	ldr	r3, [pc, #52]	; (800f0ec <TlInit+0x58>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00a      	beq.n	800f0d2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800f0c0:	4b0b      	ldr	r3, [pc, #44]	; (800f0f0 <TlInit+0x5c>)
 800f0c2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800f0c4:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <TlInit+0x58>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f107 0208 	add.w	r2, r7, #8
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	4798      	blx	r3
  }

  return;
 800f0d0:	bf00      	nop
 800f0d2:	bf00      	nop
}
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	20000a64 	.word	0x20000a64
 800f0e0:	20000378 	.word	0x20000378
 800f0e4:	20000370 	.word	0x20000370
 800f0e8:	2000037c 	.word	0x2000037c
 800f0ec:	20000a44 	.word	0x20000a44
 800f0f0:	0800f181 	.word	0x0800f181

0800f0f4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	603a      	str	r2, [r7, #0]
 800f0fe:	80fb      	strh	r3, [r7, #6]
 800f100:	460b      	mov	r3, r1
 800f102:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800f104:	4b0c      	ldr	r3, [pc, #48]	; (800f138 <SendCmd+0x44>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	88fa      	ldrh	r2, [r7, #6]
 800f10a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800f10e:	4b0a      	ldr	r3, [pc, #40]	; (800f138 <SendCmd+0x44>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	797a      	ldrb	r2, [r7, #5]
 800f114:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800f116:	4b08      	ldr	r3, [pc, #32]	; (800f138 <SendCmd+0x44>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	330c      	adds	r3, #12
 800f11c:	797a      	ldrb	r2, [r7, #5]
 800f11e:	6839      	ldr	r1, [r7, #0]
 800f120:	4618      	mov	r0, r3
 800f122:	f002 f8b9 	bl	8011298 <memcpy>

  hciContext.io.Send(0,0);
 800f126:	4b05      	ldr	r3, [pc, #20]	; (800f13c <SendCmd+0x48>)
 800f128:	691b      	ldr	r3, [r3, #16]
 800f12a:	2100      	movs	r1, #0
 800f12c:	2000      	movs	r0, #0
 800f12e:	4798      	blx	r3

  return;
 800f130:	bf00      	nop
}
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20000378 	.word	0x20000378
 800f13c:	20000a44 	.word	0x20000a44

0800f140 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800f14a:	79fb      	ldrb	r3, [r7, #7]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d108      	bne.n	800f162 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800f150:	4b0a      	ldr	r3, [pc, #40]	; (800f17c <NotifyCmdStatus+0x3c>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00d      	beq.n	800f174 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800f158:	4b08      	ldr	r3, [pc, #32]	; (800f17c <NotifyCmdStatus+0x3c>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2000      	movs	r0, #0
 800f15e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800f160:	e008      	b.n	800f174 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800f162:	4b06      	ldr	r3, [pc, #24]	; (800f17c <NotifyCmdStatus+0x3c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d004      	beq.n	800f174 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800f16a:	4b04      	ldr	r3, [pc, #16]	; (800f17c <NotifyCmdStatus+0x3c>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2001      	movs	r0, #1
 800f170:	4798      	blx	r3
  return;
 800f172:	bf00      	nop
 800f174:	bf00      	nop
}
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	20000a6c 	.word	0x20000a6c

0800f180 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	7a5b      	ldrb	r3, [r3, #9]
 800f18c:	2b0f      	cmp	r3, #15
 800f18e:	d003      	beq.n	800f198 <TlEvtReceived+0x18>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	7a5b      	ldrb	r3, [r3, #9]
 800f194:	2b0e      	cmp	r3, #14
 800f196:	d107      	bne.n	800f1a8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800f198:	6879      	ldr	r1, [r7, #4]
 800f19a:	4809      	ldr	r0, [pc, #36]	; (800f1c0 <TlEvtReceived+0x40>)
 800f19c:	f001 f95a 	bl	8010454 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	f7f4 f8c7 	bl	8003334 <hci_cmd_resp_release>
 800f1a6:	e006      	b.n	800f1b6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800f1a8:	6879      	ldr	r1, [r7, #4]
 800f1aa:	4806      	ldr	r0, [pc, #24]	; (800f1c4 <TlEvtReceived+0x44>)
 800f1ac:	f001 f952 	bl	8010454 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f1b0:	4804      	ldr	r0, [pc, #16]	; (800f1c4 <TlEvtReceived+0x44>)
 800f1b2:	f7f4 f8b3 	bl	800331c <hci_notify_asynch_evt>
  }

  return;
 800f1b6:	bf00      	nop
}
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	20000a64 	.word	0x20000a64
 800f1c4:	20000370 	.word	0x20000370

0800f1c8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a05      	ldr	r2, [pc, #20]	; (800f1e8 <hci_register_io_bus+0x20>)
 800f1d4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a04      	ldr	r2, [pc, #16]	; (800f1ec <hci_register_io_bus+0x24>)
 800f1da:	611a      	str	r2, [r3, #16]

  return;
 800f1dc:	bf00      	nop
}
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr
 800f1e8:	0800f4d9 	.word	0x0800f4d9
 800f1ec:	0800f541 	.word	0x0800f541

0800f1f0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	4a08      	ldr	r2, [pc, #32]	; (800f220 <shci_init+0x30>)
 800f200:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800f202:	4a08      	ldr	r2, [pc, #32]	; (800f224 <shci_init+0x34>)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800f208:	4806      	ldr	r0, [pc, #24]	; (800f224 <shci_init+0x34>)
 800f20a:	f000 f911 	bl	800f430 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 f894 	bl	800f340 <TlInit>

  return;
 800f218:	bf00      	nop
}
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	20000a90 	.word	0x20000a90
 800f224:	20000a70 	.word	0x20000a70

0800f228 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f22e:	4822      	ldr	r0, [pc, #136]	; (800f2b8 <shci_user_evt_proc+0x90>)
 800f230:	f001 f8c8 	bl	80103c4 <LST_is_empty>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d12b      	bne.n	800f292 <shci_user_evt_proc+0x6a>
 800f23a:	4b20      	ldr	r3, [pc, #128]	; (800f2bc <shci_user_evt_proc+0x94>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d027      	beq.n	800f292 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f242:	f107 030c 	add.w	r3, r7, #12
 800f246:	4619      	mov	r1, r3
 800f248:	481b      	ldr	r0, [pc, #108]	; (800f2b8 <shci_user_evt_proc+0x90>)
 800f24a:	f001 f94a 	bl	80104e2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800f24e:	4b1c      	ldr	r3, [pc, #112]	; (800f2c0 <shci_user_evt_proc+0x98>)
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00c      	beq.n	800f270 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800f25a:	2301      	movs	r3, #1
 800f25c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f25e:	4b18      	ldr	r3, [pc, #96]	; (800f2c0 <shci_user_evt_proc+0x98>)
 800f260:	69db      	ldr	r3, [r3, #28]
 800f262:	1d3a      	adds	r2, r7, #4
 800f264:	4610      	mov	r0, r2
 800f266:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800f268:	793a      	ldrb	r2, [r7, #4]
 800f26a:	4b14      	ldr	r3, [pc, #80]	; (800f2bc <shci_user_evt_proc+0x94>)
 800f26c:	701a      	strb	r2, [r3, #0]
 800f26e:	e002      	b.n	800f276 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f270:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <shci_user_evt_proc+0x94>)
 800f272:	2201      	movs	r2, #1
 800f274:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800f276:	4b11      	ldr	r3, [pc, #68]	; (800f2bc <shci_user_evt_proc+0x94>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d004      	beq.n	800f288 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	4618      	mov	r0, r3
 800f282:	f000 fa6d 	bl	800f760 <TL_MM_EvtDone>
 800f286:	e004      	b.n	800f292 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	4619      	mov	r1, r3
 800f28c:	480a      	ldr	r0, [pc, #40]	; (800f2b8 <shci_user_evt_proc+0x90>)
 800f28e:	f001 f8bb 	bl	8010408 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f292:	4809      	ldr	r0, [pc, #36]	; (800f2b8 <shci_user_evt_proc+0x90>)
 800f294:	f001 f896 	bl	80103c4 <LST_is_empty>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d107      	bne.n	800f2ae <shci_user_evt_proc+0x86>
 800f29e:	4b07      	ldr	r3, [pc, #28]	; (800f2bc <shci_user_evt_proc+0x94>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d003      	beq.n	800f2ae <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800f2a6:	4804      	ldr	r0, [pc, #16]	; (800f2b8 <shci_user_evt_proc+0x90>)
 800f2a8:	f7f1 ff7c 	bl	80011a4 <shci_notify_asynch_evt>
  }


  return;
 800f2ac:	bf00      	nop
 800f2ae:	bf00      	nop
}
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20000380 	.word	0x20000380
 800f2bc:	20000390 	.word	0x20000390
 800f2c0:	20000a70 	.word	0x20000a70

0800f2c4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60ba      	str	r2, [r7, #8]
 800f2cc:	607b      	str	r3, [r7, #4]
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	81fb      	strh	r3, [r7, #14]
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	f000 f864 	bl	800f3a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800f2dc:	4b16      	ldr	r3, [pc, #88]	; (800f338 <shci_send+0x74>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	89fa      	ldrh	r2, [r7, #14]
 800f2e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800f2e6:	4b14      	ldr	r3, [pc, #80]	; (800f338 <shci_send+0x74>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	7b7a      	ldrb	r2, [r7, #13]
 800f2ec:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800f2ee:	4b12      	ldr	r3, [pc, #72]	; (800f338 <shci_send+0x74>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	330c      	adds	r3, #12
 800f2f4:	7b7a      	ldrb	r2, [r7, #13]
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f001 ffcd 	bl	8011298 <memcpy>

  shciContext.io.Send(0,0);
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <shci_send+0x78>)
 800f300:	691b      	ldr	r3, [r3, #16]
 800f302:	2100      	movs	r1, #0
 800f304:	2000      	movs	r0, #0
 800f306:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800f308:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f30c:	f7f1 ff61 	bl	80011d2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f103 0008 	add.w	r0, r3, #8
 800f316:	4b08      	ldr	r3, [pc, #32]	; (800f338 <shci_send+0x74>)
 800f318:	6819      	ldr	r1, [r3, #0]
 800f31a:	4b07      	ldr	r3, [pc, #28]	; (800f338 <shci_send+0x74>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	789b      	ldrb	r3, [r3, #2]
 800f320:	3303      	adds	r3, #3
 800f322:	461a      	mov	r2, r3
 800f324:	f001 ffb8 	bl	8011298 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f328:	2001      	movs	r0, #1
 800f32a:	f000 f83b 	bl	800f3a4 <Cmd_SetStatus>

  return;
 800f32e:	bf00      	nop
}
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	2000038c 	.word	0x2000038c
 800f33c:	20000a70 	.word	0x20000a70

0800f340 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800f348:	4a10      	ldr	r2, [pc, #64]	; (800f38c <TlInit+0x4c>)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800f34e:	4810      	ldr	r0, [pc, #64]	; (800f390 <TlInit+0x50>)
 800f350:	f001 f828 	bl	80103a4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f354:	2001      	movs	r0, #1
 800f356:	f000 f825 	bl	800f3a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f35a:	4b0e      	ldr	r3, [pc, #56]	; (800f394 <TlInit+0x54>)
 800f35c:	2201      	movs	r2, #1
 800f35e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800f360:	4b0d      	ldr	r3, [pc, #52]	; (800f398 <TlInit+0x58>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00c      	beq.n	800f382 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800f36c:	4b0b      	ldr	r3, [pc, #44]	; (800f39c <TlInit+0x5c>)
 800f36e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800f370:	4b0b      	ldr	r3, [pc, #44]	; (800f3a0 <TlInit+0x60>)
 800f372:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800f374:	4b08      	ldr	r3, [pc, #32]	; (800f398 <TlInit+0x58>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f107 020c 	add.w	r2, r7, #12
 800f37c:	4610      	mov	r0, r2
 800f37e:	4798      	blx	r3
  }

  return;
 800f380:	bf00      	nop
 800f382:	bf00      	nop
}
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	2000038c 	.word	0x2000038c
 800f390:	20000380 	.word	0x20000380
 800f394:	20000390 	.word	0x20000390
 800f398:	20000a70 	.word	0x20000a70
 800f39c:	0800f3f5 	.word	0x0800f3f5
 800f3a0:	0800f40d 	.word	0x0800f40d

0800f3a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800f3ae:	79fb      	ldrb	r3, [r7, #7]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d10b      	bne.n	800f3cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800f3b4:	4b0d      	ldr	r3, [pc, #52]	; (800f3ec <Cmd_SetStatus+0x48>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d003      	beq.n	800f3c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800f3bc:	4b0b      	ldr	r3, [pc, #44]	; (800f3ec <Cmd_SetStatus+0x48>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800f3c4:	4b0a      	ldr	r3, [pc, #40]	; (800f3f0 <Cmd_SetStatus+0x4c>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800f3ca:	e00b      	b.n	800f3e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800f3cc:	4b08      	ldr	r3, [pc, #32]	; (800f3f0 <Cmd_SetStatus+0x4c>)
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800f3d2:	4b06      	ldr	r3, [pc, #24]	; (800f3ec <Cmd_SetStatus+0x48>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d004      	beq.n	800f3e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800f3da:	4b04      	ldr	r3, [pc, #16]	; (800f3ec <Cmd_SetStatus+0x48>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2001      	movs	r0, #1
 800f3e0:	4798      	blx	r3
  return;
 800f3e2:	bf00      	nop
 800f3e4:	bf00      	nop
}
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	20000a90 	.word	0x20000a90
 800f3f0:	20000388 	.word	0x20000388

0800f3f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	f7f1 fedd 	bl	80011bc <shci_cmd_resp_release>

  return;
 800f402:	bf00      	nop
}
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
	...

0800f40c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800f414:	6879      	ldr	r1, [r7, #4]
 800f416:	4805      	ldr	r0, [pc, #20]	; (800f42c <TlUserEvtReceived+0x20>)
 800f418:	f001 f81c 	bl	8010454 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f41c:	4803      	ldr	r0, [pc, #12]	; (800f42c <TlUserEvtReceived+0x20>)
 800f41e:	f7f1 fec1 	bl	80011a4 <shci_notify_asynch_evt>

  return;
 800f422:	bf00      	nop
}
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	20000380 	.word	0x20000380

0800f430 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a05      	ldr	r2, [pc, #20]	; (800f450 <shci_register_io_bus+0x20>)
 800f43c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a04      	ldr	r2, [pc, #16]	; (800f454 <shci_register_io_bus+0x24>)
 800f442:	611a      	str	r2, [r3, #16]

  return;
 800f444:	bf00      	nop
}
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr
 800f450:	0800f5ed 	.word	0x0800f5ed
 800f454:	0800f641 	.word	0x0800f641

0800f458 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800f45c:	f7f4 fe16 	bl	800408c <HW_IPCC_Enable>

  return;
 800f460:	bf00      	nop
}
 800f462:	bd80      	pop	{r7, pc}

0800f464 <TL_Init>:


void TL_Init( void )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800f468:	4b10      	ldr	r3, [pc, #64]	; (800f4ac <TL_Init+0x48>)
 800f46a:	4a11      	ldr	r2, [pc, #68]	; (800f4b0 <TL_Init+0x4c>)
 800f46c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800f46e:	4b0f      	ldr	r3, [pc, #60]	; (800f4ac <TL_Init+0x48>)
 800f470:	4a10      	ldr	r2, [pc, #64]	; (800f4b4 <TL_Init+0x50>)
 800f472:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800f474:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <TL_Init+0x48>)
 800f476:	4a10      	ldr	r2, [pc, #64]	; (800f4b8 <TL_Init+0x54>)
 800f478:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800f47a:	4b0c      	ldr	r3, [pc, #48]	; (800f4ac <TL_Init+0x48>)
 800f47c:	4a0f      	ldr	r2, [pc, #60]	; (800f4bc <TL_Init+0x58>)
 800f47e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800f480:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <TL_Init+0x48>)
 800f482:	4a0f      	ldr	r2, [pc, #60]	; (800f4c0 <TL_Init+0x5c>)
 800f484:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800f486:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <TL_Init+0x48>)
 800f488:	4a0e      	ldr	r2, [pc, #56]	; (800f4c4 <TL_Init+0x60>)
 800f48a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800f48c:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <TL_Init+0x48>)
 800f48e:	4a0e      	ldr	r2, [pc, #56]	; (800f4c8 <TL_Init+0x64>)
 800f490:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800f492:	4b06      	ldr	r3, [pc, #24]	; (800f4ac <TL_Init+0x48>)
 800f494:	4a0d      	ldr	r2, [pc, #52]	; (800f4cc <TL_Init+0x68>)
 800f496:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800f498:	4b04      	ldr	r3, [pc, #16]	; (800f4ac <TL_Init+0x48>)
 800f49a:	4a0d      	ldr	r2, [pc, #52]	; (800f4d0 <TL_Init+0x6c>)
 800f49c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800f49e:	4b03      	ldr	r3, [pc, #12]	; (800f4ac <TL_Init+0x48>)
 800f4a0:	4a0c      	ldr	r2, [pc, #48]	; (800f4d4 <TL_Init+0x70>)
 800f4a2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800f4a4:	f7f4 fe06 	bl	80040b4 <HW_IPCC_Init>

  return;
 800f4a8:	bf00      	nop
}
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	20030000 	.word	0x20030000
 800f4b0:	20030134 	.word	0x20030134
 800f4b4:	20030154 	.word	0x20030154
 800f4b8:	20030164 	.word	0x20030164
 800f4bc:	20030174 	.word	0x20030174
 800f4c0:	2003017c 	.word	0x2003017c
 800f4c4:	20030184 	.word	0x20030184
 800f4c8:	2003018c 	.word	0x2003018c
 800f4cc:	200301a8 	.word	0x200301a8
 800f4d0:	200301ac 	.word	0x200301ac
 800f4d4:	200301b8 	.word	0x200301b8

0800f4d8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800f4e4:	4811      	ldr	r0, [pc, #68]	; (800f52c <TL_BLE_Init+0x54>)
 800f4e6:	f000 ff5d 	bl	80103a4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800f4ea:	4b11      	ldr	r3, [pc, #68]	; (800f530 <TL_BLE_Init+0x58>)
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	689a      	ldr	r2, [r3, #8]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	68da      	ldr	r2, [r3, #12]
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	4a0c      	ldr	r2, [pc, #48]	; (800f534 <TL_BLE_Init+0x5c>)
 800f504:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	4a08      	ldr	r2, [pc, #32]	; (800f52c <TL_BLE_Init+0x54>)
 800f50a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800f50c:	f7f4 fde8 	bl	80040e0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a08      	ldr	r2, [pc, #32]	; (800f538 <TL_BLE_Init+0x60>)
 800f516:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	4a07      	ldr	r2, [pc, #28]	; (800f53c <TL_BLE_Init+0x64>)
 800f51e:	6013      	str	r3, [r2, #0]

  return 0;
 800f520:	2300      	movs	r3, #0
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	200301d4 	.word	0x200301d4
 800f530:	20030000 	.word	0x20030000
 800f534:	20030a58 	.word	0x20030a58
 800f538:	20000a9c 	.word	0x20000a9c
 800f53c:	20000aa0 	.word	0x20000aa0

0800f540 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	460b      	mov	r3, r1
 800f54a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800f54c:	4b09      	ldr	r3, [pc, #36]	; (800f574 <TL_BLE_SendCmd+0x34>)
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2201      	movs	r2, #1
 800f554:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800f556:	4b07      	ldr	r3, [pc, #28]	; (800f574 <TL_BLE_SendCmd+0x34>)
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4619      	mov	r1, r3
 800f55e:	2001      	movs	r0, #1
 800f560:	f000 f96c 	bl	800f83c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800f564:	f7f4 fdc6 	bl	80040f4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	20030000 	.word	0x20030000

0800f578 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800f57e:	e01c      	b.n	800f5ba <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800f580:	1d3b      	adds	r3, r7, #4
 800f582:	4619      	mov	r1, r3
 800f584:	4812      	ldr	r0, [pc, #72]	; (800f5d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f586:	f000 ffac 	bl	80104e2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	7a5b      	ldrb	r3, [r3, #9]
 800f58e:	2b0f      	cmp	r3, #15
 800f590:	d003      	beq.n	800f59a <HW_IPCC_BLE_RxEvtNot+0x22>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	7a5b      	ldrb	r3, [r3, #9]
 800f596:	2b0e      	cmp	r3, #14
 800f598:	d105      	bne.n	800f5a6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4619      	mov	r1, r3
 800f59e:	2002      	movs	r0, #2
 800f5a0:	f000 f94c 	bl	800f83c <OutputDbgTrace>
 800f5a4:	e004      	b.n	800f5b0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	2003      	movs	r0, #3
 800f5ac:	f000 f946 	bl	800f83c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800f5b0:	4b08      	ldr	r3, [pc, #32]	; (800f5d4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f5ba:	4805      	ldr	r0, [pc, #20]	; (800f5d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f5bc:	f000 ff02 	bl	80103c4 <LST_is_empty>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d0dc      	beq.n	800f580 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800f5c6:	bf00      	nop
}
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	200301d4 	.word	0x200301d4
 800f5d4:	20000a9c 	.word	0x20000a9c

0800f5d8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800f5dc:	4b02      	ldr	r3, [pc, #8]	; (800f5e8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4798      	blx	r3

  return;
 800f5e2:	bf00      	nop
}
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20000aa0 	.word	0x20000aa0

0800f5ec <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800f5f8:	480d      	ldr	r0, [pc, #52]	; (800f630 <TL_SYS_Init+0x44>)
 800f5fa:	f000 fed3 	bl	80103a4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800f5fe:	4b0d      	ldr	r3, [pc, #52]	; (800f634 <TL_SYS_Init+0x48>)
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	689a      	ldr	r2, [r3, #8]
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	4a08      	ldr	r2, [pc, #32]	; (800f630 <TL_SYS_Init+0x44>)
 800f610:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800f612:	f7f4 fd91 	bl	8004138 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a07      	ldr	r2, [pc, #28]	; (800f638 <TL_SYS_Init+0x4c>)
 800f61c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4a06      	ldr	r2, [pc, #24]	; (800f63c <TL_SYS_Init+0x50>)
 800f624:	6013      	str	r3, [r2, #0]

  return 0;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	200301dc 	.word	0x200301dc
 800f634:	20030000 	.word	0x20030000
 800f638:	20000aa4 	.word	0x20000aa4
 800f63c:	20000aa8 	.word	0x20000aa8

0800f640 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800f64c:	4b09      	ldr	r3, [pc, #36]	; (800f674 <TL_SYS_SendCmd+0x34>)
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2210      	movs	r2, #16
 800f654:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800f656:	4b07      	ldr	r3, [pc, #28]	; (800f674 <TL_SYS_SendCmd+0x34>)
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4619      	mov	r1, r3
 800f65e:	2004      	movs	r0, #4
 800f660:	f000 f8ec 	bl	800f83c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800f664:	f7f4 fd72 	bl	800414c <HW_IPCC_SYS_SendCmd>

  return 0;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20030000 	.word	0x20030000

0800f678 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f67c:	4b07      	ldr	r3, [pc, #28]	; (800f69c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4619      	mov	r1, r3
 800f684:	2005      	movs	r0, #5
 800f686:	f000 f8d9 	bl	800f83c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f68a:	4b05      	ldr	r3, [pc, #20]	; (800f6a0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a03      	ldr	r2, [pc, #12]	; (800f69c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800f690:	68d2      	ldr	r2, [r2, #12]
 800f692:	6812      	ldr	r2, [r2, #0]
 800f694:	4610      	mov	r0, r2
 800f696:	4798      	blx	r3

  return;
 800f698:	bf00      	nop
}
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	20030000 	.word	0x20030000
 800f6a0:	20000aa4 	.word	0x20000aa4

0800f6a4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f6aa:	e00e      	b.n	800f6ca <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800f6ac:	1d3b      	adds	r3, r7, #4
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	480b      	ldr	r0, [pc, #44]	; (800f6e0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800f6b2:	f000 ff16 	bl	80104e2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	2006      	movs	r0, #6
 800f6bc:	f000 f8be 	bl	800f83c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800f6c0:	4b08      	ldr	r3, [pc, #32]	; (800f6e4 <HW_IPCC_SYS_EvtNot+0x40>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f6ca:	4805      	ldr	r0, [pc, #20]	; (800f6e0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800f6cc:	f000 fe7a 	bl	80103c4 <LST_is_empty>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d0ea      	beq.n	800f6ac <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800f6d6:	bf00      	nop
}
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	200301dc 	.word	0x200301dc
 800f6e4:	20000aa8 	.word	0x20000aa8

0800f6e8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800f6f0:	4817      	ldr	r0, [pc, #92]	; (800f750 <TL_MM_Init+0x68>)
 800f6f2:	f000 fe57 	bl	80103a4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800f6f6:	4817      	ldr	r0, [pc, #92]	; (800f754 <TL_MM_Init+0x6c>)
 800f6f8:	f000 fe54 	bl	80103a4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800f6fc:	4b16      	ldr	r3, [pc, #88]	; (800f758 <TL_MM_Init+0x70>)
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	4a16      	ldr	r2, [pc, #88]	; (800f75c <TL_MM_Init+0x74>)
 800f702:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800f704:	4b15      	ldr	r3, [pc, #84]	; (800f75c <TL_MM_Init+0x74>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	6892      	ldr	r2, [r2, #8]
 800f70c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800f70e:	4b13      	ldr	r3, [pc, #76]	; (800f75c <TL_MM_Init+0x74>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	68d2      	ldr	r2, [r2, #12]
 800f716:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800f718:	4b10      	ldr	r3, [pc, #64]	; (800f75c <TL_MM_Init+0x74>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a0c      	ldr	r2, [pc, #48]	; (800f750 <TL_MM_Init+0x68>)
 800f71e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800f720:	4b0e      	ldr	r3, [pc, #56]	; (800f75c <TL_MM_Init+0x74>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	6812      	ldr	r2, [r2, #0]
 800f728:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800f72a:	4b0c      	ldr	r3, [pc, #48]	; (800f75c <TL_MM_Init+0x74>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	6852      	ldr	r2, [r2, #4]
 800f732:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800f734:	4b09      	ldr	r3, [pc, #36]	; (800f75c <TL_MM_Init+0x74>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	6912      	ldr	r2, [r2, #16]
 800f73c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800f73e:	4b07      	ldr	r3, [pc, #28]	; (800f75c <TL_MM_Init+0x74>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	6952      	ldr	r2, [r2, #20]
 800f746:	619a      	str	r2, [r3, #24]

  return;
 800f748:	bf00      	nop
}
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	200301c4 	.word	0x200301c4
 800f754:	20000a94 	.word	0x20000a94
 800f758:	20030000 	.word	0x20030000
 800f75c:	20000aac 	.word	0x20000aac

0800f760 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800f768:	6879      	ldr	r1, [r7, #4]
 800f76a:	4807      	ldr	r0, [pc, #28]	; (800f788 <TL_MM_EvtDone+0x28>)
 800f76c:	f000 fe72 	bl	8010454 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800f770:	6879      	ldr	r1, [r7, #4]
 800f772:	2000      	movs	r0, #0
 800f774:	f000 f862 	bl	800f83c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800f778:	4804      	ldr	r0, [pc, #16]	; (800f78c <TL_MM_EvtDone+0x2c>)
 800f77a:	f7f4 fd0d 	bl	8004198 <HW_IPCC_MM_SendFreeBuf>

  return;
 800f77e:	bf00      	nop
}
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20000a94 	.word	0x20000a94
 800f78c:	0800f791 	.word	0x0800f791

0800f790 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f796:	e00c      	b.n	800f7b2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800f798:	1d3b      	adds	r3, r7, #4
 800f79a:	4619      	mov	r1, r3
 800f79c:	480a      	ldr	r0, [pc, #40]	; (800f7c8 <SendFreeBuf+0x38>)
 800f79e:	f000 fea0 	bl	80104e2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800f7a2:	4b0a      	ldr	r3, [pc, #40]	; (800f7cc <SendFreeBuf+0x3c>)
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f000 fe51 	bl	8010454 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f7b2:	4805      	ldr	r0, [pc, #20]	; (800f7c8 <SendFreeBuf+0x38>)
 800f7b4:	f000 fe06 	bl	80103c4 <LST_is_empty>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d0ec      	beq.n	800f798 <SendFreeBuf+0x8>
  }

  return;
 800f7be:	bf00      	nop
}
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20000a94 	.word	0x20000a94
 800f7cc:	20030000 	.word	0x20030000

0800f7d0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800f7d4:	4805      	ldr	r0, [pc, #20]	; (800f7ec <TL_TRACES_Init+0x1c>)
 800f7d6:	f000 fde5 	bl	80103a4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800f7da:	4b05      	ldr	r3, [pc, #20]	; (800f7f0 <TL_TRACES_Init+0x20>)
 800f7dc:	695b      	ldr	r3, [r3, #20]
 800f7de:	4a03      	ldr	r2, [pc, #12]	; (800f7ec <TL_TRACES_Init+0x1c>)
 800f7e0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800f7e2:	f7f4 fd0f 	bl	8004204 <HW_IPCC_TRACES_Init>

  return;
 800f7e6:	bf00      	nop
}
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	200301cc 	.word	0x200301cc
 800f7f0:	20030000 	.word	0x20030000

0800f7f4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f7fa:	e008      	b.n	800f80e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800f7fc:	1d3b      	adds	r3, r7, #4
 800f7fe:	4619      	mov	r1, r3
 800f800:	4808      	ldr	r0, [pc, #32]	; (800f824 <HW_IPCC_TRACES_EvtNot+0x30>)
 800f802:	f000 fe6e 	bl	80104e2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4618      	mov	r0, r3
 800f80a:	f000 f80d 	bl	800f828 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f80e:	4805      	ldr	r0, [pc, #20]	; (800f824 <HW_IPCC_TRACES_EvtNot+0x30>)
 800f810:	f000 fdd8 	bl	80103c4 <LST_is_empty>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d0f0      	beq.n	800f7fc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800f81a:	bf00      	nop
}
 800f81c:	3708      	adds	r7, #8
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	200301cc 	.word	0x200301cc

0800f828 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	4603      	mov	r3, r0
 800f844:	6039      	str	r1, [r7, #0]
 800f846:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800f848:	79fb      	ldrb	r3, [r7, #7]
 800f84a:	2b06      	cmp	r3, #6
 800f84c:	d845      	bhi.n	800f8da <OutputDbgTrace+0x9e>
 800f84e:	a201      	add	r2, pc, #4	; (adr r2, 800f854 <OutputDbgTrace+0x18>)
 800f850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f854:	0800f871 	.word	0x0800f871
 800f858:	0800f895 	.word	0x0800f895
 800f85c:	0800f89b 	.word	0x0800f89b
 800f860:	0800f8af 	.word	0x0800f8af
 800f864:	0800f8bb 	.word	0x0800f8bb
 800f868:	0800f8c1 	.word	0x0800f8c1
 800f86c:	0800f8cf 	.word	0x0800f8cf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	7a5b      	ldrb	r3, [r3, #9]
 800f878:	2bff      	cmp	r3, #255	; 0xff
 800f87a:	d005      	beq.n	800f888 <OutputDbgTrace+0x4c>
 800f87c:	2bff      	cmp	r3, #255	; 0xff
 800f87e:	dc05      	bgt.n	800f88c <OutputDbgTrace+0x50>
 800f880:	2b0e      	cmp	r3, #14
 800f882:	d005      	beq.n	800f890 <OutputDbgTrace+0x54>
 800f884:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800f886:	e001      	b.n	800f88c <OutputDbgTrace+0x50>
          break;
 800f888:	bf00      	nop
 800f88a:	e027      	b.n	800f8dc <OutputDbgTrace+0xa0>
          break;
 800f88c:	bf00      	nop
 800f88e:	e025      	b.n	800f8dc <OutputDbgTrace+0xa0>
          break;
 800f890:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800f892:	e023      	b.n	800f8dc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800f898:	e020      	b.n	800f8dc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	7a5b      	ldrb	r3, [r3, #9]
 800f8a2:	2b0e      	cmp	r3, #14
 800f8a4:	d001      	beq.n	800f8aa <OutputDbgTrace+0x6e>
 800f8a6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800f8a8:	e000      	b.n	800f8ac <OutputDbgTrace+0x70>
          break;
 800f8aa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f8ac:	e016      	b.n	800f8dc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	7a5b      	ldrb	r3, [r3, #9]
 800f8b6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f8b8:	e010      	b.n	800f8dc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800f8be:	e00d      	b.n	800f8dc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	7a5b      	ldrb	r3, [r3, #9]
 800f8c8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800f8ca:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f8cc:	e006      	b.n	800f8dc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	7a5b      	ldrb	r3, [r3, #9]
 800f8d6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f8d8:	e000      	b.n	800f8dc <OutputDbgTrace+0xa0>

    default:
      break;
 800f8da:	bf00      	nop
  }

  return;
 800f8dc:	bf00      	nop
}
 800f8de:	3714      	adds	r7, #20
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <LL_APB1_GRP1_EnableClock>:
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800f8f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f8f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800f900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4013      	ands	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f90c:	68fb      	ldr	r3, [r7, #12]
}
 800f90e:	bf00      	nop
 800f910:	3714      	adds	r7, #20
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr

0800f91a <HAL_PCD_MspInit>:
 * @brief  Initializes the PCD MSP.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b082      	sub	sp, #8
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
    /* Enable USB FS Clock */
    __HAL_RCC_USB_CLK_ENABLE();
 800f922:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800f926:	f7ff ffdf 	bl	800f8e8 <LL_APB1_GRP1_EnableClock>

    /* Set USB FS Interrupt priority */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0x06, 0);
 800f92a:	2200      	movs	r2, #0
 800f92c:	2106      	movs	r1, #6
 800f92e:	2014      	movs	r0, #20
 800f930:	f7f4 ffdf 	bl	80048f2 <HAL_NVIC_SetPriority>

    /* Enable USB FS Interrupt */
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f934:	2014      	movs	r0, #20
 800f936:	f7f4 fff6 	bl	8004926 <HAL_NVIC_EnableIRQ>
}
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <HAL_PCD_SetupStageCallback>:
 * @brief  SetupStage callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b082      	sub	sp, #8
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800f956:	4619      	mov	r1, r3
 800f958:	4610      	mov	r0, r2
 800f95a:	f7fc fe2f 	bl	800c5bc <USBD_LL_SetupStage>
}
 800f95e:	bf00      	nop
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <HAL_PCD_DataOutStageCallback>:
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b082      	sub	sp, #8
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	460b      	mov	r3, r1
 800f970:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800f978:	78fa      	ldrb	r2, [r7, #3]
 800f97a:	6879      	ldr	r1, [r7, #4]
 800f97c:	4613      	mov	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	4413      	add	r3, r2
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	440b      	add	r3, r1
 800f986:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	78fb      	ldrb	r3, [r7, #3]
 800f98e:	4619      	mov	r1, r3
 800f990:	f7fc fe69 	bl	800c666 <USBD_LL_DataOutStage>
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <HAL_PCD_DataInStageCallback>:
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800f9ae:	78fa      	ldrb	r2, [r7, #3]
 800f9b0:	6879      	ldr	r1, [r7, #4]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4413      	add	r3, r2
 800f9b8:	00db      	lsls	r3, r3, #3
 800f9ba:	440b      	add	r3, r1
 800f9bc:	3340      	adds	r3, #64	; 0x40
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	f7fc feb2 	bl	800c72c <USBD_LL_DataInStage>
}
 800f9c8:	bf00      	nop
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <HAL_PCD_SOFCallback>:
 * @brief  SOF callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF(hpcd->pData);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fc ffc6 	bl	800c970 <USBD_LL_SOF>
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <HAL_PCD_ResetCallback>:
 * @brief  Reset callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    /* Reset Device */
    USBD_LL_Reset(hpcd->pData);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fc ff2c 	bl	800c858 <USBD_LL_Reset>

    /* Set USB Current Speed */
    USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800fa06:	2101      	movs	r1, #1
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fc ff73 	bl	800c8f4 <USBD_LL_SetSpeed>
}
 800fa0e:	bf00      	nop
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <HAL_PCD_SuspendCallback>:
 * @brief  Suspend callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b082      	sub	sp, #8
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode */
    USBD_LL_Suspend(hpcd->pData);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fc ff75 	bl	800c914 <USBD_LL_Suspend>
}
 800fa2a:	bf00      	nop
 800fa2c:	3708      	adds	r7, #8
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <HAL_PCD_ResumeCallback>:
 * @brief  Resume callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b082      	sub	sp, #8
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
    USBD_LL_Resume(hpcd->pData);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fc ff7d 	bl	800c940 <USBD_LL_Resume>
}
 800fa46:	bf00      	nop
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
	...

0800fa50 <USBD_LL_Init>:
 * @brief  Initializes the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
    /* Set LL Driver parameters */
    hpcd.Instance = USB;
 800fa58:	4b1d      	ldr	r3, [pc, #116]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa5a:	4a1e      	ldr	r2, [pc, #120]	; (800fad4 <USBD_LL_Init+0x84>)
 800fa5c:	601a      	str	r2, [r3, #0]
    hpcd.Init.dev_endpoints = 8;
 800fa5e:	4b1c      	ldr	r3, [pc, #112]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa60:	2208      	movs	r2, #8
 800fa62:	605a      	str	r2, [r3, #4]
    hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800fa64:	4b1a      	ldr	r3, [pc, #104]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa66:	2200      	movs	r2, #0
 800fa68:	60da      	str	r2, [r3, #12]
    hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa6a:	4b19      	ldr	r3, [pc, #100]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa6c:	2202      	movs	r2, #2
 800fa6e:	611a      	str	r2, [r3, #16]
    hpcd.Init.speed = PCD_SPEED_FULL;
 800fa70:	4b17      	ldr	r3, [pc, #92]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa72:	2202      	movs	r2, #2
 800fa74:	609a      	str	r2, [r3, #8]
    hpcd.Init.low_power_enable = 0;
 800fa76:	4b16      	ldr	r3, [pc, #88]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	619a      	str	r2, [r3, #24]
    /* Link The driver to the stack */
    hpcd.pData = pdev;
 800fa7c:	4a14      	ldr	r2, [pc, #80]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    pdev->pData = &hpcd;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a12      	ldr	r2, [pc, #72]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

    /* Initialize LL Driver */
    HAL_PCD_Init(&hpcd);
 800fa8c:	4810      	ldr	r0, [pc, #64]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa8e:	f7f5 fbff 	bl	8005290 <HAL_PCD_Init>

    HAL_PCDEx_PMAConfig(&hpcd , 0x00 , PCD_SNG_BUF, 0x18);
 800fa92:	2318      	movs	r3, #24
 800fa94:	2200      	movs	r2, #0
 800fa96:	2100      	movs	r1, #0
 800fa98:	480d      	ldr	r0, [pc, #52]	; (800fad0 <USBD_LL_Init+0x80>)
 800fa9a:	f7f7 f8dc 	bl	8006c56 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig(&hpcd , 0x80 , PCD_SNG_BUF, 0x58);
 800fa9e:	2358      	movs	r3, #88	; 0x58
 800faa0:	2200      	movs	r2, #0
 800faa2:	2180      	movs	r1, #128	; 0x80
 800faa4:	480a      	ldr	r0, [pc, #40]	; (800fad0 <USBD_LL_Init+0x80>)
 800faa6:	f7f7 f8d6 	bl	8006c56 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig(&hpcd , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800faaa:	23c0      	movs	r3, #192	; 0xc0
 800faac:	2200      	movs	r2, #0
 800faae:	2181      	movs	r1, #129	; 0x81
 800fab0:	4807      	ldr	r0, [pc, #28]	; (800fad0 <USBD_LL_Init+0x80>)
 800fab2:	f7f7 f8d0 	bl	8006c56 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig(&hpcd , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800fab6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800faba:	2200      	movs	r2, #0
 800fabc:	2101      	movs	r1, #1
 800fabe:	4804      	ldr	r0, [pc, #16]	; (800fad0 <USBD_LL_Init+0x80>)
 800fac0:	f7f7 f8c9 	bl	8006c56 <HAL_PCDEx_PMAConfig>

    return USBD_OK;
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	20000ab0 	.word	0x20000ab0
 800fad4:	40006800 	.word	0x40006800

0800fad8 <USBD_LL_Start>:
 * @brief  Starts the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
    HAL_PCD_Start(pdev->pData);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f5 fcbd 	bl	8005466 <HAL_PCD_Start>
    return USBD_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}

0800faf6 <USBD_LL_OpenEP>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t ep_type, uint16_t ep_mps)
{
 800faf6:	b580      	push	{r7, lr}
 800faf8:	b082      	sub	sp, #8
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
 800fafe:	4608      	mov	r0, r1
 800fb00:	4611      	mov	r1, r2
 800fb02:	461a      	mov	r2, r3
 800fb04:	4603      	mov	r3, r0
 800fb06:	70fb      	strb	r3, [r7, #3]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	70bb      	strb	r3, [r7, #2]
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	803b      	strh	r3, [r7, #0]
    HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fb16:	78bb      	ldrb	r3, [r7, #2]
 800fb18:	883a      	ldrh	r2, [r7, #0]
 800fb1a:	78f9      	ldrb	r1, [r7, #3]
 800fb1c:	f7f5 fe11 	bl	8005742 <HAL_PCD_EP_Open>

    return USBD_OK;
 800fb20:	2300      	movs	r3, #0
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <USBD_LL_CloseEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b082      	sub	sp, #8
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	460b      	mov	r3, r1
 800fb34:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb3c:	78fa      	ldrb	r2, [r7, #3]
 800fb3e:	4611      	mov	r1, r2
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7f5 fe66 	bl	8005812 <HAL_PCD_EP_Close>
    return USBD_OK;
 800fb46:	2300      	movs	r3, #0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb62:	78fa      	ldrb	r2, [r7, #3]
 800fb64:	4611      	mov	r1, r2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7f5 ff37 	bl	80059da <HAL_PCD_EP_SetStall>
    return USBD_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b082      	sub	sp, #8
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	460b      	mov	r3, r1
 800fb80:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb88:	78fa      	ldrb	r2, [r7, #3]
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7f5 ff78 	bl	8005a82 <HAL_PCD_EP_ClrStall>
    return USBD_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	460b      	mov	r3, r1
 800fba6:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef *hpcd = pdev->pData;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbae:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80)
 800fbb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	da0c      	bge.n	800fbd2 <USBD_LL_IsStallEP+0x36>
    {
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fbb8:	78fb      	ldrb	r3, [r7, #3]
 800fbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbbe:	68f9      	ldr	r1, [r7, #12]
 800fbc0:	1c5a      	adds	r2, r3, #1
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	4413      	add	r3, r2
 800fbc8:	00db      	lsls	r3, r3, #3
 800fbca:	440b      	add	r3, r1
 800fbcc:	3306      	adds	r3, #6
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	e00b      	b.n	800fbea <USBD_LL_IsStallEP+0x4e>
    }
    else
    {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fbd2:	78fb      	ldrb	r3, [r7, #3]
 800fbd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbd8:	68f9      	ldr	r1, [r7, #12]
 800fbda:	4613      	mov	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	4413      	add	r3, r2
 800fbe0:	00db      	lsls	r3, r3, #3
 800fbe2:	440b      	add	r3, r1
 800fbe4:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800fbe8:	781b      	ldrb	r3, [r3, #0]
    }
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3714      	adds	r7, #20
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <USBD_LL_SetUSBAddress>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev,
        uint8_t dev_addr)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b082      	sub	sp, #8
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	460b      	mov	r3, r1
 800fc00:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc08:	78fa      	ldrb	r2, [r7, #3]
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f5 fd73 	bl	80056f8 <HAL_PCD_SetAddress>
    return USBD_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <USBD_LL_Transmit>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t * pbuf, uint32_t size)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	607a      	str	r2, [r7, #4]
 800fc26:	603b      	str	r3, [r7, #0]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	72fb      	strb	r3, [r7, #11]
    HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc32:	7af9      	ldrb	r1, [r7, #11]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	f7f5 fe8b 	bl	8005952 <HAL_PCD_EP_Transmit>
    return USBD_OK;
 800fc3c:	2300      	movs	r3, #0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <USBD_LL_PrepareReceive>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t * pbuf, uint32_t size)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	60f8      	str	r0, [r7, #12]
 800fc4e:	607a      	str	r2, [r7, #4]
 800fc50:	603b      	str	r3, [r7, #0]
 800fc52:	460b      	mov	r3, r1
 800fc54:	72fb      	strb	r3, [r7, #11]
    HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc5c:	7af9      	ldrb	r1, [r7, #11]
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	f7f5 fe20 	bl	80058a6 <HAL_PCD_EP_Receive>
    return USBD_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_LL_GetRxDataSize>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Recived Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	460b      	mov	r3, r1
 800fc7a:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc82:	78fa      	ldrb	r2, [r7, #3]
 800fc84:	4611      	mov	r1, r2
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7f5 fe4b 	bl	8005922 <HAL_PCD_EP_GetRxCount>
 800fc8c:	4603      	mov	r3, r0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3708      	adds	r7, #8
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
	...

0800fc98 <USBD_VCP_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	4603      	mov	r3, r0
 800fca0:	6039      	str	r1, [r7, #0]
 800fca2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	2212      	movs	r2, #18
 800fca8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 800fcaa:	4b03      	ldr	r3, [pc, #12]	; (800fcb8 <USBD_VCP_DeviceDescriptor+0x20>)
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr
 800fcb8:	0801361c 	.word	0x0801361c

0800fcbc <USBD_VCP_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	6039      	str	r1, [r7, #0]
 800fcc6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	2204      	movs	r2, #4
 800fccc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 800fcce:	4b03      	ldr	r3, [pc, #12]	; (800fcdc <USBD_VCP_LangIDStrDescriptor+0x20>)
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	08013630 	.word	0x08013630

0800fce0 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	6039      	str	r1, [r7, #0]
 800fcea:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800fcec:	683a      	ldr	r2, [r7, #0]
 800fcee:	4904      	ldr	r1, [pc, #16]	; (800fd00 <USBD_VCP_ProductStrDescriptor+0x20>)
 800fcf0:	4804      	ldr	r0, [pc, #16]	; (800fd04 <USBD_VCP_ProductStrDescriptor+0x24>)
 800fcf2:	f7fd fbd6 	bl	800d4a2 <USBD_GetString>
  return USBD_StrDesc;
 800fcf6:	4b02      	ldr	r3, [pc, #8]	; (800fd00 <USBD_VCP_ProductStrDescriptor+0x20>)
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	20000da8 	.word	0x20000da8
 800fd04:	080133e8 	.word	0x080133e8

0800fd08 <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	4603      	mov	r3, r0
 800fd10:	6039      	str	r1, [r7, #0]
 800fd12:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	4904      	ldr	r1, [pc, #16]	; (800fd28 <USBD_VCP_ManufacturerStrDescriptor+0x20>)
 800fd18:	4804      	ldr	r0, [pc, #16]	; (800fd2c <USBD_VCP_ManufacturerStrDescriptor+0x24>)
 800fd1a:	f7fd fbc2 	bl	800d4a2 <USBD_GetString>
  return USBD_StrDesc;
 800fd1e:	4b02      	ldr	r3, [pc, #8]	; (800fd28 <USBD_VCP_ManufacturerStrDescriptor+0x20>)
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20000da8 	.word	0x20000da8
 800fd2c:	0801340c 	.word	0x0801340c

0800fd30 <USBD_VCP_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	6039      	str	r1, [r7, #0]
 800fd3a:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	221a      	movs	r2, #26
 800fd40:	801a      	strh	r2, [r3, #0]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800fd42:	f000 f82f 	bl	800fda4 <Get_SerialNum>
  
  return USBD_StringSerial;
 800fd46:	4b02      	ldr	r3, [pc, #8]	; (800fd50 <USBD_VCP_SerialStrDescriptor+0x20>)
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	20000164 	.word	0x20000164

0800fd54 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	6039      	str	r1, [r7, #0]
 800fd5e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800fd60:	683a      	ldr	r2, [r7, #0]
 800fd62:	4904      	ldr	r1, [pc, #16]	; (800fd74 <USBD_VCP_ConfigStrDescriptor+0x20>)
 800fd64:	4804      	ldr	r0, [pc, #16]	; (800fd78 <USBD_VCP_ConfigStrDescriptor+0x24>)
 800fd66:	f7fd fb9c 	bl	800d4a2 <USBD_GetString>
  return USBD_StrDesc;  
 800fd6a:	4b02      	ldr	r3, [pc, #8]	; (800fd74 <USBD_VCP_ConfigStrDescriptor+0x20>)
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3708      	adds	r7, #8
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	20000da8 	.word	0x20000da8
 800fd78:	08013420 	.word	0x08013420

0800fd7c <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	4904      	ldr	r1, [pc, #16]	; (800fd9c <USBD_VCP_InterfaceStrDescriptor+0x20>)
 800fd8c:	4804      	ldr	r0, [pc, #16]	; (800fda0 <USBD_VCP_InterfaceStrDescriptor+0x24>)
 800fd8e:	f7fd fb88 	bl	800d4a2 <USBD_GetString>
  return USBD_StrDesc;  
 800fd92:	4b02      	ldr	r3, [pc, #8]	; (800fd9c <USBD_VCP_InterfaceStrDescriptor+0x20>)
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	20000da8 	.word	0x20000da8
 800fda0:	0801342c 	.word	0x0801342c

0800fda4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800fdaa:	4b0f      	ldr	r3, [pc, #60]	; (800fde8 <Get_SerialNum+0x44>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800fdb0:	4b0e      	ldr	r3, [pc, #56]	; (800fdec <Get_SerialNum+0x48>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800fdb6:	4b0e      	ldr	r3, [pc, #56]	; (800fdf0 <Get_SerialNum+0x4c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	607b      	str	r3, [r7, #4]
  
  deviceserial0 += deviceserial2;
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	60fb      	str	r3, [r7, #12]
  
  if (deviceserial0 != 0)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d009      	beq.n	800fdde <Get_SerialNum+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800fdca:	2208      	movs	r2, #8
 800fdcc:	4909      	ldr	r1, [pc, #36]	; (800fdf4 <Get_SerialNum+0x50>)
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f000 f814 	bl	800fdfc <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800fdd4:	2204      	movs	r2, #4
 800fdd6:	4908      	ldr	r1, [pc, #32]	; (800fdf8 <Get_SerialNum+0x54>)
 800fdd8:	68b8      	ldr	r0, [r7, #8]
 800fdda:	f000 f80f 	bl	800fdfc <IntToUnicode>
  }
}
 800fdde:	bf00      	nop
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	1fff7a10 	.word	0x1fff7a10
 800fdec:	1fff7a14 	.word	0x1fff7a14
 800fdf0:	1fff7a18 	.word	0x1fff7a18
 800fdf4:	20000166 	.word	0x20000166
 800fdf8:	20000176 	.word	0x20000176

0800fdfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b087      	sub	sp, #28
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	4613      	mov	r3, r2
 800fe08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 800fe0e:	2300      	movs	r3, #0
 800fe10:	75fb      	strb	r3, [r7, #23]
 800fe12:	e027      	b.n	800fe64 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	0f1b      	lsrs	r3, r3, #28
 800fe18:	2b09      	cmp	r3, #9
 800fe1a:	d80b      	bhi.n	800fe34 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	0f1b      	lsrs	r3, r3, #28
 800fe20:	b2da      	uxtb	r2, r3
 800fe22:	7dfb      	ldrb	r3, [r7, #23]
 800fe24:	005b      	lsls	r3, r3, #1
 800fe26:	4619      	mov	r1, r3
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	440b      	add	r3, r1
 800fe2c:	3230      	adds	r2, #48	; 0x30
 800fe2e:	b2d2      	uxtb	r2, r2
 800fe30:	701a      	strb	r2, [r3, #0]
 800fe32:	e00a      	b.n	800fe4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	0f1b      	lsrs	r3, r3, #28
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	7dfb      	ldrb	r3, [r7, #23]
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	4619      	mov	r1, r3
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	440b      	add	r3, r1
 800fe44:	3237      	adds	r2, #55	; 0x37
 800fe46:	b2d2      	uxtb	r2, r2
 800fe48:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	011b      	lsls	r3, r3, #4
 800fe4e:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 800fe50:	7dfb      	ldrb	r3, [r7, #23]
 800fe52:	005b      	lsls	r3, r3, #1
 800fe54:	3301      	adds	r3, #1
 800fe56:	68ba      	ldr	r2, [r7, #8]
 800fe58:	4413      	add	r3, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 800fe5e:	7dfb      	ldrb	r3, [r7, #23]
 800fe60:	3301      	adds	r3, #1
 800fe62:	75fb      	strb	r3, [r7, #23]
 800fe64:	7dfa      	ldrb	r2, [r7, #23]
 800fe66:	79fb      	ldrb	r3, [r7, #7]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d3d3      	bcc.n	800fe14 <IntToUnicode+0x18>
  }
}
 800fe6c:	bf00      	nop
 800fe6e:	bf00      	nop
 800fe70:	371c      	adds	r7, #28
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
	...

0800fe7c <VCP_Init>:
static void SendData( void );
static void EnableTxPath( void );

/* Functions Definition ------------------------------------------------------*/
void VCP_Init( uint8_t *p_tx_buffer , uint8_t *p_rx_buffer )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
  VCP_Context.VcpStatus = VCP_TX_NOT_READY;
 800fe86:	4b15      	ldr	r3, [pc, #84]	; (800fedc <VCP_Init+0x60>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	731a      	strb	r2, [r3, #12]
  VCP_Context.TxDataStatus = TX_DATA_NOT_PENDING;
 800fe8c:	4b13      	ldr	r3, [pc, #76]	; (800fedc <VCP_Init+0x60>)
 800fe8e:	2200      	movs	r2, #0
 800fe90:	735a      	strb	r2, [r3, #13]
  VCP_Context.pTxBuffer = p_tx_buffer;
 800fe92:	4a12      	ldr	r2, [pc, #72]	; (800fedc <VCP_Init+0x60>)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6013      	str	r3, [r2, #0]
  VCP_Context.pRxBuffer = p_rx_buffer;
 800fe98:	4a10      	ldr	r2, [pc, #64]	; (800fedc <VCP_Init+0x60>)
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	6053      	str	r3, [r2, #4]

  /* Init Device Library */
  USBD_Init(&VCP_Device, &VCP_Desc, 0);
 800fe9e:	2200      	movs	r2, #0
 800fea0:	490f      	ldr	r1, [pc, #60]	; (800fee0 <VCP_Init+0x64>)
 800fea2:	4810      	ldr	r0, [pc, #64]	; (800fee4 <VCP_Init+0x68>)
 800fea4:	f7fc fae8 	bl	800c478 <USBD_Init>

  /* Register the CDC class */
  USBD_RegisterClass(&VCP_Device, &USBD_CDC);
 800fea8:	490f      	ldr	r1, [pc, #60]	; (800fee8 <VCP_Init+0x6c>)
 800feaa:	480e      	ldr	r0, [pc, #56]	; (800fee4 <VCP_Init+0x68>)
 800feac:	f7fc fb14 	bl	800c4d8 <USBD_RegisterClass>

  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&VCP_Device, &VCP_CDC_fops);
 800feb0:	490e      	ldr	r1, [pc, #56]	; (800feec <VCP_Init+0x70>)
 800feb2:	480c      	ldr	r0, [pc, #48]	; (800fee4 <VCP_Init+0x68>)
 800feb4:	f7fc fa3a 	bl	800c32c <USBD_CDC_RegisterInterface>

  /* Start Device Process */
  USBD_Start(&VCP_Device);
 800feb8:	480a      	ldr	r0, [pc, #40]	; (800fee4 <VCP_Init+0x68>)
 800feba:	f7fc fb34 	bl	800c526 <USBD_Start>

#ifdef  VCP_TX_PATH_INTERFACE_READY_SETUP_TIME
  HW_TS_Create(VCP_TIMER_PROC_ID, &VCP_Context.VcpTxReadyTid, hw_ts_SingleShot, EnableTxPath);
 800febe:	4b0c      	ldr	r3, [pc, #48]	; (800fef0 <VCP_Init+0x74>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	490c      	ldr	r1, [pc, #48]	; (800fef4 <VCP_Init+0x78>)
 800fec4:	2000      	movs	r0, #0
 800fec6:	f7f1 feb1 	bl	8001c2c <HW_TS_Create>
#endif

  UTIL_SEQ_RegTask(1<<VCP_TASK_ID, UTIL_SEQ_RFU, SendData);
 800feca:	4a0b      	ldr	r2, [pc, #44]	; (800fef8 <VCP_Init+0x7c>)
 800fecc:	2100      	movs	r1, #0
 800fece:	2080      	movs	r0, #128	; 0x80
 800fed0:	f001 f866 	bl	8010fa0 <UTIL_SEQ_RegTask>
  
  return;
 800fed4:	bf00      	nop
}
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20000ea8 	.word	0x20000ea8
 800fee0:	20000148 	.word	0x20000148
 800fee4:	20000ebc 	.word	0x20000ebc
 800fee8:	20000044 	.word	0x20000044
 800feec:	20000188 	.word	0x20000188
 800fef0:	0800ffa1 	.word	0x0800ffa1
 800fef4:	20000eb8 	.word	0x20000eb8
 800fef8:	0800ff65 	.word	0x0800ff65

0800fefc <VCP_SendData>:

void VCP_SendData( uint8_t *p_data , uint16_t size , void (*cb)( void ) )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	460b      	mov	r3, r1
 800ff06:	607a      	str	r2, [r7, #4]
 800ff08:	817b      	strh	r3, [r7, #10]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ff0e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ff10:	69bb      	ldr	r3, [r7, #24]
  BACKUP_PRIMASK();
 800ff12:	61fb      	str	r3, [r7, #28]

  memcpy(VCP_Context.pTxBuffer, p_data, size);
 800ff14:	4b12      	ldr	r3, [pc, #72]	; (800ff60 <VCP_SendData+0x64>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	897a      	ldrh	r2, [r7, #10]
 800ff1a:	68f9      	ldr	r1, [r7, #12]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f001 f9bb 	bl	8011298 <memcpy>

  VCP_Context.pf_CallBack = cb;
 800ff22:	4a0f      	ldr	r2, [pc, #60]	; (800ff60 <VCP_SendData+0x64>)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6093      	str	r3, [r2, #8]
  VCP_Context.TxDataSize = size;
 800ff28:	4a0d      	ldr	r2, [pc, #52]	; (800ff60 <VCP_SendData+0x64>)
 800ff2a:	897b      	ldrh	r3, [r7, #10]
 800ff2c:	81d3      	strh	r3, [r2, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff2e:	b672      	cpsid	i
}
 800ff30:	bf00      	nop

  DISABLE_IRQ();
  if (VCP_Context.VcpStatus != VCP_TX_NOT_READY)
 800ff32:	4b0b      	ldr	r3, [pc, #44]	; (800ff60 <VCP_SendData+0x64>)
 800ff34:	7b1b      	ldrb	r3, [r3, #12]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d004      	beq.n	800ff44 <VCP_SendData+0x48>
  {
    UTIL_SEQ_SetTask(1 << VCP_TASK_ID, VCP_TASK_PRIO);
 800ff3a:	2101      	movs	r1, #1
 800ff3c:	2080      	movs	r0, #128	; 0x80
 800ff3e:	f001 f851 	bl	8010fe4 <UTIL_SEQ_SetTask>
 800ff42:	e002      	b.n	800ff4a <VCP_SendData+0x4e>
  }
  else
  {
    VCP_Context.TxDataStatus = TX_DATA_PENDING;
 800ff44:	4b06      	ldr	r3, [pc, #24]	; (800ff60 <VCP_SendData+0x64>)
 800ff46:	2201      	movs	r2, #1
 800ff48:	735a      	strb	r2, [r3, #13]
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	f383 8810 	msr	PRIMASK, r3
}
 800ff54:	bf00      	nop
  }
  RESTORE_PRIMASK();

  return;
 800ff56:	bf00      	nop
}
 800ff58:	3720      	adds	r7, #32
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	20000ea8 	.word	0x20000ea8

0800ff64 <SendData>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void SendData( void )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	af00      	add	r7, sp, #0
  USBD_CDC_SetTxBuffer(&VCP_Device, VCP_Context.pTxBuffer, VCP_Context.TxDataSize);
 800ff68:	4b0b      	ldr	r3, [pc, #44]	; (800ff98 <SendData+0x34>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a0a      	ldr	r2, [pc, #40]	; (800ff98 <SendData+0x34>)
 800ff6e:	89d2      	ldrh	r2, [r2, #14]
 800ff70:	4619      	mov	r1, r3
 800ff72:	480a      	ldr	r0, [pc, #40]	; (800ff9c <SendData+0x38>)
 800ff74:	f7fc f9ef 	bl	800c356 <USBD_CDC_SetTxBuffer>

  if (USBD_CDC_TransmitPacket(&VCP_Device) != USBD_OK)
 800ff78:	4808      	ldr	r0, [pc, #32]	; (800ff9c <SendData+0x38>)
 800ff7a:	f7fc fa23 	bl	800c3c4 <USBD_CDC_TransmitPacket>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d004      	beq.n	800ff8e <SendData+0x2a>
  {
    UTIL_SEQ_SetTask(1 << VCP_TASK_ID, VCP_TASK_PRIO);
 800ff84:	2101      	movs	r1, #1
 800ff86:	2080      	movs	r0, #128	; 0x80
 800ff88:	f001 f82c 	bl	8010fe4 <UTIL_SEQ_SetTask>
  else
  {
    VCP_Context.pf_CallBack();
  }

  return;
 800ff8c:	e003      	b.n	800ff96 <SendData+0x32>
    VCP_Context.pf_CallBack();
 800ff8e:	4b02      	ldr	r3, [pc, #8]	; (800ff98 <SendData+0x34>)
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	4798      	blx	r3
  return;
 800ff94:	bf00      	nop
}
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20000ea8 	.word	0x20000ea8
 800ff9c:	20000ebc 	.word	0x20000ebc

0800ffa0 <EnableTxPath>:

static void EnableTxPath( void )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffa6:	f3ef 8310 	mrs	r3, PRIMASK
 800ffaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800ffac:	68bb      	ldr	r3, [r7, #8]
  BACKUP_PRIMASK();
 800ffae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffb0:	b672      	cpsid	i
}
 800ffb2:	bf00      	nop

  DISABLE_IRQ();
  VCP_Context.VcpStatus = VCP_TX_READY;
 800ffb4:	4b0c      	ldr	r3, [pc, #48]	; (800ffe8 <EnableTxPath+0x48>)
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	731a      	strb	r2, [r3, #12]

  if (VCP_Context.TxDataStatus != TX_DATA_NOT_PENDING)
 800ffba:	4b0b      	ldr	r3, [pc, #44]	; (800ffe8 <EnableTxPath+0x48>)
 800ffbc:	7b5b      	ldrb	r3, [r3, #13]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d003      	beq.n	800ffca <EnableTxPath+0x2a>
  {
    UTIL_SEQ_SetTask(1 << VCP_TASK_ID, VCP_TASK_PRIO);
 800ffc2:	2101      	movs	r1, #1
 800ffc4:	2080      	movs	r0, #128	; 0x80
 800ffc6:	f001 f80d 	bl	8010fe4 <UTIL_SEQ_SetTask>
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f383 8810 	msr	PRIMASK, r3
}
 800ffd4:	bf00      	nop
  }
  RESTORE_PRIMASK();

#ifdef  VCP_TX_PATH_INTERFACE_READY_SETUP_TIME
  HW_TS_Delete(VCP_Context.VcpTxReadyTid);
 800ffd6:	4b04      	ldr	r3, [pc, #16]	; (800ffe8 <EnableTxPath+0x48>)
 800ffd8:	7c1b      	ldrb	r3, [r3, #16]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7f1 fea0 	bl	8001d20 <HW_TS_Delete>
#endif

  return;
 800ffe0:	bf00      	nop
}
 800ffe2:	3710      	adds	r7, #16
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	20000ea8 	.word	0x20000ea8

0800ffec <Vcp_Itf_Init>:
 *         Initializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_Init( void )
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	af00      	add	r7, sp, #0
  USBD_CDC_SetRxBuffer(&VCP_Device, VCP_Context.pRxBuffer);
 800fff0:	4b09      	ldr	r3, [pc, #36]	; (8010018 <Vcp_Itf_Init+0x2c>)
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	4619      	mov	r1, r3
 800fff6:	4809      	ldr	r0, [pc, #36]	; (801001c <Vcp_Itf_Init+0x30>)
 800fff8:	f7fc f9cb 	bl	800c392 <USBD_CDC_SetRxBuffer>

  /* Initiate next USB packet transfer */
  USBD_CDC_ReceivePacket(&VCP_Device);
 800fffc:	4807      	ldr	r0, [pc, #28]	; (801001c <Vcp_Itf_Init+0x30>)
 800fffe:	f7fc fa11 	bl	800c424 <USBD_CDC_ReceivePacket>

#ifdef  VCP_TX_PATH_INTERFACE_READY_SETUP_TIME
  HW_TS_Start(VCP_Context.VcpTxReadyTid, VCP_TX_PATH_INTERFACE_READY_SETUP_TIME);
 8010002:	4b05      	ldr	r3, [pc, #20]	; (8010018 <Vcp_Itf_Init+0x2c>)
 8010004:	7c1b      	ldrb	r3, [r3, #16]
 8010006:	f24a 0117 	movw	r1, #40983	; 0xa017
 801000a:	4618      	mov	r0, r3
 801000c:	f7f1 ff2e 	bl	8001e6c <HW_TS_Start>
#else
  EnableTxPath();
#endif

  return (USBD_OK);
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	20000ea8 	.word	0x20000ea8
 801001c:	20000ebc 	.word	0x20000ebc

08010020 <Vcp_Itf_DeInit>:
 *         DeInitializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_DeInit( void )
{
 8010020:	b480      	push	{r7}
 8010022:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8010024:	2300      	movs	r3, #0
}
 8010026:	4618      	mov	r0, r3
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <Vcp_Itf_Control>:
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_Control( uint8_t cmd , uint8_t* pbuf , uint16_t length )
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	6039      	str	r1, [r7, #0]
 801003a:	71fb      	strb	r3, [r7, #7]
 801003c:	4613      	mov	r3, r2
 801003e:	80bb      	strh	r3, [r7, #4]
  switch (cmd)
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	2b23      	cmp	r3, #35	; 0x23
 8010044:	f200 8098 	bhi.w	8010178 <Vcp_Itf_Control+0x148>
 8010048:	a201      	add	r2, pc, #4	; (adr r2, 8010050 <Vcp_Itf_Control+0x20>)
 801004a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801004e:	bf00      	nop
 8010050:	08010179 	.word	0x08010179
 8010054:	08010179 	.word	0x08010179
 8010058:	08010179 	.word	0x08010179
 801005c:	08010179 	.word	0x08010179
 8010060:	08010179 	.word	0x08010179
 8010064:	08010179 	.word	0x08010179
 8010068:	08010179 	.word	0x08010179
 801006c:	08010179 	.word	0x08010179
 8010070:	08010179 	.word	0x08010179
 8010074:	08010179 	.word	0x08010179
 8010078:	08010179 	.word	0x08010179
 801007c:	08010179 	.word	0x08010179
 8010080:	08010179 	.word	0x08010179
 8010084:	08010179 	.word	0x08010179
 8010088:	08010179 	.word	0x08010179
 801008c:	08010179 	.word	0x08010179
 8010090:	08010179 	.word	0x08010179
 8010094:	08010179 	.word	0x08010179
 8010098:	08010179 	.word	0x08010179
 801009c:	08010179 	.word	0x08010179
 80100a0:	08010179 	.word	0x08010179
 80100a4:	08010179 	.word	0x08010179
 80100a8:	08010179 	.word	0x08010179
 80100ac:	08010179 	.word	0x08010179
 80100b0:	08010179 	.word	0x08010179
 80100b4:	08010179 	.word	0x08010179
 80100b8:	08010179 	.word	0x08010179
 80100bc:	08010179 	.word	0x08010179
 80100c0:	08010179 	.word	0x08010179
 80100c4:	08010179 	.word	0x08010179
 80100c8:	08010179 	.word	0x08010179
 80100cc:	08010179 	.word	0x08010179
 80100d0:	080100e1 	.word	0x080100e1
 80100d4:	08010125 	.word	0x08010125
 80100d8:	08010179 	.word	0x08010179
 80100dc:	08010179 	.word	0x08010179
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	461a      	mov	r2, r3
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	3301      	adds	r3, #1
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	021b      	lsls	r3, r3, #8
 80100ee:	431a      	orrs	r2, r3
 (pbuf[2] << 16) | (pbuf[3] << 24));
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	3302      	adds	r3, #2
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	041b      	lsls	r3, r3, #16
      LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80100f8:	431a      	orrs	r2, r3
 (pbuf[2] << 16) | (pbuf[3] << 24));
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	3303      	adds	r3, #3
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	061b      	lsls	r3, r3, #24
 8010102:	4313      	orrs	r3, r2
      LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8010104:	461a      	mov	r2, r3
 8010106:	4b20      	ldr	r3, [pc, #128]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010108:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	791a      	ldrb	r2, [r3, #4]
 801010e:	4b1e      	ldr	r3, [pc, #120]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010110:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	795a      	ldrb	r2, [r3, #5]
 8010116:	4b1c      	ldr	r3, [pc, #112]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010118:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	799a      	ldrb	r2, [r3, #6]
 801011e:	4b1a      	ldr	r3, [pc, #104]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010120:	719a      	strb	r2, [r3, #6]

      break;
 8010122:	e02a      	b.n	801017a <Vcp_Itf_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8010124:	4b18      	ldr	r3, [pc, #96]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	b2da      	uxtb	r2, r3
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 801012e:	4b16      	ldr	r3, [pc, #88]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	0a1a      	lsrs	r2, r3, #8
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	3301      	adds	r3, #1
 8010138:	b2d2      	uxtb	r2, r2
 801013a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 801013c:	4b12      	ldr	r3, [pc, #72]	; (8010188 <Vcp_Itf_Control+0x158>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	0c1a      	lsrs	r2, r3, #16
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	3302      	adds	r3, #2
 8010146:	b2d2      	uxtb	r2, r2
 8010148:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 801014a:	4b0f      	ldr	r3, [pc, #60]	; (8010188 <Vcp_Itf_Control+0x158>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	0e1a      	lsrs	r2, r3, #24
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	3303      	adds	r3, #3
 8010154:	b2d2      	uxtb	r2, r2
 8010156:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	3304      	adds	r3, #4
 801015c:	4a0a      	ldr	r2, [pc, #40]	; (8010188 <Vcp_Itf_Control+0x158>)
 801015e:	7912      	ldrb	r2, [r2, #4]
 8010160:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	3305      	adds	r3, #5
 8010166:	4a08      	ldr	r2, [pc, #32]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010168:	7952      	ldrb	r2, [r2, #5]
 801016a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	3306      	adds	r3, #6
 8010170:	4a05      	ldr	r2, [pc, #20]	; (8010188 <Vcp_Itf_Control+0x158>)
 8010172:	7992      	ldrb	r2, [r2, #6]
 8010174:	701a      	strb	r2, [r3, #0]
      break;
 8010176:	e000      	b.n	801017a <Vcp_Itf_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8010178:	bf00      	nop
  }

  return (USBD_OK);
 801017a:	2300      	movs	r3, #0
}
 801017c:	4618      	mov	r0, r3
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	20000180 	.word	0x20000180

0801018c <Vcp_Itf_Receive>:
 * @param  Buf: Buffer of data to be transmitted
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_Receive( uint8_t* Buf , uint32_t *Len )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  VCP_DataReceived(Buf, Len);
 8010196:	6839      	ldr	r1, [r7, #0]
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f80b 	bl	80101b4 <VCP_DataReceived>

  /* Initiate next USB packet transfer */
  USBD_CDC_ReceivePacket(&VCP_Device);
 801019e:	4804      	ldr	r0, [pc, #16]	; (80101b0 <Vcp_Itf_Receive+0x24>)
 80101a0:	f7fc f940 	bl	800c424 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	20000ebc 	.word	0x20000ebc

080101b4 <VCP_DataReceived>:

__weak void VCP_DataReceived( uint8_t* Buf , uint32_t *Len )
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  return;
 80101be:	bf00      	nop
}
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <VCP_TransmitCplt>:
__weak int8_t VCP_TransmitCplt( uint8_t *Buf, uint32_t *Len, uint8_t epnum )
{
 80101ca:	b480      	push	{r7}
 80101cc:	b085      	sub	sp, #20
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	60f8      	str	r0, [r7, #12]
 80101d2:	60b9      	str	r1, [r7, #8]
 80101d4:	4613      	mov	r3, r2
 80101d6:	71fb      	strb	r3, [r7, #7]
  return(USBD_OK);
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3714      	adds	r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
	...

080101e8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101ee:	f3ef 8310 	mrs	r3, PRIMASK
 80101f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80101f4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80101f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80101f8:	b672      	cpsid	i
}
 80101fa:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80101fc:	1cbb      	adds	r3, r7, #2
 80101fe:	4619      	mov	r1, r3
 8010200:	4812      	ldr	r0, [pc, #72]	; (801024c <DbgTrace_TxCpltCallback+0x64>)
 8010202:	f000 fbe6 	bl	80109d2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8010206:	1cbb      	adds	r3, r7, #2
 8010208:	4619      	mov	r1, r3
 801020a:	4810      	ldr	r0, [pc, #64]	; (801024c <DbgTrace_TxCpltCallback+0x64>)
 801020c:	f000 fcd2 	bl	8010bb4 <CircularQueue_Sense>
 8010210:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00c      	beq.n	8010232 <DbgTrace_TxCpltCallback+0x4a>
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	f383 8810 	msr	PRIMASK, r3
}
 8010222:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8010224:	887b      	ldrh	r3, [r7, #2]
 8010226:	4a0a      	ldr	r2, [pc, #40]	; (8010250 <DbgTrace_TxCpltCallback+0x68>)
 8010228:	4619      	mov	r1, r3
 801022a:	6938      	ldr	r0, [r7, #16]
 801022c:	f7f0 fc14 	bl	8000a58 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8010230:	e008      	b.n	8010244 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8010232:	4b08      	ldr	r3, [pc, #32]	; (8010254 <DbgTrace_TxCpltCallback+0x6c>)
 8010234:	2201      	movs	r2, #1
 8010236:	701a      	strb	r2, [r3, #0]
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f383 8810 	msr	PRIMASK, r3
}
 8010242:	bf00      	nop
}
 8010244:	bf00      	nop
 8010246:	3718      	adds	r7, #24
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	2000118c 	.word	0x2000118c
 8010250:	080101e9 	.word	0x080101e9
 8010254:	2000019c 	.word	0x2000019c

08010258 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 801025e:	f7f0 fbf1 	bl	8000a44 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8010262:	2302      	movs	r3, #2
 8010264:	9300      	str	r3, [sp, #0]
 8010266:	2300      	movs	r3, #0
 8010268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801026c:	4903      	ldr	r1, [pc, #12]	; (801027c <DbgTraceInit+0x24>)
 801026e:	4804      	ldr	r0, [pc, #16]	; (8010280 <DbgTraceInit+0x28>)
 8010270:	f000 f956 	bl	8010520 <CircularQueue_Init>
#endif 
#endif
  return;
 8010274:	bf00      	nop
}
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	200011ac 	.word	0x200011ac
 8010280:	2000118c 	.word	0x2000118c

08010284 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	60b9      	str	r1, [r7, #8]
 801028e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	68b9      	ldr	r1, [r7, #8]
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f000 f805 	bl	80102a4 <DbgTraceWrite>
 801029a:	4603      	mov	r3, r0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08a      	sub	sp, #40	; 0x28
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80102b0:	2300      	movs	r3, #0
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102b4:	f3ef 8310 	mrs	r3, PRIMASK
 80102b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80102ba:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80102bc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c4:	d102      	bne.n	80102cc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	627b      	str	r3, [r7, #36]	; 0x24
 80102ca:	e037      	b.n	801033c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d006      	beq.n	80102e0 <DbgTraceWrite+0x3c>
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2b02      	cmp	r3, #2
 80102d6:	d003      	beq.n	80102e0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80102d8:	f04f 33ff 	mov.w	r3, #4294967295
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24
 80102de:	e02d      	b.n	801033c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d02a      	beq.n	801033c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80102ea:	b672      	cpsid	i
}
 80102ec:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	2301      	movs	r3, #1
 80102f4:	68b9      	ldr	r1, [r7, #8]
 80102f6:	4814      	ldr	r0, [pc, #80]	; (8010348 <DbgTraceWrite+0xa4>)
 80102f8:	f000 f944 	bl	8010584 <CircularQueue_Add>
 80102fc:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d015      	beq.n	8010330 <DbgTraceWrite+0x8c>
 8010304:	4b11      	ldr	r3, [pc, #68]	; (801034c <DbgTraceWrite+0xa8>)
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	b2db      	uxtb	r3, r3
 801030a:	2b00      	cmp	r3, #0
 801030c:	d010      	beq.n	8010330 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801030e:	4b0f      	ldr	r3, [pc, #60]	; (801034c <DbgTraceWrite+0xa8>)
 8010310:	2200      	movs	r2, #0
 8010312:	701a      	strb	r2, [r3, #0]
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	f383 8810 	msr	PRIMASK, r3
}
 801031e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	b29b      	uxth	r3, r3
 8010324:	4a0a      	ldr	r2, [pc, #40]	; (8010350 <DbgTraceWrite+0xac>)
 8010326:	4619      	mov	r1, r3
 8010328:	69f8      	ldr	r0, [r7, #28]
 801032a:	f7f0 fb95 	bl	8000a58 <DbgOutputTraces>
 801032e:	e005      	b.n	801033c <DbgTraceWrite+0x98>
 8010330:	6a3b      	ldr	r3, [r7, #32]
 8010332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	f383 8810 	msr	PRIMASK, r3
}
 801033a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 801033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801033e:	4618      	mov	r0, r3
 8010340:	3728      	adds	r7, #40	; 0x28
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	2000118c 	.word	0x2000118c
 801034c:	2000019c 	.word	0x2000019c
 8010350:	080101e9 	.word	0x080101e9

08010354 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010354:	b480      	push	{r7}
 8010356:	b085      	sub	sp, #20
 8010358:	af00      	add	r7, sp, #0
 801035a:	4603      	mov	r3, r0
 801035c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801035e:	4b0f      	ldr	r3, [pc, #60]	; (801039c <OTP_Read+0x48>)
 8010360:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010362:	e002      	b.n	801036a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	3b08      	subs	r3, #8
 8010368:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	3307      	adds	r3, #7
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	79fa      	ldrb	r2, [r7, #7]
 8010372:	429a      	cmp	r2, r3
 8010374:	d003      	beq.n	801037e <OTP_Read+0x2a>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	4a09      	ldr	r2, [pc, #36]	; (80103a0 <OTP_Read+0x4c>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d1f2      	bne.n	8010364 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3307      	adds	r3, #7
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	79fa      	ldrb	r2, [r7, #7]
 8010386:	429a      	cmp	r2, r3
 8010388:	d001      	beq.n	801038e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801038a:	2300      	movs	r3, #0
 801038c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801038e:	68fb      	ldr	r3, [r7, #12]
}
 8010390:	4618      	mov	r0, r3
 8010392:	3714      	adds	r7, #20
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr
 801039c:	1fff73f8 	.word	0x1fff73f8
 80103a0:	1fff7000 	.word	0x1fff7000

080103a4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	605a      	str	r2, [r3, #4]
}
 80103b8:	bf00      	nop
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b087      	sub	sp, #28
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103cc:	f3ef 8310 	mrs	r3, PRIMASK
 80103d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80103d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80103d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80103d6:	b672      	cpsid	i
}
 80103d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d102      	bne.n	80103ea <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80103e4:	2301      	movs	r3, #1
 80103e6:	75fb      	strb	r3, [r7, #23]
 80103e8:	e001      	b.n	80103ee <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80103ea:	2300      	movs	r3, #0
 80103ec:	75fb      	strb	r3, [r7, #23]
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	f383 8810 	msr	PRIMASK, r3
}
 80103f8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80103fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	371c      	adds	r7, #28
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr

08010408 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010408:	b480      	push	{r7}
 801040a:	b087      	sub	sp, #28
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010412:	f3ef 8310 	mrs	r3, PRIMASK
 8010416:	60fb      	str	r3, [r7, #12]
  return(result);
 8010418:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801041a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801041c:	b672      	cpsid	i
}
 801041e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	683a      	ldr	r2, [r7, #0]
 801043a:	605a      	str	r2, [r3, #4]
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	f383 8810 	msr	PRIMASK, r3
}
 8010446:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010448:	bf00      	nop
 801044a:	371c      	adds	r7, #28
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010454:	b480      	push	{r7}
 8010456:	b087      	sub	sp, #28
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801045e:	f3ef 8310 	mrs	r3, PRIMASK
 8010462:	60fb      	str	r3, [r7, #12]
  return(result);
 8010464:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010468:	b672      	cpsid	i
}
 801046a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	685a      	ldr	r2, [r3, #4]
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	683a      	ldr	r2, [r7, #0]
 801047e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	683a      	ldr	r2, [r7, #0]
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	f383 8810 	msr	PRIMASK, r3
}
 8010492:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010494:	bf00      	nop
 8010496:	371c      	adds	r7, #28
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b087      	sub	sp, #28
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104a8:	f3ef 8310 	mrs	r3, PRIMASK
 80104ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80104ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80104b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80104b2:	b672      	cpsid	i
}
 80104b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	6812      	ldr	r2, [r2, #0]
 80104be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	6852      	ldr	r2, [r2, #4]
 80104c8:	605a      	str	r2, [r3, #4]
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	f383 8810 	msr	PRIMASK, r3
}
 80104d4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80104d6:	bf00      	nop
 80104d8:	371c      	adds	r7, #28
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr

080104e2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b086      	sub	sp, #24
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
 80104ea:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104ec:	f3ef 8310 	mrs	r3, PRIMASK
 80104f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80104f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80104f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80104f6:	b672      	cpsid	i
}
 80104f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4618      	mov	r0, r3
 8010508:	f7ff ffca 	bl	80104a0 <LST_remove_node>
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	f383 8810 	msr	PRIMASK, r3
}
 8010516:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010518:	bf00      	nop
 801051a:	3718      	adds	r7, #24
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}

08010520 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8010520:	b480      	push	{r7}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2200      	movs	r2, #0
 8010538:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2200      	movs	r2, #0
 801054a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	887a      	ldrh	r2, [r7, #2]
 8010556:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	7e3a      	ldrb	r2, [r7, #24]
 801055c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 801055e:	7e3b      	ldrb	r3, [r7, #24]
 8010560:	f003 0302 	and.w	r3, r3, #2
 8010564:	2b00      	cmp	r3, #0
 8010566:	d006      	beq.n	8010576 <CircularQueue_Init+0x56>
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	891b      	ldrh	r3, [r3, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8010570:	f04f 33ff 	mov.w	r3, #4294967295
 8010574:	e000      	b.n	8010578 <CircularQueue_Init+0x58>
  }
  return 0;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3714      	adds	r7, #20
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr

08010584 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b08e      	sub	sp, #56	; 0x38
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	603b      	str	r3, [r7, #0]
 8010590:	4613      	mov	r3, r2
 8010592:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8010594:	2300      	movs	r3, #0
 8010596:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8010598:	2300      	movs	r3, #0
 801059a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 801059c:	2300      	movs	r3, #0
 801059e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80105a0:	2300      	movs	r3, #0
 80105a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80105a4:	2300      	movs	r3, #0
 80105a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80105a8:	2300      	movs	r3, #0
 80105aa:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80105ac:	2300      	movs	r3, #0
 80105ae:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	891b      	ldrh	r3, [r3, #8]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <CircularQueue_Add+0x38>
 80105b8:	2302      	movs	r3, #2
 80105ba:	e000      	b.n	80105be <CircularQueue_Add+0x3a>
 80105bc:	2300      	movs	r3, #0
 80105be:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	695b      	ldr	r3, [r3, #20]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d02a      	beq.n	801061e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	891b      	ldrh	r3, [r3, #8]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d123      	bne.n	8010618 <CircularQueue_Add+0x94>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	691b      	ldr	r3, [r3, #16]
 80105d8:	4413      	add	r3, r2
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	b29a      	uxth	r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	6819      	ldr	r1, [r3, #0]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	1c58      	adds	r0, r3, #1
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	4298      	cmp	r0, r3
 80105ee:	d306      	bcc.n	80105fe <CircularQueue_Add+0x7a>
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	6918      	ldr	r0, [r3, #16]
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	1ac3      	subs	r3, r0, r3
 80105fa:	3301      	adds	r3, #1
 80105fc:	e002      	b.n	8010604 <CircularQueue_Add+0x80>
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	691b      	ldr	r3, [r3, #16]
 8010602:	3301      	adds	r3, #1
 8010604:	440b      	add	r3, r1
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	b29b      	uxth	r3, r3
 801060a:	021b      	lsls	r3, r3, #8
 801060c:	b29b      	uxth	r3, r3
 801060e:	4413      	add	r3, r2
 8010610:	b29b      	uxth	r3, r3
 8010612:	3302      	adds	r3, #2
 8010614:	b29b      	uxth	r3, r3
 8010616:	e001      	b.n	801061c <CircularQueue_Add+0x98>
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	891b      	ldrh	r3, [r3, #8]
 801061c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	891b      	ldrh	r3, [r3, #8]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d002      	beq.n	801062c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	891b      	ldrh	r3, [r3, #8]
 801062a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	691a      	ldr	r2, [r3, #16]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	429a      	cmp	r2, r3
 8010636:	d307      	bcc.n	8010648 <CircularQueue_Add+0xc4>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	6919      	ldr	r1, [r3, #16]
 8010640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010642:	440b      	add	r3, r1
 8010644:	1ad3      	subs	r3, r2, r3
 8010646:	e000      	b.n	801064a <CircularQueue_Add+0xc6>
 8010648:	2300      	movs	r3, #0
 801064a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 801064c:	88fa      	ldrh	r2, [r7, #6]
 801064e:	7ffb      	ldrb	r3, [r7, #31]
 8010650:	4413      	add	r3, r2
 8010652:	461a      	mov	r2, r3
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	fb02 f303 	mul.w	r3, r2, r3
 801065a:	69ba      	ldr	r2, [r7, #24]
 801065c:	429a      	cmp	r2, r3
 801065e:	d80b      	bhi.n	8010678 <CircularQueue_Add+0xf4>
 8010660:	88fa      	ldrh	r2, [r7, #6]
 8010662:	7ffb      	ldrb	r3, [r7, #31]
 8010664:	4413      	add	r3, r2
 8010666:	461a      	mov	r2, r3
 8010668:	69bb      	ldr	r3, [r7, #24]
 801066a:	fbb3 f1f2 	udiv	r1, r3, r2
 801066e:	fb01 f202 	mul.w	r2, r1, r2
 8010672:	1a9b      	subs	r3, r3, r2
 8010674:	b2db      	uxtb	r3, r3
 8010676:	e000      	b.n	801067a <CircularQueue_Add+0xf6>
 8010678:	2300      	movs	r3, #0
 801067a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 801067c:	7dfa      	ldrb	r2, [r7, #23]
 801067e:	7ffb      	ldrb	r3, [r7, #31]
 8010680:	429a      	cmp	r2, r3
 8010682:	bf8c      	ite	hi
 8010684:	2301      	movhi	r3, #1
 8010686:	2300      	movls	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 801068c:	7fbb      	ldrb	r3, [r7, #30]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d008      	beq.n	80106a4 <CircularQueue_Add+0x120>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	7f1b      	ldrb	r3, [r3, #28]
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	2b00      	cmp	r3, #0
 801069c:	d002      	beq.n	80106a4 <CircularQueue_Add+0x120>
 801069e:	7dfb      	ldrb	r3, [r7, #23]
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	e000      	b.n	80106a6 <CircularQueue_Add+0x122>
 80106a4:	8bbb      	ldrh	r3, [r7, #28]
 80106a6:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80106a8:	7fbb      	ldrb	r3, [r7, #30]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d008      	beq.n	80106c0 <CircularQueue_Add+0x13c>
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	7f1b      	ldrb	r3, [r3, #28]
 80106b2:	f003 0302 	and.w	r3, r3, #2
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <CircularQueue_Add+0x13c>
 80106ba:	7ffb      	ldrb	r3, [r7, #31]
 80106bc:	b29b      	uxth	r3, r3
 80106be:	e000      	b.n	80106c2 <CircularQueue_Add+0x13e>
 80106c0:	8bbb      	ldrh	r3, [r7, #28]
 80106c2:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80106c4:	88fb      	ldrh	r3, [r7, #6]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f000 817e 	beq.w	80109c8 <CircularQueue_Add+0x444>
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	695a      	ldr	r2, [r3, #20]
 80106d0:	88f9      	ldrh	r1, [r7, #6]
 80106d2:	7ffb      	ldrb	r3, [r7, #31]
 80106d4:	440b      	add	r3, r1
 80106d6:	4619      	mov	r1, r3
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	fb01 f303 	mul.w	r3, r1, r3
 80106de:	441a      	add	r2, r3
 80106e0:	8bbb      	ldrh	r3, [r7, #28]
 80106e2:	441a      	add	r2, r3
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	f200 816d 	bhi.w	80109c8 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80106ee:	2300      	movs	r3, #0
 80106f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106f2:	e14a      	b.n	801098a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	691a      	ldr	r2, [r3, #16]
 80106f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80106fa:	441a      	add	r2, r3
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	429a      	cmp	r2, r3
 8010702:	d307      	bcc.n	8010714 <CircularQueue_Add+0x190>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	691a      	ldr	r2, [r3, #16]
 8010708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801070a:	441a      	add	r2, r3
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	e003      	b.n	801071c <CircularQueue_Add+0x198>
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	691a      	ldr	r2, [r3, #16]
 8010718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801071a:	4413      	add	r3, r2
 801071c:	68fa      	ldr	r2, [r7, #12]
 801071e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	891b      	ldrh	r3, [r3, #8]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d130      	bne.n	8010790 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010734:	1c59      	adds	r1, r3, #1
 8010736:	6339      	str	r1, [r7, #48]	; 0x30
 8010738:	4413      	add	r3, r2
 801073a:	88fa      	ldrh	r2, [r7, #6]
 801073c:	b2d2      	uxtb	r2, r2
 801073e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010746:	429a      	cmp	r2, r3
 8010748:	d304      	bcc.n	8010754 <CircularQueue_Add+0x1d0>
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	e000      	b.n	8010756 <CircularQueue_Add+0x1d2>
 8010754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010756:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8010758:	88fb      	ldrh	r3, [r7, #6]
 801075a:	0a1b      	lsrs	r3, r3, #8
 801075c:	b298      	uxth	r0, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	1c59      	adds	r1, r3, #1
 8010766:	6339      	str	r1, [r7, #48]	; 0x30
 8010768:	4413      	add	r3, r2
 801076a:	b2c2      	uxtb	r2, r0
 801076c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010774:	429a      	cmp	r2, r3
 8010776:	d304      	bcc.n	8010782 <CircularQueue_Add+0x1fe>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	e000      	b.n	8010784 <CircularQueue_Add+0x200>
 8010782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010784:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	695b      	ldr	r3, [r3, #20]
 801078a:	1c9a      	adds	r2, r3, #2
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8010790:	88fa      	ldrh	r2, [r7, #6]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6859      	ldr	r1, [r3, #4]
 8010796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010798:	1acb      	subs	r3, r1, r3
 801079a:	4293      	cmp	r3, r2
 801079c:	bf28      	it	cs
 801079e:	4613      	movcs	r3, r2
 80107a0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80107a2:	88fb      	ldrh	r3, [r7, #6]
 80107a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d007      	beq.n	80107ba <CircularQueue_Add+0x236>
 80107aa:	88fb      	ldrh	r3, [r7, #6]
 80107ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d225      	bcs.n	80107fe <CircularQueue_Add+0x27a>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	7f1b      	ldrb	r3, [r3, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d121      	bne.n	80107fe <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c0:	18d0      	adds	r0, r2, r3
 80107c2:	88fb      	ldrh	r3, [r7, #6]
 80107c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107c6:	fb02 f303 	mul.w	r3, r2, r3
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	4413      	add	r3, r2
 80107ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107d0:	4619      	mov	r1, r3
 80107d2:	f000 fd61 	bl	8011298 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	695a      	ldr	r2, [r3, #20]
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	441a      	add	r2, r3
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80107e2:	2300      	movs	r3, #0
 80107e4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80107e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80107ea:	88fa      	ldrh	r2, [r7, #6]
 80107ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80107f2:	7ffb      	ldrb	r3, [r7, #31]
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	88fb      	ldrh	r3, [r7, #6]
 80107f8:	4413      	add	r3, r2
 80107fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80107fc:	e0a4      	b.n	8010948 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80107fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010800:	2b00      	cmp	r3, #0
 8010802:	f000 80a1 	beq.w	8010948 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	7f1b      	ldrb	r3, [r3, #28]
 801080a:	f003 0301 	and.w	r3, r3, #1
 801080e:	2b00      	cmp	r3, #0
 8010810:	d03a      	beq.n	8010888 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	891b      	ldrh	r3, [r3, #8]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d10d      	bne.n	8010836 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010820:	3b02      	subs	r3, #2
 8010822:	4413      	add	r3, r2
 8010824:	22ff      	movs	r2, #255	; 0xff
 8010826:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082e:	3b01      	subs	r3, #1
 8010830:	4413      	add	r3, r2
 8010832:	22ff      	movs	r2, #255	; 0xff
 8010834:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	695a      	ldr	r2, [r3, #20]
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	441a      	add	r2, r3
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8010842:	2300      	movs	r3, #0
 8010844:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8010846:	88fb      	ldrh	r3, [r7, #6]
 8010848:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 801084a:	2300      	movs	r3, #0
 801084c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	891b      	ldrh	r3, [r3, #8]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d16f      	bne.n	8010936 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085c:	1c59      	adds	r1, r3, #1
 801085e:	6339      	str	r1, [r7, #48]	; 0x30
 8010860:	4413      	add	r3, r2
 8010862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010864:	b2d2      	uxtb	r2, r2
 8010866:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8010868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086a:	0a18      	lsrs	r0, r3, #8
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010872:	1c59      	adds	r1, r3, #1
 8010874:	6339      	str	r1, [r7, #48]	; 0x30
 8010876:	4413      	add	r3, r2
 8010878:	b2c2      	uxtb	r2, r0
 801087a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	695b      	ldr	r3, [r3, #20]
 8010880:	1c9a      	adds	r2, r3, #2
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	615a      	str	r2, [r3, #20]
 8010886:	e056      	b.n	8010936 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	7f1b      	ldrb	r3, [r3, #28]
 801088c:	f003 0302 	and.w	r3, r3, #2
 8010890:	2b00      	cmp	r3, #0
 8010892:	d050      	beq.n	8010936 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	891b      	ldrh	r3, [r3, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d14a      	bne.n	8010932 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a2:	3b02      	subs	r3, #2
 80108a4:	4413      	add	r3, r2
 80108a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108a8:	b2d2      	uxtb	r2, r2
 80108aa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80108ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ae:	0a19      	lsrs	r1, r3, #8
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b6:	3b01      	subs	r3, #1
 80108b8:	4413      	add	r3, r2
 80108ba:	b2ca      	uxtb	r2, r1
 80108bc:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	18d0      	adds	r0, r2, r3
 80108c6:	88fb      	ldrh	r3, [r7, #6]
 80108c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108ca:	fb02 f303 	mul.w	r3, r2, r3
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	4413      	add	r3, r2
 80108d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108d4:	4619      	mov	r1, r3
 80108d6:	f000 fcdf 	bl	8011298 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	695a      	ldr	r2, [r3, #20]
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	441a      	add	r2, r3
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80108ea:	88fa      	ldrh	r2, [r7, #6]
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	699b      	ldr	r3, [r3, #24]
 80108f6:	1c5a      	adds	r2, r3, #1
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80108fc:	2300      	movs	r3, #0
 80108fe:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010906:	1c59      	adds	r1, r3, #1
 8010908:	6339      	str	r1, [r7, #48]	; 0x30
 801090a:	4413      	add	r3, r2
 801090c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801090e:	b2d2      	uxtb	r2, r2
 8010910:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8010912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010914:	0a18      	lsrs	r0, r3, #8
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091c:	1c59      	adds	r1, r3, #1
 801091e:	6339      	str	r1, [r7, #48]	; 0x30
 8010920:	4413      	add	r3, r2
 8010922:	b2c2      	uxtb	r2, r0
 8010924:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	695b      	ldr	r3, [r3, #20]
 801092a:	1c9a      	adds	r2, r3, #2
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	615a      	str	r2, [r3, #20]
 8010930:	e001      	b.n	8010936 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8010932:	2300      	movs	r3, #0
 8010934:	e049      	b.n	80109ca <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8010936:	7ffb      	ldrb	r3, [r7, #31]
 8010938:	b29a      	uxth	r2, r3
 801093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093c:	b29b      	uxth	r3, r3
 801093e:	4413      	add	r3, r2
 8010940:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2200      	movs	r2, #0
 8010946:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8010948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094a:	2b00      	cmp	r3, #0
 801094c:	d015      	beq.n	801097a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010954:	18d0      	adds	r0, r2, r3
 8010956:	88fb      	ldrh	r3, [r7, #6]
 8010958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801095a:	fb03 f202 	mul.w	r2, r3, r2
 801095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010960:	4413      	add	r3, r2
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	4413      	add	r3, r2
 8010966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010968:	4619      	mov	r1, r3
 801096a:	f000 fc95 	bl	8011298 <memcpy>
        q->byteCount += NbBytesToCopy;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	695a      	ldr	r2, [r3, #20]
 8010972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010974:	441a      	add	r2, r3
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	699b      	ldr	r3, [r3, #24]
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	3301      	adds	r3, #1
 8010988:	62fb      	str	r3, [r7, #44]	; 0x2c
 801098a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	429a      	cmp	r2, r3
 8010990:	f4ff aeb0 	bcc.w	80106f4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	6919      	ldr	r1, [r3, #16]
 801099c:	7ffb      	ldrb	r3, [r7, #31]
 801099e:	4419      	add	r1, r3
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	4299      	cmp	r1, r3
 80109a6:	d307      	bcc.n	80109b8 <CircularQueue_Add+0x434>
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	6919      	ldr	r1, [r3, #16]
 80109ac:	7ffb      	ldrb	r3, [r7, #31]
 80109ae:	4419      	add	r1, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	1acb      	subs	r3, r1, r3
 80109b6:	e003      	b.n	80109c0 <CircularQueue_Add+0x43c>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6919      	ldr	r1, [r3, #16]
 80109bc:	7ffb      	ldrb	r3, [r7, #31]
 80109be:	440b      	add	r3, r1
 80109c0:	4413      	add	r3, r2
 80109c2:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	e000      	b.n	80109ca <CircularQueue_Add+0x446>
    return NULL;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3738      	adds	r7, #56	; 0x38
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80109d2:	b480      	push	{r7}
 80109d4:	b085      	sub	sp, #20
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
 80109da:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80109dc:	2300      	movs	r3, #0
 80109de:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80109e0:	2300      	movs	r3, #0
 80109e2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	891b      	ldrh	r3, [r3, #8]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d101      	bne.n	80109f0 <CircularQueue_Remove+0x1e>
 80109ec:	2302      	movs	r3, #2
 80109ee:	e000      	b.n	80109f2 <CircularQueue_Remove+0x20>
 80109f0:	2300      	movs	r3, #0
 80109f2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80109f4:	2300      	movs	r3, #0
 80109f6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	695b      	ldr	r3, [r3, #20]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 80cc 	beq.w	8010b9a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	891b      	ldrh	r3, [r3, #8]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d121      	bne.n	8010a4e <CircularQueue_Remove+0x7c>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	4413      	add	r3, r2
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6819      	ldr	r1, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	1c58      	adds	r0, r3, #1
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	4298      	cmp	r0, r3
 8010a28:	d306      	bcc.n	8010a38 <CircularQueue_Remove+0x66>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	68d8      	ldr	r0, [r3, #12]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	1ac3      	subs	r3, r0, r3
 8010a34:	3301      	adds	r3, #1
 8010a36:	e002      	b.n	8010a3e <CircularQueue_Remove+0x6c>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	440b      	add	r3, r1
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	021b      	lsls	r3, r3, #8
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	4413      	add	r3, r2
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	e001      	b.n	8010a52 <CircularQueue_Remove+0x80>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	891b      	ldrh	r3, [r3, #8]
 8010a52:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	7f1b      	ldrb	r3, [r3, #28]
 8010a58:	f003 0301 	and.w	r3, r3, #1
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d057      	beq.n	8010b10 <CircularQueue_Remove+0x13e>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	7f1b      	ldrb	r3, [r3, #28]
 8010a64:	f003 0302 	and.w	r3, r3, #2
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d151      	bne.n	8010b10 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010a6c:	897b      	ldrh	r3, [r7, #10]
 8010a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d103      	bne.n	8010a7e <CircularQueue_Remove+0xac>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	891b      	ldrh	r3, [r3, #8]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d012      	beq.n	8010aa4 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	68da      	ldr	r2, [r3, #12]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d942      	bls.n	8010b10 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	891b      	ldrh	r3, [r3, #8]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d03e      	beq.n	8010b10 <CircularQueue_Remove+0x13e>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	685a      	ldr	r2, [r3, #4]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	8912      	ldrh	r2, [r2, #8]
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d235      	bcs.n	8010b10 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	695a      	ldr	r2, [r3, #20]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	68d9      	ldr	r1, [r3, #12]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	1acb      	subs	r3, r1, r3
 8010ab2:	441a      	add	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	891b      	ldrh	r3, [r3, #8]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d121      	bne.n	8010b0a <CircularQueue_Remove+0x138>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	4413      	add	r3, r2
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6819      	ldr	r1, [r3, #0]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	1c58      	adds	r0, r3, #1
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	4298      	cmp	r0, r3
 8010ae4:	d306      	bcc.n	8010af4 <CircularQueue_Remove+0x122>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	68d8      	ldr	r0, [r3, #12]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	1ac3      	subs	r3, r0, r3
 8010af0:	3301      	adds	r3, #1
 8010af2:	e002      	b.n	8010afa <CircularQueue_Remove+0x128>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	3301      	adds	r3, #1
 8010afa:	440b      	add	r3, r1
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	021b      	lsls	r3, r3, #8
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	4413      	add	r3, r2
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	e001      	b.n	8010b0e <CircularQueue_Remove+0x13c>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	891b      	ldrh	r3, [r3, #8]
 8010b0e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	68d9      	ldr	r1, [r3, #12]
 8010b18:	7a7b      	ldrb	r3, [r7, #9]
 8010b1a:	4419      	add	r1, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	4299      	cmp	r1, r3
 8010b22:	d307      	bcc.n	8010b34 <CircularQueue_Remove+0x162>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	68d9      	ldr	r1, [r3, #12]
 8010b28:	7a7b      	ldrb	r3, [r7, #9]
 8010b2a:	4419      	add	r1, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	1acb      	subs	r3, r1, r3
 8010b32:	e003      	b.n	8010b3c <CircularQueue_Remove+0x16a>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	68d9      	ldr	r1, [r3, #12]
 8010b38:	7a7b      	ldrb	r3, [r7, #9]
 8010b3a:	440b      	add	r3, r1
 8010b3c:	4413      	add	r3, r2
 8010b3e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	695b      	ldr	r3, [r3, #20]
 8010b44:	8979      	ldrh	r1, [r7, #10]
 8010b46:	7a7a      	ldrb	r2, [r7, #9]
 8010b48:	440a      	add	r2, r1
 8010b4a:	1a9a      	subs	r2, r3, r2
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d01b      	beq.n	8010b90 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	68da      	ldr	r2, [r3, #12]
 8010b5c:	897b      	ldrh	r3, [r7, #10]
 8010b5e:	441a      	add	r2, r3
 8010b60:	7a7b      	ldrb	r3, [r7, #9]
 8010b62:	441a      	add	r2, r3
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d309      	bcc.n	8010b80 <CircularQueue_Remove+0x1ae>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	68da      	ldr	r2, [r3, #12]
 8010b70:	897b      	ldrh	r3, [r7, #10]
 8010b72:	441a      	add	r2, r3
 8010b74:	7a7b      	ldrb	r3, [r7, #9]
 8010b76:	441a      	add	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	e005      	b.n	8010b8c <CircularQueue_Remove+0x1ba>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	68da      	ldr	r2, [r3, #12]
 8010b84:	897b      	ldrh	r3, [r7, #10]
 8010b86:	441a      	add	r2, r3
 8010b88:	7a7b      	ldrb	r3, [r7, #9]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	699b      	ldr	r3, [r3, #24]
 8010b94:	1e5a      	subs	r2, r3, #1
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d002      	beq.n	8010ba6 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	897a      	ldrh	r2, [r7, #10]
 8010ba4:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b087      	sub	sp, #28
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	891b      	ldrh	r3, [r3, #8]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <CircularQueue_Sense+0x1e>
 8010bce:	2302      	movs	r3, #2
 8010bd0:	e000      	b.n	8010bd4 <CircularQueue_Sense+0x20>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	695b      	ldr	r3, [r3, #20]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f000 8090 	beq.w	8010d08 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	891b      	ldrh	r3, [r3, #8]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d121      	bne.n	8010c3a <CircularQueue_Sense+0x86>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	4413      	add	r3, r2
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6819      	ldr	r1, [r3, #0]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	1c58      	adds	r0, r3, #1
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	4298      	cmp	r0, r3
 8010c14:	d306      	bcc.n	8010c24 <CircularQueue_Sense+0x70>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	68d8      	ldr	r0, [r3, #12]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	1ac3      	subs	r3, r0, r3
 8010c20:	3301      	adds	r3, #1
 8010c22:	e002      	b.n	8010c2a <CircularQueue_Sense+0x76>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	440b      	add	r3, r1
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	021b      	lsls	r3, r3, #8
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	4413      	add	r3, r2
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	e001      	b.n	8010c3e <CircularQueue_Sense+0x8a>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	891b      	ldrh	r3, [r3, #8]
 8010c3e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	7f1b      	ldrb	r3, [r3, #28]
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d048      	beq.n	8010cde <CircularQueue_Sense+0x12a>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	7f1b      	ldrb	r3, [r3, #28]
 8010c50:	f003 0302 	and.w	r3, r3, #2
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d142      	bne.n	8010cde <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010c58:	8a7b      	ldrh	r3, [r7, #18]
 8010c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d103      	bne.n	8010c6a <CircularQueue_Sense+0xb6>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	891b      	ldrh	r3, [r3, #8]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d012      	beq.n	8010c90 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	68da      	ldr	r2, [r3, #12]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d933      	bls.n	8010cde <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	891b      	ldrh	r3, [r3, #8]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d02f      	beq.n	8010cde <CircularQueue_Sense+0x12a>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	685a      	ldr	r2, [r3, #4]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	8912      	ldrh	r2, [r2, #8]
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d226      	bcs.n	8010cde <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8010c90:	2300      	movs	r3, #0
 8010c92:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	891b      	ldrh	r3, [r3, #8]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d11d      	bne.n	8010cd8 <CircularQueue_Sense+0x124>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6819      	ldr	r1, [r3, #0]
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	1c58      	adds	r0, r3, #1
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	4298      	cmp	r0, r3
 8010cb6:	d305      	bcc.n	8010cc4 <CircularQueue_Sense+0x110>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	1ac3      	subs	r3, r0, r3
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	e001      	b.n	8010cc8 <CircularQueue_Sense+0x114>
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	440b      	add	r3, r1
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	021b      	lsls	r3, r3, #8
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	4413      	add	r3, r2
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	e001      	b.n	8010cdc <CircularQueue_Sense+0x128>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	891b      	ldrh	r3, [r3, #8]
 8010cdc:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	7af9      	ldrb	r1, [r7, #11]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	4419      	add	r1, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	4299      	cmp	r1, r3
 8010cee:	d306      	bcc.n	8010cfe <CircularQueue_Sense+0x14a>
 8010cf0:	7af9      	ldrb	r1, [r7, #11]
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	4419      	add	r1, r3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	1acb      	subs	r3, r1, r3
 8010cfc:	e002      	b.n	8010d04 <CircularQueue_Sense+0x150>
 8010cfe:	7af9      	ldrb	r1, [r7, #11]
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	440b      	add	r3, r1
 8010d04:	4413      	add	r3, r2
 8010d06:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d002      	beq.n	8010d14 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	8a7a      	ldrh	r2, [r7, #18]
 8010d12:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8010d14:	697b      	ldr	r3, [r7, #20]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	371c      	adds	r7, #28
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
	...

08010d24 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8010d24:	b480      	push	{r7}
 8010d26:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010d28:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <UTIL_LPM_Init+0x1c>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010d2e:	4b05      	ldr	r3, [pc, #20]	; (8010d44 <UTIL_LPM_Init+0x20>)
 8010d30:	2200      	movs	r2, #0
 8010d32:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010d34:	bf00      	nop
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	200021ac 	.word	0x200021ac
 8010d44:	200021b0 	.word	0x200021b0

08010d48 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	460b      	mov	r3, r1
 8010d52:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d54:	f3ef 8310 	mrs	r3, PRIMASK
 8010d58:	613b      	str	r3, [r7, #16]
  return(result);
 8010d5a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8010d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d5e:	b672      	cpsid	i
}
 8010d60:	bf00      	nop
  
  switch(state)
 8010d62:	78fb      	ldrb	r3, [r7, #3]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d008      	beq.n	8010d7a <UTIL_LPM_SetOffMode+0x32>
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d10e      	bne.n	8010d8a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010d6c:	4b0d      	ldr	r3, [pc, #52]	; (8010da4 <UTIL_LPM_SetOffMode+0x5c>)
 8010d6e:	681a      	ldr	r2, [r3, #0]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4313      	orrs	r3, r2
 8010d74:	4a0b      	ldr	r2, [pc, #44]	; (8010da4 <UTIL_LPM_SetOffMode+0x5c>)
 8010d76:	6013      	str	r3, [r2, #0]
      break;
 8010d78:	e008      	b.n	8010d8c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	43da      	mvns	r2, r3
 8010d7e:	4b09      	ldr	r3, [pc, #36]	; (8010da4 <UTIL_LPM_SetOffMode+0x5c>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4013      	ands	r3, r2
 8010d84:	4a07      	ldr	r2, [pc, #28]	; (8010da4 <UTIL_LPM_SetOffMode+0x5c>)
 8010d86:	6013      	str	r3, [r2, #0]
      break;
 8010d88:	e000      	b.n	8010d8c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8010d8a:	bf00      	nop
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f383 8810 	msr	PRIMASK, r3
}
 8010d96:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010d98:	bf00      	nop
 8010d9a:	371c      	adds	r7, #28
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr
 8010da4:	200021b0 	.word	0x200021b0

08010da8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b090      	sub	sp, #64	; 0x40
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8010db0:	4b73      	ldr	r3, [pc, #460]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8010db6:	4b72      	ldr	r3, [pc, #456]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4013      	ands	r3, r2
 8010dbe:	4a70      	ldr	r2, [pc, #448]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010dc0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8010dc2:	4b70      	ldr	r3, [pc, #448]	; (8010f84 <UTIL_SEQ_Run+0x1dc>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8010dc8:	4b6f      	ldr	r3, [pc, #444]	; (8010f88 <UTIL_SEQ_Run+0x1e0>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8010dce:	4b6f      	ldr	r3, [pc, #444]	; (8010f8c <UTIL_SEQ_Run+0x1e4>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8010dd4:	4b6e      	ldr	r3, [pc, #440]	; (8010f90 <UTIL_SEQ_Run+0x1e8>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010dda:	e08d      	b.n	8010ef8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010de0:	e002      	b.n	8010de8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8010de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de4:	3301      	adds	r3, #1
 8010de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010de8:	4a6a      	ldr	r2, [pc, #424]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	401a      	ands	r2, r3
 8010df4:	4b62      	ldr	r3, [pc, #392]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4013      	ands	r3, r2
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d0f1      	beq.n	8010de2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8010dfe:	4a65      	ldr	r2, [pc, #404]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e02:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e08:	401a      	ands	r2, r3
 8010e0a:	4b5d      	ldr	r3, [pc, #372]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	4013      	ands	r3, r2
 8010e10:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010e12:	4a60      	ldr	r2, [pc, #384]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e16:	00db      	lsls	r3, r3, #3
 8010e18:	4413      	add	r3, r2
 8010e1a:	685a      	ldr	r2, [r3, #4]
 8010e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1e:	4013      	ands	r3, r2
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d106      	bne.n	8010e32 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010e24:	4a5b      	ldr	r2, [pc, #364]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e28:	00db      	lsls	r3, r3, #3
 8010e2a:	4413      	add	r3, r2
 8010e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e30:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010e32:	4a58      	ldr	r2, [pc, #352]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	4413      	add	r3, r2
 8010e3a:	685a      	ldr	r2, [r3, #4]
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	4013      	ands	r3, r2
 8010e40:	4618      	mov	r0, r3
 8010e42:	f000 f9b3 	bl	80111ac <SEQ_BitPosition>
 8010e46:	4603      	mov	r3, r0
 8010e48:	461a      	mov	r2, r3
 8010e4a:	4b53      	ldr	r3, [pc, #332]	; (8010f98 <UTIL_SEQ_Run+0x1f0>)
 8010e4c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010e4e:	4a51      	ldr	r2, [pc, #324]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e52:	00db      	lsls	r3, r3, #3
 8010e54:	4413      	add	r3, r2
 8010e56:	685a      	ldr	r2, [r3, #4]
 8010e58:	4b4f      	ldr	r3, [pc, #316]	; (8010f98 <UTIL_SEQ_Run+0x1f0>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2101      	movs	r1, #1
 8010e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e62:	43db      	mvns	r3, r3
 8010e64:	401a      	ands	r2, r3
 8010e66:	494b      	ldr	r1, [pc, #300]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e6a:	00db      	lsls	r3, r3, #3
 8010e6c:	440b      	add	r3, r1
 8010e6e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e70:	f3ef 8310 	mrs	r3, PRIMASK
 8010e74:	61bb      	str	r3, [r7, #24]
  return(result);
 8010e76:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010e78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e7a:	b672      	cpsid	i
}
 8010e7c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010e7e:	4b46      	ldr	r3, [pc, #280]	; (8010f98 <UTIL_SEQ_Run+0x1f0>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	2201      	movs	r2, #1
 8010e84:	fa02 f303 	lsl.w	r3, r2, r3
 8010e88:	43da      	mvns	r2, r3
 8010e8a:	4b3e      	ldr	r3, [pc, #248]	; (8010f84 <UTIL_SEQ_Run+0x1dc>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	4013      	ands	r3, r2
 8010e90:	4a3c      	ldr	r2, [pc, #240]	; (8010f84 <UTIL_SEQ_Run+0x1dc>)
 8010e92:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010e94:	2302      	movs	r3, #2
 8010e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e98:	e013      	b.n	8010ec2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	4a3d      	ldr	r2, [pc, #244]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010ea0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010ea4:	4b3c      	ldr	r3, [pc, #240]	; (8010f98 <UTIL_SEQ_Run+0x1f0>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8010eae:	43da      	mvns	r2, r3
 8010eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb2:	3b01      	subs	r3, #1
 8010eb4:	400a      	ands	r2, r1
 8010eb6:	4937      	ldr	r1, [pc, #220]	; (8010f94 <UTIL_SEQ_Run+0x1ec>)
 8010eb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d1e8      	bne.n	8010e9a <UTIL_SEQ_Run+0xf2>
 8010ec8:	6a3b      	ldr	r3, [r7, #32]
 8010eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	f383 8810 	msr	PRIMASK, r3
}
 8010ed2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010ed4:	4b30      	ldr	r3, [pc, #192]	; (8010f98 <UTIL_SEQ_Run+0x1f0>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a30      	ldr	r2, [pc, #192]	; (8010f9c <UTIL_SEQ_Run+0x1f4>)
 8010eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ede:	4798      	blx	r3

    local_taskset = TaskSet;
 8010ee0:	4b28      	ldr	r3, [pc, #160]	; (8010f84 <UTIL_SEQ_Run+0x1dc>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8010ee6:	4b28      	ldr	r3, [pc, #160]	; (8010f88 <UTIL_SEQ_Run+0x1e0>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8010eec:	4b27      	ldr	r3, [pc, #156]	; (8010f8c <UTIL_SEQ_Run+0x1e4>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8010ef2:	4b27      	ldr	r3, [pc, #156]	; (8010f90 <UTIL_SEQ_Run+0x1e8>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010efc:	401a      	ands	r2, r3
 8010efe:	4b20      	ldr	r3, [pc, #128]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4013      	ands	r3, r2
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d005      	beq.n	8010f14 <UTIL_SEQ_Run+0x16c>
 8010f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0c:	4013      	ands	r3, r2
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f43f af64 	beq.w	8010ddc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010f14:	4b20      	ldr	r3, [pc, #128]	; (8010f98 <UTIL_SEQ_Run+0x1f0>)
 8010f16:	f04f 32ff 	mov.w	r2, #4294967295
 8010f1a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010f1c:	f000 f938 	bl	8011190 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f20:	f3ef 8310 	mrs	r3, PRIMASK
 8010f24:	613b      	str	r3, [r7, #16]
  return(result);
 8010f26:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8010f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f2a:	b672      	cpsid	i
}
 8010f2c:	bf00      	nop
  local_taskset = TaskSet;
 8010f2e:	4b15      	ldr	r3, [pc, #84]	; (8010f84 <UTIL_SEQ_Run+0x1dc>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8010f34:	4b14      	ldr	r3, [pc, #80]	; (8010f88 <UTIL_SEQ_Run+0x1e0>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8010f3a:	4b14      	ldr	r3, [pc, #80]	; (8010f8c <UTIL_SEQ_Run+0x1e4>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	401a      	ands	r2, r3
 8010f46:	4b0e      	ldr	r3, [pc, #56]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d107      	bne.n	8010f60 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8010f50:	4b0f      	ldr	r3, [pc, #60]	; (8010f90 <UTIL_SEQ_Run+0x1e8>)
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f56:	4013      	ands	r3, r2
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d101      	bne.n	8010f60 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8010f5c:	f7f0 f90e 	bl	800117c <UTIL_SEQ_Idle>
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f383 8810 	msr	PRIMASK, r3
}
 8010f6a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8010f6c:	f000 f917 	bl	801119e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8010f70:	4a03      	ldr	r2, [pc, #12]	; (8010f80 <UTIL_SEQ_Run+0x1d8>)
 8010f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f74:	6013      	str	r3, [r2, #0]

  return;
 8010f76:	bf00      	nop
}
 8010f78:	3740      	adds	r7, #64	; 0x40
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	200001a4 	.word	0x200001a4
 8010f84:	200021b4 	.word	0x200021b4
 8010f88:	200021b8 	.word	0x200021b8
 8010f8c:	200001a0 	.word	0x200001a0
 8010f90:	200021bc 	.word	0x200021bc
 8010f94:	20002244 	.word	0x20002244
 8010f98:	200021c0 	.word	0x200021c0
 8010f9c:	200021c4 	.word	0x200021c4

08010fa0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b088      	sub	sp, #32
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fac:	f3ef 8310 	mrs	r3, PRIMASK
 8010fb0:	617b      	str	r3, [r7, #20]
  return(result);
 8010fb2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010fb6:	b672      	cpsid	i
}
 8010fb8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f000 f8f6 	bl	80111ac <SEQ_BitPosition>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	4a06      	ldr	r2, [pc, #24]	; (8010fe0 <UTIL_SEQ_RegTask+0x40>)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010fcc:	69fb      	ldr	r3, [r7, #28]
 8010fce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	f383 8810 	msr	PRIMASK, r3
}
 8010fd6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8010fd8:	bf00      	nop
}
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	200021c4 	.word	0x200021c4

08010fe4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b087      	sub	sp, #28
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fee:	f3ef 8310 	mrs	r3, PRIMASK
 8010ff2:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ff8:	b672      	cpsid	i
}
 8010ffa:	bf00      	nop

  TaskSet |= TaskId_bm;
 8010ffc:	4b0d      	ldr	r3, [pc, #52]	; (8011034 <UTIL_SEQ_SetTask+0x50>)
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4313      	orrs	r3, r2
 8011004:	4a0b      	ldr	r2, [pc, #44]	; (8011034 <UTIL_SEQ_SetTask+0x50>)
 8011006:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011008:	4a0b      	ldr	r2, [pc, #44]	; (8011038 <UTIL_SEQ_SetTask+0x54>)
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	431a      	orrs	r2, r3
 8011014:	4908      	ldr	r1, [pc, #32]	; (8011038 <UTIL_SEQ_SetTask+0x54>)
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	f383 8810 	msr	PRIMASK, r3
}
 8011026:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011028:	bf00      	nop
}
 801102a:	371c      	adds	r7, #28
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr
 8011034:	200021b4 	.word	0x200021b4
 8011038:	20002244 	.word	0x20002244

0801103c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801103c:	b480      	push	{r7}
 801103e:	b087      	sub	sp, #28
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011044:	f3ef 8310 	mrs	r3, PRIMASK
 8011048:	60fb      	str	r3, [r7, #12]
  return(result);
 801104a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801104c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801104e:	b672      	cpsid	i
}
 8011050:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	43da      	mvns	r2, r3
 8011056:	4b08      	ldr	r3, [pc, #32]	; (8011078 <UTIL_SEQ_PauseTask+0x3c>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	4013      	ands	r3, r2
 801105c:	4a06      	ldr	r2, [pc, #24]	; (8011078 <UTIL_SEQ_PauseTask+0x3c>)
 801105e:	6013      	str	r3, [r2, #0]
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	f383 8810 	msr	PRIMASK, r3
}
 801106a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801106c:	bf00      	nop
}
 801106e:	371c      	adds	r7, #28
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	200001a0 	.word	0x200001a0

0801107c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801107c:	b480      	push	{r7}
 801107e:	b087      	sub	sp, #28
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011084:	f3ef 8310 	mrs	r3, PRIMASK
 8011088:	60fb      	str	r3, [r7, #12]
  return(result);
 801108a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801108c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801108e:	b672      	cpsid	i
}
 8011090:	bf00      	nop

  TaskMask |= TaskId_bm;
 8011092:	4b09      	ldr	r3, [pc, #36]	; (80110b8 <UTIL_SEQ_ResumeTask+0x3c>)
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	4313      	orrs	r3, r2
 801109a:	4a07      	ldr	r2, [pc, #28]	; (80110b8 <UTIL_SEQ_ResumeTask+0x3c>)
 801109c:	6013      	str	r3, [r2, #0]
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	f383 8810 	msr	PRIMASK, r3
}
 80110a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80110aa:	bf00      	nop
}
 80110ac:	371c      	adds	r7, #28
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	200001a0 	.word	0x200001a0

080110bc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80110bc:	b480      	push	{r7}
 80110be:	b087      	sub	sp, #28
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110c4:	f3ef 8310 	mrs	r3, PRIMASK
 80110c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80110ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80110cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80110ce:	b672      	cpsid	i
}
 80110d0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80110d2:	4b09      	ldr	r3, [pc, #36]	; (80110f8 <UTIL_SEQ_SetEvt+0x3c>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4313      	orrs	r3, r2
 80110da:	4a07      	ldr	r2, [pc, #28]	; (80110f8 <UTIL_SEQ_SetEvt+0x3c>)
 80110dc:	6013      	str	r3, [r2, #0]
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	f383 8810 	msr	PRIMASK, r3
}
 80110e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80110ea:	bf00      	nop
}
 80110ec:	371c      	adds	r7, #28
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr
 80110f6:	bf00      	nop
 80110f8:	200021b8 	.word	0x200021b8

080110fc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b088      	sub	sp, #32
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8011104:	4b1f      	ldr	r3, [pc, #124]	; (8011184 <UTIL_SEQ_WaitEvt+0x88>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801110a:	4b1e      	ldr	r3, [pc, #120]	; (8011184 <UTIL_SEQ_WaitEvt+0x88>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011112:	d102      	bne.n	801111a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8011114:	2300      	movs	r3, #0
 8011116:	61fb      	str	r3, [r7, #28]
 8011118:	e005      	b.n	8011126 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801111a:	4b1a      	ldr	r3, [pc, #104]	; (8011184 <UTIL_SEQ_WaitEvt+0x88>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2201      	movs	r2, #1
 8011120:	fa02 f303 	lsl.w	r3, r2, r3
 8011124:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8011126:	4b18      	ldr	r3, [pc, #96]	; (8011188 <UTIL_SEQ_WaitEvt+0x8c>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801112c:	4a16      	ldr	r2, [pc, #88]	; (8011188 <UTIL_SEQ_WaitEvt+0x8c>)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8011132:	e003      	b.n	801113c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8011134:	6879      	ldr	r1, [r7, #4]
 8011136:	69f8      	ldr	r0, [r7, #28]
 8011138:	f7f0 f827 	bl	800118a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801113c:	4b13      	ldr	r3, [pc, #76]	; (801118c <UTIL_SEQ_WaitEvt+0x90>)
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4013      	ands	r3, r2
 8011144:	2b00      	cmp	r3, #0
 8011146:	d0f5      	beq.n	8011134 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8011148:	4a0e      	ldr	r2, [pc, #56]	; (8011184 <UTIL_SEQ_WaitEvt+0x88>)
 801114a:	69bb      	ldr	r3, [r7, #24]
 801114c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801114e:	f3ef 8310 	mrs	r3, PRIMASK
 8011152:	60bb      	str	r3, [r7, #8]
  return(result);
 8011154:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011158:	b672      	cpsid	i
}
 801115a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	43da      	mvns	r2, r3
 8011160:	4b0a      	ldr	r3, [pc, #40]	; (801118c <UTIL_SEQ_WaitEvt+0x90>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4013      	ands	r3, r2
 8011166:	4a09      	ldr	r2, [pc, #36]	; (801118c <UTIL_SEQ_WaitEvt+0x90>)
 8011168:	6013      	str	r3, [r2, #0]
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f383 8810 	msr	PRIMASK, r3
}
 8011174:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8011176:	4a04      	ldr	r2, [pc, #16]	; (8011188 <UTIL_SEQ_WaitEvt+0x8c>)
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	6013      	str	r3, [r2, #0]
  return;
 801117c:	bf00      	nop
}
 801117e:	3720      	adds	r7, #32
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	200021c0 	.word	0x200021c0
 8011188:	200021bc 	.word	0x200021bc
 801118c:	200021b8 	.word	0x200021b8

08011190 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8011190:	b480      	push	{r7}
 8011192:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011194:	bf00      	nop
}
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801119e:	b480      	push	{r7}
 80111a0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80111a2:	bf00      	nop
}
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80111b4:	2300      	movs	r3, #0
 80111b6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	0c1b      	lsrs	r3, r3, #16
 80111c0:	041b      	lsls	r3, r3, #16
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d104      	bne.n	80111d0 <SEQ_BitPosition+0x24>
 80111c6:	2310      	movs	r3, #16
 80111c8:	73fb      	strb	r3, [r7, #15]
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	041b      	lsls	r3, r3, #16
 80111ce:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d105      	bne.n	80111e6 <SEQ_BitPosition+0x3a>
 80111da:	7bfb      	ldrb	r3, [r7, #15]
 80111dc:	3308      	adds	r3, #8
 80111de:	73fb      	strb	r3, [r7, #15]
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	021b      	lsls	r3, r3, #8
 80111e4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d105      	bne.n	80111fc <SEQ_BitPosition+0x50>
 80111f0:	7bfb      	ldrb	r3, [r7, #15]
 80111f2:	3304      	adds	r3, #4
 80111f4:	73fb      	strb	r3, [r7, #15]
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	011b      	lsls	r3, r3, #4
 80111fa:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	0f1b      	lsrs	r3, r3, #28
 8011200:	4a07      	ldr	r2, [pc, #28]	; (8011220 <SEQ_BitPosition+0x74>)
 8011202:	5cd2      	ldrb	r2, [r2, r3]
 8011204:	7bfb      	ldrb	r3, [r7, #15]
 8011206:	4413      	add	r3, r2
 8011208:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801120a:	7bfb      	ldrb	r3, [r7, #15]
 801120c:	f1c3 031f 	rsb	r3, r3, #31
 8011210:	b2db      	uxtb	r3, r3
}
 8011212:	4618      	mov	r0, r3
 8011214:	3714      	adds	r7, #20
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop
 8011220:	08013634 	.word	0x08013634

08011224 <__errno>:
 8011224:	4b01      	ldr	r3, [pc, #4]	; (801122c <__errno+0x8>)
 8011226:	6818      	ldr	r0, [r3, #0]
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	200001a8 	.word	0x200001a8

08011230 <__libc_init_array>:
 8011230:	b570      	push	{r4, r5, r6, lr}
 8011232:	4d0d      	ldr	r5, [pc, #52]	; (8011268 <__libc_init_array+0x38>)
 8011234:	4c0d      	ldr	r4, [pc, #52]	; (801126c <__libc_init_array+0x3c>)
 8011236:	1b64      	subs	r4, r4, r5
 8011238:	10a4      	asrs	r4, r4, #2
 801123a:	2600      	movs	r6, #0
 801123c:	42a6      	cmp	r6, r4
 801123e:	d109      	bne.n	8011254 <__libc_init_array+0x24>
 8011240:	4d0b      	ldr	r5, [pc, #44]	; (8011270 <__libc_init_array+0x40>)
 8011242:	4c0c      	ldr	r4, [pc, #48]	; (8011274 <__libc_init_array+0x44>)
 8011244:	f001 f8a0 	bl	8012388 <_init>
 8011248:	1b64      	subs	r4, r4, r5
 801124a:	10a4      	asrs	r4, r4, #2
 801124c:	2600      	movs	r6, #0
 801124e:	42a6      	cmp	r6, r4
 8011250:	d105      	bne.n	801125e <__libc_init_array+0x2e>
 8011252:	bd70      	pop	{r4, r5, r6, pc}
 8011254:	f855 3b04 	ldr.w	r3, [r5], #4
 8011258:	4798      	blx	r3
 801125a:	3601      	adds	r6, #1
 801125c:	e7ee      	b.n	801123c <__libc_init_array+0xc>
 801125e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011262:	4798      	blx	r3
 8011264:	3601      	adds	r6, #1
 8011266:	e7f2      	b.n	801124e <__libc_init_array+0x1e>
 8011268:	080136dc 	.word	0x080136dc
 801126c:	080136dc 	.word	0x080136dc
 8011270:	080136dc 	.word	0x080136dc
 8011274:	080136e0 	.word	0x080136e0

08011278 <malloc>:
 8011278:	4b02      	ldr	r3, [pc, #8]	; (8011284 <malloc+0xc>)
 801127a:	4601      	mov	r1, r0
 801127c:	6818      	ldr	r0, [r3, #0]
 801127e:	f000 b88d 	b.w	801139c <_malloc_r>
 8011282:	bf00      	nop
 8011284:	200001a8 	.word	0x200001a8

08011288 <free>:
 8011288:	4b02      	ldr	r3, [pc, #8]	; (8011294 <free+0xc>)
 801128a:	4601      	mov	r1, r0
 801128c:	6818      	ldr	r0, [r3, #0]
 801128e:	f000 b819 	b.w	80112c4 <_free_r>
 8011292:	bf00      	nop
 8011294:	200001a8 	.word	0x200001a8

08011298 <memcpy>:
 8011298:	440a      	add	r2, r1
 801129a:	4291      	cmp	r1, r2
 801129c:	f100 33ff 	add.w	r3, r0, #4294967295
 80112a0:	d100      	bne.n	80112a4 <memcpy+0xc>
 80112a2:	4770      	bx	lr
 80112a4:	b510      	push	{r4, lr}
 80112a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112ae:	4291      	cmp	r1, r2
 80112b0:	d1f9      	bne.n	80112a6 <memcpy+0xe>
 80112b2:	bd10      	pop	{r4, pc}

080112b4 <memset>:
 80112b4:	4402      	add	r2, r0
 80112b6:	4603      	mov	r3, r0
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d100      	bne.n	80112be <memset+0xa>
 80112bc:	4770      	bx	lr
 80112be:	f803 1b01 	strb.w	r1, [r3], #1
 80112c2:	e7f9      	b.n	80112b8 <memset+0x4>

080112c4 <_free_r>:
 80112c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112c6:	2900      	cmp	r1, #0
 80112c8:	d044      	beq.n	8011354 <_free_r+0x90>
 80112ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112ce:	9001      	str	r0, [sp, #4]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f1a1 0404 	sub.w	r4, r1, #4
 80112d6:	bfb8      	it	lt
 80112d8:	18e4      	addlt	r4, r4, r3
 80112da:	f000 fc67 	bl	8011bac <__malloc_lock>
 80112de:	4a1e      	ldr	r2, [pc, #120]	; (8011358 <_free_r+0x94>)
 80112e0:	9801      	ldr	r0, [sp, #4]
 80112e2:	6813      	ldr	r3, [r2, #0]
 80112e4:	b933      	cbnz	r3, 80112f4 <_free_r+0x30>
 80112e6:	6063      	str	r3, [r4, #4]
 80112e8:	6014      	str	r4, [r2, #0]
 80112ea:	b003      	add	sp, #12
 80112ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112f0:	f000 bc62 	b.w	8011bb8 <__malloc_unlock>
 80112f4:	42a3      	cmp	r3, r4
 80112f6:	d908      	bls.n	801130a <_free_r+0x46>
 80112f8:	6825      	ldr	r5, [r4, #0]
 80112fa:	1961      	adds	r1, r4, r5
 80112fc:	428b      	cmp	r3, r1
 80112fe:	bf01      	itttt	eq
 8011300:	6819      	ldreq	r1, [r3, #0]
 8011302:	685b      	ldreq	r3, [r3, #4]
 8011304:	1949      	addeq	r1, r1, r5
 8011306:	6021      	streq	r1, [r4, #0]
 8011308:	e7ed      	b.n	80112e6 <_free_r+0x22>
 801130a:	461a      	mov	r2, r3
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	b10b      	cbz	r3, 8011314 <_free_r+0x50>
 8011310:	42a3      	cmp	r3, r4
 8011312:	d9fa      	bls.n	801130a <_free_r+0x46>
 8011314:	6811      	ldr	r1, [r2, #0]
 8011316:	1855      	adds	r5, r2, r1
 8011318:	42a5      	cmp	r5, r4
 801131a:	d10b      	bne.n	8011334 <_free_r+0x70>
 801131c:	6824      	ldr	r4, [r4, #0]
 801131e:	4421      	add	r1, r4
 8011320:	1854      	adds	r4, r2, r1
 8011322:	42a3      	cmp	r3, r4
 8011324:	6011      	str	r1, [r2, #0]
 8011326:	d1e0      	bne.n	80112ea <_free_r+0x26>
 8011328:	681c      	ldr	r4, [r3, #0]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	6053      	str	r3, [r2, #4]
 801132e:	4421      	add	r1, r4
 8011330:	6011      	str	r1, [r2, #0]
 8011332:	e7da      	b.n	80112ea <_free_r+0x26>
 8011334:	d902      	bls.n	801133c <_free_r+0x78>
 8011336:	230c      	movs	r3, #12
 8011338:	6003      	str	r3, [r0, #0]
 801133a:	e7d6      	b.n	80112ea <_free_r+0x26>
 801133c:	6825      	ldr	r5, [r4, #0]
 801133e:	1961      	adds	r1, r4, r5
 8011340:	428b      	cmp	r3, r1
 8011342:	bf04      	itt	eq
 8011344:	6819      	ldreq	r1, [r3, #0]
 8011346:	685b      	ldreq	r3, [r3, #4]
 8011348:	6063      	str	r3, [r4, #4]
 801134a:	bf04      	itt	eq
 801134c:	1949      	addeq	r1, r1, r5
 801134e:	6021      	streq	r1, [r4, #0]
 8011350:	6054      	str	r4, [r2, #4]
 8011352:	e7ca      	b.n	80112ea <_free_r+0x26>
 8011354:	b003      	add	sp, #12
 8011356:	bd30      	pop	{r4, r5, pc}
 8011358:	20002254 	.word	0x20002254

0801135c <sbrk_aligned>:
 801135c:	b570      	push	{r4, r5, r6, lr}
 801135e:	4e0e      	ldr	r6, [pc, #56]	; (8011398 <sbrk_aligned+0x3c>)
 8011360:	460c      	mov	r4, r1
 8011362:	6831      	ldr	r1, [r6, #0]
 8011364:	4605      	mov	r5, r0
 8011366:	b911      	cbnz	r1, 801136e <sbrk_aligned+0x12>
 8011368:	f000 f930 	bl	80115cc <_sbrk_r>
 801136c:	6030      	str	r0, [r6, #0]
 801136e:	4621      	mov	r1, r4
 8011370:	4628      	mov	r0, r5
 8011372:	f000 f92b 	bl	80115cc <_sbrk_r>
 8011376:	1c43      	adds	r3, r0, #1
 8011378:	d00a      	beq.n	8011390 <sbrk_aligned+0x34>
 801137a:	1cc4      	adds	r4, r0, #3
 801137c:	f024 0403 	bic.w	r4, r4, #3
 8011380:	42a0      	cmp	r0, r4
 8011382:	d007      	beq.n	8011394 <sbrk_aligned+0x38>
 8011384:	1a21      	subs	r1, r4, r0
 8011386:	4628      	mov	r0, r5
 8011388:	f000 f920 	bl	80115cc <_sbrk_r>
 801138c:	3001      	adds	r0, #1
 801138e:	d101      	bne.n	8011394 <sbrk_aligned+0x38>
 8011390:	f04f 34ff 	mov.w	r4, #4294967295
 8011394:	4620      	mov	r0, r4
 8011396:	bd70      	pop	{r4, r5, r6, pc}
 8011398:	20002258 	.word	0x20002258

0801139c <_malloc_r>:
 801139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a0:	1ccd      	adds	r5, r1, #3
 80113a2:	f025 0503 	bic.w	r5, r5, #3
 80113a6:	3508      	adds	r5, #8
 80113a8:	2d0c      	cmp	r5, #12
 80113aa:	bf38      	it	cc
 80113ac:	250c      	movcc	r5, #12
 80113ae:	2d00      	cmp	r5, #0
 80113b0:	4607      	mov	r7, r0
 80113b2:	db01      	blt.n	80113b8 <_malloc_r+0x1c>
 80113b4:	42a9      	cmp	r1, r5
 80113b6:	d905      	bls.n	80113c4 <_malloc_r+0x28>
 80113b8:	230c      	movs	r3, #12
 80113ba:	603b      	str	r3, [r7, #0]
 80113bc:	2600      	movs	r6, #0
 80113be:	4630      	mov	r0, r6
 80113c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c4:	4e2e      	ldr	r6, [pc, #184]	; (8011480 <_malloc_r+0xe4>)
 80113c6:	f000 fbf1 	bl	8011bac <__malloc_lock>
 80113ca:	6833      	ldr	r3, [r6, #0]
 80113cc:	461c      	mov	r4, r3
 80113ce:	bb34      	cbnz	r4, 801141e <_malloc_r+0x82>
 80113d0:	4629      	mov	r1, r5
 80113d2:	4638      	mov	r0, r7
 80113d4:	f7ff ffc2 	bl	801135c <sbrk_aligned>
 80113d8:	1c43      	adds	r3, r0, #1
 80113da:	4604      	mov	r4, r0
 80113dc:	d14d      	bne.n	801147a <_malloc_r+0xde>
 80113de:	6834      	ldr	r4, [r6, #0]
 80113e0:	4626      	mov	r6, r4
 80113e2:	2e00      	cmp	r6, #0
 80113e4:	d140      	bne.n	8011468 <_malloc_r+0xcc>
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	4631      	mov	r1, r6
 80113ea:	4638      	mov	r0, r7
 80113ec:	eb04 0803 	add.w	r8, r4, r3
 80113f0:	f000 f8ec 	bl	80115cc <_sbrk_r>
 80113f4:	4580      	cmp	r8, r0
 80113f6:	d13a      	bne.n	801146e <_malloc_r+0xd2>
 80113f8:	6821      	ldr	r1, [r4, #0]
 80113fa:	3503      	adds	r5, #3
 80113fc:	1a6d      	subs	r5, r5, r1
 80113fe:	f025 0503 	bic.w	r5, r5, #3
 8011402:	3508      	adds	r5, #8
 8011404:	2d0c      	cmp	r5, #12
 8011406:	bf38      	it	cc
 8011408:	250c      	movcc	r5, #12
 801140a:	4629      	mov	r1, r5
 801140c:	4638      	mov	r0, r7
 801140e:	f7ff ffa5 	bl	801135c <sbrk_aligned>
 8011412:	3001      	adds	r0, #1
 8011414:	d02b      	beq.n	801146e <_malloc_r+0xd2>
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	442b      	add	r3, r5
 801141a:	6023      	str	r3, [r4, #0]
 801141c:	e00e      	b.n	801143c <_malloc_r+0xa0>
 801141e:	6822      	ldr	r2, [r4, #0]
 8011420:	1b52      	subs	r2, r2, r5
 8011422:	d41e      	bmi.n	8011462 <_malloc_r+0xc6>
 8011424:	2a0b      	cmp	r2, #11
 8011426:	d916      	bls.n	8011456 <_malloc_r+0xba>
 8011428:	1961      	adds	r1, r4, r5
 801142a:	42a3      	cmp	r3, r4
 801142c:	6025      	str	r5, [r4, #0]
 801142e:	bf18      	it	ne
 8011430:	6059      	strne	r1, [r3, #4]
 8011432:	6863      	ldr	r3, [r4, #4]
 8011434:	bf08      	it	eq
 8011436:	6031      	streq	r1, [r6, #0]
 8011438:	5162      	str	r2, [r4, r5]
 801143a:	604b      	str	r3, [r1, #4]
 801143c:	4638      	mov	r0, r7
 801143e:	f104 060b 	add.w	r6, r4, #11
 8011442:	f000 fbb9 	bl	8011bb8 <__malloc_unlock>
 8011446:	f026 0607 	bic.w	r6, r6, #7
 801144a:	1d23      	adds	r3, r4, #4
 801144c:	1af2      	subs	r2, r6, r3
 801144e:	d0b6      	beq.n	80113be <_malloc_r+0x22>
 8011450:	1b9b      	subs	r3, r3, r6
 8011452:	50a3      	str	r3, [r4, r2]
 8011454:	e7b3      	b.n	80113be <_malloc_r+0x22>
 8011456:	6862      	ldr	r2, [r4, #4]
 8011458:	42a3      	cmp	r3, r4
 801145a:	bf0c      	ite	eq
 801145c:	6032      	streq	r2, [r6, #0]
 801145e:	605a      	strne	r2, [r3, #4]
 8011460:	e7ec      	b.n	801143c <_malloc_r+0xa0>
 8011462:	4623      	mov	r3, r4
 8011464:	6864      	ldr	r4, [r4, #4]
 8011466:	e7b2      	b.n	80113ce <_malloc_r+0x32>
 8011468:	4634      	mov	r4, r6
 801146a:	6876      	ldr	r6, [r6, #4]
 801146c:	e7b9      	b.n	80113e2 <_malloc_r+0x46>
 801146e:	230c      	movs	r3, #12
 8011470:	603b      	str	r3, [r7, #0]
 8011472:	4638      	mov	r0, r7
 8011474:	f000 fba0 	bl	8011bb8 <__malloc_unlock>
 8011478:	e7a1      	b.n	80113be <_malloc_r+0x22>
 801147a:	6025      	str	r5, [r4, #0]
 801147c:	e7de      	b.n	801143c <_malloc_r+0xa0>
 801147e:	bf00      	nop
 8011480:	20002254 	.word	0x20002254

08011484 <iprintf>:
 8011484:	b40f      	push	{r0, r1, r2, r3}
 8011486:	4b0a      	ldr	r3, [pc, #40]	; (80114b0 <iprintf+0x2c>)
 8011488:	b513      	push	{r0, r1, r4, lr}
 801148a:	681c      	ldr	r4, [r3, #0]
 801148c:	b124      	cbz	r4, 8011498 <iprintf+0x14>
 801148e:	69a3      	ldr	r3, [r4, #24]
 8011490:	b913      	cbnz	r3, 8011498 <iprintf+0x14>
 8011492:	4620      	mov	r0, r4
 8011494:	f000 fa84 	bl	80119a0 <__sinit>
 8011498:	ab05      	add	r3, sp, #20
 801149a:	9a04      	ldr	r2, [sp, #16]
 801149c:	68a1      	ldr	r1, [r4, #8]
 801149e:	9301      	str	r3, [sp, #4]
 80114a0:	4620      	mov	r0, r4
 80114a2:	f000 fbb9 	bl	8011c18 <_vfiprintf_r>
 80114a6:	b002      	add	sp, #8
 80114a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114ac:	b004      	add	sp, #16
 80114ae:	4770      	bx	lr
 80114b0:	200001a8 	.word	0x200001a8

080114b4 <putchar>:
 80114b4:	4b09      	ldr	r3, [pc, #36]	; (80114dc <putchar+0x28>)
 80114b6:	b513      	push	{r0, r1, r4, lr}
 80114b8:	681c      	ldr	r4, [r3, #0]
 80114ba:	4601      	mov	r1, r0
 80114bc:	b134      	cbz	r4, 80114cc <putchar+0x18>
 80114be:	69a3      	ldr	r3, [r4, #24]
 80114c0:	b923      	cbnz	r3, 80114cc <putchar+0x18>
 80114c2:	9001      	str	r0, [sp, #4]
 80114c4:	4620      	mov	r0, r4
 80114c6:	f000 fa6b 	bl	80119a0 <__sinit>
 80114ca:	9901      	ldr	r1, [sp, #4]
 80114cc:	68a2      	ldr	r2, [r4, #8]
 80114ce:	4620      	mov	r0, r4
 80114d0:	b002      	add	sp, #8
 80114d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d6:	f000 be63 	b.w	80121a0 <_putc_r>
 80114da:	bf00      	nop
 80114dc:	200001a8 	.word	0x200001a8

080114e0 <_puts_r>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	460e      	mov	r6, r1
 80114e4:	4605      	mov	r5, r0
 80114e6:	b118      	cbz	r0, 80114f0 <_puts_r+0x10>
 80114e8:	6983      	ldr	r3, [r0, #24]
 80114ea:	b90b      	cbnz	r3, 80114f0 <_puts_r+0x10>
 80114ec:	f000 fa58 	bl	80119a0 <__sinit>
 80114f0:	69ab      	ldr	r3, [r5, #24]
 80114f2:	68ac      	ldr	r4, [r5, #8]
 80114f4:	b913      	cbnz	r3, 80114fc <_puts_r+0x1c>
 80114f6:	4628      	mov	r0, r5
 80114f8:	f000 fa52 	bl	80119a0 <__sinit>
 80114fc:	4b2c      	ldr	r3, [pc, #176]	; (80115b0 <_puts_r+0xd0>)
 80114fe:	429c      	cmp	r4, r3
 8011500:	d120      	bne.n	8011544 <_puts_r+0x64>
 8011502:	686c      	ldr	r4, [r5, #4]
 8011504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011506:	07db      	lsls	r3, r3, #31
 8011508:	d405      	bmi.n	8011516 <_puts_r+0x36>
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	0598      	lsls	r0, r3, #22
 801150e:	d402      	bmi.n	8011516 <_puts_r+0x36>
 8011510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011512:	f000 fae3 	bl	8011adc <__retarget_lock_acquire_recursive>
 8011516:	89a3      	ldrh	r3, [r4, #12]
 8011518:	0719      	lsls	r1, r3, #28
 801151a:	d51d      	bpl.n	8011558 <_puts_r+0x78>
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	b1db      	cbz	r3, 8011558 <_puts_r+0x78>
 8011520:	3e01      	subs	r6, #1
 8011522:	68a3      	ldr	r3, [r4, #8]
 8011524:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011528:	3b01      	subs	r3, #1
 801152a:	60a3      	str	r3, [r4, #8]
 801152c:	bb39      	cbnz	r1, 801157e <_puts_r+0x9e>
 801152e:	2b00      	cmp	r3, #0
 8011530:	da38      	bge.n	80115a4 <_puts_r+0xc4>
 8011532:	4622      	mov	r2, r4
 8011534:	210a      	movs	r1, #10
 8011536:	4628      	mov	r0, r5
 8011538:	f000 f858 	bl	80115ec <__swbuf_r>
 801153c:	3001      	adds	r0, #1
 801153e:	d011      	beq.n	8011564 <_puts_r+0x84>
 8011540:	250a      	movs	r5, #10
 8011542:	e011      	b.n	8011568 <_puts_r+0x88>
 8011544:	4b1b      	ldr	r3, [pc, #108]	; (80115b4 <_puts_r+0xd4>)
 8011546:	429c      	cmp	r4, r3
 8011548:	d101      	bne.n	801154e <_puts_r+0x6e>
 801154a:	68ac      	ldr	r4, [r5, #8]
 801154c:	e7da      	b.n	8011504 <_puts_r+0x24>
 801154e:	4b1a      	ldr	r3, [pc, #104]	; (80115b8 <_puts_r+0xd8>)
 8011550:	429c      	cmp	r4, r3
 8011552:	bf08      	it	eq
 8011554:	68ec      	ldreq	r4, [r5, #12]
 8011556:	e7d5      	b.n	8011504 <_puts_r+0x24>
 8011558:	4621      	mov	r1, r4
 801155a:	4628      	mov	r0, r5
 801155c:	f000 f898 	bl	8011690 <__swsetup_r>
 8011560:	2800      	cmp	r0, #0
 8011562:	d0dd      	beq.n	8011520 <_puts_r+0x40>
 8011564:	f04f 35ff 	mov.w	r5, #4294967295
 8011568:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801156a:	07da      	lsls	r2, r3, #31
 801156c:	d405      	bmi.n	801157a <_puts_r+0x9a>
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	059b      	lsls	r3, r3, #22
 8011572:	d402      	bmi.n	801157a <_puts_r+0x9a>
 8011574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011576:	f000 fab2 	bl	8011ade <__retarget_lock_release_recursive>
 801157a:	4628      	mov	r0, r5
 801157c:	bd70      	pop	{r4, r5, r6, pc}
 801157e:	2b00      	cmp	r3, #0
 8011580:	da04      	bge.n	801158c <_puts_r+0xac>
 8011582:	69a2      	ldr	r2, [r4, #24]
 8011584:	429a      	cmp	r2, r3
 8011586:	dc06      	bgt.n	8011596 <_puts_r+0xb6>
 8011588:	290a      	cmp	r1, #10
 801158a:	d004      	beq.n	8011596 <_puts_r+0xb6>
 801158c:	6823      	ldr	r3, [r4, #0]
 801158e:	1c5a      	adds	r2, r3, #1
 8011590:	6022      	str	r2, [r4, #0]
 8011592:	7019      	strb	r1, [r3, #0]
 8011594:	e7c5      	b.n	8011522 <_puts_r+0x42>
 8011596:	4622      	mov	r2, r4
 8011598:	4628      	mov	r0, r5
 801159a:	f000 f827 	bl	80115ec <__swbuf_r>
 801159e:	3001      	adds	r0, #1
 80115a0:	d1bf      	bne.n	8011522 <_puts_r+0x42>
 80115a2:	e7df      	b.n	8011564 <_puts_r+0x84>
 80115a4:	6823      	ldr	r3, [r4, #0]
 80115a6:	250a      	movs	r5, #10
 80115a8:	1c5a      	adds	r2, r3, #1
 80115aa:	6022      	str	r2, [r4, #0]
 80115ac:	701d      	strb	r5, [r3, #0]
 80115ae:	e7db      	b.n	8011568 <_puts_r+0x88>
 80115b0:	08013668 	.word	0x08013668
 80115b4:	08013688 	.word	0x08013688
 80115b8:	08013648 	.word	0x08013648

080115bc <puts>:
 80115bc:	4b02      	ldr	r3, [pc, #8]	; (80115c8 <puts+0xc>)
 80115be:	4601      	mov	r1, r0
 80115c0:	6818      	ldr	r0, [r3, #0]
 80115c2:	f7ff bf8d 	b.w	80114e0 <_puts_r>
 80115c6:	bf00      	nop
 80115c8:	200001a8 	.word	0x200001a8

080115cc <_sbrk_r>:
 80115cc:	b538      	push	{r3, r4, r5, lr}
 80115ce:	4d06      	ldr	r5, [pc, #24]	; (80115e8 <_sbrk_r+0x1c>)
 80115d0:	2300      	movs	r3, #0
 80115d2:	4604      	mov	r4, r0
 80115d4:	4608      	mov	r0, r1
 80115d6:	602b      	str	r3, [r5, #0]
 80115d8:	f7f1 f90e 	bl	80027f8 <_sbrk>
 80115dc:	1c43      	adds	r3, r0, #1
 80115de:	d102      	bne.n	80115e6 <_sbrk_r+0x1a>
 80115e0:	682b      	ldr	r3, [r5, #0]
 80115e2:	b103      	cbz	r3, 80115e6 <_sbrk_r+0x1a>
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	20002260 	.word	0x20002260

080115ec <__swbuf_r>:
 80115ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ee:	460e      	mov	r6, r1
 80115f0:	4614      	mov	r4, r2
 80115f2:	4605      	mov	r5, r0
 80115f4:	b118      	cbz	r0, 80115fe <__swbuf_r+0x12>
 80115f6:	6983      	ldr	r3, [r0, #24]
 80115f8:	b90b      	cbnz	r3, 80115fe <__swbuf_r+0x12>
 80115fa:	f000 f9d1 	bl	80119a0 <__sinit>
 80115fe:	4b21      	ldr	r3, [pc, #132]	; (8011684 <__swbuf_r+0x98>)
 8011600:	429c      	cmp	r4, r3
 8011602:	d12b      	bne.n	801165c <__swbuf_r+0x70>
 8011604:	686c      	ldr	r4, [r5, #4]
 8011606:	69a3      	ldr	r3, [r4, #24]
 8011608:	60a3      	str	r3, [r4, #8]
 801160a:	89a3      	ldrh	r3, [r4, #12]
 801160c:	071a      	lsls	r2, r3, #28
 801160e:	d52f      	bpl.n	8011670 <__swbuf_r+0x84>
 8011610:	6923      	ldr	r3, [r4, #16]
 8011612:	b36b      	cbz	r3, 8011670 <__swbuf_r+0x84>
 8011614:	6923      	ldr	r3, [r4, #16]
 8011616:	6820      	ldr	r0, [r4, #0]
 8011618:	1ac0      	subs	r0, r0, r3
 801161a:	6963      	ldr	r3, [r4, #20]
 801161c:	b2f6      	uxtb	r6, r6
 801161e:	4283      	cmp	r3, r0
 8011620:	4637      	mov	r7, r6
 8011622:	dc04      	bgt.n	801162e <__swbuf_r+0x42>
 8011624:	4621      	mov	r1, r4
 8011626:	4628      	mov	r0, r5
 8011628:	f000 f926 	bl	8011878 <_fflush_r>
 801162c:	bb30      	cbnz	r0, 801167c <__swbuf_r+0x90>
 801162e:	68a3      	ldr	r3, [r4, #8]
 8011630:	3b01      	subs	r3, #1
 8011632:	60a3      	str	r3, [r4, #8]
 8011634:	6823      	ldr	r3, [r4, #0]
 8011636:	1c5a      	adds	r2, r3, #1
 8011638:	6022      	str	r2, [r4, #0]
 801163a:	701e      	strb	r6, [r3, #0]
 801163c:	6963      	ldr	r3, [r4, #20]
 801163e:	3001      	adds	r0, #1
 8011640:	4283      	cmp	r3, r0
 8011642:	d004      	beq.n	801164e <__swbuf_r+0x62>
 8011644:	89a3      	ldrh	r3, [r4, #12]
 8011646:	07db      	lsls	r3, r3, #31
 8011648:	d506      	bpl.n	8011658 <__swbuf_r+0x6c>
 801164a:	2e0a      	cmp	r6, #10
 801164c:	d104      	bne.n	8011658 <__swbuf_r+0x6c>
 801164e:	4621      	mov	r1, r4
 8011650:	4628      	mov	r0, r5
 8011652:	f000 f911 	bl	8011878 <_fflush_r>
 8011656:	b988      	cbnz	r0, 801167c <__swbuf_r+0x90>
 8011658:	4638      	mov	r0, r7
 801165a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801165c:	4b0a      	ldr	r3, [pc, #40]	; (8011688 <__swbuf_r+0x9c>)
 801165e:	429c      	cmp	r4, r3
 8011660:	d101      	bne.n	8011666 <__swbuf_r+0x7a>
 8011662:	68ac      	ldr	r4, [r5, #8]
 8011664:	e7cf      	b.n	8011606 <__swbuf_r+0x1a>
 8011666:	4b09      	ldr	r3, [pc, #36]	; (801168c <__swbuf_r+0xa0>)
 8011668:	429c      	cmp	r4, r3
 801166a:	bf08      	it	eq
 801166c:	68ec      	ldreq	r4, [r5, #12]
 801166e:	e7ca      	b.n	8011606 <__swbuf_r+0x1a>
 8011670:	4621      	mov	r1, r4
 8011672:	4628      	mov	r0, r5
 8011674:	f000 f80c 	bl	8011690 <__swsetup_r>
 8011678:	2800      	cmp	r0, #0
 801167a:	d0cb      	beq.n	8011614 <__swbuf_r+0x28>
 801167c:	f04f 37ff 	mov.w	r7, #4294967295
 8011680:	e7ea      	b.n	8011658 <__swbuf_r+0x6c>
 8011682:	bf00      	nop
 8011684:	08013668 	.word	0x08013668
 8011688:	08013688 	.word	0x08013688
 801168c:	08013648 	.word	0x08013648

08011690 <__swsetup_r>:
 8011690:	4b32      	ldr	r3, [pc, #200]	; (801175c <__swsetup_r+0xcc>)
 8011692:	b570      	push	{r4, r5, r6, lr}
 8011694:	681d      	ldr	r5, [r3, #0]
 8011696:	4606      	mov	r6, r0
 8011698:	460c      	mov	r4, r1
 801169a:	b125      	cbz	r5, 80116a6 <__swsetup_r+0x16>
 801169c:	69ab      	ldr	r3, [r5, #24]
 801169e:	b913      	cbnz	r3, 80116a6 <__swsetup_r+0x16>
 80116a0:	4628      	mov	r0, r5
 80116a2:	f000 f97d 	bl	80119a0 <__sinit>
 80116a6:	4b2e      	ldr	r3, [pc, #184]	; (8011760 <__swsetup_r+0xd0>)
 80116a8:	429c      	cmp	r4, r3
 80116aa:	d10f      	bne.n	80116cc <__swsetup_r+0x3c>
 80116ac:	686c      	ldr	r4, [r5, #4]
 80116ae:	89a3      	ldrh	r3, [r4, #12]
 80116b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116b4:	0719      	lsls	r1, r3, #28
 80116b6:	d42c      	bmi.n	8011712 <__swsetup_r+0x82>
 80116b8:	06dd      	lsls	r5, r3, #27
 80116ba:	d411      	bmi.n	80116e0 <__swsetup_r+0x50>
 80116bc:	2309      	movs	r3, #9
 80116be:	6033      	str	r3, [r6, #0]
 80116c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80116c4:	81a3      	strh	r3, [r4, #12]
 80116c6:	f04f 30ff 	mov.w	r0, #4294967295
 80116ca:	e03e      	b.n	801174a <__swsetup_r+0xba>
 80116cc:	4b25      	ldr	r3, [pc, #148]	; (8011764 <__swsetup_r+0xd4>)
 80116ce:	429c      	cmp	r4, r3
 80116d0:	d101      	bne.n	80116d6 <__swsetup_r+0x46>
 80116d2:	68ac      	ldr	r4, [r5, #8]
 80116d4:	e7eb      	b.n	80116ae <__swsetup_r+0x1e>
 80116d6:	4b24      	ldr	r3, [pc, #144]	; (8011768 <__swsetup_r+0xd8>)
 80116d8:	429c      	cmp	r4, r3
 80116da:	bf08      	it	eq
 80116dc:	68ec      	ldreq	r4, [r5, #12]
 80116de:	e7e6      	b.n	80116ae <__swsetup_r+0x1e>
 80116e0:	0758      	lsls	r0, r3, #29
 80116e2:	d512      	bpl.n	801170a <__swsetup_r+0x7a>
 80116e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116e6:	b141      	cbz	r1, 80116fa <__swsetup_r+0x6a>
 80116e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116ec:	4299      	cmp	r1, r3
 80116ee:	d002      	beq.n	80116f6 <__swsetup_r+0x66>
 80116f0:	4630      	mov	r0, r6
 80116f2:	f7ff fde7 	bl	80112c4 <_free_r>
 80116f6:	2300      	movs	r3, #0
 80116f8:	6363      	str	r3, [r4, #52]	; 0x34
 80116fa:	89a3      	ldrh	r3, [r4, #12]
 80116fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011700:	81a3      	strh	r3, [r4, #12]
 8011702:	2300      	movs	r3, #0
 8011704:	6063      	str	r3, [r4, #4]
 8011706:	6923      	ldr	r3, [r4, #16]
 8011708:	6023      	str	r3, [r4, #0]
 801170a:	89a3      	ldrh	r3, [r4, #12]
 801170c:	f043 0308 	orr.w	r3, r3, #8
 8011710:	81a3      	strh	r3, [r4, #12]
 8011712:	6923      	ldr	r3, [r4, #16]
 8011714:	b94b      	cbnz	r3, 801172a <__swsetup_r+0x9a>
 8011716:	89a3      	ldrh	r3, [r4, #12]
 8011718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801171c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011720:	d003      	beq.n	801172a <__swsetup_r+0x9a>
 8011722:	4621      	mov	r1, r4
 8011724:	4630      	mov	r0, r6
 8011726:	f000 fa01 	bl	8011b2c <__smakebuf_r>
 801172a:	89a0      	ldrh	r0, [r4, #12]
 801172c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011730:	f010 0301 	ands.w	r3, r0, #1
 8011734:	d00a      	beq.n	801174c <__swsetup_r+0xbc>
 8011736:	2300      	movs	r3, #0
 8011738:	60a3      	str	r3, [r4, #8]
 801173a:	6963      	ldr	r3, [r4, #20]
 801173c:	425b      	negs	r3, r3
 801173e:	61a3      	str	r3, [r4, #24]
 8011740:	6923      	ldr	r3, [r4, #16]
 8011742:	b943      	cbnz	r3, 8011756 <__swsetup_r+0xc6>
 8011744:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011748:	d1ba      	bne.n	80116c0 <__swsetup_r+0x30>
 801174a:	bd70      	pop	{r4, r5, r6, pc}
 801174c:	0781      	lsls	r1, r0, #30
 801174e:	bf58      	it	pl
 8011750:	6963      	ldrpl	r3, [r4, #20]
 8011752:	60a3      	str	r3, [r4, #8]
 8011754:	e7f4      	b.n	8011740 <__swsetup_r+0xb0>
 8011756:	2000      	movs	r0, #0
 8011758:	e7f7      	b.n	801174a <__swsetup_r+0xba>
 801175a:	bf00      	nop
 801175c:	200001a8 	.word	0x200001a8
 8011760:	08013668 	.word	0x08013668
 8011764:	08013688 	.word	0x08013688
 8011768:	08013648 	.word	0x08013648

0801176c <__sflush_r>:
 801176c:	898a      	ldrh	r2, [r1, #12]
 801176e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011772:	4605      	mov	r5, r0
 8011774:	0710      	lsls	r0, r2, #28
 8011776:	460c      	mov	r4, r1
 8011778:	d458      	bmi.n	801182c <__sflush_r+0xc0>
 801177a:	684b      	ldr	r3, [r1, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	dc05      	bgt.n	801178c <__sflush_r+0x20>
 8011780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011782:	2b00      	cmp	r3, #0
 8011784:	dc02      	bgt.n	801178c <__sflush_r+0x20>
 8011786:	2000      	movs	r0, #0
 8011788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801178c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801178e:	2e00      	cmp	r6, #0
 8011790:	d0f9      	beq.n	8011786 <__sflush_r+0x1a>
 8011792:	2300      	movs	r3, #0
 8011794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011798:	682f      	ldr	r7, [r5, #0]
 801179a:	602b      	str	r3, [r5, #0]
 801179c:	d032      	beq.n	8011804 <__sflush_r+0x98>
 801179e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117a0:	89a3      	ldrh	r3, [r4, #12]
 80117a2:	075a      	lsls	r2, r3, #29
 80117a4:	d505      	bpl.n	80117b2 <__sflush_r+0x46>
 80117a6:	6863      	ldr	r3, [r4, #4]
 80117a8:	1ac0      	subs	r0, r0, r3
 80117aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117ac:	b10b      	cbz	r3, 80117b2 <__sflush_r+0x46>
 80117ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80117b0:	1ac0      	subs	r0, r0, r3
 80117b2:	2300      	movs	r3, #0
 80117b4:	4602      	mov	r2, r0
 80117b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117b8:	6a21      	ldr	r1, [r4, #32]
 80117ba:	4628      	mov	r0, r5
 80117bc:	47b0      	blx	r6
 80117be:	1c43      	adds	r3, r0, #1
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	d106      	bne.n	80117d2 <__sflush_r+0x66>
 80117c4:	6829      	ldr	r1, [r5, #0]
 80117c6:	291d      	cmp	r1, #29
 80117c8:	d82c      	bhi.n	8011824 <__sflush_r+0xb8>
 80117ca:	4a2a      	ldr	r2, [pc, #168]	; (8011874 <__sflush_r+0x108>)
 80117cc:	40ca      	lsrs	r2, r1
 80117ce:	07d6      	lsls	r6, r2, #31
 80117d0:	d528      	bpl.n	8011824 <__sflush_r+0xb8>
 80117d2:	2200      	movs	r2, #0
 80117d4:	6062      	str	r2, [r4, #4]
 80117d6:	04d9      	lsls	r1, r3, #19
 80117d8:	6922      	ldr	r2, [r4, #16]
 80117da:	6022      	str	r2, [r4, #0]
 80117dc:	d504      	bpl.n	80117e8 <__sflush_r+0x7c>
 80117de:	1c42      	adds	r2, r0, #1
 80117e0:	d101      	bne.n	80117e6 <__sflush_r+0x7a>
 80117e2:	682b      	ldr	r3, [r5, #0]
 80117e4:	b903      	cbnz	r3, 80117e8 <__sflush_r+0x7c>
 80117e6:	6560      	str	r0, [r4, #84]	; 0x54
 80117e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117ea:	602f      	str	r7, [r5, #0]
 80117ec:	2900      	cmp	r1, #0
 80117ee:	d0ca      	beq.n	8011786 <__sflush_r+0x1a>
 80117f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117f4:	4299      	cmp	r1, r3
 80117f6:	d002      	beq.n	80117fe <__sflush_r+0x92>
 80117f8:	4628      	mov	r0, r5
 80117fa:	f7ff fd63 	bl	80112c4 <_free_r>
 80117fe:	2000      	movs	r0, #0
 8011800:	6360      	str	r0, [r4, #52]	; 0x34
 8011802:	e7c1      	b.n	8011788 <__sflush_r+0x1c>
 8011804:	6a21      	ldr	r1, [r4, #32]
 8011806:	2301      	movs	r3, #1
 8011808:	4628      	mov	r0, r5
 801180a:	47b0      	blx	r6
 801180c:	1c41      	adds	r1, r0, #1
 801180e:	d1c7      	bne.n	80117a0 <__sflush_r+0x34>
 8011810:	682b      	ldr	r3, [r5, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d0c4      	beq.n	80117a0 <__sflush_r+0x34>
 8011816:	2b1d      	cmp	r3, #29
 8011818:	d001      	beq.n	801181e <__sflush_r+0xb2>
 801181a:	2b16      	cmp	r3, #22
 801181c:	d101      	bne.n	8011822 <__sflush_r+0xb6>
 801181e:	602f      	str	r7, [r5, #0]
 8011820:	e7b1      	b.n	8011786 <__sflush_r+0x1a>
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011828:	81a3      	strh	r3, [r4, #12]
 801182a:	e7ad      	b.n	8011788 <__sflush_r+0x1c>
 801182c:	690f      	ldr	r7, [r1, #16]
 801182e:	2f00      	cmp	r7, #0
 8011830:	d0a9      	beq.n	8011786 <__sflush_r+0x1a>
 8011832:	0793      	lsls	r3, r2, #30
 8011834:	680e      	ldr	r6, [r1, #0]
 8011836:	bf08      	it	eq
 8011838:	694b      	ldreq	r3, [r1, #20]
 801183a:	600f      	str	r7, [r1, #0]
 801183c:	bf18      	it	ne
 801183e:	2300      	movne	r3, #0
 8011840:	eba6 0807 	sub.w	r8, r6, r7
 8011844:	608b      	str	r3, [r1, #8]
 8011846:	f1b8 0f00 	cmp.w	r8, #0
 801184a:	dd9c      	ble.n	8011786 <__sflush_r+0x1a>
 801184c:	6a21      	ldr	r1, [r4, #32]
 801184e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011850:	4643      	mov	r3, r8
 8011852:	463a      	mov	r2, r7
 8011854:	4628      	mov	r0, r5
 8011856:	47b0      	blx	r6
 8011858:	2800      	cmp	r0, #0
 801185a:	dc06      	bgt.n	801186a <__sflush_r+0xfe>
 801185c:	89a3      	ldrh	r3, [r4, #12]
 801185e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011862:	81a3      	strh	r3, [r4, #12]
 8011864:	f04f 30ff 	mov.w	r0, #4294967295
 8011868:	e78e      	b.n	8011788 <__sflush_r+0x1c>
 801186a:	4407      	add	r7, r0
 801186c:	eba8 0800 	sub.w	r8, r8, r0
 8011870:	e7e9      	b.n	8011846 <__sflush_r+0xda>
 8011872:	bf00      	nop
 8011874:	20400001 	.word	0x20400001

08011878 <_fflush_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	690b      	ldr	r3, [r1, #16]
 801187c:	4605      	mov	r5, r0
 801187e:	460c      	mov	r4, r1
 8011880:	b913      	cbnz	r3, 8011888 <_fflush_r+0x10>
 8011882:	2500      	movs	r5, #0
 8011884:	4628      	mov	r0, r5
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	b118      	cbz	r0, 8011892 <_fflush_r+0x1a>
 801188a:	6983      	ldr	r3, [r0, #24]
 801188c:	b90b      	cbnz	r3, 8011892 <_fflush_r+0x1a>
 801188e:	f000 f887 	bl	80119a0 <__sinit>
 8011892:	4b14      	ldr	r3, [pc, #80]	; (80118e4 <_fflush_r+0x6c>)
 8011894:	429c      	cmp	r4, r3
 8011896:	d11b      	bne.n	80118d0 <_fflush_r+0x58>
 8011898:	686c      	ldr	r4, [r5, #4]
 801189a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d0ef      	beq.n	8011882 <_fflush_r+0xa>
 80118a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118a4:	07d0      	lsls	r0, r2, #31
 80118a6:	d404      	bmi.n	80118b2 <_fflush_r+0x3a>
 80118a8:	0599      	lsls	r1, r3, #22
 80118aa:	d402      	bmi.n	80118b2 <_fflush_r+0x3a>
 80118ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ae:	f000 f915 	bl	8011adc <__retarget_lock_acquire_recursive>
 80118b2:	4628      	mov	r0, r5
 80118b4:	4621      	mov	r1, r4
 80118b6:	f7ff ff59 	bl	801176c <__sflush_r>
 80118ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118bc:	07da      	lsls	r2, r3, #31
 80118be:	4605      	mov	r5, r0
 80118c0:	d4e0      	bmi.n	8011884 <_fflush_r+0xc>
 80118c2:	89a3      	ldrh	r3, [r4, #12]
 80118c4:	059b      	lsls	r3, r3, #22
 80118c6:	d4dd      	bmi.n	8011884 <_fflush_r+0xc>
 80118c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ca:	f000 f908 	bl	8011ade <__retarget_lock_release_recursive>
 80118ce:	e7d9      	b.n	8011884 <_fflush_r+0xc>
 80118d0:	4b05      	ldr	r3, [pc, #20]	; (80118e8 <_fflush_r+0x70>)
 80118d2:	429c      	cmp	r4, r3
 80118d4:	d101      	bne.n	80118da <_fflush_r+0x62>
 80118d6:	68ac      	ldr	r4, [r5, #8]
 80118d8:	e7df      	b.n	801189a <_fflush_r+0x22>
 80118da:	4b04      	ldr	r3, [pc, #16]	; (80118ec <_fflush_r+0x74>)
 80118dc:	429c      	cmp	r4, r3
 80118de:	bf08      	it	eq
 80118e0:	68ec      	ldreq	r4, [r5, #12]
 80118e2:	e7da      	b.n	801189a <_fflush_r+0x22>
 80118e4:	08013668 	.word	0x08013668
 80118e8:	08013688 	.word	0x08013688
 80118ec:	08013648 	.word	0x08013648

080118f0 <std>:
 80118f0:	2300      	movs	r3, #0
 80118f2:	b510      	push	{r4, lr}
 80118f4:	4604      	mov	r4, r0
 80118f6:	e9c0 3300 	strd	r3, r3, [r0]
 80118fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118fe:	6083      	str	r3, [r0, #8]
 8011900:	8181      	strh	r1, [r0, #12]
 8011902:	6643      	str	r3, [r0, #100]	; 0x64
 8011904:	81c2      	strh	r2, [r0, #14]
 8011906:	6183      	str	r3, [r0, #24]
 8011908:	4619      	mov	r1, r3
 801190a:	2208      	movs	r2, #8
 801190c:	305c      	adds	r0, #92	; 0x5c
 801190e:	f7ff fcd1 	bl	80112b4 <memset>
 8011912:	4b05      	ldr	r3, [pc, #20]	; (8011928 <std+0x38>)
 8011914:	6263      	str	r3, [r4, #36]	; 0x24
 8011916:	4b05      	ldr	r3, [pc, #20]	; (801192c <std+0x3c>)
 8011918:	62a3      	str	r3, [r4, #40]	; 0x28
 801191a:	4b05      	ldr	r3, [pc, #20]	; (8011930 <std+0x40>)
 801191c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801191e:	4b05      	ldr	r3, [pc, #20]	; (8011934 <std+0x44>)
 8011920:	6224      	str	r4, [r4, #32]
 8011922:	6323      	str	r3, [r4, #48]	; 0x30
 8011924:	bd10      	pop	{r4, pc}
 8011926:	bf00      	nop
 8011928:	08012231 	.word	0x08012231
 801192c:	08012253 	.word	0x08012253
 8011930:	0801228b 	.word	0x0801228b
 8011934:	080122af 	.word	0x080122af

08011938 <_cleanup_r>:
 8011938:	4901      	ldr	r1, [pc, #4]	; (8011940 <_cleanup_r+0x8>)
 801193a:	f000 b8af 	b.w	8011a9c <_fwalk_reent>
 801193e:	bf00      	nop
 8011940:	08011879 	.word	0x08011879

08011944 <__sfmoreglue>:
 8011944:	b570      	push	{r4, r5, r6, lr}
 8011946:	2268      	movs	r2, #104	; 0x68
 8011948:	1e4d      	subs	r5, r1, #1
 801194a:	4355      	muls	r5, r2
 801194c:	460e      	mov	r6, r1
 801194e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011952:	f7ff fd23 	bl	801139c <_malloc_r>
 8011956:	4604      	mov	r4, r0
 8011958:	b140      	cbz	r0, 801196c <__sfmoreglue+0x28>
 801195a:	2100      	movs	r1, #0
 801195c:	e9c0 1600 	strd	r1, r6, [r0]
 8011960:	300c      	adds	r0, #12
 8011962:	60a0      	str	r0, [r4, #8]
 8011964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011968:	f7ff fca4 	bl	80112b4 <memset>
 801196c:	4620      	mov	r0, r4
 801196e:	bd70      	pop	{r4, r5, r6, pc}

08011970 <__sfp_lock_acquire>:
 8011970:	4801      	ldr	r0, [pc, #4]	; (8011978 <__sfp_lock_acquire+0x8>)
 8011972:	f000 b8b3 	b.w	8011adc <__retarget_lock_acquire_recursive>
 8011976:	bf00      	nop
 8011978:	2000225d 	.word	0x2000225d

0801197c <__sfp_lock_release>:
 801197c:	4801      	ldr	r0, [pc, #4]	; (8011984 <__sfp_lock_release+0x8>)
 801197e:	f000 b8ae 	b.w	8011ade <__retarget_lock_release_recursive>
 8011982:	bf00      	nop
 8011984:	2000225d 	.word	0x2000225d

08011988 <__sinit_lock_acquire>:
 8011988:	4801      	ldr	r0, [pc, #4]	; (8011990 <__sinit_lock_acquire+0x8>)
 801198a:	f000 b8a7 	b.w	8011adc <__retarget_lock_acquire_recursive>
 801198e:	bf00      	nop
 8011990:	2000225e 	.word	0x2000225e

08011994 <__sinit_lock_release>:
 8011994:	4801      	ldr	r0, [pc, #4]	; (801199c <__sinit_lock_release+0x8>)
 8011996:	f000 b8a2 	b.w	8011ade <__retarget_lock_release_recursive>
 801199a:	bf00      	nop
 801199c:	2000225e 	.word	0x2000225e

080119a0 <__sinit>:
 80119a0:	b510      	push	{r4, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	f7ff fff0 	bl	8011988 <__sinit_lock_acquire>
 80119a8:	69a3      	ldr	r3, [r4, #24]
 80119aa:	b11b      	cbz	r3, 80119b4 <__sinit+0x14>
 80119ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119b0:	f7ff bff0 	b.w	8011994 <__sinit_lock_release>
 80119b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119b8:	6523      	str	r3, [r4, #80]	; 0x50
 80119ba:	4b13      	ldr	r3, [pc, #76]	; (8011a08 <__sinit+0x68>)
 80119bc:	4a13      	ldr	r2, [pc, #76]	; (8011a0c <__sinit+0x6c>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80119c2:	42a3      	cmp	r3, r4
 80119c4:	bf04      	itt	eq
 80119c6:	2301      	moveq	r3, #1
 80119c8:	61a3      	streq	r3, [r4, #24]
 80119ca:	4620      	mov	r0, r4
 80119cc:	f000 f820 	bl	8011a10 <__sfp>
 80119d0:	6060      	str	r0, [r4, #4]
 80119d2:	4620      	mov	r0, r4
 80119d4:	f000 f81c 	bl	8011a10 <__sfp>
 80119d8:	60a0      	str	r0, [r4, #8]
 80119da:	4620      	mov	r0, r4
 80119dc:	f000 f818 	bl	8011a10 <__sfp>
 80119e0:	2200      	movs	r2, #0
 80119e2:	60e0      	str	r0, [r4, #12]
 80119e4:	2104      	movs	r1, #4
 80119e6:	6860      	ldr	r0, [r4, #4]
 80119e8:	f7ff ff82 	bl	80118f0 <std>
 80119ec:	68a0      	ldr	r0, [r4, #8]
 80119ee:	2201      	movs	r2, #1
 80119f0:	2109      	movs	r1, #9
 80119f2:	f7ff ff7d 	bl	80118f0 <std>
 80119f6:	68e0      	ldr	r0, [r4, #12]
 80119f8:	2202      	movs	r2, #2
 80119fa:	2112      	movs	r1, #18
 80119fc:	f7ff ff78 	bl	80118f0 <std>
 8011a00:	2301      	movs	r3, #1
 8011a02:	61a3      	str	r3, [r4, #24]
 8011a04:	e7d2      	b.n	80119ac <__sinit+0xc>
 8011a06:	bf00      	nop
 8011a08:	08013644 	.word	0x08013644
 8011a0c:	08011939 	.word	0x08011939

08011a10 <__sfp>:
 8011a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a12:	4607      	mov	r7, r0
 8011a14:	f7ff ffac 	bl	8011970 <__sfp_lock_acquire>
 8011a18:	4b1e      	ldr	r3, [pc, #120]	; (8011a94 <__sfp+0x84>)
 8011a1a:	681e      	ldr	r6, [r3, #0]
 8011a1c:	69b3      	ldr	r3, [r6, #24]
 8011a1e:	b913      	cbnz	r3, 8011a26 <__sfp+0x16>
 8011a20:	4630      	mov	r0, r6
 8011a22:	f7ff ffbd 	bl	80119a0 <__sinit>
 8011a26:	3648      	adds	r6, #72	; 0x48
 8011a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a2c:	3b01      	subs	r3, #1
 8011a2e:	d503      	bpl.n	8011a38 <__sfp+0x28>
 8011a30:	6833      	ldr	r3, [r6, #0]
 8011a32:	b30b      	cbz	r3, 8011a78 <__sfp+0x68>
 8011a34:	6836      	ldr	r6, [r6, #0]
 8011a36:	e7f7      	b.n	8011a28 <__sfp+0x18>
 8011a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a3c:	b9d5      	cbnz	r5, 8011a74 <__sfp+0x64>
 8011a3e:	4b16      	ldr	r3, [pc, #88]	; (8011a98 <__sfp+0x88>)
 8011a40:	60e3      	str	r3, [r4, #12]
 8011a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a46:	6665      	str	r5, [r4, #100]	; 0x64
 8011a48:	f000 f847 	bl	8011ada <__retarget_lock_init_recursive>
 8011a4c:	f7ff ff96 	bl	801197c <__sfp_lock_release>
 8011a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a58:	6025      	str	r5, [r4, #0]
 8011a5a:	61a5      	str	r5, [r4, #24]
 8011a5c:	2208      	movs	r2, #8
 8011a5e:	4629      	mov	r1, r5
 8011a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a64:	f7ff fc26 	bl	80112b4 <memset>
 8011a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a70:	4620      	mov	r0, r4
 8011a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a74:	3468      	adds	r4, #104	; 0x68
 8011a76:	e7d9      	b.n	8011a2c <__sfp+0x1c>
 8011a78:	2104      	movs	r1, #4
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	f7ff ff62 	bl	8011944 <__sfmoreglue>
 8011a80:	4604      	mov	r4, r0
 8011a82:	6030      	str	r0, [r6, #0]
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d1d5      	bne.n	8011a34 <__sfp+0x24>
 8011a88:	f7ff ff78 	bl	801197c <__sfp_lock_release>
 8011a8c:	230c      	movs	r3, #12
 8011a8e:	603b      	str	r3, [r7, #0]
 8011a90:	e7ee      	b.n	8011a70 <__sfp+0x60>
 8011a92:	bf00      	nop
 8011a94:	08013644 	.word	0x08013644
 8011a98:	ffff0001 	.word	0xffff0001

08011a9c <_fwalk_reent>:
 8011a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	4688      	mov	r8, r1
 8011aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011aa8:	2700      	movs	r7, #0
 8011aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011aae:	f1b9 0901 	subs.w	r9, r9, #1
 8011ab2:	d505      	bpl.n	8011ac0 <_fwalk_reent+0x24>
 8011ab4:	6824      	ldr	r4, [r4, #0]
 8011ab6:	2c00      	cmp	r4, #0
 8011ab8:	d1f7      	bne.n	8011aaa <_fwalk_reent+0xe>
 8011aba:	4638      	mov	r0, r7
 8011abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ac0:	89ab      	ldrh	r3, [r5, #12]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d907      	bls.n	8011ad6 <_fwalk_reent+0x3a>
 8011ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011aca:	3301      	adds	r3, #1
 8011acc:	d003      	beq.n	8011ad6 <_fwalk_reent+0x3a>
 8011ace:	4629      	mov	r1, r5
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	47c0      	blx	r8
 8011ad4:	4307      	orrs	r7, r0
 8011ad6:	3568      	adds	r5, #104	; 0x68
 8011ad8:	e7e9      	b.n	8011aae <_fwalk_reent+0x12>

08011ada <__retarget_lock_init_recursive>:
 8011ada:	4770      	bx	lr

08011adc <__retarget_lock_acquire_recursive>:
 8011adc:	4770      	bx	lr

08011ade <__retarget_lock_release_recursive>:
 8011ade:	4770      	bx	lr

08011ae0 <__swhatbuf_r>:
 8011ae0:	b570      	push	{r4, r5, r6, lr}
 8011ae2:	460e      	mov	r6, r1
 8011ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ae8:	2900      	cmp	r1, #0
 8011aea:	b096      	sub	sp, #88	; 0x58
 8011aec:	4614      	mov	r4, r2
 8011aee:	461d      	mov	r5, r3
 8011af0:	da08      	bge.n	8011b04 <__swhatbuf_r+0x24>
 8011af2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011af6:	2200      	movs	r2, #0
 8011af8:	602a      	str	r2, [r5, #0]
 8011afa:	061a      	lsls	r2, r3, #24
 8011afc:	d410      	bmi.n	8011b20 <__swhatbuf_r+0x40>
 8011afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b02:	e00e      	b.n	8011b22 <__swhatbuf_r+0x42>
 8011b04:	466a      	mov	r2, sp
 8011b06:	f000 fbf9 	bl	80122fc <_fstat_r>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	dbf1      	blt.n	8011af2 <__swhatbuf_r+0x12>
 8011b0e:	9a01      	ldr	r2, [sp, #4]
 8011b10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b18:	425a      	negs	r2, r3
 8011b1a:	415a      	adcs	r2, r3
 8011b1c:	602a      	str	r2, [r5, #0]
 8011b1e:	e7ee      	b.n	8011afe <__swhatbuf_r+0x1e>
 8011b20:	2340      	movs	r3, #64	; 0x40
 8011b22:	2000      	movs	r0, #0
 8011b24:	6023      	str	r3, [r4, #0]
 8011b26:	b016      	add	sp, #88	; 0x58
 8011b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b2c <__smakebuf_r>:
 8011b2c:	898b      	ldrh	r3, [r1, #12]
 8011b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b30:	079d      	lsls	r5, r3, #30
 8011b32:	4606      	mov	r6, r0
 8011b34:	460c      	mov	r4, r1
 8011b36:	d507      	bpl.n	8011b48 <__smakebuf_r+0x1c>
 8011b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b3c:	6023      	str	r3, [r4, #0]
 8011b3e:	6123      	str	r3, [r4, #16]
 8011b40:	2301      	movs	r3, #1
 8011b42:	6163      	str	r3, [r4, #20]
 8011b44:	b002      	add	sp, #8
 8011b46:	bd70      	pop	{r4, r5, r6, pc}
 8011b48:	ab01      	add	r3, sp, #4
 8011b4a:	466a      	mov	r2, sp
 8011b4c:	f7ff ffc8 	bl	8011ae0 <__swhatbuf_r>
 8011b50:	9900      	ldr	r1, [sp, #0]
 8011b52:	4605      	mov	r5, r0
 8011b54:	4630      	mov	r0, r6
 8011b56:	f7ff fc21 	bl	801139c <_malloc_r>
 8011b5a:	b948      	cbnz	r0, 8011b70 <__smakebuf_r+0x44>
 8011b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b60:	059a      	lsls	r2, r3, #22
 8011b62:	d4ef      	bmi.n	8011b44 <__smakebuf_r+0x18>
 8011b64:	f023 0303 	bic.w	r3, r3, #3
 8011b68:	f043 0302 	orr.w	r3, r3, #2
 8011b6c:	81a3      	strh	r3, [r4, #12]
 8011b6e:	e7e3      	b.n	8011b38 <__smakebuf_r+0xc>
 8011b70:	4b0d      	ldr	r3, [pc, #52]	; (8011ba8 <__smakebuf_r+0x7c>)
 8011b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	6020      	str	r0, [r4, #0]
 8011b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b7c:	81a3      	strh	r3, [r4, #12]
 8011b7e:	9b00      	ldr	r3, [sp, #0]
 8011b80:	6163      	str	r3, [r4, #20]
 8011b82:	9b01      	ldr	r3, [sp, #4]
 8011b84:	6120      	str	r0, [r4, #16]
 8011b86:	b15b      	cbz	r3, 8011ba0 <__smakebuf_r+0x74>
 8011b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f000 fbc7 	bl	8012320 <_isatty_r>
 8011b92:	b128      	cbz	r0, 8011ba0 <__smakebuf_r+0x74>
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	f023 0303 	bic.w	r3, r3, #3
 8011b9a:	f043 0301 	orr.w	r3, r3, #1
 8011b9e:	81a3      	strh	r3, [r4, #12]
 8011ba0:	89a0      	ldrh	r0, [r4, #12]
 8011ba2:	4305      	orrs	r5, r0
 8011ba4:	81a5      	strh	r5, [r4, #12]
 8011ba6:	e7cd      	b.n	8011b44 <__smakebuf_r+0x18>
 8011ba8:	08011939 	.word	0x08011939

08011bac <__malloc_lock>:
 8011bac:	4801      	ldr	r0, [pc, #4]	; (8011bb4 <__malloc_lock+0x8>)
 8011bae:	f7ff bf95 	b.w	8011adc <__retarget_lock_acquire_recursive>
 8011bb2:	bf00      	nop
 8011bb4:	2000225c 	.word	0x2000225c

08011bb8 <__malloc_unlock>:
 8011bb8:	4801      	ldr	r0, [pc, #4]	; (8011bc0 <__malloc_unlock+0x8>)
 8011bba:	f7ff bf90 	b.w	8011ade <__retarget_lock_release_recursive>
 8011bbe:	bf00      	nop
 8011bc0:	2000225c 	.word	0x2000225c

08011bc4 <__sfputc_r>:
 8011bc4:	6893      	ldr	r3, [r2, #8]
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	b410      	push	{r4}
 8011bcc:	6093      	str	r3, [r2, #8]
 8011bce:	da08      	bge.n	8011be2 <__sfputc_r+0x1e>
 8011bd0:	6994      	ldr	r4, [r2, #24]
 8011bd2:	42a3      	cmp	r3, r4
 8011bd4:	db01      	blt.n	8011bda <__sfputc_r+0x16>
 8011bd6:	290a      	cmp	r1, #10
 8011bd8:	d103      	bne.n	8011be2 <__sfputc_r+0x1e>
 8011bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bde:	f7ff bd05 	b.w	80115ec <__swbuf_r>
 8011be2:	6813      	ldr	r3, [r2, #0]
 8011be4:	1c58      	adds	r0, r3, #1
 8011be6:	6010      	str	r0, [r2, #0]
 8011be8:	7019      	strb	r1, [r3, #0]
 8011bea:	4608      	mov	r0, r1
 8011bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <__sfputs_r>:
 8011bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	460f      	mov	r7, r1
 8011bf8:	4614      	mov	r4, r2
 8011bfa:	18d5      	adds	r5, r2, r3
 8011bfc:	42ac      	cmp	r4, r5
 8011bfe:	d101      	bne.n	8011c04 <__sfputs_r+0x12>
 8011c00:	2000      	movs	r0, #0
 8011c02:	e007      	b.n	8011c14 <__sfputs_r+0x22>
 8011c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c08:	463a      	mov	r2, r7
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f7ff ffda 	bl	8011bc4 <__sfputc_r>
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	d1f3      	bne.n	8011bfc <__sfputs_r+0xa>
 8011c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c18 <_vfiprintf_r>:
 8011c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	b09d      	sub	sp, #116	; 0x74
 8011c20:	4614      	mov	r4, r2
 8011c22:	4698      	mov	r8, r3
 8011c24:	4606      	mov	r6, r0
 8011c26:	b118      	cbz	r0, 8011c30 <_vfiprintf_r+0x18>
 8011c28:	6983      	ldr	r3, [r0, #24]
 8011c2a:	b90b      	cbnz	r3, 8011c30 <_vfiprintf_r+0x18>
 8011c2c:	f7ff feb8 	bl	80119a0 <__sinit>
 8011c30:	4b89      	ldr	r3, [pc, #548]	; (8011e58 <_vfiprintf_r+0x240>)
 8011c32:	429d      	cmp	r5, r3
 8011c34:	d11b      	bne.n	8011c6e <_vfiprintf_r+0x56>
 8011c36:	6875      	ldr	r5, [r6, #4]
 8011c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c3a:	07d9      	lsls	r1, r3, #31
 8011c3c:	d405      	bmi.n	8011c4a <_vfiprintf_r+0x32>
 8011c3e:	89ab      	ldrh	r3, [r5, #12]
 8011c40:	059a      	lsls	r2, r3, #22
 8011c42:	d402      	bmi.n	8011c4a <_vfiprintf_r+0x32>
 8011c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c46:	f7ff ff49 	bl	8011adc <__retarget_lock_acquire_recursive>
 8011c4a:	89ab      	ldrh	r3, [r5, #12]
 8011c4c:	071b      	lsls	r3, r3, #28
 8011c4e:	d501      	bpl.n	8011c54 <_vfiprintf_r+0x3c>
 8011c50:	692b      	ldr	r3, [r5, #16]
 8011c52:	b9eb      	cbnz	r3, 8011c90 <_vfiprintf_r+0x78>
 8011c54:	4629      	mov	r1, r5
 8011c56:	4630      	mov	r0, r6
 8011c58:	f7ff fd1a 	bl	8011690 <__swsetup_r>
 8011c5c:	b1c0      	cbz	r0, 8011c90 <_vfiprintf_r+0x78>
 8011c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c60:	07dc      	lsls	r4, r3, #31
 8011c62:	d50e      	bpl.n	8011c82 <_vfiprintf_r+0x6a>
 8011c64:	f04f 30ff 	mov.w	r0, #4294967295
 8011c68:	b01d      	add	sp, #116	; 0x74
 8011c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6e:	4b7b      	ldr	r3, [pc, #492]	; (8011e5c <_vfiprintf_r+0x244>)
 8011c70:	429d      	cmp	r5, r3
 8011c72:	d101      	bne.n	8011c78 <_vfiprintf_r+0x60>
 8011c74:	68b5      	ldr	r5, [r6, #8]
 8011c76:	e7df      	b.n	8011c38 <_vfiprintf_r+0x20>
 8011c78:	4b79      	ldr	r3, [pc, #484]	; (8011e60 <_vfiprintf_r+0x248>)
 8011c7a:	429d      	cmp	r5, r3
 8011c7c:	bf08      	it	eq
 8011c7e:	68f5      	ldreq	r5, [r6, #12]
 8011c80:	e7da      	b.n	8011c38 <_vfiprintf_r+0x20>
 8011c82:	89ab      	ldrh	r3, [r5, #12]
 8011c84:	0598      	lsls	r0, r3, #22
 8011c86:	d4ed      	bmi.n	8011c64 <_vfiprintf_r+0x4c>
 8011c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c8a:	f7ff ff28 	bl	8011ade <__retarget_lock_release_recursive>
 8011c8e:	e7e9      	b.n	8011c64 <_vfiprintf_r+0x4c>
 8011c90:	2300      	movs	r3, #0
 8011c92:	9309      	str	r3, [sp, #36]	; 0x24
 8011c94:	2320      	movs	r3, #32
 8011c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c9e:	2330      	movs	r3, #48	; 0x30
 8011ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011e64 <_vfiprintf_r+0x24c>
 8011ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ca8:	f04f 0901 	mov.w	r9, #1
 8011cac:	4623      	mov	r3, r4
 8011cae:	469a      	mov	sl, r3
 8011cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cb4:	b10a      	cbz	r2, 8011cba <_vfiprintf_r+0xa2>
 8011cb6:	2a25      	cmp	r2, #37	; 0x25
 8011cb8:	d1f9      	bne.n	8011cae <_vfiprintf_r+0x96>
 8011cba:	ebba 0b04 	subs.w	fp, sl, r4
 8011cbe:	d00b      	beq.n	8011cd8 <_vfiprintf_r+0xc0>
 8011cc0:	465b      	mov	r3, fp
 8011cc2:	4622      	mov	r2, r4
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	f7ff ff93 	bl	8011bf2 <__sfputs_r>
 8011ccc:	3001      	adds	r0, #1
 8011cce:	f000 80aa 	beq.w	8011e26 <_vfiprintf_r+0x20e>
 8011cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cd4:	445a      	add	r2, fp
 8011cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8011cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f000 80a2 	beq.w	8011e26 <_vfiprintf_r+0x20e>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cec:	f10a 0a01 	add.w	sl, sl, #1
 8011cf0:	9304      	str	r3, [sp, #16]
 8011cf2:	9307      	str	r3, [sp, #28]
 8011cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8011cfa:	4654      	mov	r4, sl
 8011cfc:	2205      	movs	r2, #5
 8011cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d02:	4858      	ldr	r0, [pc, #352]	; (8011e64 <_vfiprintf_r+0x24c>)
 8011d04:	f7ee fa44 	bl	8000190 <memchr>
 8011d08:	9a04      	ldr	r2, [sp, #16]
 8011d0a:	b9d8      	cbnz	r0, 8011d44 <_vfiprintf_r+0x12c>
 8011d0c:	06d1      	lsls	r1, r2, #27
 8011d0e:	bf44      	itt	mi
 8011d10:	2320      	movmi	r3, #32
 8011d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d16:	0713      	lsls	r3, r2, #28
 8011d18:	bf44      	itt	mi
 8011d1a:	232b      	movmi	r3, #43	; 0x2b
 8011d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d20:	f89a 3000 	ldrb.w	r3, [sl]
 8011d24:	2b2a      	cmp	r3, #42	; 0x2a
 8011d26:	d015      	beq.n	8011d54 <_vfiprintf_r+0x13c>
 8011d28:	9a07      	ldr	r2, [sp, #28]
 8011d2a:	4654      	mov	r4, sl
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	f04f 0c0a 	mov.w	ip, #10
 8011d32:	4621      	mov	r1, r4
 8011d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d38:	3b30      	subs	r3, #48	; 0x30
 8011d3a:	2b09      	cmp	r3, #9
 8011d3c:	d94e      	bls.n	8011ddc <_vfiprintf_r+0x1c4>
 8011d3e:	b1b0      	cbz	r0, 8011d6e <_vfiprintf_r+0x156>
 8011d40:	9207      	str	r2, [sp, #28]
 8011d42:	e014      	b.n	8011d6e <_vfiprintf_r+0x156>
 8011d44:	eba0 0308 	sub.w	r3, r0, r8
 8011d48:	fa09 f303 	lsl.w	r3, r9, r3
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	9304      	str	r3, [sp, #16]
 8011d50:	46a2      	mov	sl, r4
 8011d52:	e7d2      	b.n	8011cfa <_vfiprintf_r+0xe2>
 8011d54:	9b03      	ldr	r3, [sp, #12]
 8011d56:	1d19      	adds	r1, r3, #4
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	9103      	str	r1, [sp, #12]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	bfbb      	ittet	lt
 8011d60:	425b      	neglt	r3, r3
 8011d62:	f042 0202 	orrlt.w	r2, r2, #2
 8011d66:	9307      	strge	r3, [sp, #28]
 8011d68:	9307      	strlt	r3, [sp, #28]
 8011d6a:	bfb8      	it	lt
 8011d6c:	9204      	strlt	r2, [sp, #16]
 8011d6e:	7823      	ldrb	r3, [r4, #0]
 8011d70:	2b2e      	cmp	r3, #46	; 0x2e
 8011d72:	d10c      	bne.n	8011d8e <_vfiprintf_r+0x176>
 8011d74:	7863      	ldrb	r3, [r4, #1]
 8011d76:	2b2a      	cmp	r3, #42	; 0x2a
 8011d78:	d135      	bne.n	8011de6 <_vfiprintf_r+0x1ce>
 8011d7a:	9b03      	ldr	r3, [sp, #12]
 8011d7c:	1d1a      	adds	r2, r3, #4
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	9203      	str	r2, [sp, #12]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	bfb8      	it	lt
 8011d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d8a:	3402      	adds	r4, #2
 8011d8c:	9305      	str	r3, [sp, #20]
 8011d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011e74 <_vfiprintf_r+0x25c>
 8011d92:	7821      	ldrb	r1, [r4, #0]
 8011d94:	2203      	movs	r2, #3
 8011d96:	4650      	mov	r0, sl
 8011d98:	f7ee f9fa 	bl	8000190 <memchr>
 8011d9c:	b140      	cbz	r0, 8011db0 <_vfiprintf_r+0x198>
 8011d9e:	2340      	movs	r3, #64	; 0x40
 8011da0:	eba0 000a 	sub.w	r0, r0, sl
 8011da4:	fa03 f000 	lsl.w	r0, r3, r0
 8011da8:	9b04      	ldr	r3, [sp, #16]
 8011daa:	4303      	orrs	r3, r0
 8011dac:	3401      	adds	r4, #1
 8011dae:	9304      	str	r3, [sp, #16]
 8011db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011db4:	482c      	ldr	r0, [pc, #176]	; (8011e68 <_vfiprintf_r+0x250>)
 8011db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dba:	2206      	movs	r2, #6
 8011dbc:	f7ee f9e8 	bl	8000190 <memchr>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d03f      	beq.n	8011e44 <_vfiprintf_r+0x22c>
 8011dc4:	4b29      	ldr	r3, [pc, #164]	; (8011e6c <_vfiprintf_r+0x254>)
 8011dc6:	bb1b      	cbnz	r3, 8011e10 <_vfiprintf_r+0x1f8>
 8011dc8:	9b03      	ldr	r3, [sp, #12]
 8011dca:	3307      	adds	r3, #7
 8011dcc:	f023 0307 	bic.w	r3, r3, #7
 8011dd0:	3308      	adds	r3, #8
 8011dd2:	9303      	str	r3, [sp, #12]
 8011dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dd6:	443b      	add	r3, r7
 8011dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8011dda:	e767      	b.n	8011cac <_vfiprintf_r+0x94>
 8011ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011de0:	460c      	mov	r4, r1
 8011de2:	2001      	movs	r0, #1
 8011de4:	e7a5      	b.n	8011d32 <_vfiprintf_r+0x11a>
 8011de6:	2300      	movs	r3, #0
 8011de8:	3401      	adds	r4, #1
 8011dea:	9305      	str	r3, [sp, #20]
 8011dec:	4619      	mov	r1, r3
 8011dee:	f04f 0c0a 	mov.w	ip, #10
 8011df2:	4620      	mov	r0, r4
 8011df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011df8:	3a30      	subs	r2, #48	; 0x30
 8011dfa:	2a09      	cmp	r2, #9
 8011dfc:	d903      	bls.n	8011e06 <_vfiprintf_r+0x1ee>
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d0c5      	beq.n	8011d8e <_vfiprintf_r+0x176>
 8011e02:	9105      	str	r1, [sp, #20]
 8011e04:	e7c3      	b.n	8011d8e <_vfiprintf_r+0x176>
 8011e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	e7f0      	b.n	8011df2 <_vfiprintf_r+0x1da>
 8011e10:	ab03      	add	r3, sp, #12
 8011e12:	9300      	str	r3, [sp, #0]
 8011e14:	462a      	mov	r2, r5
 8011e16:	4b16      	ldr	r3, [pc, #88]	; (8011e70 <_vfiprintf_r+0x258>)
 8011e18:	a904      	add	r1, sp, #16
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f3af 8000 	nop.w
 8011e20:	4607      	mov	r7, r0
 8011e22:	1c78      	adds	r0, r7, #1
 8011e24:	d1d6      	bne.n	8011dd4 <_vfiprintf_r+0x1bc>
 8011e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e28:	07d9      	lsls	r1, r3, #31
 8011e2a:	d405      	bmi.n	8011e38 <_vfiprintf_r+0x220>
 8011e2c:	89ab      	ldrh	r3, [r5, #12]
 8011e2e:	059a      	lsls	r2, r3, #22
 8011e30:	d402      	bmi.n	8011e38 <_vfiprintf_r+0x220>
 8011e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e34:	f7ff fe53 	bl	8011ade <__retarget_lock_release_recursive>
 8011e38:	89ab      	ldrh	r3, [r5, #12]
 8011e3a:	065b      	lsls	r3, r3, #25
 8011e3c:	f53f af12 	bmi.w	8011c64 <_vfiprintf_r+0x4c>
 8011e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e42:	e711      	b.n	8011c68 <_vfiprintf_r+0x50>
 8011e44:	ab03      	add	r3, sp, #12
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	462a      	mov	r2, r5
 8011e4a:	4b09      	ldr	r3, [pc, #36]	; (8011e70 <_vfiprintf_r+0x258>)
 8011e4c:	a904      	add	r1, sp, #16
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f000 f880 	bl	8011f54 <_printf_i>
 8011e54:	e7e4      	b.n	8011e20 <_vfiprintf_r+0x208>
 8011e56:	bf00      	nop
 8011e58:	08013668 	.word	0x08013668
 8011e5c:	08013688 	.word	0x08013688
 8011e60:	08013648 	.word	0x08013648
 8011e64:	080136a8 	.word	0x080136a8
 8011e68:	080136b2 	.word	0x080136b2
 8011e6c:	00000000 	.word	0x00000000
 8011e70:	08011bf3 	.word	0x08011bf3
 8011e74:	080136ae 	.word	0x080136ae

08011e78 <_printf_common>:
 8011e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e7c:	4616      	mov	r6, r2
 8011e7e:	4699      	mov	r9, r3
 8011e80:	688a      	ldr	r2, [r1, #8]
 8011e82:	690b      	ldr	r3, [r1, #16]
 8011e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	bfb8      	it	lt
 8011e8c:	4613      	movlt	r3, r2
 8011e8e:	6033      	str	r3, [r6, #0]
 8011e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e94:	4607      	mov	r7, r0
 8011e96:	460c      	mov	r4, r1
 8011e98:	b10a      	cbz	r2, 8011e9e <_printf_common+0x26>
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	6033      	str	r3, [r6, #0]
 8011e9e:	6823      	ldr	r3, [r4, #0]
 8011ea0:	0699      	lsls	r1, r3, #26
 8011ea2:	bf42      	ittt	mi
 8011ea4:	6833      	ldrmi	r3, [r6, #0]
 8011ea6:	3302      	addmi	r3, #2
 8011ea8:	6033      	strmi	r3, [r6, #0]
 8011eaa:	6825      	ldr	r5, [r4, #0]
 8011eac:	f015 0506 	ands.w	r5, r5, #6
 8011eb0:	d106      	bne.n	8011ec0 <_printf_common+0x48>
 8011eb2:	f104 0a19 	add.w	sl, r4, #25
 8011eb6:	68e3      	ldr	r3, [r4, #12]
 8011eb8:	6832      	ldr	r2, [r6, #0]
 8011eba:	1a9b      	subs	r3, r3, r2
 8011ebc:	42ab      	cmp	r3, r5
 8011ebe:	dc26      	bgt.n	8011f0e <_printf_common+0x96>
 8011ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ec4:	1e13      	subs	r3, r2, #0
 8011ec6:	6822      	ldr	r2, [r4, #0]
 8011ec8:	bf18      	it	ne
 8011eca:	2301      	movne	r3, #1
 8011ecc:	0692      	lsls	r2, r2, #26
 8011ece:	d42b      	bmi.n	8011f28 <_printf_common+0xb0>
 8011ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ed4:	4649      	mov	r1, r9
 8011ed6:	4638      	mov	r0, r7
 8011ed8:	47c0      	blx	r8
 8011eda:	3001      	adds	r0, #1
 8011edc:	d01e      	beq.n	8011f1c <_printf_common+0xa4>
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	68e5      	ldr	r5, [r4, #12]
 8011ee2:	6832      	ldr	r2, [r6, #0]
 8011ee4:	f003 0306 	and.w	r3, r3, #6
 8011ee8:	2b04      	cmp	r3, #4
 8011eea:	bf08      	it	eq
 8011eec:	1aad      	subeq	r5, r5, r2
 8011eee:	68a3      	ldr	r3, [r4, #8]
 8011ef0:	6922      	ldr	r2, [r4, #16]
 8011ef2:	bf0c      	ite	eq
 8011ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ef8:	2500      	movne	r5, #0
 8011efa:	4293      	cmp	r3, r2
 8011efc:	bfc4      	itt	gt
 8011efe:	1a9b      	subgt	r3, r3, r2
 8011f00:	18ed      	addgt	r5, r5, r3
 8011f02:	2600      	movs	r6, #0
 8011f04:	341a      	adds	r4, #26
 8011f06:	42b5      	cmp	r5, r6
 8011f08:	d11a      	bne.n	8011f40 <_printf_common+0xc8>
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	e008      	b.n	8011f20 <_printf_common+0xa8>
 8011f0e:	2301      	movs	r3, #1
 8011f10:	4652      	mov	r2, sl
 8011f12:	4649      	mov	r1, r9
 8011f14:	4638      	mov	r0, r7
 8011f16:	47c0      	blx	r8
 8011f18:	3001      	adds	r0, #1
 8011f1a:	d103      	bne.n	8011f24 <_printf_common+0xac>
 8011f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f24:	3501      	adds	r5, #1
 8011f26:	e7c6      	b.n	8011eb6 <_printf_common+0x3e>
 8011f28:	18e1      	adds	r1, r4, r3
 8011f2a:	1c5a      	adds	r2, r3, #1
 8011f2c:	2030      	movs	r0, #48	; 0x30
 8011f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f32:	4422      	add	r2, r4
 8011f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f3c:	3302      	adds	r3, #2
 8011f3e:	e7c7      	b.n	8011ed0 <_printf_common+0x58>
 8011f40:	2301      	movs	r3, #1
 8011f42:	4622      	mov	r2, r4
 8011f44:	4649      	mov	r1, r9
 8011f46:	4638      	mov	r0, r7
 8011f48:	47c0      	blx	r8
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	d0e6      	beq.n	8011f1c <_printf_common+0xa4>
 8011f4e:	3601      	adds	r6, #1
 8011f50:	e7d9      	b.n	8011f06 <_printf_common+0x8e>
	...

08011f54 <_printf_i>:
 8011f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f58:	7e0f      	ldrb	r7, [r1, #24]
 8011f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f5c:	2f78      	cmp	r7, #120	; 0x78
 8011f5e:	4691      	mov	r9, r2
 8011f60:	4680      	mov	r8, r0
 8011f62:	460c      	mov	r4, r1
 8011f64:	469a      	mov	sl, r3
 8011f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f6a:	d807      	bhi.n	8011f7c <_printf_i+0x28>
 8011f6c:	2f62      	cmp	r7, #98	; 0x62
 8011f6e:	d80a      	bhi.n	8011f86 <_printf_i+0x32>
 8011f70:	2f00      	cmp	r7, #0
 8011f72:	f000 80d8 	beq.w	8012126 <_printf_i+0x1d2>
 8011f76:	2f58      	cmp	r7, #88	; 0x58
 8011f78:	f000 80a3 	beq.w	80120c2 <_printf_i+0x16e>
 8011f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f84:	e03a      	b.n	8011ffc <_printf_i+0xa8>
 8011f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f8a:	2b15      	cmp	r3, #21
 8011f8c:	d8f6      	bhi.n	8011f7c <_printf_i+0x28>
 8011f8e:	a101      	add	r1, pc, #4	; (adr r1, 8011f94 <_printf_i+0x40>)
 8011f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f94:	08011fed 	.word	0x08011fed
 8011f98:	08012001 	.word	0x08012001
 8011f9c:	08011f7d 	.word	0x08011f7d
 8011fa0:	08011f7d 	.word	0x08011f7d
 8011fa4:	08011f7d 	.word	0x08011f7d
 8011fa8:	08011f7d 	.word	0x08011f7d
 8011fac:	08012001 	.word	0x08012001
 8011fb0:	08011f7d 	.word	0x08011f7d
 8011fb4:	08011f7d 	.word	0x08011f7d
 8011fb8:	08011f7d 	.word	0x08011f7d
 8011fbc:	08011f7d 	.word	0x08011f7d
 8011fc0:	0801210d 	.word	0x0801210d
 8011fc4:	08012031 	.word	0x08012031
 8011fc8:	080120ef 	.word	0x080120ef
 8011fcc:	08011f7d 	.word	0x08011f7d
 8011fd0:	08011f7d 	.word	0x08011f7d
 8011fd4:	0801212f 	.word	0x0801212f
 8011fd8:	08011f7d 	.word	0x08011f7d
 8011fdc:	08012031 	.word	0x08012031
 8011fe0:	08011f7d 	.word	0x08011f7d
 8011fe4:	08011f7d 	.word	0x08011f7d
 8011fe8:	080120f7 	.word	0x080120f7
 8011fec:	682b      	ldr	r3, [r5, #0]
 8011fee:	1d1a      	adds	r2, r3, #4
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	602a      	str	r2, [r5, #0]
 8011ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e0a3      	b.n	8012148 <_printf_i+0x1f4>
 8012000:	6820      	ldr	r0, [r4, #0]
 8012002:	6829      	ldr	r1, [r5, #0]
 8012004:	0606      	lsls	r6, r0, #24
 8012006:	f101 0304 	add.w	r3, r1, #4
 801200a:	d50a      	bpl.n	8012022 <_printf_i+0xce>
 801200c:	680e      	ldr	r6, [r1, #0]
 801200e:	602b      	str	r3, [r5, #0]
 8012010:	2e00      	cmp	r6, #0
 8012012:	da03      	bge.n	801201c <_printf_i+0xc8>
 8012014:	232d      	movs	r3, #45	; 0x2d
 8012016:	4276      	negs	r6, r6
 8012018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801201c:	485e      	ldr	r0, [pc, #376]	; (8012198 <_printf_i+0x244>)
 801201e:	230a      	movs	r3, #10
 8012020:	e019      	b.n	8012056 <_printf_i+0x102>
 8012022:	680e      	ldr	r6, [r1, #0]
 8012024:	602b      	str	r3, [r5, #0]
 8012026:	f010 0f40 	tst.w	r0, #64	; 0x40
 801202a:	bf18      	it	ne
 801202c:	b236      	sxthne	r6, r6
 801202e:	e7ef      	b.n	8012010 <_printf_i+0xbc>
 8012030:	682b      	ldr	r3, [r5, #0]
 8012032:	6820      	ldr	r0, [r4, #0]
 8012034:	1d19      	adds	r1, r3, #4
 8012036:	6029      	str	r1, [r5, #0]
 8012038:	0601      	lsls	r1, r0, #24
 801203a:	d501      	bpl.n	8012040 <_printf_i+0xec>
 801203c:	681e      	ldr	r6, [r3, #0]
 801203e:	e002      	b.n	8012046 <_printf_i+0xf2>
 8012040:	0646      	lsls	r6, r0, #25
 8012042:	d5fb      	bpl.n	801203c <_printf_i+0xe8>
 8012044:	881e      	ldrh	r6, [r3, #0]
 8012046:	4854      	ldr	r0, [pc, #336]	; (8012198 <_printf_i+0x244>)
 8012048:	2f6f      	cmp	r7, #111	; 0x6f
 801204a:	bf0c      	ite	eq
 801204c:	2308      	moveq	r3, #8
 801204e:	230a      	movne	r3, #10
 8012050:	2100      	movs	r1, #0
 8012052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012056:	6865      	ldr	r5, [r4, #4]
 8012058:	60a5      	str	r5, [r4, #8]
 801205a:	2d00      	cmp	r5, #0
 801205c:	bfa2      	ittt	ge
 801205e:	6821      	ldrge	r1, [r4, #0]
 8012060:	f021 0104 	bicge.w	r1, r1, #4
 8012064:	6021      	strge	r1, [r4, #0]
 8012066:	b90e      	cbnz	r6, 801206c <_printf_i+0x118>
 8012068:	2d00      	cmp	r5, #0
 801206a:	d04d      	beq.n	8012108 <_printf_i+0x1b4>
 801206c:	4615      	mov	r5, r2
 801206e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012072:	fb03 6711 	mls	r7, r3, r1, r6
 8012076:	5dc7      	ldrb	r7, [r0, r7]
 8012078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801207c:	4637      	mov	r7, r6
 801207e:	42bb      	cmp	r3, r7
 8012080:	460e      	mov	r6, r1
 8012082:	d9f4      	bls.n	801206e <_printf_i+0x11a>
 8012084:	2b08      	cmp	r3, #8
 8012086:	d10b      	bne.n	80120a0 <_printf_i+0x14c>
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	07de      	lsls	r6, r3, #31
 801208c:	d508      	bpl.n	80120a0 <_printf_i+0x14c>
 801208e:	6923      	ldr	r3, [r4, #16]
 8012090:	6861      	ldr	r1, [r4, #4]
 8012092:	4299      	cmp	r1, r3
 8012094:	bfde      	ittt	le
 8012096:	2330      	movle	r3, #48	; 0x30
 8012098:	f805 3c01 	strble.w	r3, [r5, #-1]
 801209c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80120a0:	1b52      	subs	r2, r2, r5
 80120a2:	6122      	str	r2, [r4, #16]
 80120a4:	f8cd a000 	str.w	sl, [sp]
 80120a8:	464b      	mov	r3, r9
 80120aa:	aa03      	add	r2, sp, #12
 80120ac:	4621      	mov	r1, r4
 80120ae:	4640      	mov	r0, r8
 80120b0:	f7ff fee2 	bl	8011e78 <_printf_common>
 80120b4:	3001      	adds	r0, #1
 80120b6:	d14c      	bne.n	8012152 <_printf_i+0x1fe>
 80120b8:	f04f 30ff 	mov.w	r0, #4294967295
 80120bc:	b004      	add	sp, #16
 80120be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120c2:	4835      	ldr	r0, [pc, #212]	; (8012198 <_printf_i+0x244>)
 80120c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80120c8:	6829      	ldr	r1, [r5, #0]
 80120ca:	6823      	ldr	r3, [r4, #0]
 80120cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80120d0:	6029      	str	r1, [r5, #0]
 80120d2:	061d      	lsls	r5, r3, #24
 80120d4:	d514      	bpl.n	8012100 <_printf_i+0x1ac>
 80120d6:	07df      	lsls	r7, r3, #31
 80120d8:	bf44      	itt	mi
 80120da:	f043 0320 	orrmi.w	r3, r3, #32
 80120de:	6023      	strmi	r3, [r4, #0]
 80120e0:	b91e      	cbnz	r6, 80120ea <_printf_i+0x196>
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	f023 0320 	bic.w	r3, r3, #32
 80120e8:	6023      	str	r3, [r4, #0]
 80120ea:	2310      	movs	r3, #16
 80120ec:	e7b0      	b.n	8012050 <_printf_i+0xfc>
 80120ee:	6823      	ldr	r3, [r4, #0]
 80120f0:	f043 0320 	orr.w	r3, r3, #32
 80120f4:	6023      	str	r3, [r4, #0]
 80120f6:	2378      	movs	r3, #120	; 0x78
 80120f8:	4828      	ldr	r0, [pc, #160]	; (801219c <_printf_i+0x248>)
 80120fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120fe:	e7e3      	b.n	80120c8 <_printf_i+0x174>
 8012100:	0659      	lsls	r1, r3, #25
 8012102:	bf48      	it	mi
 8012104:	b2b6      	uxthmi	r6, r6
 8012106:	e7e6      	b.n	80120d6 <_printf_i+0x182>
 8012108:	4615      	mov	r5, r2
 801210a:	e7bb      	b.n	8012084 <_printf_i+0x130>
 801210c:	682b      	ldr	r3, [r5, #0]
 801210e:	6826      	ldr	r6, [r4, #0]
 8012110:	6961      	ldr	r1, [r4, #20]
 8012112:	1d18      	adds	r0, r3, #4
 8012114:	6028      	str	r0, [r5, #0]
 8012116:	0635      	lsls	r5, r6, #24
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	d501      	bpl.n	8012120 <_printf_i+0x1cc>
 801211c:	6019      	str	r1, [r3, #0]
 801211e:	e002      	b.n	8012126 <_printf_i+0x1d2>
 8012120:	0670      	lsls	r0, r6, #25
 8012122:	d5fb      	bpl.n	801211c <_printf_i+0x1c8>
 8012124:	8019      	strh	r1, [r3, #0]
 8012126:	2300      	movs	r3, #0
 8012128:	6123      	str	r3, [r4, #16]
 801212a:	4615      	mov	r5, r2
 801212c:	e7ba      	b.n	80120a4 <_printf_i+0x150>
 801212e:	682b      	ldr	r3, [r5, #0]
 8012130:	1d1a      	adds	r2, r3, #4
 8012132:	602a      	str	r2, [r5, #0]
 8012134:	681d      	ldr	r5, [r3, #0]
 8012136:	6862      	ldr	r2, [r4, #4]
 8012138:	2100      	movs	r1, #0
 801213a:	4628      	mov	r0, r5
 801213c:	f7ee f828 	bl	8000190 <memchr>
 8012140:	b108      	cbz	r0, 8012146 <_printf_i+0x1f2>
 8012142:	1b40      	subs	r0, r0, r5
 8012144:	6060      	str	r0, [r4, #4]
 8012146:	6863      	ldr	r3, [r4, #4]
 8012148:	6123      	str	r3, [r4, #16]
 801214a:	2300      	movs	r3, #0
 801214c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012150:	e7a8      	b.n	80120a4 <_printf_i+0x150>
 8012152:	6923      	ldr	r3, [r4, #16]
 8012154:	462a      	mov	r2, r5
 8012156:	4649      	mov	r1, r9
 8012158:	4640      	mov	r0, r8
 801215a:	47d0      	blx	sl
 801215c:	3001      	adds	r0, #1
 801215e:	d0ab      	beq.n	80120b8 <_printf_i+0x164>
 8012160:	6823      	ldr	r3, [r4, #0]
 8012162:	079b      	lsls	r3, r3, #30
 8012164:	d413      	bmi.n	801218e <_printf_i+0x23a>
 8012166:	68e0      	ldr	r0, [r4, #12]
 8012168:	9b03      	ldr	r3, [sp, #12]
 801216a:	4298      	cmp	r0, r3
 801216c:	bfb8      	it	lt
 801216e:	4618      	movlt	r0, r3
 8012170:	e7a4      	b.n	80120bc <_printf_i+0x168>
 8012172:	2301      	movs	r3, #1
 8012174:	4632      	mov	r2, r6
 8012176:	4649      	mov	r1, r9
 8012178:	4640      	mov	r0, r8
 801217a:	47d0      	blx	sl
 801217c:	3001      	adds	r0, #1
 801217e:	d09b      	beq.n	80120b8 <_printf_i+0x164>
 8012180:	3501      	adds	r5, #1
 8012182:	68e3      	ldr	r3, [r4, #12]
 8012184:	9903      	ldr	r1, [sp, #12]
 8012186:	1a5b      	subs	r3, r3, r1
 8012188:	42ab      	cmp	r3, r5
 801218a:	dcf2      	bgt.n	8012172 <_printf_i+0x21e>
 801218c:	e7eb      	b.n	8012166 <_printf_i+0x212>
 801218e:	2500      	movs	r5, #0
 8012190:	f104 0619 	add.w	r6, r4, #25
 8012194:	e7f5      	b.n	8012182 <_printf_i+0x22e>
 8012196:	bf00      	nop
 8012198:	080136b9 	.word	0x080136b9
 801219c:	080136ca 	.word	0x080136ca

080121a0 <_putc_r>:
 80121a0:	b570      	push	{r4, r5, r6, lr}
 80121a2:	460d      	mov	r5, r1
 80121a4:	4614      	mov	r4, r2
 80121a6:	4606      	mov	r6, r0
 80121a8:	b118      	cbz	r0, 80121b2 <_putc_r+0x12>
 80121aa:	6983      	ldr	r3, [r0, #24]
 80121ac:	b90b      	cbnz	r3, 80121b2 <_putc_r+0x12>
 80121ae:	f7ff fbf7 	bl	80119a0 <__sinit>
 80121b2:	4b1c      	ldr	r3, [pc, #112]	; (8012224 <_putc_r+0x84>)
 80121b4:	429c      	cmp	r4, r3
 80121b6:	d124      	bne.n	8012202 <_putc_r+0x62>
 80121b8:	6874      	ldr	r4, [r6, #4]
 80121ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121bc:	07d8      	lsls	r0, r3, #31
 80121be:	d405      	bmi.n	80121cc <_putc_r+0x2c>
 80121c0:	89a3      	ldrh	r3, [r4, #12]
 80121c2:	0599      	lsls	r1, r3, #22
 80121c4:	d402      	bmi.n	80121cc <_putc_r+0x2c>
 80121c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121c8:	f7ff fc88 	bl	8011adc <__retarget_lock_acquire_recursive>
 80121cc:	68a3      	ldr	r3, [r4, #8]
 80121ce:	3b01      	subs	r3, #1
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	60a3      	str	r3, [r4, #8]
 80121d4:	da05      	bge.n	80121e2 <_putc_r+0x42>
 80121d6:	69a2      	ldr	r2, [r4, #24]
 80121d8:	4293      	cmp	r3, r2
 80121da:	db1c      	blt.n	8012216 <_putc_r+0x76>
 80121dc:	b2eb      	uxtb	r3, r5
 80121de:	2b0a      	cmp	r3, #10
 80121e0:	d019      	beq.n	8012216 <_putc_r+0x76>
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	1c5a      	adds	r2, r3, #1
 80121e6:	6022      	str	r2, [r4, #0]
 80121e8:	701d      	strb	r5, [r3, #0]
 80121ea:	b2ed      	uxtb	r5, r5
 80121ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121ee:	07da      	lsls	r2, r3, #31
 80121f0:	d405      	bmi.n	80121fe <_putc_r+0x5e>
 80121f2:	89a3      	ldrh	r3, [r4, #12]
 80121f4:	059b      	lsls	r3, r3, #22
 80121f6:	d402      	bmi.n	80121fe <_putc_r+0x5e>
 80121f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121fa:	f7ff fc70 	bl	8011ade <__retarget_lock_release_recursive>
 80121fe:	4628      	mov	r0, r5
 8012200:	bd70      	pop	{r4, r5, r6, pc}
 8012202:	4b09      	ldr	r3, [pc, #36]	; (8012228 <_putc_r+0x88>)
 8012204:	429c      	cmp	r4, r3
 8012206:	d101      	bne.n	801220c <_putc_r+0x6c>
 8012208:	68b4      	ldr	r4, [r6, #8]
 801220a:	e7d6      	b.n	80121ba <_putc_r+0x1a>
 801220c:	4b07      	ldr	r3, [pc, #28]	; (801222c <_putc_r+0x8c>)
 801220e:	429c      	cmp	r4, r3
 8012210:	bf08      	it	eq
 8012212:	68f4      	ldreq	r4, [r6, #12]
 8012214:	e7d1      	b.n	80121ba <_putc_r+0x1a>
 8012216:	4629      	mov	r1, r5
 8012218:	4622      	mov	r2, r4
 801221a:	4630      	mov	r0, r6
 801221c:	f7ff f9e6 	bl	80115ec <__swbuf_r>
 8012220:	4605      	mov	r5, r0
 8012222:	e7e3      	b.n	80121ec <_putc_r+0x4c>
 8012224:	08013668 	.word	0x08013668
 8012228:	08013688 	.word	0x08013688
 801222c:	08013648 	.word	0x08013648

08012230 <__sread>:
 8012230:	b510      	push	{r4, lr}
 8012232:	460c      	mov	r4, r1
 8012234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012238:	f000 f894 	bl	8012364 <_read_r>
 801223c:	2800      	cmp	r0, #0
 801223e:	bfab      	itete	ge
 8012240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012242:	89a3      	ldrhlt	r3, [r4, #12]
 8012244:	181b      	addge	r3, r3, r0
 8012246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801224a:	bfac      	ite	ge
 801224c:	6563      	strge	r3, [r4, #84]	; 0x54
 801224e:	81a3      	strhlt	r3, [r4, #12]
 8012250:	bd10      	pop	{r4, pc}

08012252 <__swrite>:
 8012252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012256:	461f      	mov	r7, r3
 8012258:	898b      	ldrh	r3, [r1, #12]
 801225a:	05db      	lsls	r3, r3, #23
 801225c:	4605      	mov	r5, r0
 801225e:	460c      	mov	r4, r1
 8012260:	4616      	mov	r6, r2
 8012262:	d505      	bpl.n	8012270 <__swrite+0x1e>
 8012264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012268:	2302      	movs	r3, #2
 801226a:	2200      	movs	r2, #0
 801226c:	f000 f868 	bl	8012340 <_lseek_r>
 8012270:	89a3      	ldrh	r3, [r4, #12]
 8012272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801227a:	81a3      	strh	r3, [r4, #12]
 801227c:	4632      	mov	r2, r6
 801227e:	463b      	mov	r3, r7
 8012280:	4628      	mov	r0, r5
 8012282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012286:	f000 b817 	b.w	80122b8 <_write_r>

0801228a <__sseek>:
 801228a:	b510      	push	{r4, lr}
 801228c:	460c      	mov	r4, r1
 801228e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012292:	f000 f855 	bl	8012340 <_lseek_r>
 8012296:	1c43      	adds	r3, r0, #1
 8012298:	89a3      	ldrh	r3, [r4, #12]
 801229a:	bf15      	itete	ne
 801229c:	6560      	strne	r0, [r4, #84]	; 0x54
 801229e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80122a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80122a6:	81a3      	strheq	r3, [r4, #12]
 80122a8:	bf18      	it	ne
 80122aa:	81a3      	strhne	r3, [r4, #12]
 80122ac:	bd10      	pop	{r4, pc}

080122ae <__sclose>:
 80122ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122b2:	f000 b813 	b.w	80122dc <_close_r>
	...

080122b8 <_write_r>:
 80122b8:	b538      	push	{r3, r4, r5, lr}
 80122ba:	4d07      	ldr	r5, [pc, #28]	; (80122d8 <_write_r+0x20>)
 80122bc:	4604      	mov	r4, r0
 80122be:	4608      	mov	r0, r1
 80122c0:	4611      	mov	r1, r2
 80122c2:	2200      	movs	r2, #0
 80122c4:	602a      	str	r2, [r5, #0]
 80122c6:	461a      	mov	r2, r3
 80122c8:	f7fd ffdc 	bl	8010284 <_write>
 80122cc:	1c43      	adds	r3, r0, #1
 80122ce:	d102      	bne.n	80122d6 <_write_r+0x1e>
 80122d0:	682b      	ldr	r3, [r5, #0]
 80122d2:	b103      	cbz	r3, 80122d6 <_write_r+0x1e>
 80122d4:	6023      	str	r3, [r4, #0]
 80122d6:	bd38      	pop	{r3, r4, r5, pc}
 80122d8:	20002260 	.word	0x20002260

080122dc <_close_r>:
 80122dc:	b538      	push	{r3, r4, r5, lr}
 80122de:	4d06      	ldr	r5, [pc, #24]	; (80122f8 <_close_r+0x1c>)
 80122e0:	2300      	movs	r3, #0
 80122e2:	4604      	mov	r4, r0
 80122e4:	4608      	mov	r0, r1
 80122e6:	602b      	str	r3, [r5, #0]
 80122e8:	f7f0 fa51 	bl	800278e <_close>
 80122ec:	1c43      	adds	r3, r0, #1
 80122ee:	d102      	bne.n	80122f6 <_close_r+0x1a>
 80122f0:	682b      	ldr	r3, [r5, #0]
 80122f2:	b103      	cbz	r3, 80122f6 <_close_r+0x1a>
 80122f4:	6023      	str	r3, [r4, #0]
 80122f6:	bd38      	pop	{r3, r4, r5, pc}
 80122f8:	20002260 	.word	0x20002260

080122fc <_fstat_r>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	4d07      	ldr	r5, [pc, #28]	; (801231c <_fstat_r+0x20>)
 8012300:	2300      	movs	r3, #0
 8012302:	4604      	mov	r4, r0
 8012304:	4608      	mov	r0, r1
 8012306:	4611      	mov	r1, r2
 8012308:	602b      	str	r3, [r5, #0]
 801230a:	f7f0 fa4c 	bl	80027a6 <_fstat>
 801230e:	1c43      	adds	r3, r0, #1
 8012310:	d102      	bne.n	8012318 <_fstat_r+0x1c>
 8012312:	682b      	ldr	r3, [r5, #0]
 8012314:	b103      	cbz	r3, 8012318 <_fstat_r+0x1c>
 8012316:	6023      	str	r3, [r4, #0]
 8012318:	bd38      	pop	{r3, r4, r5, pc}
 801231a:	bf00      	nop
 801231c:	20002260 	.word	0x20002260

08012320 <_isatty_r>:
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	4d06      	ldr	r5, [pc, #24]	; (801233c <_isatty_r+0x1c>)
 8012324:	2300      	movs	r3, #0
 8012326:	4604      	mov	r4, r0
 8012328:	4608      	mov	r0, r1
 801232a:	602b      	str	r3, [r5, #0]
 801232c:	f7f0 fa4b 	bl	80027c6 <_isatty>
 8012330:	1c43      	adds	r3, r0, #1
 8012332:	d102      	bne.n	801233a <_isatty_r+0x1a>
 8012334:	682b      	ldr	r3, [r5, #0]
 8012336:	b103      	cbz	r3, 801233a <_isatty_r+0x1a>
 8012338:	6023      	str	r3, [r4, #0]
 801233a:	bd38      	pop	{r3, r4, r5, pc}
 801233c:	20002260 	.word	0x20002260

08012340 <_lseek_r>:
 8012340:	b538      	push	{r3, r4, r5, lr}
 8012342:	4d07      	ldr	r5, [pc, #28]	; (8012360 <_lseek_r+0x20>)
 8012344:	4604      	mov	r4, r0
 8012346:	4608      	mov	r0, r1
 8012348:	4611      	mov	r1, r2
 801234a:	2200      	movs	r2, #0
 801234c:	602a      	str	r2, [r5, #0]
 801234e:	461a      	mov	r2, r3
 8012350:	f7f0 fa44 	bl	80027dc <_lseek>
 8012354:	1c43      	adds	r3, r0, #1
 8012356:	d102      	bne.n	801235e <_lseek_r+0x1e>
 8012358:	682b      	ldr	r3, [r5, #0]
 801235a:	b103      	cbz	r3, 801235e <_lseek_r+0x1e>
 801235c:	6023      	str	r3, [r4, #0]
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	20002260 	.word	0x20002260

08012364 <_read_r>:
 8012364:	b538      	push	{r3, r4, r5, lr}
 8012366:	4d07      	ldr	r5, [pc, #28]	; (8012384 <_read_r+0x20>)
 8012368:	4604      	mov	r4, r0
 801236a:	4608      	mov	r0, r1
 801236c:	4611      	mov	r1, r2
 801236e:	2200      	movs	r2, #0
 8012370:	602a      	str	r2, [r5, #0]
 8012372:	461a      	mov	r2, r3
 8012374:	f7f0 f9ee 	bl	8002754 <_read>
 8012378:	1c43      	adds	r3, r0, #1
 801237a:	d102      	bne.n	8012382 <_read_r+0x1e>
 801237c:	682b      	ldr	r3, [r5, #0]
 801237e:	b103      	cbz	r3, 8012382 <_read_r+0x1e>
 8012380:	6023      	str	r3, [r4, #0]
 8012382:	bd38      	pop	{r3, r4, r5, pc}
 8012384:	20002260 	.word	0x20002260

08012388 <_init>:
 8012388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801238a:	bf00      	nop
 801238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801238e:	bc08      	pop	{r3}
 8012390:	469e      	mov	lr, r3
 8012392:	4770      	bx	lr

08012394 <_fini>:
 8012394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012396:	bf00      	nop
 8012398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801239a:	bc08      	pop	{r3}
 801239c:	469e      	mov	lr, r3
 801239e:	4770      	bx	lr
