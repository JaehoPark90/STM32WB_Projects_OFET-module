
BLE_p2pClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c914  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001088  0800ca54  0800ca54  0001ca54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dadc  0800dadc  0001dadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dae4  0800dae4  0001dae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dae8  0800dae8  0001dae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000008  0800daec  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000009c  0800db80  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 0000009c  20000138  0800dc19  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003c  200001d4  0800dcb5  000201d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000210  0800dcf1  00020210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013dc  20000224  0800dd02  00020224  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  20001600  0800dd02  00021600  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 17 .debug_info   00030d89  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000065e7  00000000  00000000  00050fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000029d0  00000000  00000000  000575c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002710  00000000  00000000  00059f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002da4b  00000000  00000000  0005c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000305e8  00000000  00000000  0008a0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000fb3d9  00000000  00000000  000ba6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b5ab4  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b5ac  00000000  00000000  001b5b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000224 	.word	0x20000224
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ca3c 	.word	0x0800ca3c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000228 	.word	0x20000228
 800017c:	0800ca3c 	.word	0x0800ca3c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 800053e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000542:	4905      	ldr	r1, [pc, #20]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	58000800 	.word	0x58000800

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800059e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ae:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005ca:	f003 ff65 	bl	8004498 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005ce:	f003 ff69 	bl	80044a4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d6:	f7ff ffad 	bl	8000534 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005da:	f009 fa41 	bl	8009a60 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005de:	f000 f821 	bl	8000624 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005e2:	f000 f8c3 	bl	800076c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005e6:	bf00      	nop
}
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <APPD_EnableCPU2+0x34>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	c403      	stmia	r4!, {r0, r1}
 8000602:	8022      	strh	r2, [r4, #0]
 8000604:	3402      	adds	r4, #2
 8000606:	0c13      	lsrs	r3, r2, #16
 8000608:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800060a:	f00a fe67 	bl	800b2dc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f009 fc98 	bl	8009f46 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000616:	bf00      	nop
}
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bdb0      	pop	{r4, r5, r7, pc}
 800061e:	bf00      	nop
 8000620:	0800ca54 	.word	0x0800ca54

08000624 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000644:	2300      	movs	r3, #0
 8000646:	77fb      	strb	r3, [r7, #31]
 8000648:	e038      	b.n	80006bc <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	4a44      	ldr	r2, [pc, #272]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d02b      	beq.n	80006b0 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	4a41      	ldr	r2, [pc, #260]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800065c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000660:	4a40      	ldr	r2, [pc, #256]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d01b      	beq.n	800069e <APPD_SetCPU2GpioConfig+0x7a>
 8000666:	4a3f      	ldr	r2, [pc, #252]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d823      	bhi.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
 800066c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000670:	d003      	beq.n	800067a <APPD_SetCPU2GpioConfig+0x56>
 8000672:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d009      	beq.n	800068c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000678:	e01c      	b.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	4a38      	ldr	r2, [pc, #224]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	889a      	ldrh	r2, [r3, #4]
 8000684:	8bbb      	ldrh	r3, [r7, #28]
 8000686:	4313      	orrs	r3, r2
 8000688:	83bb      	strh	r3, [r7, #28]
          break;
 800068a:	e014      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4413      	add	r3, r2
 8000694:	889a      	ldrh	r2, [r3, #4]
 8000696:	8b7b      	ldrh	r3, [r7, #26]
 8000698:	4313      	orrs	r3, r2
 800069a:	837b      	strh	r3, [r7, #26]
          break;
 800069c:	e00b      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800069e:	7ffb      	ldrb	r3, [r7, #31]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	889a      	ldrh	r2, [r3, #4]
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	833b      	strh	r3, [r7, #24]
          break;
 80006ae:	e002      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006b0:	bf00      	nop
 80006b2:	e000      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006b4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	3301      	adds	r3, #1
 80006ba:	77fb      	strb	r3, [r7, #31]
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	2b25      	cmp	r3, #37	; 0x25
 80006c0:	d9c3      	bls.n	800064a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006ce:	8bbb      	ldrh	r3, [r7, #28]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006d4:	8bbb      	ldrh	r3, [r7, #28]
 80006d6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff3f 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff55 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f004 fbec 	bl	8004ec8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006f0:	8bbb      	ldrh	r3, [r7, #28]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f004 fd55 	bl	80051a8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006fe:	8b7b      	ldrh	r3, [r7, #26]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d012      	beq.n	800072a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000704:	8b7b      	ldrh	r3, [r7, #26]
 8000706:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ff27 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff3d 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f004 fbd5 	bl	8004ec8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800071e:	8b7b      	ldrh	r3, [r7, #26]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000726:	f004 fd3f 	bl	80051a8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d013      	beq.n	8000758 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000730:	8b3b      	ldrh	r3, [r7, #24]
 8000732:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	2004      	movs	r0, #4
 8000736:	f7ff ff11 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff ff27 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f004 fbbf 	bl	8004ec8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800074a:	8b3b      	ldrh	r3, [r7, #24]
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000752:	f004 fd29 	bl	80051a8 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000756:	bf00      	nop
 8000758:	bf00      	nop
}
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0800d800 	.word	0x0800d800
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400

0800076c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000770:	bf00      	nop
}
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800077e:	f001 fc1f 	bl	8001fc0 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000782:	bf00      	nop
}
 8000784:	bd80      	pop	{r7, pc}

08000786 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	460b      	mov	r3, r1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000794:	897a      	ldrh	r2, [r7, #10]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68f9      	ldr	r1, [r7, #12]
 800079a:	2000      	movs	r0, #0
 800079c:	f001 faba 	bl	8001d14 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007a0:	bf00      	nop
}
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007b6:	f023 0207 	bic.w	r2, r3, #7
 80007ba:	4905      	ldr	r1, [pc, #20]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	58000400 	.word	0x58000400

080007d4 <LL_EXTI_EnableIT_32_63>:
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	58000800 	.word	0x58000800

080007fc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800080a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000816:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	cafecafe 	.word	0xcafecafe

08000838 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800088e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008b8:	d101      	bne.n	80008be <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008de:	d101      	bne.n	80008e4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_AHB3_GRP1_EnableClock>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LL_DBGMCU_GetRevisionID+0x18>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0c1b      	lsrs	r3, r3, #16
 800092e:	b29b      	uxth	r3, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e0042000 	.word	0xe0042000

08000940 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	431a      	orrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	605a      	str	r2, [r3, #4]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	041b      	lsls	r3, r3, #16
 8000998:	431a      	orrs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	615a      	str	r2, [r3, #20]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	619a      	str	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_LPM_EnableSleep+0x1c>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <LL_LPM_EnableSleep+0x1c>)
 8000a0e:	f023 0304 	bic.w	r3, r3, #4
 8000a12:	6113      	str	r3, [r2, #16]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	22ca      	movs	r2, #202	; 0xca
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2253      	movs	r2, #83	; 0x53
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f023 0207 	bic.w	r2, r3, #7
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	609a      	str	r2, [r3, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <MX_APPE_Config+0x18>)
 8000a8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a8e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a90:	f000 f82e 	bl	8000af0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a94:	f000 f86e 	bl	8000b74 <Config_HSE>

  return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58004000 	.word	0x58004000

08000aa0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000aa4:	f000 f87a 	bl	8000b9c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000aa8:	f000 f892 	bl	8000bd0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000aac:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <MX_APPE_Init+0x30>)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 feae 	bl	8001810 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000ab4:	f7ff fd87 	bl	80005c6 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f00a fcac 	bl	800b418 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000ac0:	f000 f9da 	bl	8000e78 <Led_Init>

  Button_Init();
 8000ac4:	f000 f9e8 	bl	8000e98 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ac8:	f000 f890 	bl	8000bec <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000acc:	bf00      	nop
}
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000046c 	.word	0x2000046c

08000ad4 <Init_Smps>:

void Init_Smps(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000ad8:	bf00      	nop
}
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <Init_Exti>:

void Init_Exti(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ae6:	2050      	movs	r0, #80	; 0x50
 8000ae8:	f7ff fe74 	bl	80007d4 <LL_EXTI_EnableIT_32_63>

  return;
 8000aec:	bf00      	nop
}
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000af4:	f000 f804 	bl	8000b00 <Reset_BackupDomain>

  Reset_IPCC();
 8000af8:	f000 f81a 	bl	8000b30 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000afc:	bf00      	nop
}
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b04:	f7ff fece 	bl	80008a4 <LL_RCC_IsActiveFlag_PINRST>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00d      	beq.n	8000b2a <Reset_BackupDomain+0x2a>
 8000b0e:	f7ff fedc 	bl	80008ca <LL_RCC_IsActiveFlag_SFTRST>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d108      	bne.n	8000b2a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b18:	f004 fc20 	bl	800535c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b1c:	f004 fc1e 	bl	800535c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b20:	f7ff fe9e 	bl	8000860 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b24:	f7ff fead 	bl	8000882 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
}
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b38:	f7ff feda 	bl	80008f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff44 	bl	80009cc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b44:	213f      	movs	r1, #63	; 0x3f
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <Reset_IPCC+0x40>)
 8000b48:	f7ff ff4e 	bl	80009e8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b4c:	213f      	movs	r1, #63	; 0x3f
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <Reset_IPCC+0x40>)
 8000b50:	f7ff fef6 	bl	8000940 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b54:	213f      	movs	r1, #63	; 0x3f
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <Reset_IPCC+0x40>)
 8000b58:	f7ff ff15 	bl	8000986 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b5c:	213f      	movs	r1, #63	; 0x3f
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <Reset_IPCC+0x40>)
 8000b60:	f7ff ff00 	bl	8000964 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b64:	213f      	movs	r1, #63	; 0x3f
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <Reset_IPCC+0x40>)
 8000b68:	f7ff ff1f 	bl	80009aa <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b6c:	bf00      	nop
}
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58000c00 	.word	0x58000c00

08000b74 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f009 f9a4 	bl	8009ec8 <OTP_Read>
 8000b80:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d005      	beq.n	8000b94 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	799b      	ldrb	r3, [r3, #6]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe35 	bl	80007fc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
}
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <System_Init>:

static void System_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000ba0:	f7ff ff98 	bl	8000ad4 <Init_Smps>

  Init_Exti();
 8000ba4:	f7ff ff9d 	bl	8000ae2 <Init_Exti>

  Init_Rtc();
 8000ba8:	f000 f802 	bl	8000bb0 <Init_Rtc>

  return;
 8000bac:	bf00      	nop
}
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <Init_Rtc+0x1c>)
 8000bb6:	f7ff ff42 	bl	8000a3e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <Init_Rtc+0x1c>)
 8000bbe:	f7ff ff4e 	bl	8000a5e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bc2:	4802      	ldr	r0, [pc, #8]	; (8000bcc <Init_Rtc+0x1c>)
 8000bc4:	f7ff ff2e 	bl	8000a24 <LL_RTC_EnableWriteProtection>

  return;
 8000bc8:	bf00      	nop
}
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40002800 	.word	0x40002800

08000bd0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bd8:	f7ff fe2e 	bl	8000838 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bdc:	f00a fc0a 	bl	800b3f4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000be0:	2004      	movs	r0, #4
 8000be2:	f7ff fde1 	bl	80007a8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000be6:	bf00      	nop
}
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bf2:	f00a f9bd 	bl	800af70 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <appe_Tl_Init+0x50>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bfe:	f00a fd39 	bl	800b674 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <appe_Tl_Init+0x54>)
 8000c04:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <appe_Tl_Init+0x58>)
 8000c08:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <appe_Tl_Init+0x5c>)
 8000c10:	f009 fa74 	bl	800a0fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <appe_Tl_Init+0x60>)
 8000c16:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <appe_Tl_Init+0x64>)
 8000c1a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <appe_Tl_Init+0x68>)
 8000c1e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c20:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c24:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00a fae2 	bl	800b1f4 <TL_MM_Init>

  TL_Enable();
 8000c30:	f00a f998 	bl	800af64 <TL_Enable>

  return;
 8000c34:	bf00      	nop
}
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0800a135 	.word	0x0800a135
 8000c40:	20030734 	.word	0x20030734
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c71 	.word	0x08000c71
 8000c4c:	2003094c 	.word	0x2003094c
 8000c50:	20030840 	.word	0x20030840
 8000c54:	200301f8 	.word	0x200301f8

08000c58 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c62:	bf00      	nop
}
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	330b      	adds	r3, #11
 8000c7e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d860      	bhi.n	8000d50 <APPE_SysUserEvtRx+0xe0>
 8000c8e:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <APPE_SysUserEvtRx+0x24>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000cb5 	.word	0x08000cb5
 8000c98:	08000cf7 	.word	0x08000cf7
 8000c9c:	08000d05 	.word	0x08000d05
 8000ca0:	08000d51 	.word	0x08000d51
 8000ca4:	08000d21 	.word	0x08000d21
 8000ca8:	08000d31 	.word	0x08000d31
 8000cac:	08000d39 	.word	0x08000d39
 8000cb0:	08000d49 	.word	0x08000d49
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f009 f971 	bl	8009fa0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000cbe:	7b3b      	ldrb	r3, [r7, #12]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	4824      	ldr	r0, [pc, #144]	; (8000d5c <APPE_SysUserEvtRx+0xec>)
 8000cca:	f00a fe55 	bl	800b978 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000cce:	7c3b      	ldrb	r3, [r7, #16]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <APPE_SysUserEvtRx+0xf0>)
 8000cd4:	f00a fe50 	bl	800b978 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000cd8:	7dbb      	ldrb	r3, [r7, #22]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	7e3b      	ldrb	r3, [r7, #24]
 8000ce2:	4820      	ldr	r0, [pc, #128]	; (8000d64 <APPE_SysUserEvtRx+0xf4>)
 8000ce4:	f00a fe48 	bl	800b978 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000ce8:	481f      	ldr	r0, [pc, #124]	; (8000d68 <APPE_SysUserEvtRx+0xf8>)
 8000cea:	f00a fe45 	bl	800b978 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f870 	bl	8000dd4 <APPE_SysEvtReadyProcessing>
    break;
 8000cf4:	e02d      	b.n	8000d52 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000cf6:	481d      	ldr	r0, [pc, #116]	; (8000d6c <APPE_SysUserEvtRx+0xfc>)
 8000cf8:	f00a fe3e 	bl	800b978 <iprintf>
    APPE_SysEvtError(pPayload);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f843 	bl	8000d88 <APPE_SysEvtError>
    break;
 8000d02:	e026      	b.n	8000d52 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <APPE_SysUserEvtRx+0x100>)
 8000d06:	f00a fed3 	bl	800bab0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d0e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4816      	ldr	r0, [pc, #88]	; (8000d74 <APPE_SysUserEvtRx+0x104>)
 8000d1a:	f00a fe2d 	bl	800b978 <iprintf>
    break;
 8000d1e:	e018      	b.n	8000d52 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <APPE_SysUserEvtRx+0x108>)
 8000d2a:	f00a fe25 	bl	800b978 <iprintf>
    break;
 8000d2e:	e010      	b.n	8000d52 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <APPE_SysUserEvtRx+0x10c>)
 8000d32:	f00a fe21 	bl	800b978 <iprintf>
    break;
 8000d36:	e00c      	b.n	8000d52 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <APPE_SysUserEvtRx+0x110>)
 8000d42:	f00a fe19 	bl	800b978 <iprintf>
    break;
 8000d46:	e004      	b.n	8000d52 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000d48:	480e      	ldr	r0, [pc, #56]	; (8000d84 <APPE_SysUserEvtRx+0x114>)
 8000d4a:	f00a fe15 	bl	800b978 <iprintf>
    break;
 8000d4e:	e000      	b.n	8000d52 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000d50:	bf00      	nop
  }

  return;
 8000d52:	bf00      	nop
}
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0800ca70 	.word	0x0800ca70
 8000d60:	0800ca94 	.word	0x0800ca94
 8000d64:	0800cab0 	.word	0x0800cab0
 8000d68:	0800cac8 	.word	0x0800cac8
 8000d6c:	0800cae8 	.word	0x0800cae8
 8000d70:	0800cb0c 	.word	0x0800cb0c
 8000d74:	0800cb5c 	.word	0x0800cb5c
 8000d78:	0800cb84 	.word	0x0800cb84
 8000d7c:	0800cbc0 	.word	0x0800cbc0
 8000d80:	0800cbe4 	.word	0x0800cbe4
 8000d84:	0800cc20 	.word	0x0800cc20

08000d88 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	330b      	adds	r3, #11
 8000d96:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <APPE_SysEvtError+0x40>)
 8000da6:	f00a fde7 	bl	800b978 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d103      	bne.n	8000dba <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <APPE_SysEvtError+0x44>)
 8000db4:	f00a fe7c 	bl	800bab0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000db8:	e003      	b.n	8000dc2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <APPE_SysEvtError+0x48>)
 8000dbc:	f00a fe78 	bl	800bab0 <puts>
  return;
 8000dc0:	bf00      	nop
}
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	0800cc44 	.word	0x0800cc44
 8000dcc:	0800cc74 	.word	0x0800cc74
 8000dd0:	0800ccb0 	.word	0x0800ccb0

08000dd4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	330b      	adds	r3, #11
 8000df4:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	3302      	adds	r3, #2
 8000dfa:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d11e      	bne.n	8000e42 <APPE_SysEvtReadyProcessing+0x6e>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000e04:	4818      	ldr	r0, [pc, #96]	; (8000e68 <APPE_SysEvtReadyProcessing+0x94>)
 8000e06:	f00a fe53 	bl	800bab0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000e0a:	f7ff fbef 	bl	80005ec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000e0e:	230d      	movs	r3, #13
 8000e10:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000e12:	237f      	movs	r3, #127	; 0x7f
 8000e14:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000e16:	f7ff fd85 	bl	8000924 <LL_DBGMCU_GetRevisionID>
 8000e1a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e1e:	4813      	ldr	r0, [pc, #76]	; (8000e6c <APPE_SysEvtReadyProcessing+0x98>)
 8000e20:	f00a fdaa 	bl	800b978 <iprintf>

    config_param.RevisionID = RevisionID;
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f009 f8a0 	bl	8009f74 <SHCI_C2_Config>

    APP_BLE_Init();
 8000e34:	f001 fc9c 	bl	8002770 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f00a faec 	bl	800b418 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000e40:	e00e      	b.n	8000e60 <APPE_SysEvtReadyProcessing+0x8c>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <APPE_SysEvtReadyProcessing+0x84>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <APPE_SysEvtReadyProcessing+0x9c>)
 8000e4c:	f00a fd94 	bl	800b978 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
  return;
 8000e56:	e003      	b.n	8000e60 <APPE_SysEvtReadyProcessing+0x8c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <APPE_SysEvtReadyProcessing+0xa0>)
 8000e5a:	f00a fd8d 	bl	800b978 <iprintf>
  return;
 8000e5e:	bf00      	nop
}
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	0800cce8 	.word	0x0800cce8
 8000e6c:	0800cd04 	.word	0x0800cd04
 8000e70:	0800cd28 	.word	0x0800cd28
 8000e74:	0800cd5c 	.word	0x0800cd5c

08000e78 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f003 f925 	bl	80040cc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f003 f922 	bl	80040cc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f003 f91f 	bl	80040cc <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f003 f956 	bl	8004140 <BSP_LED_On>
#endif

  return;
 8000e94:	bf00      	nop
}
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Button_Init>:

static void Button_Init( void )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f003 f982 	bl	80041a8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f003 f97e 	bl	80041a8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000eac:	2101      	movs	r1, #1
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f003 f97a 	bl	80041a8 <BSP_PB_Init>
#endif

  return;
 8000eb4:	bf00      	nop
}
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f003 fac6 	bl	8004450 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d00a      	beq.n	8000ee8 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000ed2:	f003 fad5 	bl	8004480 <HAL_GetTickFreq>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee0:	e002      	b.n	8000ee8 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000ee2:	f7ff fd8f 	bl	8000a04 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000ee6:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000ee8:	f003 fab2 	bl	8004450 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f4      	bhi.n	8000ee2 <HAL_Delay+0x2a>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	f00a fab5 	bl	800b478 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000f16:	bf00      	nop
}
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	f00a faa3 	bl	800b478 <UTIL_SEQ_Run>

  return;
 8000f32:	bf00      	nop
}
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000f42:	2100      	movs	r1, #0
 8000f44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f48:	f00a fbb6 	bl	800b6b8 <UTIL_SEQ_SetTask>
  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f00a fc17 	bl	800b790 <UTIL_SEQ_SetEvt>
  return;
 8000f62:	bf00      	nop
}
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000f72:	2002      	movs	r0, #2
 8000f74:	f00a fc2c 	bl	800b7d0 <UTIL_SEQ_WaitEvt>
  return;
 8000f78:	bf00      	nop
}
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b10      	cmp	r3, #16
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_EXTI_Callback+0x1e>
 8000f90:	2b10      	cmp	r3, #16
 8000f92:	dc0d      	bgt.n	8000fb0 <HAL_GPIO_EXTI_Callback+0x30>
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x24>
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d006      	beq.n	8000faa <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000f9e:	f001 fe57 	bl	8002c50 <APP_BLE_Key_Button1_Action>
      break; 
 8000fa2:	e006      	b.n	8000fb2 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000fa4:	f001 fe64 	bl	8002c70 <APP_BLE_Key_Button2_Action>
      break; 
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000faa:	f001 fe68 	bl	8002c7e <APP_BLE_Key_Button3_Action>
      break;
 8000fae:	e000      	b.n	8000fb2 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000fb0:	bf00      	nop

  }
  return;
 8000fb2:	bf00      	nop
}
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <LL_EXTI_EnableIT_0_31>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <LL_EXTI_EnableIT_0_31+0x24>)
 8000fc6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000fca:	4905      	ldr	r1, [pc, #20]	; (8000fe0 <LL_EXTI_EnableIT_0_31+0x24>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	58000800 	.word	0x58000800

08000fe4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4904      	ldr	r1, [pc, #16]	; (8001004 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]

}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	58000800 	.word	0x58000800

08001008 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <ReadRtcSsrValue+0x3c>)
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	b29b      	uxth	r3, r3
 8001014:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <ReadRtcSsrValue+0x3c>)
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	b29b      	uxth	r3, r3
 800101c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800101e:	e005      	b.n	800102c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <ReadRtcSsrValue+0x3c>)
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	b29b      	uxth	r3, r3
 800102a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d1f5      	bne.n	8001020 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001034:	683b      	ldr	r3, [r7, #0]
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40002800 	.word	0x40002800

08001048 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001058:	79ba      	ldrb	r2, [r7, #6]
 800105a:	491d      	ldr	r1, [pc, #116]	; (80010d0 <LinkTimerAfter+0x88>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	3315      	adds	r3, #21
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b06      	cmp	r3, #6
 8001070:	d009      	beq.n	8001086 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	4916      	ldr	r1, [pc, #88]	; (80010d0 <LinkTimerAfter+0x88>)
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	3314      	adds	r3, #20
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	4911      	ldr	r1, [pc, #68]	; (80010d0 <LinkTimerAfter+0x88>)
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	3315      	adds	r3, #21
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <LinkTimerAfter+0x88>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	3314      	adds	r3, #20
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80010ae:	79ba      	ldrb	r2, [r7, #6]
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <LinkTimerAfter+0x88>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	3315      	adds	r3, #21
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	701a      	strb	r2, [r3, #0]

  return;
 80010c2:	bf00      	nop
}
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000009c 	.word	0x2000009c

080010d4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <LinkTimerBefore+0xb8>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d032      	beq.n	8001156 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	4927      	ldr	r1, [pc, #156]	; (8001190 <LinkTimerBefore+0xbc>)
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3314      	adds	r3, #20
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	4922      	ldr	r1, [pc, #136]	; (8001190 <LinkTimerBefore+0xbc>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	3315      	adds	r3, #21
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001118:	79fa      	ldrb	r2, [r7, #7]
 800111a:	491d      	ldr	r1, [pc, #116]	; (8001190 <LinkTimerBefore+0xbc>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	3315      	adds	r3, #21
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	4918      	ldr	r1, [pc, #96]	; (8001190 <LinkTimerBefore+0xbc>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	3314      	adds	r3, #20
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001140:	79ba      	ldrb	r2, [r7, #6]
 8001142:	4913      	ldr	r1, [pc, #76]	; (8001190 <LinkTimerBefore+0xbc>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	3314      	adds	r3, #20
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001154:	e014      	b.n	8001180 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	490d      	ldr	r1, [pc, #52]	; (8001190 <LinkTimerBefore+0xbc>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	3315      	adds	r3, #21
 8001166:	79ba      	ldrb	r2, [r7, #6]
 8001168:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800116a:	79ba      	ldrb	r2, [r7, #6]
 800116c:	4908      	ldr	r1, [pc, #32]	; (8001190 <LinkTimerBefore+0xbc>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	3314      	adds	r3, #20
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	701a      	strb	r2, [r3, #0]
  return;
 800117e:	bf00      	nop
}
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000012c 	.word	0x2000012c
 8001190:	2000009c 	.word	0x2000009c

08001194 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800119e:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <linkTimer+0x144>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d118      	bne.n	80011da <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <linkTimer+0x144>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <linkTimer+0x148>)
 80011b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80011b2:	4a49      	ldr	r2, [pc, #292]	; (80012d8 <linkTimer+0x144>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	4949      	ldr	r1, [pc, #292]	; (80012e0 <linkTimer+0x14c>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	3315      	adds	r3, #21
 80011c8:	2206      	movs	r2, #6
 80011ca:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <linkTimer+0x150>)
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	81fb      	strh	r3, [r7, #14]
 80011d8:	e078      	b.n	80012cc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80011da:	f000 f909 	bl	80013f0 <ReturnTimeElapsed>
 80011de:	4603      	mov	r3, r0
 80011e0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	493e      	ldr	r1, [pc, #248]	; (80012e0 <linkTimer+0x14c>)
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	440b      	add	r3, r1
 80011f0:	3308      	adds	r3, #8
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	4419      	add	r1, r3
 80011fa:	4839      	ldr	r0, [pc, #228]	; (80012e0 <linkTimer+0x14c>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4403      	add	r3, r0
 8001206:	3308      	adds	r3, #8
 8001208:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	4934      	ldr	r1, [pc, #208]	; (80012e0 <linkTimer+0x14c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	3308      	adds	r3, #8
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <linkTimer+0x144>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	4a2e      	ldr	r2, [pc, #184]	; (80012e0 <linkTimer+0x14c>)
 8001228:	460b      	mov	r3, r1
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	440b      	add	r3, r1
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4413      	add	r3, r2
 8001232:	3308      	adds	r3, #8
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	429a      	cmp	r2, r3
 800123a:	d337      	bcc.n	80012ac <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <linkTimer+0x144>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001242:	7b7a      	ldrb	r2, [r7, #13]
 8001244:	4926      	ldr	r1, [pc, #152]	; (80012e0 <linkTimer+0x14c>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3315      	adds	r3, #21
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001256:	e013      	b.n	8001280 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001258:	7b7a      	ldrb	r2, [r7, #13]
 800125a:	4921      	ldr	r1, [pc, #132]	; (80012e0 <linkTimer+0x14c>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	3315      	adds	r3, #21
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800126c:	7b7a      	ldrb	r2, [r7, #13]
 800126e:	491c      	ldr	r1, [pc, #112]	; (80012e0 <linkTimer+0x14c>)
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	3315      	adds	r3, #21
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	2b06      	cmp	r3, #6
 8001284:	d00b      	beq.n	800129e <linkTimer+0x10a>
 8001286:	7b3a      	ldrb	r2, [r7, #12]
 8001288:	4915      	ldr	r1, [pc, #84]	; (80012e0 <linkTimer+0x14c>)
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	3308      	adds	r3, #8
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	429a      	cmp	r2, r3
 800129c:	d2dc      	bcs.n	8001258 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800129e:	7b7a      	ldrb	r2, [r7, #13]
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fecf 	bl	8001048 <LinkTimerAfter>
 80012aa:	e00f      	b.n	80012cc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <linkTimer+0x144>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff0c 	bl	80010d4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <linkTimer+0x144>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <linkTimer+0x148>)
 80012c4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <linkTimer+0x144>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80012cc:	89fb      	ldrh	r3, [r7, #14]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000012c 	.word	0x2000012c
 80012dc:	2000012d 	.word	0x2000012d
 80012e0:	2000009c 	.word	0x2000009c
 80012e4:	20000130 	.word	0x20000130

080012e8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <UnlinkTimer+0xf8>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	429a      	cmp	r2, r3
 8001302:	d111      	bne.n	8001328 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <UnlinkTimer+0xf8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <UnlinkTimer+0xfc>)
 800130c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	4935      	ldr	r1, [pc, #212]	; (80013e8 <UnlinkTimer+0x100>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	3315      	adds	r3, #21
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <UnlinkTimer+0xf8>)
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e03e      	b.n	80013a6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	492f      	ldr	r1, [pc, #188]	; (80013e8 <UnlinkTimer+0x100>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3314      	adds	r3, #20
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	492a      	ldr	r1, [pc, #168]	; (80013e8 <UnlinkTimer+0x100>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3315      	adds	r3, #21
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001350:	79f9      	ldrb	r1, [r7, #7]
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	4824      	ldr	r0, [pc, #144]	; (80013e8 <UnlinkTimer+0x100>)
 8001356:	460b      	mov	r3, r1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	440b      	add	r3, r1
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4403      	add	r3, r0
 8001360:	3315      	adds	r3, #21
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2d8      	uxtb	r0, r3
 8001366:	4920      	ldr	r1, [pc, #128]	; (80013e8 <UnlinkTimer+0x100>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	3315      	adds	r3, #21
 8001374:	4602      	mov	r2, r0
 8001376:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	2b06      	cmp	r3, #6
 800137c:	d013      	beq.n	80013a6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800137e:	79f9      	ldrb	r1, [r7, #7]
 8001380:	7bba      	ldrb	r2, [r7, #14]
 8001382:	4819      	ldr	r0, [pc, #100]	; (80013e8 <UnlinkTimer+0x100>)
 8001384:	460b      	mov	r3, r1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	440b      	add	r3, r1
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4403      	add	r3, r0
 800138e:	3314      	adds	r3, #20
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	4914      	ldr	r1, [pc, #80]	; (80013e8 <UnlinkTimer+0x100>)
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	3314      	adds	r3, #20
 80013a2:	4602      	mov	r2, r0
 80013a4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	490f      	ldr	r1, [pc, #60]	; (80013e8 <UnlinkTimer+0x100>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	330c      	adds	r3, #12
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <UnlinkTimer+0xf8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d107      	bne.n	80013d4 <UnlinkTimer+0xec>
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <UnlinkTimer+0x104>)
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	601a      	str	r2, [r3, #0]
  }

  return;
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
}
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	2000012c 	.word	0x2000012c
 80013e4:	2000012d 	.word	0x2000012d
 80013e8:	2000009c 	.word	0x2000009c
 80013ec:	20000130 	.word	0x20000130

080013f0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <ReturnTimeElapsed+0x70>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fe:	d026      	beq.n	800144e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001400:	f7ff fe02 	bl	8001008 <ReadRtcSsrValue>
 8001404:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <ReturnTimeElapsed+0x70>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d805      	bhi.n	800141c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <ReturnTimeElapsed+0x70>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e00a      	b.n	8001432 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <ReturnTimeElapsed+0x74>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <ReturnTimeElapsed+0x70>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <ReturnTimeElapsed+0x78>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <ReturnTimeElapsed+0x7c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	40d3      	lsrs	r3, r2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	e001      	b.n	8001452 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	b29b      	uxth	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000130 	.word	0x20000130
 8001464:	20000246 	.word	0x20000246
 8001468:	20000245 	.word	0x20000245
 800146c:	20000244 	.word	0x20000244

08001470 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d108      	bne.n	8001492 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001480:	f7ff fdc2 	bl	8001008 <ReadRtcSsrValue>
 8001484:	4603      	mov	r3, r0
 8001486:	4a24      	ldr	r2, [pc, #144]	; (8001518 <RestartWakeupCounter+0xa8>)
 8001488:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800148a:	2003      	movs	r0, #3
 800148c:	f003 f98d 	bl	80047aa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001490:	e03e      	b.n	8001510 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d803      	bhi.n	80014a0 <RestartWakeupCounter+0x30>
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <RestartWakeupCounter+0xac>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d002      	beq.n	80014a6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014a6:	bf00      	nop
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <RestartWakeupCounter+0xb0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f7      	beq.n	80014a8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <RestartWakeupCounter+0xb0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <RestartWakeupCounter+0xb0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <RestartWakeupCounter+0xb4>)
 80014d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014d4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014d6:	2003      	movs	r0, #3
 80014d8:	f003 f975 	bl	80047c6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <RestartWakeupCounter+0xb8>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	0c1b      	lsrs	r3, r3, #16
 80014e2:	041b      	lsls	r3, r3, #16
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	4910      	ldr	r1, [pc, #64]	; (8001528 <RestartWakeupCounter+0xb8>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80014ec:	f7ff fd8c 	bl	8001008 <ReadRtcSsrValue>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <RestartWakeupCounter+0xa8>)
 80014f4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <RestartWakeupCounter+0xb0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <RestartWakeupCounter+0xb0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001508:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800150a:	f3af 8000 	nop.w
  return ;
 800150e:	bf00      	nop
}
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000130 	.word	0x20000130
 800151c:	20000244 	.word	0x20000244
 8001520:	20000240 	.word	0x20000240
 8001524:	58000800 	.word	0x58000800
 8001528:	40002800 	.word	0x40002800

0800152c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <RescheduleTimerList+0x124>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	d108      	bne.n	8001552 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001540:	bf00      	nop
 8001542:	4b44      	ldr	r3, [pc, #272]	; (8001654 <RescheduleTimerList+0x128>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f7      	bne.n	8001542 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001552:	4b40      	ldr	r3, [pc, #256]	; (8001654 <RescheduleTimerList+0x128>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <RescheduleTimerList+0x128>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001564:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <RescheduleTimerList+0x12c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	493b      	ldr	r1, [pc, #236]	; (800165c <RescheduleTimerList+0x130>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	3308      	adds	r3, #8
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001580:	f7ff ff36 	bl	80013f0 <ReturnTimeElapsed>
 8001584:	4603      	mov	r3, r0
 8001586:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	429a      	cmp	r2, r3
 800158e:	d205      	bcs.n	800159c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <RescheduleTimerList+0x134>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e04d      	b.n	8001638 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4a31      	ldr	r2, [pc, #196]	; (8001664 <RescheduleTimerList+0x138>)
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	b292      	uxth	r2, r2
 80015a4:	4413      	add	r3, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d906      	bls.n	80015bc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <RescheduleTimerList+0x138>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <RescheduleTimerList+0x134>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e03d      	b.n	8001638 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <RescheduleTimerList+0x134>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015cc:	e034      	b.n	8001638 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	4922      	ldr	r1, [pc, #136]	; (800165c <RescheduleTimerList+0x130>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	3308      	adds	r3, #8
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d20a      	bcs.n	80015fc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	491c      	ldr	r1, [pc, #112]	; (800165c <RescheduleTimerList+0x130>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	3308      	adds	r3, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e013      	b.n	8001624 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	4917      	ldr	r1, [pc, #92]	; (800165c <RescheduleTimerList+0x130>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3308      	adds	r3, #8
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	1ac9      	subs	r1, r1, r3
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <RescheduleTimerList+0x130>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4403      	add	r3, r0
 8001620:	3308      	adds	r3, #8
 8001622:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	490d      	ldr	r1, [pc, #52]	; (800165c <RescheduleTimerList+0x130>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3315      	adds	r3, #21
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	2b06      	cmp	r3, #6
 800163c:	d1c7      	bne.n	80015ce <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800163e:	89bb      	ldrh	r3, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff15 	bl	8001470 <RestartWakeupCounter>

  return ;
 8001646:	bf00      	nop
}
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40002800 	.word	0x40002800
 8001654:	20000240 	.word	0x20000240
 8001658:	2000012c 	.word	0x2000012c
 800165c:	2000009c 	.word	0x2000009c
 8001660:	20000134 	.word	0x20000134
 8001664:	20000248 	.word	0x20000248

08001668 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800166e:	f3ef 8310 	mrs	r3, PRIMASK
 8001672:	617b      	str	r3, [r7, #20]
  return(result);
 8001674:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800167c:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	22ca      	movs	r2, #202	; 0xca
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2253      	movs	r2, #83	; 0x53
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001690:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b58      	ldr	r3, [pc, #352]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80016ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016b0:	4954      	ldr	r1, [pc, #336]	; (8001804 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	330c      	adds	r3, #12
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d172      	bne.n	80017ac <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80016c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016ca:	494e      	ldr	r1, [pc, #312]	; (8001804 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80016da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016de:	4949      	ldr	r1, [pc, #292]	; (8001804 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3310      	adds	r3, #16
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80016f0:	4b45      	ldr	r3, [pc, #276]	; (8001808 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d050      	beq.n	800179c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80016fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016fe:	4941      	ldr	r1, [pc, #260]	; (8001804 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	330d      	adds	r3, #13
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d126      	bne.n	8001762 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001718:	2101      	movs	r1, #1
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fde4 	bl	80012e8 <UnlinkTimer>
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f383 8810 	msr	PRIMASK, r3
}
 800172a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800172c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001730:	4934      	ldr	r1, [pc, #208]	; (8001804 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	3304      	adds	r3, #4
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fa4e 	bl	8001be8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	22ca      	movs	r2, #202	; 0xca
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2253      	movs	r2, #83	; 0x53
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
 8001760:	e014      	b.n	800178c <HW_TS_RTC_Wakeup_Handler+0x124>
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f383 8810 	msr	PRIMASK, r3
}
 800176c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800176e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f9ac 	bl	8001ad0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	22ca      	movs	r2, #202	; 0xca
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2253      	movs	r2, #83	; 0x53
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800178c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	4619      	mov	r1, r3
 8001794:	69b8      	ldr	r0, [r7, #24]
 8001796:	f000 faaf 	bl	8001cf8 <HW_TS_RTC_Int_AppNot>
 800179a:	e025      	b.n	80017e8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 800179c:	f7ff fec6 	bl	800152c <RescheduleTimerList>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f383 8810 	msr	PRIMASK, r3
}
 80017aa:	e01d      	b.n	80017e8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80017ac:	bf00      	nop
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f7      	beq.n	80017ae <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017d2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80017d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f383 8810 	msr	PRIMASK, r3
}
 80017e6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	22ff      	movs	r2, #255	; 0xff
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80017f2:	bf00      	nop
}
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000240 	.word	0x20000240
 8001800:	2000012c 	.word	0x2000012c
 8001804:	2000009c 	.word	0x2000009c
 8001808:	20000134 	.word	0x20000134
 800180c:	58000800 	.word	0x58000800

08001810 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800181c:	4a64      	ldr	r2, [pc, #400]	; (80019b0 <HW_TS_Init+0x1a0>)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HW_TS_Init+0x1a0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	22ca      	movs	r2, #202	; 0xca
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
 800182c:	4b60      	ldr	r3, [pc, #384]	; (80019b0 <HW_TS_Init+0x1a0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2253      	movs	r2, #83	; 0x53
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001836:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HW_TS_Init+0x1a4>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	4a5e      	ldr	r2, [pc, #376]	; (80019b4 <HW_TS_Init+0x1a4>)
 800183c:	f043 0320 	orr.w	r3, r3, #32
 8001840:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001842:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <HW_TS_Init+0x1a4>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f1c3 0304 	rsb	r3, r3, #4
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <HW_TS_Init+0x1a8>)
 8001856:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001858:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <HW_TS_Init+0x1a4>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001860:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001864:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	fa92 f2a2 	rbit	r2, r2
 800186c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	2a00      	cmp	r2, #0
 8001876:	d101      	bne.n	800187c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001878:	2220      	movs	r2, #32
 800187a:	e003      	b.n	8001884 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	fab2 f282 	clz	r2, r2
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	40d3      	lsrs	r3, r2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	3301      	adds	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b4b      	ldr	r3, [pc, #300]	; (80019bc <HW_TS_Init+0x1ac>)
 800188e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001890:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <HW_TS_Init+0x1a4>)
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	b29b      	uxth	r3, r3
 8001896:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800189a:	b29b      	uxth	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HW_TS_Init+0x1b0>)
 80018a2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <HW_TS_Init+0x1b0>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	4a44      	ldr	r2, [pc, #272]	; (80019bc <HW_TS_Init+0x1ac>)
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018b6:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <HW_TS_Init+0x1a8>)
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	40d3      	lsrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d904      	bls.n	80018d2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80018c8:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <HW_TS_Init+0x1b4>)
 80018ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ce:	801a      	strh	r2, [r3, #0]
 80018d0:	e003      	b.n	80018da <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HW_TS_Init+0x1b4>)
 80018d8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80018da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018de:	f7ff fb81 	bl	8000fe4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80018e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018e6:	f7ff fb69 	bl	8000fbc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d143      	bne.n	8001978 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HW_TS_Init+0x1b8>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HW_TS_Init+0x1bc>)
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80018fe:	2300      	movs	r3, #0
 8001900:	77fb      	strb	r3, [r7, #31]
 8001902:	e00c      	b.n	800191e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001904:	7ffa      	ldrb	r2, [r7, #31]
 8001906:	4932      	ldr	r1, [pc, #200]	; (80019d0 <HW_TS_Init+0x1c0>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	330c      	adds	r3, #12
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	3301      	adds	r3, #1
 800191c:	77fb      	strb	r3, [r7, #31]
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d9ef      	bls.n	8001904 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HW_TS_Init+0x1c4>)
 8001926:	2206      	movs	r2, #6
 8001928:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HW_TS_Init+0x1a0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HW_TS_Init+0x1a0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800193c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HW_TS_Init+0x1a0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HW_TS_Init+0x1a0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001952:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HW_TS_Init+0x1c8>)
 8001956:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800195a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800195c:	2003      	movs	r0, #3
 800195e:	f002 ff32 	bl	80047c6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HW_TS_Init+0x1a0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HW_TS_Init+0x1a0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	e00a      	b.n	800198e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HW_TS_Init+0x1a0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001988:	2003      	movs	r0, #3
 800198a:	f002 ff0e 	bl	80047aa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HW_TS_Init+0x1a0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001998:	2200      	movs	r2, #0
 800199a:	2103      	movs	r1, #3
 800199c:	2003      	movs	r0, #3
 800199e:	f002 fec2 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019a2:	2003      	movs	r0, #3
 80019a4:	f002 fed9 	bl	800475a <HAL_NVIC_EnableIRQ>

  return;
 80019a8:	bf00      	nop
}
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000240 	.word	0x20000240
 80019b4:	40002800 	.word	0x40002800
 80019b8:	20000244 	.word	0x20000244
 80019bc:	20000245 	.word	0x20000245
 80019c0:	20000246 	.word	0x20000246
 80019c4:	20000248 	.word	0x20000248
 80019c8:	20000134 	.word	0x20000134
 80019cc:	20000130 	.word	0x20000130
 80019d0:	2000009c 	.word	0x2000009c
 80019d4:	2000012c 	.word	0x2000012c
 80019d8:	58000800 	.word	0x58000800

080019dc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80019dc:	b480      	push	{r7}
 80019de:	b08b      	sub	sp, #44	; 0x2c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019f2:	f3ef 8310 	mrs	r3, PRIMASK
 80019f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80019f8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001a00:	e004      	b.n	8001a0c <HW_TS_Create+0x30>
  {
    loop++;
 8001a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a06:	3301      	adds	r3, #1
 8001a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d80c      	bhi.n	8001a2e <HW_TS_Create+0x52>
 8001a14:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a18:	492c      	ldr	r1, [pc, #176]	; (8001acc <HW_TS_Create+0xf0>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	330c      	adds	r3, #12
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e9      	bne.n	8001a02 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d038      	beq.n	8001aa8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001a36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a3a:	4924      	ldr	r1, [pc, #144]	; (8001acc <HW_TS_Create+0xf0>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	330c      	adds	r3, #12
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f383 8810 	msr	PRIMASK, r3
}
 8001a56:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001a58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a5c:	491b      	ldr	r1, [pc, #108]	; (8001acc <HW_TS_Create+0xf0>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	3310      	adds	r3, #16
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001a6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a72:	4916      	ldr	r1, [pc, #88]	; (8001acc <HW_TS_Create+0xf0>)
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	330d      	adds	r3, #13
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001a84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a88:	4910      	ldr	r1, [pc, #64]	; (8001acc <HW_TS_Create+0xf0>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a9e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aa6:	e008      	b.n	8001aba <HW_TS_Create+0xde>
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f383 8810 	msr	PRIMASK, r3
}
 8001ab2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	372c      	adds	r7, #44	; 0x2c
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000009c 	.word	0x2000009c

08001ad0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ada:	f3ef 8310 	mrs	r3, PRIMASK
 8001ade:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f002 fe44 	bl	8004776 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	22ca      	movs	r2, #202	; 0xca
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2253      	movs	r2, #83	; 0x53
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b02:	79fa      	ldrb	r2, [r7, #7]
 8001b04:	4933      	ldr	r1, [pc, #204]	; (8001bd4 <HW_TS_Stop+0x104>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	330c      	adds	r3, #12
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d148      	bne.n	8001bac <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fbe2 	bl	80012e8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HW_TS_Stop+0x108>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	2b06      	cmp	r3, #6
 8001b2e:	d135      	bne.n	8001b9c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HW_TS_Stop+0x10c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3c:	d108      	bne.n	8001b50 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001b3e:	bf00      	nop
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f7      	bne.n	8001b40 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b62:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001b64:	bf00      	nop
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f7      	beq.n	8001b66 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b8a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HW_TS_Stop+0x110>)
 8001b8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b92:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b94:	2003      	movs	r0, #3
 8001b96:	f002 fe16 	bl	80047c6 <HAL_NVIC_ClearPendingIRQ>
 8001b9a:	e007      	b.n	8001bac <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HW_TS_Stop+0x114>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	7cfa      	ldrb	r2, [r7, #19]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001ba8:	f7ff fcc0 	bl	800152c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HW_TS_Stop+0x100>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	22ff      	movs	r2, #255	; 0xff
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f002 fdcf 	bl	800475a <HAL_NVIC_EnableIRQ>
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f383 8810 	msr	PRIMASK, r3
}
 8001bc6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001bc8:	bf00      	nop
}
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000240 	.word	0x20000240
 8001bd4:	2000009c 	.word	0x2000009c
 8001bd8:	2000012c 	.word	0x2000012c
 8001bdc:	40002800 	.word	0x40002800
 8001be0:	58000800 	.word	0x58000800
 8001be4:	2000012d 	.word	0x2000012d

08001be8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	493c      	ldr	r1, [pc, #240]	; (8001ce8 <HW_TS_Start+0x100>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	330c      	adds	r3, #12
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d103      	bne.n	8001c14 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff5e 	bl	8001ad0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c14:	f3ef 8310 	mrs	r3, PRIMASK
 8001c18:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1e:	b672      	cpsid	i
}
 8001c20:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c22:	2003      	movs	r0, #3
 8001c24:	f002 fda7 	bl	8004776 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HW_TS_Start+0x104>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	22ca      	movs	r2, #202	; 0xca
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HW_TS_Start+0x104>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2253      	movs	r2, #83	; 0x53
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001c3c:	79fa      	ldrb	r2, [r7, #7]
 8001c3e:	492a      	ldr	r1, [pc, #168]	; (8001ce8 <HW_TS_Start+0x100>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	4925      	ldr	r1, [pc, #148]	; (8001ce8 <HW_TS_Start+0x100>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3308      	adds	r3, #8
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	4920      	ldr	r1, [pc, #128]	; (8001ce8 <HW_TS_Start+0x100>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	3304      	adds	r3, #4
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fa8a 	bl	8001194 <linkTimer>
 8001c80:	4603      	mov	r3, r0
 8001c82:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HW_TS_Start+0x108>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HW_TS_Start+0x10c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	7c7a      	ldrb	r2, [r7, #17]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d002      	beq.n	8001c9c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001c96:	f7ff fc49 	bl	800152c <RescheduleTimerList>
 8001c9a:	e013      	b.n	8001cc4 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c9c:	79fa      	ldrb	r2, [r7, #7]
 8001c9e:	4912      	ldr	r1, [pc, #72]	; (8001ce8 <HW_TS_Start+0x100>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	3308      	adds	r3, #8
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	8a7b      	ldrh	r3, [r7, #18]
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	1ac9      	subs	r1, r1, r3
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <HW_TS_Start+0x100>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4403      	add	r3, r0
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HW_TS_Start+0x104>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001cce:	2003      	movs	r0, #3
 8001cd0:	f002 fd43 	bl	800475a <HAL_NVIC_EnableIRQ>
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f383 8810 	msr	PRIMASK, r3
}
 8001cde:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ce0:	bf00      	nop
}
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000009c 	.word	0x2000009c
 8001cec:	20000240 	.word	0x20000240
 8001cf0:	2000012c 	.word	0x2000012c
 8001cf4:	2000012d 	.word	0x2000012d

08001cf8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	460b      	mov	r3, r1
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4798      	blx	r3

  return;
 8001d0a:	bf00      	nop
}
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	4613      	mov	r3, r2
 8001d24:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10e      	bne.n	8001d52 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HW_UART_Transmit_DMA+0x80>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HW_UART_Transmit_DMA+0x84>)
 8001d3c:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HW_UART_Transmit_DMA+0x88>)
 8001d3e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	4814      	ldr	r0, [pc, #80]	; (8001d98 <HW_UART_Transmit_DMA+0x84>)
 8001d48:	f005 fb24 	bl	8007394 <HAL_UART_Transmit_DMA>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	75fb      	strb	r3, [r7, #23]
            break;
 8001d50:	e000      	b.n	8001d54 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001d52:	bf00      	nop
    }

    switch (hal_status)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d816      	bhi.n	8001d88 <HW_UART_Transmit_DMA+0x74>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HW_UART_Transmit_DMA+0x4c>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d77 	.word	0x08001d77
 8001d68:	08001d7d 	.word	0x08001d7d
 8001d6c:	08001d83 	.word	0x08001d83
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001d70:	2300      	movs	r3, #0
 8001d72:	75bb      	strb	r3, [r7, #22]
            break;
 8001d74:	e009      	b.n	8001d8a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75bb      	strb	r3, [r7, #22]
            break;
 8001d7a:	e006      	b.n	8001d8a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	75bb      	strb	r3, [r7, #22]
            break;
 8001d80:	e003      	b.n	8001d8a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001d82:	2303      	movs	r3, #3
 8001d84:	75bb      	strb	r3, [r7, #22]
            break;
 8001d86:	e000      	b.n	8001d8a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001d88:	bf00      	nop
    }

    return hw_status;
 8001d8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000024c 	.word	0x2000024c
 8001d98:	2000031c 	.word	0x2000031c
 8001d9c:	40013800 	.word	0x40013800

08001da0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_UART_TxCpltCallback+0x34>)
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d107      	bne.n	8001dc4 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_UART_TxCpltCallback+0x38>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_UART_TxCpltCallback+0x38>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4798      	blx	r3
            }
            break;
 8001dc2:	e001      	b.n	8001dc8 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001dc4:	bf00      	nop
 8001dc6:	e000      	b.n	8001dca <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001dc8:	bf00      	nop
    }

    return;
 8001dca:	bf00      	nop
}
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	2000024c 	.word	0x2000024c

08001ddc <LL_RCC_LSE_SetDriveCapability>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f023 0218 	bic.w	r2, r3, #24
 8001df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_AHB1_GRP1_EnableClock>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_AHB2_GRP1_EnableClock>:
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e70:	f002 fa80 	bl	8004374 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001e74:	f7fe fe06 	bl	8000a84 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e78:	f000 f812 	bl	8001ea0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e7c:	f000 f86c 	bl	8001f58 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001e80:	f000 f88a 	bl	8001f98 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e84:	f000 f943 	bl	800210e <MX_GPIO_Init>
  MX_DMA_Init();
 8001e88:	f000 f924 	bl	80020d4 <MX_DMA_Init>
  MX_RF_Init();
 8001e8c:	f000 f8e6 	bl	800205c <MX_RF_Init>
  MX_RTC_Init();
 8001e90:	f000 f8ec 	bl	800206c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001e94:	f7fe fe04 	bl	8000aa0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001e98:	f7ff f833 	bl	8000f02 <MX_APPE_Process>
 8001e9c:	e7fc      	b.n	8001e98 <main+0x2c>
	...

08001ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b09a      	sub	sp, #104	; 0x68
 8001ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	2248      	movs	r2, #72	; 0x48
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f009 fd5a 	bl	800b968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ec6:	f003 fa49 	bl	800535c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff ff86 	bl	8001ddc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <SystemClock_Config+0xb4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <SystemClock_Config+0xb4>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <SystemClock_Config+0xb4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001eec:	2307      	movs	r3, #7
 8001eee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f00:	2340      	movs	r3, #64	; 0x40
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fdb9 	bl	8005a84 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001f18:	f000 f906 	bl	8002128 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001f1c:	236f      	movs	r3, #111	; 0x6f
 8001f1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f20:	2302      	movs	r3, #2
 8001f22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f004 f915 	bl	800616c <HAL_RCC_ClockConfig>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001f48:	f000 f8ee 	bl	8002128 <Error_Handler>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3768      	adds	r7, #104	; 0x68
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58000400 	.word	0x58000400

08001f58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b094      	sub	sp, #80	; 0x50
 8001f5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5e:	463b      	mov	r3, r7
 8001f60:	2250      	movs	r2, #80	; 0x50
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f009 fcff 	bl	800b968 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001f6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f6e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001f70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001f76:	2302      	movs	r3, #2
 8001f78:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	463b      	mov	r3, r7
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 fd30 	bl	80069e6 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001f8c:	f000 f8cc 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001f90:	bf00      	nop
 8001f92:	3750      	adds	r7, #80	; 0x50
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_IPCC_Init+0x20>)
 8001f9e:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <MX_IPCC_Init+0x24>)
 8001fa0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_IPCC_Init+0x20>)
 8001fa4:	f003 f954 	bl	8005250 <HAL_IPCC_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001fae:	f000 f8bb 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000250 	.word	0x20000250
 8001fbc:	58000c00 	.word	0x58000c00

08001fc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001fc6:	4a24      	ldr	r2, [pc, #144]	; (8002058 <MX_USART1_UART_Init+0x98>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001ff2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ff6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800200a:	4812      	ldr	r0, [pc, #72]	; (8002054 <MX_USART1_UART_Init+0x94>)
 800200c:	f005 f972 	bl	80072f4 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002016:	f000 f887 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201a:	2100      	movs	r1, #0
 800201c:	480d      	ldr	r0, [pc, #52]	; (8002054 <MX_USART1_UART_Init+0x94>)
 800201e:	f006 fb38 	bl	8008692 <HAL_UARTEx_SetTxFifoThreshold>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002028:	f000 f87e 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202c:	2100      	movs	r1, #0
 800202e:	4809      	ldr	r0, [pc, #36]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8002030:	f006 fb6d 	bl	800870e <HAL_UARTEx_SetRxFifoThreshold>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800203a:	f000 f875 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_USART1_UART_Init+0x94>)
 8002040:	f006 faee 	bl	8008620 <HAL_UARTEx_DisableFifoMode>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800204a:	f000 f86d 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000031c 	.word	0x2000031c
 8002058:	40013800 	.word	0x40013800

0800205c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_RTC_Init+0x60>)
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <MX_RTC_Init+0x64>)
 8002074:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <MX_RTC_Init+0x60>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <MX_RTC_Init+0x60>)
 800207e:	220f      	movs	r2, #15
 8002080:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <MX_RTC_Init+0x60>)
 8002084:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002088:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_RTC_Init+0x60>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_RTC_Init+0x60>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <MX_RTC_Init+0x60>)
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_RTC_Init+0x60>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020a2:	480a      	ldr	r0, [pc, #40]	; (80020cc <MX_RTC_Init+0x60>)
 80020a4:	f004 ff26 	bl	8006ef4 <HAL_RTC_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80020ae:	f000 f83b 	bl	8002128 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_RTC_Init+0x60>)
 80020b8:	f005 f80a 	bl	80070d0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80020c2:	f000 f831 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000046c 	.word	0x2000046c
 80020d0:	40002800 	.word	0x40002800

080020d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020d8:	2004      	movs	r0, #4
 80020da:	f7ff fe95 	bl	8001e08 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020de:	2002      	movs	r0, #2
 80020e0:	f7ff fe92 	bl	8001e08 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff fe8f 	bl	8001e08 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	210f      	movs	r1, #15
 80020ee:	200e      	movs	r0, #14
 80020f0:	f002 fb19 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80020f4:	200e      	movs	r0, #14
 80020f6:	f002 fb30 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	210f      	movs	r1, #15
 80020fe:	203a      	movs	r0, #58	; 0x3a
 8002100:	f002 fb11 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002104:	203a      	movs	r0, #58	; 0x3a
 8002106:	f002 fb28 	bl	800475a <HAL_NVIC_EnableIRQ>

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}

0800210e <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	2004      	movs	r0, #4
 8002114:	f7ff fe91 	bl	8001e3a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff fe8e 	bl	8001e3a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2002      	movs	r0, #2
 8002120:	f7ff fe8b 	bl	8001e3a <LL_AHB2_GRP1_EnableClock>

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_RCC_EnableRTC>:
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_AHB2_GRP1_EnableClock>:
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800217c:	68fb      	ldr	r3, [r7, #12]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_AHB3_GRP1_EnableClock>:
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4313      	orrs	r3, r2
 80021a0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_APB1_GRP1_EnableClock>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_APB1_GRP2_EnableClock>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4013      	ands	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_APB2_GRP1_EnableClock>:
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800222e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4313      	orrs	r3, r2
 8002236:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002256:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800225a:	f7ff ff96 	bl	800218a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	202e      	movs	r0, #46	; 0x2e
 8002264:	f002 fa5f 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002268:	202e      	movs	r0, #46	; 0x2e
 800226a:	f002 fa76 	bl	800475a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_IPCC_MspInit+0x44>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d113      	bne.n	80022ae <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002286:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800228a:	f7ff ff7e 	bl	800218a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	202c      	movs	r0, #44	; 0x2c
 8002294:	f002 fa47 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002298:	202c      	movs	r0, #44	; 0x2c
 800229a:	f002 fa5e 	bl	800475a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	202d      	movs	r0, #45	; 0x2d
 80022a4:	f002 fa3f 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80022a8:	202d      	movs	r0, #45	; 0x2d
 80022aa:	f002 fa56 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	58000c00 	.word	0x58000c00

080022bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b0a0      	sub	sp, #128	; 0x80
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	2250      	movs	r2, #80	; 0x50
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f009 fb43 	bl	800b968 <memset>
  if(huart->Instance==LPUART1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a68      	ldr	r2, [pc, #416]	; (8002488 <HAL_UART_MspInit+0x1cc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d16e      	bne.n	80023ca <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022ec:	2302      	movs	r3, #2
 80022ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fb74 	bl	80069e6 <HAL_RCCEx_PeriphCLKConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002304:	f7ff ff10 	bl	8002128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002308:	2001      	movs	r0, #1
 800230a:	f7ff ff70 	bl	80021ee <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff ff22 	bl	8002158 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002314:	230c      	movs	r3, #12
 8002316:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002324:	2308      	movs	r3, #8
 8002326:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800232c:	4619      	mov	r1, r3
 800232e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002332:	f002 fdc9 	bl	8004ec8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002336:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_UART_MspInit+0x1d0>)
 8002338:	4a55      	ldr	r2, [pc, #340]	; (8002490 <HAL_UART_MspInit+0x1d4>)
 800233a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800233c:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_UART_MspInit+0x1d0>)
 800233e:	2211      	movs	r2, #17
 8002340:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002342:	4b52      	ldr	r3, [pc, #328]	; (800248c <HAL_UART_MspInit+0x1d0>)
 8002344:	2210      	movs	r2, #16
 8002346:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002348:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_UART_MspInit+0x1d0>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800234e:	4b4f      	ldr	r3, [pc, #316]	; (800248c <HAL_UART_MspInit+0x1d0>)
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002354:	4b4d      	ldr	r3, [pc, #308]	; (800248c <HAL_UART_MspInit+0x1d0>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_UART_MspInit+0x1d0>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002360:	4b4a      	ldr	r3, [pc, #296]	; (800248c <HAL_UART_MspInit+0x1d0>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_UART_MspInit+0x1d0>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800236c:	4847      	ldr	r0, [pc, #284]	; (800248c <HAL_UART_MspInit+0x1d0>)
 800236e:	f002 fa39 	bl	80047e4 <HAL_DMA_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002378:	f7ff fed6 	bl	8002128 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 800237c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002380:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002382:	2300      	movs	r3, #0
 8002384:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002396:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800239a:	4619      	mov	r1, r3
 800239c:	483b      	ldr	r0, [pc, #236]	; (800248c <HAL_UART_MspInit+0x1d0>)
 800239e:	f002 fd53 	bl	8004e48 <HAL_DMAEx_ConfigMuxSync>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80023a8:	f7ff febe 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_UART_MspInit+0x1d0>)
 80023b0:	679a      	str	r2, [r3, #120]	; 0x78
 80023b2:	4a36      	ldr	r2, [pc, #216]	; (800248c <HAL_UART_MspInit+0x1d0>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	2025      	movs	r0, #37	; 0x25
 80023be:	f002 f9b2 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80023c2:	2025      	movs	r0, #37	; 0x25
 80023c4:	f002 f9c9 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023c8:	e05a      	b.n	8002480 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a31      	ldr	r2, [pc, #196]	; (8002494 <HAL_UART_MspInit+0x1d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d155      	bne.n	8002480 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 fb00 	bl	80069e6 <HAL_RCCEx_PeriphCLKConfig>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80023ec:	f7ff fe9c 	bl	8002128 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023f4:	f7ff ff14 	bl	8002220 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f8:	2002      	movs	r0, #2
 80023fa:	f7ff fead 	bl	8002158 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023fe:	23c0      	movs	r3, #192	; 0xc0
 8002400:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002406:	2301      	movs	r3, #1
 8002408:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800240e:	2307      	movs	r3, #7
 8002410:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002412:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002416:	4619      	mov	r1, r3
 8002418:	481f      	ldr	r0, [pc, #124]	; (8002498 <HAL_UART_MspInit+0x1dc>)
 800241a:	f002 fd55 	bl	8004ec8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002420:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_UART_MspInit+0x1e4>)
 8002422:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002426:	220f      	movs	r2, #15
 8002428:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_UART_MspInit+0x1e0>)
 800242c:	2210      	movs	r2, #16
 800242e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_UART_MspInit+0x1e0>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_UART_MspInit+0x1e0>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002454:	4811      	ldr	r0, [pc, #68]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002456:	f002 f9c5 	bl	80047e4 <HAL_DMA_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002460:	f7ff fe62 	bl	8002128 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0d      	ldr	r2, [pc, #52]	; (800249c <HAL_UART_MspInit+0x1e0>)
 8002468:	679a      	str	r2, [r3, #120]	; 0x78
 800246a:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_UART_MspInit+0x1e0>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	2024      	movs	r0, #36	; 0x24
 8002476:	f002 f956 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800247a:	2024      	movs	r0, #36	; 0x24
 800247c:	f002 f96d 	bl	800475a <HAL_NVIC_EnableIRQ>
}
 8002480:	bf00      	nop
 8002482:	3780      	adds	r7, #128	; 0x80
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40008000 	.word	0x40008000
 800248c:	200003ac 	.word	0x200003ac
 8002490:	40020044 	.word	0x40020044
 8002494:	40013800 	.word	0x40013800
 8002498:	48000400 	.word	0x48000400
 800249c:	2000040c 	.word	0x2000040c
 80024a0:	40020444 	.word	0x40020444

080024a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b096      	sub	sp, #88	; 0x58
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	2250      	movs	r2, #80	; 0x50
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f009 fa57 	bl	800b968 <memset>
  if(hrtc->Instance==RTC)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_RTC_MspInit+0x6c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d120      	bne.n	8002506 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	4618      	mov	r0, r3
 80024d6:	f004 fa86 	bl	80069e6 <HAL_RCCEx_PeriphCLKConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80024e0:	f7ff fe22 	bl	8002128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024e4:	f7ff fe27 	bl	8002136 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80024e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024ec:	f7ff fe66 	bl	80021bc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	2003      	movs	r0, #3
 80024f6:	f002 f916 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80024fa:	2003      	movs	r0, #3
 80024fc:	f002 f92d 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f004 fea1 	bl	8007248 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002506:	bf00      	nop
 8002508:	3758      	adds	r7, #88	; 0x58
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40002800 	.word	0x40002800

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <MemManage_Handler+0x4>

0800252e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <UsageFault_Handler+0x4>

0800253a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002568:	f001 ff5e 	bl	8004428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002574:	f7ff f878 	bl	8001668 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA1_Channel4_IRQHandler+0x10>)
 8002582:	f002 fb10 	bl	8004ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200003ac 	.word	0x200003ac

08002590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <USART1_IRQHandler+0x10>)
 8002596:	f004 ff8f 	bl	80074b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000031c 	.word	0x2000031c

080025a4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <LPUART1_IRQHandler+0x10>)
 80025aa:	f004 ff85 	bl	80074b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000028c 	.word	0x2000028c

080025b8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80025bc:	f001 fbf2 	bl	8003da4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80025c8:	f001 fc24 	bl	8003e14 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80025d4:	f002 fe18 	bl	8005208 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <DMA2_Channel4_IRQHandler+0x10>)
 80025e2:	f002 fae0 	bl	8004ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000040c 	.word	0x2000040c

080025f0 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80025f4:	2010      	movs	r0, #16
 80025f6:	f002 fdef 	bl	80051d8 <HAL_GPIO_EXTI_IRQHandler>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}

080025fe <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002602:	2001      	movs	r0, #1
 8002604:	f002 fde8 	bl	80051d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002610:	2002      	movs	r0, #2
 8002612:	f002 fde1 	bl	80051d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}

0800261a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e00a      	b.n	8002642 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800262c:	f3af 8000 	nop.w
 8002630:	4601      	mov	r1, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	60ba      	str	r2, [r7, #8]
 8002638:	b2ca      	uxtb	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	dbf0      	blt.n	800262c <_read+0x12>
	}

return len;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	return -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267c:	605a      	str	r2, [r3, #4]
	return 0;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_isatty>:

int _isatty(int file)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
	return 0;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <_sbrk+0x5c>)
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <_sbrk+0x60>)
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <_sbrk+0x64>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <_sbrk+0x64>)
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <_sbrk+0x68>)
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d207      	bcs.n	80026fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026ec:	f009 f904 	bl	800b8f8 <__errno>
 80026f0:	4603      	mov	r3, r0
 80026f2:	220c      	movs	r2, #12
 80026f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	e009      	b.n	8002710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <_sbrk+0x64>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <_sbrk+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <_sbrk+0x64>)
 800270c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20030000 	.word	0x20030000
 800271c:	00001000 	.word	0x00001000
 8002720:	20000490 	.word	0x20000490
 8002724:	20001600 	.word	0x20001600

08002728 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <LL_FLASH_GetUDN+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	1fff7580 	.word	0x1fff7580

08002740 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <LL_FLASH_GetDeviceID+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	1fff7584 	.word	0x1fff7584

08002758 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <LL_FLASH_GetSTCompanyID+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0a1b      	lsrs	r3, r3, #8
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	1fff7584 	.word	0x1fff7584

08002770 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	b090      	sub	sp, #64	; 0x40
 8002774:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002776:	2392      	movs	r3, #146	; 0x92
 8002778:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */

  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <APP_BLE_Init+0xd4>)
 800277e:	1d3c      	adds	r4, r7, #4
 8002780:	461d      	mov	r5, r3
 8002782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002792:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002796:	f000 fa79 	bl	8002c8c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800279a:	2101      	movs	r1, #1
 800279c:	2002      	movs	r0, #2
 800279e:	f008 fe3b 	bl	800b418 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80027a2:	4a29      	ldr	r2, [pc, #164]	; (8002848 <APP_BLE_Init+0xd8>)
 80027a4:	2100      	movs	r1, #0
 80027a6:	2010      	movs	r0, #16
 80027a8:	f008 ff64 	bl	800b674 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4618      	mov	r0, r3
 80027b0:	f007 fbb2 	bl	8009f18 <SHCI_C2_BLE_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80027ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80027c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80027c6:	4619      	mov	r1, r3
 80027c8:	4820      	ldr	r0, [pc, #128]	; (800284c <APP_BLE_Init+0xdc>)
 80027ca:	f009 f8d5 	bl	800b978 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80027ce:	f7ff fcab 	bl	8002128 <Error_Handler>
 80027d2:	e002      	b.n	80027da <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80027d4:	481e      	ldr	r0, [pc, #120]	; (8002850 <APP_BLE_Init+0xe0>)
 80027d6:	f009 f8cf 	bl	800b978 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80027da:	f000 fa6d 	bl	8002cb8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80027de:	f008 faff 	bl	800ade0 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <APP_BLE_Init+0xe4>)
 80027e4:	2100      	movs	r1, #0
 80027e6:	2001      	movs	r0, #1
 80027e8:	f008 ff44 	bl	800b674 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 80027ec:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <APP_BLE_Init+0xe8>)
 80027ee:	2100      	movs	r1, #0
 80027f0:	2002      	movs	r0, #2
 80027f2:	f008 ff3f 	bl	800b674 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <APP_BLE_Init+0xec>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 80027fe:	2020      	movs	r0, #32
 8002800:	f006 ffb9 	bl	8009776 <aci_hal_set_radio_activity_mask>
 8002804:	4603      	mov	r3, r0
 8002806:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800280a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <APP_BLE_Init+0xb0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002816:	4619      	mov	r1, r3
 8002818:	4811      	ldr	r0, [pc, #68]	; (8002860 <APP_BLE_Init+0xf0>)
 800281a:	f009 f8ad 	bl	800b978 <iprintf>
 800281e:	e002      	b.n	8002826 <APP_BLE_Init+0xb6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8002820:	4810      	ldr	r0, [pc, #64]	; (8002864 <APP_BLE_Init+0xf4>)
 8002822:	f009 f8a9 	bl	800b978 <iprintf>
  }
  APP_DBG_MSG("\n");
 8002826:	200a      	movs	r0, #10
 8002828:	f009 f8be 	bl	800b9a8 <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800282c:	f000 fcdc 	bl	80031e8 <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <APP_BLE_Init+0xf8>)
 8002832:	2200      	movs	r2, #0
 8002834:	490d      	ldr	r1, [pc, #52]	; (800286c <APP_BLE_Init+0xfc>)
 8002836:	2000      	movs	r0, #0
 8002838:	f7ff f8d0 	bl	80019dc <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 800283c:	bf00      	nop
}
 800283e:	3740      	adds	r7, #64	; 0x40
 8002840:	46bd      	mov	sp, r7
 8002842:	bdb0      	pop	{r4, r5, r7, pc}
 8002844:	0800ce6c 	.word	0x0800ce6c
 8002848:	08009b95 	.word	0x08009b95
 800284c:	0800cd90 	.word	0x0800cd90
 8002850:	0800cdc8 	.word	0x0800cdc8
 8002854:	08002fc5 	.word	0x08002fc5
 8002858:	08003021 	.word	0x08003021
 800285c:	20000138 	.word	0x20000138
 8002860:	0800cdf0 	.word	0x0800cdf0
 8002864:	0800ce34 	.word	0x0800ce34
 8002868:	0800309d 	.word	0x0800309d
 800286c:	200001b9 	.word	0x200001b9

08002870 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b097      	sub	sp, #92	; 0x5c
 8002874:	af06      	add	r7, sp, #24
 8002876:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3301      	adds	r3, #1
 800287c:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	3302      	adds	r3, #2
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002888:	2392      	movs	r3, #146	; 0x92
 800288a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif

  switch (event_pckt->evt)
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2bff      	cmp	r3, #255	; 0xff
 8002894:	d009      	beq.n	80028aa <SVCCTL_App_Notification+0x3a>
 8002896:	2bff      	cmp	r3, #255	; 0xff
 8002898:	f300 81b2 	bgt.w	8002c00 <SVCCTL_App_Notification+0x390>
 800289c:	2b05      	cmp	r3, #5
 800289e:	f000 80cb 	beq.w	8002a38 <SVCCTL_App_Notification+0x1c8>
 80028a2:	2b3e      	cmp	r3, #62	; 0x3e
 80028a4:	f000 80e6 	beq.w	8002a74 <SVCCTL_App_Notification+0x204>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 80028a8:	e1aa      	b.n	8002c00 <SVCCTL_App_Notification+0x390>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80028aa:	4ba4      	ldr	r3, [pc, #656]	; (8002b3c <SVCCTL_App_Notification+0x2cc>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	3302      	adds	r3, #2
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        switch (blecore_evt->ecode)
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f640 0202 	movw	r2, #2050	; 0x802
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d030      	beq.n	8002926 <SVCCTL_App_Notification+0xb6>
 80028c4:	f640 0202 	movw	r2, #2050	; 0x802
 80028c8:	4293      	cmp	r3, r2
 80028ca:	f300 80b1 	bgt.w	8002a30 <SVCCTL_App_Notification+0x1c0>
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	f000 80a3 	beq.w	8002a1a <SVCCTL_App_Notification+0x1aa>
 80028d4:	f240 4207 	movw	r2, #1031	; 0x407
 80028d8:	4293      	cmp	r3, r2
 80028da:	f040 80a9 	bne.w	8002a30 <SVCCTL_App_Notification+0x1c0>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	3302      	adds	r3, #2
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	f040 80a3 	bne.w	8002a34 <SVCCTL_App_Notification+0x1c4>
                  && gap_evt_proc_complete->Status == 0x00)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 809e 	bne.w	8002a34 <SVCCTL_App_Notification+0x1c4>
                BSP_LED_Off(LED_BLUE);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f001 fc3b 	bl	8004174 <BSP_LED_Off>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 80028fe:	4890      	ldr	r0, [pc, #576]	; (8002b40 <SVCCTL_App_Notification+0x2d0>)
 8002900:	f009 f83a 	bl	800b978 <iprintf>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8002904:	4b8f      	ldr	r3, [pc, #572]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002906:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800290a:	2b01      	cmp	r3, #1
 800290c:	f040 8092 	bne.w	8002a34 <SVCCTL_App_Notification+0x1c4>
 8002910:	4b8c      	ldr	r3, [pc, #560]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002912:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002916:	2b06      	cmp	r3, #6
 8002918:	f000 808c 	beq.w	8002a34 <SVCCTL_App_Notification+0x1c4>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800291c:	2100      	movs	r1, #0
 800291e:	2002      	movs	r0, #2
 8002920:	f008 feca 	bl	800b6b8 <UTIL_SEQ_SetTask>
            break;
 8002924:	e086      	b.n	8002a34 <SVCCTL_App_Notification+0x1c4>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	3302      	adds	r3, #2
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
              ret = aci_hal_set_radio_activity_mask(0x0000);
 800292c:	2000      	movs	r0, #0
 800292e:	f006 ff22 	bl	8009776 <aci_hal_set_radio_activity_mask>
 8002932:	4603      	mov	r3, r0
 8002934:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 8002938:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <SVCCTL_App_Notification+0xde>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002944:	4619      	mov	r1, r3
 8002946:	4880      	ldr	r0, [pc, #512]	; (8002b48 <SVCCTL_App_Notification+0x2d8>)
 8002948:	f009 f816 	bl	800b978 <iprintf>
 800294c:	e002      	b.n	8002954 <SVCCTL_App_Notification+0xe4>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800294e:	487f      	ldr	r0, [pc, #508]	; (8002b4c <SVCCTL_App_Notification+0x2dc>)
 8002950:	f009 f812 	bl	800b978 <iprintf>
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	789a      	ldrb	r2, [r3, #2]
 8002958:	4b7d      	ldr	r3, [pc, #500]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 800295a:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002962:	b29a      	uxth	r2, r3
 8002964:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 8002966:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 8002972:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800297a:	b29a      	uxth	r2, r3
 800297c:	4b74      	ldr	r3, [pc, #464]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 800297e:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b71      	ldr	r3, [pc, #452]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 800298a:	811a      	strh	r2, [r3, #8]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b6e      	ldr	r3, [pc, #440]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 8002996:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 800299a:	8ad8      	ldrh	r0, [r3, #22]
 800299c:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 800299e:	8899      	ldrh	r1, [r3, #4]
 80029a0:	4b6b      	ldr	r3, [pc, #428]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 80029a2:	88dc      	ldrh	r4, [r3, #6]
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 80029a6:	891d      	ldrh	r5, [r3, #8]
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 80029aa:	895b      	ldrh	r3, [r3, #10]
 80029ac:	4a68      	ldr	r2, [pc, #416]	; (8002b50 <SVCCTL_App_Notification+0x2e0>)
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	2601      	movs	r6, #1
 80029b2:	9604      	str	r6, [sp, #16]
 80029b4:	9203      	str	r2, [sp, #12]
 80029b6:	2210      	movs	r2, #16
 80029b8:	9202      	str	r2, [sp, #8]
 80029ba:	2210      	movs	r2, #16
 80029bc:	9201      	str	r2, [sp, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	462b      	mov	r3, r5
 80029c2:	4622      	mov	r2, r4
 80029c4:	f006 ff4f 	bl	8009866 <aci_l2cap_connection_parameter_update_resp>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if(ret != BLE_STATUS_SUCCESS)
 80029ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <SVCCTL_App_Notification+0x17a>
                APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 80029d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029da:	4619      	mov	r1, r3
 80029dc:	485d      	ldr	r0, [pc, #372]	; (8002b54 <SVCCTL_App_Notification+0x2e4>)
 80029de:	f008 ffcb 	bl	800b978 <iprintf>
                BSP_LED_On(LED_RED);
 80029e2:	2002      	movs	r0, #2
 80029e4:	f001 fbac 	bl	8004140 <BSP_LED_On>
 80029e8:	e002      	b.n	80029f0 <SVCCTL_App_Notification+0x180>
                APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 80029ea:	485b      	ldr	r0, [pc, #364]	; (8002b58 <SVCCTL_App_Notification+0x2e8>)
 80029ec:	f008 ffc4 	bl	800b978 <iprintf>
              ret = aci_hal_set_radio_activity_mask(0x0020);
 80029f0:	2020      	movs	r0, #32
 80029f2:	f006 fec0 	bl	8009776 <aci_hal_set_radio_activity_mask>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 80029fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d006      	beq.n	8002a12 <SVCCTL_App_Notification+0x1a2>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002a04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a08:	4619      	mov	r1, r3
 8002a0a:	484f      	ldr	r0, [pc, #316]	; (8002b48 <SVCCTL_App_Notification+0x2d8>)
 8002a0c:	f008 ffb4 	bl	800b978 <iprintf>
            break;
 8002a10:	e011      	b.n	8002a36 <SVCCTL_App_Notification+0x1c6>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8002a12:	484e      	ldr	r0, [pc, #312]	; (8002b4c <SVCCTL_App_Notification+0x2dc>)
 8002a14:	f008 ffb0 	bl	800b978 <iprintf>
            break;
 8002a18:	e00d      	b.n	8002a36 <SVCCTL_App_Notification+0x1c6>
              BSP_LED_On(LED_GREEN);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f001 fb90 	bl	8004140 <BSP_LED_On>
              HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8002a20:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002a22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a26:	210a      	movs	r1, #10
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f8dd 	bl	8001be8 <HW_TS_Start>
            break;
 8002a2e:	e002      	b.n	8002a36 <SVCCTL_App_Notification+0x1c6>
            break;
 8002a30:	bf00      	nop
 8002a32:	e0e8      	b.n	8002c06 <SVCCTL_App_Notification+0x396>
            break;
 8002a34:	bf00      	nop
      break;
 8002a36:	e0e6      	b.n	8002c06 <SVCCTL_App_Notification+0x396>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002a42:	8adb      	ldrh	r3, [r3, #22]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 80dd 	bne.w	8002c04 <SVCCTL_App_Notification+0x394>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002a50:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 8002a58:	4840      	ldr	r0, [pc, #256]	; (8002b5c <SVCCTL_App_Notification+0x2ec>)
 8002a5a:	f008 ff8d 	bl	800b978 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <SVCCTL_App_Notification+0x2cc>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002a64:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002a66:	8ada      	ldrh	r2, [r3, #22]
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <SVCCTL_App_Notification+0x2cc>)
 8002a6a:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 8002a6c:	4833      	ldr	r0, [pc, #204]	; (8002b3c <SVCCTL_App_Notification+0x2cc>)
 8002a6e:	f000 fc01 	bl	8003274 <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002a72:	e0c7      	b.n	8002c04 <SVCCTL_App_Notification+0x394>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	3302      	adds	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
        switch (meta_evt->subevent)
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d002      	beq.n	8002a88 <SVCCTL_App_Notification+0x218>
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d02f      	beq.n	8002ae6 <SVCCTL_App_Notification+0x276>
            break;
 8002a86:	e0ba      	b.n	8002bfe <SVCCTL_App_Notification+0x38e>
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002a98:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002a9c:	2206      	movs	r2, #6
 8002a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r** CONNECTION EVENT WITH SERVER \n\r");
 8002aa2:	482f      	ldr	r0, [pc, #188]	; (8002b60 <SVCCTL_App_Notification+0x2f0>)
 8002aa4:	f008 ff68 	bl	800b978 <iprintf>
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <SVCCTL_App_Notification+0x2cc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002ab0:	8ada      	ldrh	r2, [r3, #22]
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <SVCCTL_App_Notification+0x2cc>)
 8002ab4:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 8002ab6:	4821      	ldr	r0, [pc, #132]	; (8002b3c <SVCCTL_App_Notification+0x2cc>)
 8002ab8:	f000 fbdc 	bl	8003274 <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <SVCCTL_App_Notification+0x2d4>)
 8002abe:	8adb      	ldrh	r3, [r3, #22]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 fad7 	bl	8009074 <aci_gatt_disc_all_primary_services>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	72fb      	strb	r3, [r7, #11]
            if (result == BLE_STATUS_SUCCESS)
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <SVCCTL_App_Notification+0x26e>
              APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 8002ad0:	4824      	ldr	r0, [pc, #144]	; (8002b64 <SVCCTL_App_Notification+0x2f4>)
 8002ad2:	f008 ff51 	bl	800b978 <iprintf>
              APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 8002ad6:	4824      	ldr	r0, [pc, #144]	; (8002b68 <SVCCTL_App_Notification+0x2f8>)
 8002ad8:	f008 ff4e 	bl	800b978 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002adc:	e08f      	b.n	8002bfe <SVCCTL_App_Notification+0x38e>
              APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002ade:	4823      	ldr	r0, [pc, #140]	; (8002b6c <SVCCTL_App_Notification+0x2fc>)
 8002ae0:	f008 ff4a 	bl	800b978 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002ae4:	e08b      	b.n	8002bfe <SVCCTL_App_Notification+0x38e>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	76fb      	strb	r3, [r7, #27]
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	7a5b      	ldrb	r3, [r3, #9]
 8002af6:	76bb      	strb	r3, [r7, #26]
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3309      	adds	r3, #9
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
              k = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
              if (event_type == ADV_IND)
 8002b04:	7efb      	ldrb	r3, [r7, #27]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d178      	bne.n	8002bfc <SVCCTL_App_Notification+0x38c>
                while(k < event_data_size)
 8002b0a:	e073      	b.n	8002bf4 <SVCCTL_App_Notification+0x384>
                  adlength = adv_report_data[k];
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	74fb      	strb	r3, [r7, #19]
                  adtype = adv_report_data[k + 1];
 8002b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b18:	3301      	adds	r3, #1
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	74bb      	strb	r3, [r7, #18]
                  switch (adtype)
 8002b22:	7cbb      	ldrb	r3, [r7, #18]
 8002b24:	2bff      	cmp	r3, #255	; 0xff
 8002b26:	d023      	beq.n	8002b70 <SVCCTL_App_Notification+0x300>
 8002b28:	2bff      	cmp	r3, #255	; 0xff
 8002b2a:	dc59      	bgt.n	8002be0 <SVCCTL_App_Notification+0x370>
 8002b2c:	2b16      	cmp	r3, #22
 8002b2e:	d059      	beq.n	8002be4 <SVCCTL_App_Notification+0x374>
 8002b30:	2b16      	cmp	r3, #22
 8002b32:	dc55      	bgt.n	8002be0 <SVCCTL_App_Notification+0x370>
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d057      	beq.n	8002be8 <SVCCTL_App_Notification+0x378>
 8002b38:	2b0a      	cmp	r3, #10
                      break;
 8002b3a:	e056      	b.n	8002bea <SVCCTL_App_Notification+0x37a>
 8002b3c:	200004a4 	.word	0x200004a4
 8002b40:	0800cea4 	.word	0x0800cea4
 8002b44:	20000138 	.word	0x20000138
 8002b48:	0800cdf0 	.word	0x0800cdf0
 8002b4c:	0800ce34 	.word	0x0800ce34
 8002b50:	200004a8 	.word	0x200004a8
 8002b54:	0800ced4 	.word	0x0800ced4
 8002b58:	0800cf24 	.word	0x0800cf24
 8002b5c:	0800cf64 	.word	0x0800cf64
 8002b60:	0800cf90 	.word	0x0800cf90
 8002b64:	0800cfb8 	.word	0x0800cfb8
 8002b68:	0800cfec 	.word	0x0800cfec
 8002b6c:	0800d01c 	.word	0x0800d01c
                      if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d930      	bls.n	8002bd8 <SVCCTL_App_Notification+0x368>
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	3302      	adds	r3, #2
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d129      	bne.n	8002bd8 <SVCCTL_App_Notification+0x368>
                        APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 8002b84:	4822      	ldr	r0, [pc, #136]	; (8002c10 <SVCCTL_App_Notification+0x3a0>)
 8002b86:	f008 fef7 	bl	800b978 <iprintf>
                        switch (adv_report_data[k + 3])
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8c:	3303      	adds	r3, #3
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4413      	add	r3, r2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b83      	cmp	r3, #131	; 0x83
 8002b96:	d121      	bne.n	8002bdc <SVCCTL_App_Notification+0x36c>
                            APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 8002b98:	481e      	ldr	r0, [pc, #120]	; (8002c14 <SVCCTL_App_Notification+0x3a4>)
 8002b9a:	f008 feed 	bl	800b978 <iprintf>
                            BleApplicationContext.DeviceServerFound = 0x01;
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <SVCCTL_App_Notification+0x3a8>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                            SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	78da      	ldrb	r2, [r3, #3]
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <SVCCTL_App_Notification+0x3ac>)
 8002bac:	701a      	strb	r2, [r3, #0]
                            SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	791a      	ldrb	r2, [r3, #4]
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <SVCCTL_App_Notification+0x3ac>)
 8002bb4:	705a      	strb	r2, [r3, #1]
                            SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	795a      	ldrb	r2, [r3, #5]
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <SVCCTL_App_Notification+0x3ac>)
 8002bbc:	709a      	strb	r2, [r3, #2]
                            SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	799a      	ldrb	r2, [r3, #6]
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <SVCCTL_App_Notification+0x3ac>)
 8002bc4:	70da      	strb	r2, [r3, #3]
                            SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	79da      	ldrb	r2, [r3, #7]
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <SVCCTL_App_Notification+0x3ac>)
 8002bcc:	711a      	strb	r2, [r3, #4]
                            SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	7a1a      	ldrb	r2, [r3, #8]
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <SVCCTL_App_Notification+0x3ac>)
 8002bd4:	715a      	strb	r2, [r3, #5]
                            break;
 8002bd6:	e002      	b.n	8002bde <SVCCTL_App_Notification+0x36e>
                      }
 8002bd8:	bf00      	nop
 8002bda:	e006      	b.n	8002bea <SVCCTL_App_Notification+0x37a>
                            break;
 8002bdc:	bf00      	nop
                      break;
 8002bde:	e004      	b.n	8002bea <SVCCTL_App_Notification+0x37a>
                      break;
 8002be0:	bf00      	nop
 8002be2:	e002      	b.n	8002bea <SVCCTL_App_Notification+0x37a>
                      break;
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <SVCCTL_App_Notification+0x37a>
                      break;
 8002be8:	bf00      	nop
                  k += adlength + 1;
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	3301      	adds	r3, #1
 8002bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf0:	4413      	add	r3, r2
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
                while(k < event_data_size)
 8002bf4:	7ebb      	ldrb	r3, [r7, #26]
 8002bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	db87      	blt.n	8002b0c <SVCCTL_App_Notification+0x29c>
            break;
 8002bfc:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8002bfe:	e002      	b.n	8002c06 <SVCCTL_App_Notification+0x396>
      break;
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <SVCCTL_App_Notification+0x396>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002c04:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3744      	adds	r7, #68	; 0x44
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c10:	0800d05c 	.word	0x0800d05c
 8002c14:	0800d07c 	.word	0x0800d07c
 8002c18:	20000138 	.word	0x20000138
 8002c1c:	2000049c 	.word	0x2000049c

08002c20 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 8002c2c:	8adb      	ldrh	r3, [r3, #22]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d103      	bne.n	8002c3c <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 8002c36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c3a:	e000      	b.n	8002c3e <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000138 	.word	0x20000138

08002c50 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 8002c54:	f000 fe64 	bl	8003920 <P2P_Client_APP_Get_State>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d004      	beq.n	8002c68 <APP_BLE_Key_Button1_Action+0x18>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 8002c5e:	2100      	movs	r1, #0
 8002c60:	2001      	movs	r0, #1
 8002c62:	f008 fd29 	bl	800b6b8 <UTIL_SEQ_SetTask>
  else 
  {
    P2PC_APP_SW1_Button_Action();
  }   
#endif 
}
 8002c66:	e001      	b.n	8002c6c <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_SW1_Button_Action();
 8002c68:	f000 fb36 	bl	80032d8 <P2PC_APP_SW1_Button_Action>
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <Ble_Tl_Init+0x20>)
 8002c94:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <Ble_Tl_Init+0x24>)
 8002c98:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <Ble_Tl_Init+0x28>)
 8002ca0:	f006 ff5c 	bl	8009b5c <hci_init>

  return;
 8002ca4:	bf00      	nop
}
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20030028 	.word	0x20030028
 8002cb0:	080031b1 	.word	0x080031b1
 8002cb4:	08003179 	.word	0x08003179

08002cb8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8002cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cba:	b091      	sub	sp, #68	; 0x44
 8002cbc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	80bb      	strh	r3, [r7, #4]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002cc2:	2392      	movs	r3, #146	; 0x92
 8002cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  APP_DBG_MSG("Start Ble_Hci_Gap_Gatt_Init function\n\r");
 8002cc8:	48a8      	ldr	r0, [pc, #672]	; (8002f6c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8002cca:	f008 fe55 	bl	800b978 <iprintf>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8002cce:	f006 fda6 	bl	800981e <hci_reset>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret != BLE_STATUS_SUCCESS)
 8002cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <Ble_Hci_Gap_Gatt_Init+0x36>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n\r", ret);
 8002ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	48a2      	ldr	r0, [pc, #648]	; (8002f70 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8002ce8:	f008 fe46 	bl	800b978 <iprintf>
 8002cec:	e002      	b.n	8002cf4 <Ble_Hci_Gap_Gatt_Init+0x3c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n\r");
 8002cee:	48a1      	ldr	r0, [pc, #644]	; (8002f74 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8002cf0:	f008 fe42 	bl	800b978 <iprintf>
  }

  /**
   * Write the BD Address
   */
  bd_addr = BleGetBdAddress();
 8002cf4:	f000 f9da 	bl	80030ac <BleGetBdAddress>
 8002cf8:	6238      	str	r0, [r7, #32]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	2106      	movs	r1, #6
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f006 fc4d 	bl	800959e <aci_hal_write_config_data>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                  CONFIG_DATA_PUBADDR_LEN,
                                  (uint8_t*) bd_addr);
  if (ret != BLE_STATUS_SUCCESS)
 8002d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <Ble_Hci_Gap_Gatt_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command, result: 0x%x \n\r", ret);
 8002d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d16:	4619      	mov	r1, r3
 8002d18:	4897      	ldr	r0, [pc, #604]	; (8002f78 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8002d1a:	f008 fe2d 	bl	800b978 <iprintf>
 8002d1e:	e002      	b.n	8002d26 <Ble_Hci_Gap_Gatt_Init+0x6e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command\n\r");
 8002d20:	4896      	ldr	r0, [pc, #600]	; (8002f7c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8002d22:	f008 fe29 	bl	800b978 <iprintf>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8002d26:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8002d2a:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN();
 8002d2c:	f7ff fcfc 	bl	8002728 <LL_FLASH_GetUDN>
 8002d30:	4603      	mov	r3, r0
 8002d32:	60bb      	str	r3, [r7, #8]
  ret = aci_hal_write_config_data(CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr);
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2106      	movs	r1, #6
 8002d3c:	202e      	movs	r0, #46	; 0x2e
 8002d3e:	f006 fc2e 	bl	800959e <aci_hal_write_config_data>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret != BLE_STATUS_SUCCESS)
 8002d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <Ble_Hci_Gap_Gatt_Init+0xa6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command, result: 0x%x \n\r", ret);
 8002d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d54:	4619      	mov	r1, r3
 8002d56:	4888      	ldr	r0, [pc, #544]	; (8002f78 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8002d58:	f008 fe0e 	bl	800b978 <iprintf>
 8002d5c:	e002      	b.n	8002d64 <Ble_Hci_Gap_Gatt_Init+0xac>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command\n\r");
 8002d5e:	4887      	ldr	r0, [pc, #540]	; (8002f7c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8002d60:	f008 fe0a 	bl	800b978 <iprintf>
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE);
 8002d64:	4a86      	ldr	r2, [pc, #536]	; (8002f80 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8002d66:	2110      	movs	r1, #16
 8002d68:	2018      	movs	r0, #24
 8002d6a:	f006 fc18 	bl	800959e <aci_hal_write_config_data>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret != BLE_STATUS_SUCCESS)
 8002d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <Ble_Hci_Gap_Gatt_Init+0xd2>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command, result: 0x%x \n\r", ret);
 8002d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d80:	4619      	mov	r1, r3
 8002d82:	487d      	ldr	r0, [pc, #500]	; (8002f78 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8002d84:	f008 fdf8 	bl	800b978 <iprintf>
 8002d88:	e002      	b.n	8002d90 <Ble_Hci_Gap_Gatt_Init+0xd8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command\n\r");
 8002d8a:	487c      	ldr	r0, [pc, #496]	; (8002f7c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8002d8c:	f008 fdf4 	bl	800b978 <iprintf>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE);
 8002d90:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8002d92:	2110      	movs	r1, #16
 8002d94:	2008      	movs	r0, #8
 8002d96:	f006 fc02 	bl	800959e <aci_hal_write_config_data>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret != BLE_STATUS_SUCCESS)
 8002da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <Ble_Hci_Gap_Gatt_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command, result: 0x%x \n\r", ret);
 8002da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dac:	4619      	mov	r1, r3
 8002dae:	4872      	ldr	r0, [pc, #456]	; (8002f78 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8002db0:	f008 fde2 	bl	800b978 <iprintf>
 8002db4:	e002      	b.n	8002dbc <Ble_Hci_Gap_Gatt_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command\n\r");
 8002db6:	4871      	ldr	r0, [pc, #452]	; (8002f7c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8002db8:	f008 fdde 	bl	800b978 <iprintf>
  }

  /**
   * Set TX Power to 0dBm.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002dbc:	2118      	movs	r1, #24
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f006 fc72 	bl	80096a8 <aci_hal_set_tx_power_level>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret != BLE_STATUS_SUCCESS)
 8002dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n\r", ret);
 8002dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	486b      	ldr	r0, [pc, #428]	; (8002f88 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8002dda:	f008 fdcd 	bl	800b978 <iprintf>
 8002dde:	e002      	b.n	8002de6 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n\r");
 8002de0:	486a      	ldr	r0, [pc, #424]	; (8002f8c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8002de2:	f008 fdc9 	bl	800b978 <iprintf>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8002de6:	f006 f877 	bl	8008ed8 <aci_gatt_init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret != BLE_STATUS_SUCCESS)
 8002df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n\r", ret);
 8002df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4864      	ldr	r0, [pc, #400]	; (8002f90 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8002e00:	f008 fdba 	bl	800b978 <iprintf>
 8002e04:	e002      	b.n	8002e0c <Ble_Hci_Gap_Gatt_Init+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n\r");
 8002e06:	4863      	ldr	r0, [pc, #396]	; (8002f94 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8002e08:	f008 fdb6 	bl	800b978 <iprintf>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	77fb      	strb	r3, [r7, #31]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 8002e10:	7ffb      	ldrb	r3, [r7, #31]
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	77fb      	strb	r3, [r7, #31]
#endif

  if (role > 0)
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d02f      	beq.n	8002e7e <Ble_Hci_Gap_Gatt_Init+0x1c6>
  {
    const char *name = "P2P_C";
 8002e1e:	4b5e      	ldr	r3, [pc, #376]	; (8002f98 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8002e20:	61bb      	str	r3, [r7, #24]

    ret = aci_gap_init(role,
 8002e22:	f107 0216 	add.w	r2, r7, #22
 8002e26:	7ff8      	ldrb	r0, [r7, #31]
 8002e28:	f107 0312 	add.w	r3, r7, #18
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	2207      	movs	r2, #7
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f005 fe0d 	bl	8008a58 <aci_gap_init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                       0,
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);
    if (ret != BLE_STATUS_SUCCESS)
 8002e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <Ble_Hci_Gap_Gatt_Init+0x1a2>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n\r", ret);
 8002e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e50:	4619      	mov	r1, r3
 8002e52:	4852      	ldr	r0, [pc, #328]	; (8002f9c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8002e54:	f008 fd90 	bl	800b978 <iprintf>
 8002e58:	e002      	b.n	8002e60 <Ble_Hci_Gap_Gatt_Init+0x1a8>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n\r");
 8002e5a:	4851      	ldr	r0, [pc, #324]	; (8002fa0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8002e5c:	f008 fd8c 	bl	800b978 <iprintf>
    }

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002e60:	8afc      	ldrh	r4, [r7, #22]
 8002e62:	8abd      	ldrh	r5, [r7, #20]
 8002e64:	69b8      	ldr	r0, [r7, #24]
 8002e66:	f7fd f98b 	bl	8000180 <strlen>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	2200      	movs	r2, #0
 8002e76:	4629      	mov	r1, r5
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f006 f852 	bl	8008f22 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n\r");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002e7e:	8af8      	ldrh	r0, [r7, #22]
 8002e80:	8a79      	ldrh	r1, [r7, #18]
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2302      	movs	r3, #2
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f006 f84a 	bl	8008f22 <aci_gatt_update_char_value>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002e8e:	4b45      	ldr	r3, [pc, #276]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002e94:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 fcc5 	bl	8008828 <aci_gap_set_io_capability>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ret != BLE_STATUS_SUCCESS)
 8002ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <Ble_Hci_Gap_Gatt_Init+0x202>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n\r", ret);
 8002eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	483d      	ldr	r0, [pc, #244]	; (8002fa8 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8002eb4:	f008 fd60 	bl	800b978 <iprintf>
 8002eb8:	e002      	b.n	8002ec0 <Ble_Hci_Gap_Gatt_Init+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n\r");
 8002eba:	483c      	ldr	r0, [pc, #240]	; (8002fac <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8002ebc:	f008 fd5c 	bl	800b978 <iprintf>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002ec0:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ec8:	2208      	movs	r2, #8
 8002eca:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002ecc:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ece:	2210      	movs	r2, #16
 8002ed0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002eda:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8002edc:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ee6:	789c      	ldrb	r4, [r3, #2]
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002eea:	785d      	ldrb	r5, [r3, #1]
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002eee:	791b      	ldrb	r3, [r3, #4]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ef2:	7952      	ldrb	r2, [r2, #5]
 8002ef4:	492b      	ldr	r1, [pc, #172]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002ef6:	78c9      	ldrb	r1, [r1, #3]
 8002ef8:	482a      	ldr	r0, [pc, #168]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002efa:	6880      	ldr	r0, [r0, #8]
 8002efc:	2600      	movs	r6, #0
 8002efe:	9604      	str	r6, [sp, #16]
 8002f00:	9003      	str	r0, [sp, #12]
 8002f02:	9102      	str	r1, [sp, #8]
 8002f04:	9201      	str	r2, [sp, #4]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f005 fcde 	bl	80088d0 <aci_gap_set_authentication_requirement>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               PUBLIC_ADDR
                                              );
  if (ret != BLE_STATUS_SUCCESS)
 8002f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <Ble_Hci_Gap_Gatt_Init+0x278>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n\r", ret);
 8002f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f26:	4619      	mov	r1, r3
 8002f28:	4822      	ldr	r0, [pc, #136]	; (8002fb4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8002f2a:	f008 fd25 	bl	800b978 <iprintf>
 8002f2e:	e002      	b.n	8002f36 <Ble_Hci_Gap_Gatt_Init+0x27e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n\r");
 8002f30:	4821      	ldr	r0, [pc, #132]	; (8002fb8 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8002f32:	f008 fd21 	bl	800b978 <iprintf>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8002f38:	789b      	ldrb	r3, [r3, #2]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d012      	beq.n	8002f64 <Ble_Hci_Gap_Gatt_Init+0x2ac>
  {
    ret = aci_gap_configure_whitelist();
 8002f3e:	f005 fe38 	bl	8008bb2 <aci_gap_configure_whitelist>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != BLE_STATUS_SUCCESS)
 8002f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d006      	beq.n	8002f5e <Ble_Hci_Gap_Gatt_Init+0x2a6>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n\r", ret);
 8002f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f54:	4619      	mov	r1, r3
 8002f56:	4819      	ldr	r0, [pc, #100]	; (8002fbc <Ble_Hci_Gap_Gatt_Init+0x304>)
 8002f58:	f008 fd0e 	bl	800b978 <iprintf>
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n\r");
    }
  }
}
 8002f5c:	e002      	b.n	8002f64 <Ble_Hci_Gap_Gatt_Init+0x2ac>
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n\r");
 8002f5e:	4818      	ldr	r0, [pc, #96]	; (8002fc0 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8002f60:	f008 fd0a 	bl	800b978 <iprintf>
}
 8002f64:	bf00      	nop
 8002f66:	372c      	adds	r7, #44	; 0x2c
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f6c:	0800d0a0 	.word	0x0800d0a0
 8002f70:	0800d0c8 	.word	0x0800d0c8
 8002f74:	0800d0f8 	.word	0x0800d0f8
 8002f78:	0800d118 	.word	0x0800d118
 8002f7c:	0800d158 	.word	0x0800d158
 8002f80:	0800d938 	.word	0x0800d938
 8002f84:	0800d948 	.word	0x0800d948
 8002f88:	0800d188 	.word	0x0800d188
 8002f8c:	0800d1c8 	.word	0x0800d1c8
 8002f90:	0800d1f8 	.word	0x0800d1f8
 8002f94:	0800d22c 	.word	0x0800d22c
 8002f98:	0800d250 	.word	0x0800d250
 8002f9c:	0800d258 	.word	0x0800d258
 8002fa0:	0800d28c 	.word	0x0800d28c
 8002fa4:	20000138 	.word	0x20000138
 8002fa8:	0800d2b0 	.word	0x0800d2b0
 8002fac:	0800d2f0 	.word	0x0800d2f0
 8002fb0:	0001b207 	.word	0x0001b207
 8002fb4:	0800d320 	.word	0x0800d320
 8002fb8:	0800d36c 	.word	0x0800d36c
 8002fbc:	0800d3a8 	.word	0x0800d3a8
 8002fc0:	0800d3e8 	.word	0x0800d3e8

08002fc4 <Scan_Request>:

static void Scan_Request(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <Scan_Request+0x50>)
 8002fcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d01a      	beq.n	800300a <Scan_Request+0x46>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f001 f8b3 	bl	8004140 <BSP_LED_On>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 8002fda:	2301      	movs	r3, #1
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002fe2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002fe6:	f005 fe08 	bl	8008bfa <aci_gap_start_general_discovery_proc>
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <Scan_Request+0x38>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 8002ff4:	4808      	ldr	r0, [pc, #32]	; (8003018 <Scan_Request+0x54>)
 8002ff6:	f008 fcbf 	bl	800b978 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 8002ffa:	e006      	b.n	800300a <Scan_Request+0x46>
      BSP_LED_On(LED_RED);
 8002ffc:	2002      	movs	r0, #2
 8002ffe:	f001 f89f 	bl	8004140 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <Scan_Request+0x58>)
 8003004:	f008 fcb8 	bl	800b978 <iprintf>
  return;
 8003008:	bf00      	nop
 800300a:	bf00      	nop
}
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000138 	.word	0x20000138
 8003018:	0800d41c 	.word	0x0800d41c
 800301c:	0800d44c 	.word	0x0800d44c

08003020 <Connect_Request>:

static void Connect_Request(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 8003026:	481a      	ldr	r0, [pc, #104]	; (8003090 <Connect_Request+0x70>)
 8003028:	f008 fca6 	bl	800b978 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <Connect_Request+0x74>)
 800302e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003032:	2b06      	cmp	r3, #6
 8003034:	d028      	beq.n	8003088 <Connect_Request+0x68>
  {
    result = aci_gap_create_connection(SCAN_P,
 8003036:	2310      	movs	r3, #16
 8003038:	9306      	str	r3, [sp, #24]
 800303a:	2310      	movs	r3, #16
 800303c:	9305      	str	r3, [sp, #20]
 800303e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003042:	9304      	str	r3, [sp, #16]
 8003044:	2300      	movs	r3, #0
 8003046:	9303      	str	r3, [sp, #12]
 8003048:	2350      	movs	r3, #80	; 0x50
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	2328      	movs	r3, #40	; 0x28
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	2300      	movs	r3, #0
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <Connect_Request+0x78>)
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 7148 	mov.w	r1, #800	; 0x320
 800305c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003060:	f005 fe5f 	bl	8008d22 <aci_gap_create_connection>
 8003064:	4603      	mov	r3, r0
 8003066:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d104      	bne.n	8003078 <Connect_Request+0x58>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <Connect_Request+0x74>)
 8003070:	2204      	movs	r2, #4
 8003072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 8003076:	e007      	b.n	8003088 <Connect_Request+0x68>
      BSP_LED_On(LED_RED);
 8003078:	2002      	movs	r0, #2
 800307a:	f001 f861 	bl	8004140 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <Connect_Request+0x74>)
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 8003086:	bf00      	nop
 8003088:	bf00      	nop
}
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	0800d47c 	.word	0x0800d47c
 8003094:	20000138 	.word	0x20000138
 8003098:	2000049c 	.word	0x2000049c

0800309c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 80030a0:	2001      	movs	r0, #1
 80030a2:	f001 f867 	bl	8004174 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80030b2:	f7ff fb39 	bl	8002728 <LL_FLASH_GetUDN>
 80030b6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d023      	beq.n	8003108 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80030c0:	f7ff fb4a 	bl	8002758 <LL_FLASH_GetSTCompanyID>
 80030c4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80030c6:	f7ff fb3b 	bl	8002740 <LL_FLASH_GetDeviceID>
 80030ca:	6078      	str	r0, [r7, #4]
   * bit[23:16] : Device ID.
   * bit[15:0] : The last 16bits from the UDN
   * Note: In order to use the Public Address in a final product, a dedicated
   * 24bits company ID (OUI) shall be bought.
   */
   bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b16      	ldr	r3, [pc, #88]	; (800312c <BleGetBdAddress+0x80>)
 80030d2:	701a      	strb	r2, [r3, #0]
   bd_addr_udn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <BleGetBdAddress+0x80>)
 80030dc:	705a      	strb	r2, [r3, #1]
   bd_addr_udn[2] = (uint8_t)device_id;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <BleGetBdAddress+0x80>)
 80030e4:	709a      	strb	r2, [r3, #2]
   bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <BleGetBdAddress+0x80>)
 80030ec:	70da      	strb	r2, [r3, #3]
   bd_addr_udn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <BleGetBdAddress+0x80>)
 80030f6:	711a      	strb	r2, [r3, #4]
   bd_addr_udn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <BleGetBdAddress+0x80>)
 8003100:	715a      	strb	r2, [r3, #5]

   bd_addr = (const uint8_t *)bd_addr_udn;
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <BleGetBdAddress+0x80>)
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e00b      	b.n	8003120 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8003108:	2000      	movs	r0, #0
 800310a:	f006 fedd 	bl	8009ec8 <OTP_Read>
 800310e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e001      	b.n	8003120 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <BleGetBdAddress+0x84>)
 800311e:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8003120:	697b      	ldr	r3, [r7, #20]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000494 	.word	0x20000494
 8003130:	0800d930 	.word	0x0800d930

08003134 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800313c:	2100      	movs	r1, #0
 800313e:	2010      	movs	r0, #16
 8003140:	f008 faba 	bl	800b6b8 <UTIL_SEQ_SetTask>
  return;
 8003144:	bf00      	nop
}
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003154:	2001      	movs	r0, #1
 8003156:	f008 fb1b 	bl	800b790 <UTIL_SEQ_SetEvt>
  return;
 800315a:	bf00      	nop
}
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800316a:	2001      	movs	r0, #1
 800316c:	f008 fb30 	bl	800b7d0 <UTIL_SEQ_WaitEvt>
  return;
 8003170:	bf00      	nop
}
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	3308      	adds	r3, #8
 800318a:	4618      	mov	r0, r3
 800318c:	f007 fe7a 	bl	800ae84 <SVCCTL_UserEvtRx>
 8003190:	4603      	mov	r3, r0
 8003192:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80031a0:	e003      	b.n	80031aa <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  return;
 80031a8:	bf00      	nop
}
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <BLE_StatusNot+0x16>
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d006      	beq.n	80031d2 <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 80031c4:	e00b      	b.n	80031de <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80031c6:	23ff      	movs	r3, #255	; 0xff
 80031c8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f008 faa0 	bl	800b710 <UTIL_SEQ_PauseTask>
      break;
 80031d0:	e005      	b.n	80031de <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80031d2:	23ff      	movs	r3, #255	; 0xff
 80031d4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f008 faba 	bl	800b750 <UTIL_SEQ_ResumeTask>
      break;
 80031dc:	bf00      	nop
  }
  return;
 80031de:	bf00      	nop
}
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  uint8_t index =0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 80031f2:	4a1a      	ldr	r2, [pc, #104]	; (800325c <P2PC_APP_Init+0x74>)
 80031f4:	2100      	movs	r1, #0
 80031f6:	2004      	movs	r0, #4
 80031f8:	f008 fa3c 	bl	800b674 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 80031fc:	4a18      	ldr	r2, [pc, #96]	; (8003260 <P2PC_APP_Init+0x78>)
 80031fe:	2100      	movs	r1, #0
 8003200:	2020      	movs	r0, #32
 8003202:	f008 fa37 	bl	800b674 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <P2PC_APP_Init+0x7c>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 800320c:	4b15      	ldr	r3, [pc, #84]	; (8003264 <P2PC_APP_Init+0x7c>)
 800320e:	2200      	movs	r2, #0
 8003210:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <P2PC_APP_Init+0x7c>)
 8003214:	2200      	movs	r2, #0
 8003216:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <P2PC_APP_Init+0x7c>)
 800321a:	2200      	movs	r2, #0
 800321c:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <P2PC_APP_Init+0x7c>)
 8003220:	2201      	movs	r2, #1
 8003222:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <P2PC_APP_Init+0x7c>)
 8003226:	2200      	movs	r2, #0
 8003228:	711a      	strb	r2, [r3, #4]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800322a:	2300      	movs	r3, #0
 800322c:	71fb      	strb	r3, [r7, #7]
 800322e:	e008      	b.n	8003242 <P2PC_APP_Init+0x5a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <P2PC_APP_Init+0x80>)
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	4413      	add	r3, r2
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	3301      	adds	r3, #1
 8003240:	71fb      	strb	r3, [r7, #7]
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f3      	beq.n	8003230 <P2PC_APP_Init+0x48>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 8003248:	4808      	ldr	r0, [pc, #32]	; (800326c <P2PC_APP_Init+0x84>)
 800324a:	f007 fe01 	bl	800ae50 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 800324e:	4808      	ldr	r0, [pc, #32]	; (8003270 <P2PC_APP_Init+0x88>)
 8003250:	f008 fc2e 	bl	800bab0 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 8003254:	bf00      	nop
}
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	080039f5 	.word	0x080039f5
 8003260:	080039ad 	.word	0x080039ad
 8003264:	200001cc 	.word	0x200001cc
 8003268:	200001bc 	.word	0x200001bc
 800326c:	080032e9 	.word	0x080032e9
 8003270:	0800d4a8 	.word	0x0800d4a8

08003274 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <P2PC_APP_Notification+0x16>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d005      	beq.n	8003294 <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 8003288:	e01e      	b.n	80032c8 <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	885a      	ldrh	r2, [r3, #2]
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <P2PC_APP_Notification+0x5c>)
 8003290:	80da      	strh	r2, [r3, #6]
      break;
 8003292:	e019      	b.n	80032c8 <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <P2PC_APP_Notification+0x5c>)
 800329a:	2200      	movs	r2, #0
 800329c:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800329e:	e005      	b.n	80032ac <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <P2PC_APP_Notification+0x60>)
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4413      	add	r3, r2
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <P2PC_APP_Notification+0x60>)
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ef      	bne.n	80032a0 <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); 
 80032c0:	2000      	movs	r0, #0
 80032c2:	f000 ff57 	bl	8004174 <BSP_LED_Off>
      break;
 80032c6:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 80032c8:	bf00      	nop
}
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200001cc 	.word	0x200001cc
 80032d4:	200001bc 	.word	0x200001bc

080032d8 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80032dc:	2100      	movs	r1, #0
 80032de:	2020      	movs	r0, #32
 80032e0:	f008 f9ea 	bl	800b6b8 <UTIL_SEQ_SetTask>

}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b094      	sub	sp, #80	; 0x50
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3301      	adds	r3, #1
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2bff      	cmp	r3, #255	; 0xff
 8003302:	f040 82b7 	bne.w	8003874 <Event_Handler+0x58c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8003306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003308:	3302      	adds	r3, #2
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8003316:	2b0c      	cmp	r3, #12
 8003318:	f200 82a0 	bhi.w	800385c <Event_Handler+0x574>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <Event_Handler+0x3c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003669 	.word	0x08003669
 8003328:	0800385d 	.word	0x0800385d
 800332c:	0800350f 	.word	0x0800350f
 8003330:	0800385d 	.word	0x0800385d
 8003334:	0800385d 	.word	0x0800385d
 8003338:	0800385d 	.word	0x0800385d
 800333c:	08003359 	.word	0x08003359
 8003340:	0800385d 	.word	0x0800385d
 8003344:	0800385d 	.word	0x0800385d
 8003348:	0800385d 	.word	0x0800385d
 800334c:	0800385d 	.word	0x0800385d
 8003350:	08003785 	.word	0x08003785
 8003354:	08003807 	.word	0x08003807
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	3302      	adds	r3, #2
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	4313      	orrs	r3, r2
 8003368:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003370:	e02e      	b.n	80033d0 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8003372:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003376:	4ab8      	ldr	r2, [pc, #736]	; (8003658 <Event_Handler+0x370>)
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	4413      	add	r3, r2
 800337c:	3302      	adds	r3, #2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fc4d 	bl	8002c20 <APP_BLE_Get_Client_Connection_Status>
 8003386:	4603      	mov	r3, r0
 8003388:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800338c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003390:	4ab1      	ldr	r2, [pc, #708]	; (8003658 <Event_Handler+0x370>)
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4413      	add	r3, r2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b06      	cmp	r3, #6
 800339a:	d114      	bne.n	80033c6 <Event_Handler+0xde>
 800339c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d110      	bne.n	80033c6 <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 80033a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033a8:	4aab      	ldr	r2, [pc, #684]	; (8003658 <Event_Handler+0x370>)
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 80033b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033b6:	4aa8      	ldr	r2, [pc, #672]	; (8003658 <Event_Handler+0x370>)
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	3302      	adds	r3, #2
 80033be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c2:	801a      	strh	r2, [r3, #0]
              break;
 80033c4:	e010      	b.n	80033e8 <Event_Handler+0x100>
            }
            index++;
 80033c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033ca:	3301      	adds	r3, #1
 80033cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80033d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 80033d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033dc:	4a9e      	ldr	r2, [pc, #632]	; (8003658 <Event_Handler+0x370>)
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1c4      	bne.n	8003372 <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80033e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 8237 	bne.w	8003860 <Event_Handler+0x578>
          {
            aP2PClientContext[index].connHandle= handle;
 80033f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033f6:	4a98      	ldr	r2, [pc, #608]	; (8003658 <Event_Handler+0x370>)
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	4413      	add	r3, r2
 80033fc:	3302      	adds	r3, #2
 80033fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003400:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	78da      	ldrb	r2, [r3, #3]
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	789b      	ldrb	r3, [r3, #2]
 8003416:	2b14      	cmp	r3, #20
 8003418:	f040 8222 	bne.w	8003860 <Event_Handler+0x578>
          {
            idx = 16;
 800341c:	2310      	movs	r3, #16
 800341e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 8003422:	2300      	movs	r3, #0
 8003424:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003428:	e06a      	b.n	8003500 <Event_Handler+0x218>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800342a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800342e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003430:	4413      	add	r3, r2
 8003432:	791b      	ldrb	r3, [r3, #4]
 8003434:	b29a      	uxth	r2, r3
 8003436:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800343a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800343c:	440b      	add	r3, r1
 800343e:	3304      	adds	r3, #4
 8003440:	3301      	adds	r3, #1
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	4313      	orrs	r3, r2
 800344c:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800344e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003450:	f64f 6240 	movw	r2, #65088	; 0xfe40
 8003454:	4293      	cmp	r3, r2
 8003456:	d149      	bne.n	80034ec <Event_Handler+0x204>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 8003458:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800345c:	4a7e      	ldr	r2, [pc, #504]	; (8003658 <Event_Handler+0x370>)
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	4413      	add	r3, r2
 8003462:	3302      	adds	r3, #2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	487c      	ldr	r0, [pc, #496]	; (800365c <Event_Handler+0x374>)
 800346a:	f008 fa85 	bl	800b978 <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800346e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003472:	3b10      	subs	r3, #16
 8003474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003476:	4413      	add	r3, r2
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	b299      	uxth	r1, r3
 800347c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003480:	3b10      	subs	r3, #16
 8003482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003484:	4413      	add	r3, r2
 8003486:	3304      	adds	r3, #4
 8003488:	3301      	adds	r3, #1
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	b29a      	uxth	r2, r3
 8003492:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003496:	430a      	orrs	r2, r1
 8003498:	b291      	uxth	r1, r2
 800349a:	4a6f      	ldr	r2, [pc, #444]	; (8003658 <Event_Handler+0x370>)
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	3304      	adds	r3, #4
 80034a2:	460a      	mov	r2, r1
 80034a4:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 80034a6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80034aa:	3b0e      	subs	r3, #14
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	4413      	add	r3, r2
 80034b0:	791b      	ldrb	r3, [r3, #4]
 80034b2:	b299      	uxth	r1, r3
 80034b4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80034b8:	3b0e      	subs	r3, #14
 80034ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	3301      	adds	r3, #1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034ce:	430a      	orrs	r2, r1
 80034d0:	b291      	uxth	r1, r2
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <Event_Handler+0x370>)
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4413      	add	r3, r2
 80034d8:	3306      	adds	r3, #6
 80034da:	460a      	mov	r2, r1
 80034dc:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 80034de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034e2:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <Event_Handler+0x370>)
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	4413      	add	r3, r2
 80034e8:	2208      	movs	r2, #8
 80034ea:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 80034ec:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80034f0:	3306      	adds	r3, #6
 80034f2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 80034f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034fa:	3301      	adds	r3, #1
 80034fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003500:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003508:	429a      	cmp	r2, r3
 800350a:	d38e      	bcc.n	800342a <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 800350c:	e1a8      	b.n	8003860 <Event_Handler+0x578>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	3302      	adds	r3, #2
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800351a:	e004      	b.n	8003526 <Event_Handler+0x23e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800351c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003520:	3301      	adds	r3, #1
 8003522:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003526:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <Event_Handler+0x25e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800352e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003532:	4a49      	ldr	r2, [pc, #292]	; (8003658 <Event_Handler+0x370>)
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	4413      	add	r3, r2
 8003538:	3302      	adds	r3, #2
 800353a:	881a      	ldrh	r2, [r3, #0]
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003542:	429a      	cmp	r2, r3
 8003544:	d1ea      	bne.n	800351c <Event_Handler+0x234>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003546:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 818a 	bne.w	8003864 <Event_Handler+0x57c>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 8003550:	2311      	movs	r3, #17
 8003552:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	2b15      	cmp	r3, #21
 800355c:	f040 8182 	bne.w	8003864 <Event_Handler+0x57c>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	78db      	ldrb	r3, [r3, #3]
 8003564:	3b01      	subs	r3, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800356c:	e06f      	b.n	800364e <Event_Handler+0x366>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800356e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	4413      	add	r3, r2
 8003576:	791b      	ldrb	r3, [r3, #4]
 8003578:	b29a      	uxth	r2, r3
 800357a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800357e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003580:	440b      	add	r3, r1
 8003582:	3304      	adds	r3, #4
 8003584:	3301      	adds	r3, #1
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	b29b      	uxth	r3, r3
 800358e:	4313      	orrs	r3, r2
 8003590:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8003592:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003596:	3b0e      	subs	r3, #14
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	4413      	add	r3, r2
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80035a4:	3b0e      	subs	r3, #14
 80035a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a8:	440b      	add	r3, r1
 80035aa:	3304      	adds	r3, #4
 80035ac:	3301      	adds	r3, #1
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	4313      	orrs	r3, r2
 80035b8:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 80035ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035bc:	f64f 6241 	movw	r2, #65089	; 0xfe41
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d11a      	bne.n	80035fa <Event_Handler+0x312>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80035c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80035c8:	4a23      	ldr	r2, [pc, #140]	; (8003658 <Event_Handler+0x370>)
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	3302      	adds	r3, #2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4822      	ldr	r0, [pc, #136]	; (8003660 <Event_Handler+0x378>)
 80035d6:	f008 f9cf 	bl	800b978 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 80035da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80035de:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <Event_Handler+0x370>)
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	2209      	movs	r2, #9
 80035e6:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 80035e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80035ec:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <Event_Handler+0x370>)
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	3308      	adds	r3, #8
 80035f4:	8c3a      	ldrh	r2, [r7, #32]
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	e01e      	b.n	8003638 <Event_Handler+0x350>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 80035fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035fc:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8003600:	4293      	cmp	r3, r2
 8003602:	d119      	bne.n	8003638 <Event_Handler+0x350>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8003604:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <Event_Handler+0x370>)
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	4413      	add	r3, r2
 800360e:	3302      	adds	r3, #2
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	4619      	mov	r1, r3
 8003614:	4813      	ldr	r0, [pc, #76]	; (8003664 <Event_Handler+0x37c>)
 8003616:	f008 f9af 	bl	800b978 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800361a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800361e:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <Event_Handler+0x370>)
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	220a      	movs	r2, #10
 8003626:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 8003628:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <Event_Handler+0x370>)
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	4413      	add	r3, r2
 8003632:	330c      	adds	r3, #12
 8003634:	8c3a      	ldrh	r2, [r7, #32]
 8003636:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	78db      	ldrb	r3, [r3, #3]
 800363c:	3b15      	subs	r3, #21
 800363e:	b2da      	uxtb	r2, r3
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	70da      	strb	r2, [r3, #3]
                idx += 21;
 8003644:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003648:	3315      	adds	r3, #21
 800364a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	78db      	ldrb	r3, [r3, #3]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d18b      	bne.n	800356e <Event_Handler+0x286>
#endif
              }
            }
          }
        }
        break;
 8003656:	e105      	b.n	8003864 <Event_Handler+0x57c>
 8003658:	200001bc 	.word	0x200001bc
 800365c:	0800d4c4 	.word	0x0800d4c4
 8003660:	0800d500 	.word	0x0800d500
 8003664:	0800d538 	.word	0x0800d538

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366a:	3302      	adds	r3, #2
 800366c:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003674:	e004      	b.n	8003680 <Event_Handler+0x398>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 8003676:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367a:	3301      	adds	r3, #1
 800367c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003680:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <Event_Handler+0x3b8>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003688:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800368c:	4a7d      	ldr	r2, [pc, #500]	; (8003884 <Event_Handler+0x59c>)
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	4413      	add	r3, r2
 8003692:	3302      	adds	r3, #2
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800369c:	429a      	cmp	r2, r3
 800369e:	d1ea      	bne.n	8003676 <Event_Handler+0x38e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80036a0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 80df 	bne.w	8003868 <Event_Handler+0x580>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	78db      	ldrb	r3, [r3, #3]
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	789b      	ldrb	r3, [r3, #2]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	f040 80d3 	bne.w	8003868 <Event_Handler+0x580>
            {
              for (i=0; i<numDesc; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80036c8:	e056      	b.n	8003778 <Event_Handler+0x490>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 80036ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	791b      	ldrb	r3, [r3, #4]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80036da:	69f9      	ldr	r1, [r7, #28]
 80036dc:	440b      	add	r3, r1
 80036de:	3304      	adds	r3, #4
 80036e0:	3301      	adds	r3, #1
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 80036ee:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80036f2:	3302      	adds	r3, #2
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	791b      	ldrb	r3, [r3, #4]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003700:	3302      	adds	r3, #2
 8003702:	69f9      	ldr	r1, [r7, #28]
 8003704:	440b      	add	r3, r1
 8003706:	3304      	adds	r3, #4
 8003708:	3301      	adds	r3, #1
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	b29b      	uxth	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 8003716:	8afb      	ldrh	r3, [r7, #22]
 8003718:	f642 1202 	movw	r2, #10498	; 0x2902
 800371c:	4293      	cmp	r3, r2
 800371e:	d121      	bne.n	8003764 <Event_Handler+0x47c>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8003720:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003724:	4a57      	ldr	r2, [pc, #348]	; (8003884 <Event_Handler+0x59c>)
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4413      	add	r3, r2
 800372a:	3302      	adds	r3, #2
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	4855      	ldr	r0, [pc, #340]	; (8003888 <Event_Handler+0x5a0>)
 8003732:	f008 f921 	bl	800b978 <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 8003736:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800373a:	4a52      	ldr	r2, [pc, #328]	; (8003884 <Event_Handler+0x59c>)
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4413      	add	r3, r2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b0a      	cmp	r3, #10
 8003744:	d10e      	bne.n	8003764 <Event_Handler+0x47c>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 8003746:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800374a:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <Event_Handler+0x59c>)
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4413      	add	r3, r2
 8003750:	330e      	adds	r3, #14
 8003752:	8b3a      	ldrh	r2, [r7, #24]
 8003754:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 8003756:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800375a:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <Event_Handler+0x59c>)
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	4413      	add	r3, r2
 8003760:	220b      	movs	r2, #11
 8003762:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 8003764:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003768:	3304      	adds	r3, #4
 800376a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800376e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003772:	3301      	adds	r3, #1
 8003774:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003778:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800377c:	7efb      	ldrb	r3, [r7, #27]
 800377e:	429a      	cmp	r2, r3
 8003780:	d3a3      	bcc.n	80036ca <Event_Handler+0x3e2>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 8003782:	e071      	b.n	8003868 <Event_Handler+0x580>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 8003784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003786:	3302      	adds	r3, #2
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003790:	e004      	b.n	800379c <Event_Handler+0x4b4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8003792:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003796:	3301      	adds	r3, #1
 8003798:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800379c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10b      	bne.n	80037bc <Event_Handler+0x4d4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80037a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037a8:	4a36      	ldr	r2, [pc, #216]	; (8003884 <Event_Handler+0x59c>)
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	4413      	add	r3, r2
 80037ae:	3302      	adds	r3, #2
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1ea      	bne.n	8003792 <Event_Handler+0x4aa>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80037bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d153      	bne.n	800386c <Event_Handler+0x584>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	885b      	ldrh	r3, [r3, #2]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037ce:	492d      	ldr	r1, [pc, #180]	; (8003884 <Event_Handler+0x59c>)
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	440b      	add	r3, r1
 80037d4:	330c      	adds	r3, #12
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d147      	bne.n	800386c <Event_Handler+0x584>
                    (pr->Attribute_Value_Length == (lenPayload)) )
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	791b      	ldrb	r3, [r3, #4]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <Event_Handler+0x5a4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d140      	bne.n	800386c <Event_Handler+0x584>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 80037ea:	2302      	movs	r3, #2
 80037ec:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 80037ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f0:	791b      	ldrb	r3, [r3, #4]
 80037f2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	3305      	adds	r3, #5
 80037f8:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 80037fa:	f107 0308 	add.w	r3, r7, #8
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f848 	bl	8003894 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 8003804:	e032      	b.n	800386c <Event_Handler+0x584>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	3302      	adds	r3, #2
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800380c:	4820      	ldr	r0, [pc, #128]	; (8003890 <Event_Handler+0x5a8>)
 800380e:	f008 f94f 	bl	800bab0 <puts>
          APP_DBG_MSG("\n");
 8003812:	200a      	movs	r0, #10
 8003814:	f008 f8c8 	bl	800b9a8 <putchar>
#endif

          uint8_t index;

          index = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800381e:	e004      	b.n	800382a <Event_Handler+0x542>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8003820:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003824:	3301      	adds	r3, #1
 8003826:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800382a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <Event_Handler+0x562>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003832:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <Event_Handler+0x59c>)
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	4413      	add	r3, r2
 800383c:	3302      	adds	r3, #2
 800383e:	881a      	ldrh	r2, [r3, #0]
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003846:	429a      	cmp	r2, r3
 8003848:	d1ea      	bne.n	8003820 <Event_Handler+0x538>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800384a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10e      	bne.n	8003870 <Event_Handler+0x588>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 8003852:	2100      	movs	r1, #0
 8003854:	2004      	movs	r0, #4
 8003856:	f007 ff2f 	bl	800b6b8 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800385a:	e009      	b.n	8003870 <Event_Handler+0x588>
        default:
          break;
 800385c:	bf00      	nop
 800385e:	e00a      	b.n	8003876 <Event_Handler+0x58e>
        break;
 8003860:	bf00      	nop
 8003862:	e008      	b.n	8003876 <Event_Handler+0x58e>
        break;
 8003864:	bf00      	nop
 8003866:	e006      	b.n	8003876 <Event_Handler+0x58e>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 8003868:	bf00      	nop
 800386a:	e004      	b.n	8003876 <Event_Handler+0x58e>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800386c:	bf00      	nop
 800386e:	e002      	b.n	8003876 <Event_Handler+0x58e>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8003870:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003872:	e000      	b.n	8003876 <Event_Handler+0x58e>

    default:
      break;
 8003874:	bf00      	nop
  }

  return(return_value);
 8003876:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800387a:	4618      	mov	r0, r3
 800387c:	3750      	adds	r7, #80	; 0x50
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200001bc 	.word	0x200001bc
 8003888:	0800d57c 	.word	0x0800d57c
 800388c:	20000008 	.word	0x20000008
 8003890:	0800d5c4 	.word	0x0800d5c4

08003894 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d12d      	bne.n	8003900 <Gatt_Notification+0x6c>
/* USER CODE END P2P_Client_Evt_Opcode */

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <Gatt_Notification+0x78>)
 80038ac:	705a      	strb	r2, [r3, #1]
      APP_DBG_MSG("Received data= %s\n\r", pNotification->DataTransfered.pPayload);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4816      	ldr	r0, [pc, #88]	; (8003910 <Gatt_Notification+0x7c>)
 80038b6:	f008 f85f 	bl	800b978 <iprintf>
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <Gatt_Notification+0x78>)
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d11c      	bne.n	80038fc <Gatt_Notification+0x68>

        case 0x01 : {

          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	785a      	ldrb	r2, [r3, #1]
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <Gatt_Notification+0x78>)
 80038ca:	709a      	strb	r2, [r3, #2]

          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <Gatt_Notification+0x78>)
 80038ce:	789b      	ldrb	r3, [r3, #2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <Gatt_Notification+0x54>
            BSP_LED_Off(LED_BLUE);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f000 fc4d 	bl	8004174 <BSP_LED_Off>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 80038da:	480e      	ldr	r0, [pc, #56]	; (8003914 <Gatt_Notification+0x80>)
 80038dc:	f008 f84c 	bl	800b978 <iprintf>
            APP_DBG_MSG(" \n\r");
 80038e0:	480d      	ldr	r0, [pc, #52]	; (8003918 <Gatt_Notification+0x84>)
 80038e2:	f008 f849 	bl	800b978 <iprintf>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
            APP_DBG_MSG(" \n\r");
            BSP_LED_On(LED_BLUE);
          }

          break;
 80038e6:	e00a      	b.n	80038fe <Gatt_Notification+0x6a>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <Gatt_Notification+0x88>)
 80038ea:	f008 f845 	bl	800b978 <iprintf>
            APP_DBG_MSG(" \n\r");
 80038ee:	480a      	ldr	r0, [pc, #40]	; (8003918 <Gatt_Notification+0x84>)
 80038f0:	f008 f842 	bl	800b978 <iprintf>
            BSP_LED_On(LED_BLUE);
 80038f4:	2000      	movs	r0, #0
 80038f6:	f000 fc23 	bl	8004140 <BSP_LED_On>
          break;
 80038fa:	e000      	b.n	80038fe <Gatt_Notification+0x6a>
        }
        default : break;
 80038fc:	bf00      	nop
      }

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 80038fe:	e000      	b.n	8003902 <Gatt_Notification+0x6e>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 8003900:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 8003902:	bf00      	nop
}
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200001cc 	.word	0x200001cc
 8003910:	0800d5f4 	.word	0x0800d5f4
 8003914:	0800d608 	.word	0x0800d608
 8003918:	0800d648 	.word	0x0800d648
 800391c:	0800d64c 	.word	0x0800d64c

08003920 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <P2P_Client_APP_Get_State+0x14>)
 8003926:	781b      	ldrb	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	200001bc 	.word	0x200001bc

08003938 <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	603a      	str	r2, [r7, #0]
 8003942:	80fb      	strh	r3, [r7, #6]
 8003944:	460b      	mov	r3, r1
 8003946:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003948:	2392      	movs	r3, #146	; 0x92
 800394a:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003950:	e01b      	b.n	800398a <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8003958:	4293      	cmp	r3, r2
 800395a:	d112      	bne.n	8003982 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800395c:	7bbb      	ldrb	r3, [r7, #14]
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <Write_Char+0x70>)
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	4413      	add	r3, r2
 8003964:	3302      	adds	r3, #2
 8003966:	8818      	ldrh	r0, [r3, #0]
 8003968:	7bbb      	ldrb	r3, [r7, #14]
 800396a:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <Write_Char+0x70>)
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	4413      	add	r3, r2
 8003970:	3308      	adds	r3, #8
 8003972:	8819      	ldrh	r1, [r3, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2202      	movs	r2, #2
 8003978:	f005 fd75 	bl	8009466 <aci_gatt_write_without_resp>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 8003980:	e000      	b.n	8003984 <Write_Char+0x4c>
      default:
        break;
 8003982:	bf00      	nop
    }
    index++;
 8003984:	7bbb      	ldrb	r3, [r7, #14]
 8003986:	3301      	adds	r3, #1
 8003988:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800398a:	7bbb      	ldrb	r3, [r7, #14]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <Write_Char+0x70>)
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	4413      	add	r3, r2
 8003998:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1d9      	bne.n	8003952 <Write_Char+0x1a>
  }

  return ret;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200001bc 	.word	0x200001bc

080039ac <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 80039b0:	480c      	ldr	r0, [pc, #48]	; (80039e4 <Button_Trigger_Received+0x38>)
 80039b2:	f007 ffe1 	bl	800b978 <iprintf>
  APP_DBG_MSG(" \n\r");
 80039b6:	480c      	ldr	r0, [pc, #48]	; (80039e8 <Button_Trigger_Received+0x3c>)
 80039b8:	f007 ffde 	bl	800b978 <iprintf>
  if(P2P_Client_App_Context.ButtonStatus.Button1 == 0x00)
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <Button_Trigger_Received+0x40>)
 80039be:	791b      	ldrb	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <Button_Trigger_Received+0x20>
  {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x01;
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <Button_Trigger_Received+0x40>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	711a      	strb	r2, [r3, #4]
 80039ca:	e002      	b.n	80039d2 <Button_Trigger_Received+0x26>
  }else {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x00;
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <Button_Trigger_Received+0x40>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	711a      	strb	r2, [r3, #4]
  }

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 80039d2:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <Button_Trigger_Received+0x44>)
 80039d4:	2100      	movs	r1, #0
 80039d6:	f64f 6041 	movw	r0, #65089	; 0xfe41
 80039da:	f7ff ffad 	bl	8003938 <Write_Char>

  return;
 80039de:	bf00      	nop
}
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	0800d68c 	.word	0x0800d68c
 80039e8:	0800d648 	.word	0x0800d648
 80039ec:	200001cc 	.word	0x200001cc
 80039f0:	200001cf 	.word	0x200001cf

080039f4 <Update_Service>:



void Update_Service()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 80039fa:	2301      	movs	r3, #1
 80039fc:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 80039fe:	2300      	movs	r3, #0
 8003a00:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003a06:	e0a5      	b.n	8003b54 <Update_Service+0x160>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	4a5a      	ldr	r2, [pc, #360]	; (8003b74 <Update_Service+0x180>)
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	3b07      	subs	r3, #7
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	f200 8099 	bhi.w	8003b4c <Update_Service+0x158>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <Update_Service+0x2c>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a39 	.word	0x08003a39
 8003a24:	08003a41 	.word	0x08003a41
 8003a28:	08003a73 	.word	0x08003a73
 8003a2c:	08003aa9 	.word	0x08003aa9
 8003a30:	08003adf 	.word	0x08003adf
 8003a34:	08003b19 	.word	0x08003b19
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 8003a38:	484f      	ldr	r0, [pc, #316]	; (8003b78 <Update_Service+0x184>)
 8003a3a:	f008 f839 	bl	800bab0 <puts>
        break;
 8003a3e:	e086      	b.n	8003b4e <Update_Service+0x15a>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 8003a40:	484e      	ldr	r0, [pc, #312]	; (8003b7c <Update_Service+0x188>)
 8003a42:	f008 f835 	bl	800bab0 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	4a4a      	ldr	r2, [pc, #296]	; (8003b74 <Update_Service+0x180>)
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	8818      	ldrh	r0, [r3, #0]
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	4a47      	ldr	r2, [pc, #284]	; (8003b74 <Update_Service+0x180>)
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	8819      	ldrh	r1, [r3, #0]
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	4a44      	ldr	r2, [pc, #272]	; (8003b74 <Update_Service+0x180>)
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	4413      	add	r3, r2
 8003a66:	3306      	adds	r3, #6
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f005 fb5a 	bl	8009124 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 8003a70:	e06d      	b.n	8003b4e <Update_Service+0x15a>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
 8003a72:	4843      	ldr	r0, [pc, #268]	; (8003b80 <Update_Service+0x18c>)
 8003a74:	f008 f81c 	bl	800bab0 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	4a3e      	ldr	r2, [pc, #248]	; (8003b74 <Update_Service+0x180>)
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	4413      	add	r3, r2
 8003a80:	3302      	adds	r3, #2
 8003a82:	8818      	ldrh	r0, [r3, #0]
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <Update_Service+0x180>)
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	4a38      	ldr	r2, [pc, #224]	; (8003b74 <Update_Service+0x180>)
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	4413      	add	r3, r2
 8003a98:	3308      	adds	r3, #8
 8003a9a:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f005 fbc0 	bl	8009226 <aci_gatt_disc_all_char_desc>
        break;
 8003aa6:	e052      	b.n	8003b4e <Update_Service+0x15a>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
 8003aa8:	4836      	ldr	r0, [pc, #216]	; (8003b84 <Update_Service+0x190>)
 8003aaa:	f008 f801 	bl	800bab0 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <Update_Service+0x180>)
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	8818      	ldrh	r0, [r3, #0]
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <Update_Service+0x180>)
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	4413      	add	r3, r2
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <Update_Service+0x180>)
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	4413      	add	r3, r2
 8003ace:	330c      	adds	r3, #12
 8003ad0:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f005 fba5 	bl	8009226 <aci_gatt_disc_all_char_desc>
        break;
 8003adc:	e037      	b.n	8003b4e <Update_Service+0x15a>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 8003ade:	482a      	ldr	r0, [pc, #168]	; (8003b88 <Update_Service+0x194>)
 8003ae0:	f007 ffe6 	bl	800bab0 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	4a23      	ldr	r2, [pc, #140]	; (8003b74 <Update_Service+0x180>)
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	3302      	adds	r3, #2
 8003aee:	8818      	ldrh	r0, [r3, #0]
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <Update_Service+0x180>)
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	330e      	adds	r3, #14
 8003afa:	8819      	ldrh	r1, [r3, #0]
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	2202      	movs	r2, #2
 8003b00:	f005 fc12 	bl	8009328 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <Update_Service+0x180>)
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	4413      	add	r3, r2
 8003b0c:	2206      	movs	r2, #6
 8003b0e:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED);
 8003b10:	2002      	movs	r0, #2
 8003b12:	f000 fb2f 	bl	8004174 <BSP_LED_Off>
        break;
 8003b16:	e01a      	b.n	8003b4e <Update_Service+0x15a>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 8003b18:	481c      	ldr	r0, [pc, #112]	; (8003b8c <Update_Service+0x198>)
 8003b1a:	f007 ffc9 	bl	800bab0 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <Update_Service+0x180>)
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4413      	add	r3, r2
 8003b26:	3302      	adds	r3, #2
 8003b28:	8818      	ldrh	r0, [r3, #0]
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <Update_Service+0x180>)
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	4413      	add	r3, r2
 8003b32:	330e      	adds	r3, #14
 8003b34:	8819      	ldrh	r1, [r3, #0]
 8003b36:	1cbb      	adds	r3, r7, #2
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f005 fbf5 	bl	8009328 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <Update_Service+0x180>)
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	4413      	add	r3, r2
 8003b46:	2206      	movs	r2, #6
 8003b48:	701a      	strb	r2, [r3, #0]
        break;
 8003b4a:	e000      	b.n	8003b4e <Update_Service+0x15a>
      default:
        break;
 8003b4c:	bf00      	nop
    }
    index++;
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	3301      	adds	r3, #1
 8003b52:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <Update_Service+0x178>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <Update_Service+0x180>)
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f af4f 	bne.w	8003a08 <Update_Service+0x14>
  }
  return;
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
}
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200001bc 	.word	0x200001bc
 8003b78:	0800d6cc 	.word	0x0800d6cc
 8003b7c:	0800d6e4 	.word	0x0800d6e4
 8003b80:	0800d70c 	.word	0x0800d70c
 8003b84:	0800d748 	.word	0x0800d748
 8003b88:	0800d788 	.word	0x0800d788
 8003b8c:	0800d7ac 	.word	0x0800d7ac

08003b90 <LL_PWR_EnableBootC2>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <LL_PWR_EnableBootC2+0x1c>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <LL_PWR_EnableBootC2+0x1c>)
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9e:	60d3      	str	r3, [r2, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	58000400 	.word	0x58000400

08003bb0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003bba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003bbe:	4905      	ldr	r1, [pc, #20]	; (8003bd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	58000800 	.word	0x58000800

08003bd8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	4904      	ldr	r1, [pc, #16]	; (8003bf8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	620b      	str	r3, [r1, #32]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	58000800 	.word	0x58000800

08003bfc <LL_AHB3_GRP1_EnableClock>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8003c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c58:	68fb      	ldr	r3, [r7, #12]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	605a      	str	r2, [r3, #4]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	605a      	str	r2, [r3, #4]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	401a      	ands	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	605a      	str	r2, [r3, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_C1_IPCC_SetFlag_CHx>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	041a      	lsls	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	609a      	str	r2, [r3, #8]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d101      	bne.n	8003d6a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d101      	bne.n	8003d94 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003da8:	2102      	movs	r1, #2
 8003daa:	4819      	ldr	r0, [pc, #100]	; (8003e10 <HW_IPCC_Rx_Handler+0x6c>)
 8003dac:	f7ff ffe4 	bl	8003d78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HW_IPCC_Rx_Handler+0x26>
 8003db6:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <HW_IPCC_Rx_Handler+0x6c>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003dc4:	f000 f8da 	bl	8003f7c <HW_IPCC_SYS_EvtHandler>
 8003dc8:	e01f      	b.n	8003e0a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4810      	ldr	r0, [pc, #64]	; (8003e10 <HW_IPCC_Rx_Handler+0x6c>)
 8003dce:	f7ff ffd3 	bl	8003d78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HW_IPCC_Rx_Handler+0x46>
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HW_IPCC_Rx_Handler+0x6c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003de4:	f000 f88e 	bl	8003f04 <HW_IPCC_BLE_EvtHandler>
 8003de8:	e00f      	b.n	8003e0a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003dea:	2108      	movs	r1, #8
 8003dec:	4808      	ldr	r0, [pc, #32]	; (8003e10 <HW_IPCC_Rx_Handler+0x6c>)
 8003dee:	f7ff ffc3 	bl	8003d78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d009      	beq.n	8003e0c <HW_IPCC_Rx_Handler+0x68>
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HW_IPCC_Rx_Handler+0x6c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003e06:	f000 f905 	bl	8004014 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
}
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	58000c00 	.word	0x58000c00

08003e14 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003e18:	2102      	movs	r1, #2
 8003e1a:	481a      	ldr	r0, [pc, #104]	; (8003e84 <HW_IPCC_Tx_Handler+0x70>)
 8003e1c:	f7ff ff97 	bl	8003d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HW_IPCC_Tx_Handler+0x26>
 8003e26:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HW_IPCC_Tx_Handler+0x70>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003e34:	f000 f896 	bl	8003f64 <HW_IPCC_SYS_CmdEvtHandler>
 8003e38:	e020      	b.n	8003e7c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	4811      	ldr	r0, [pc, #68]	; (8003e84 <HW_IPCC_Tx_Handler+0x70>)
 8003e3e:	f7ff ff86 	bl	8003d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HW_IPCC_Tx_Handler+0x48>
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HW_IPCC_Tx_Handler+0x70>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003e56:	f000 f8bf 	bl	8003fd8 <HW_IPCC_MM_FreeBufHandler>
 8003e5a:	e00f      	b.n	8003e7c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8003e5c:	2120      	movs	r1, #32
 8003e5e:	4809      	ldr	r0, [pc, #36]	; (8003e84 <HW_IPCC_Tx_Handler+0x70>)
 8003e60:	f7ff ff75 	bl	8003d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HW_IPCC_Tx_Handler+0x6a>
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HW_IPCC_Tx_Handler+0x70>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003e78:	f000 f850 	bl	8003f1c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
}
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	58000c00 	.word	0x58000c00

08003e88 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003e8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003e90:	f7ff fecd 	bl	8003c2e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003e94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e98:	f7ff fe9e 	bl	8003bd8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003e9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ea0:	f7ff fe86 	bl	8003bb0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003ea4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003ea6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003ea8:	f7ff fe72 	bl	8003b90 <LL_PWR_EnableBootC2>

  return;
 8003eac:	bf00      	nop
}
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003eb4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003eb8:	f7ff fea0 	bl	8003bfc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003ebc:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <HW_IPCC_Init+0x28>)
 8003ebe:	f7ff fee2 	bl	8003c86 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8003ec2:	4805      	ldr	r0, [pc, #20]	; (8003ed8 <HW_IPCC_Init+0x28>)
 8003ec4:	f7ff fecf 	bl	8003c66 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003ec8:	202c      	movs	r0, #44	; 0x2c
 8003eca:	f000 fc46 	bl	800475a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003ece:	202d      	movs	r0, #45	; 0x2d
 8003ed0:	f000 fc43 	bl	800475a <HAL_NVIC_EnableIRQ>

  return;
 8003ed4:	bf00      	nop
}
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	58000c00 	.word	0x58000c00

08003edc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4802      	ldr	r0, [pc, #8]	; (8003eec <HW_IPCC_BLE_Init+0x10>)
 8003ee4:	f7ff ff04 	bl	8003cf0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003ee8:	bf00      	nop
}
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58000c00 	.word	0x58000c00

08003ef0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4802      	ldr	r0, [pc, #8]	; (8003f00 <HW_IPCC_BLE_SendCmd+0x10>)
 8003ef8:	f7ff ff1a 	bl	8003d30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003efc:	bf00      	nop
}
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	58000c00 	.word	0x58000c00

08003f04 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003f08:	f007 f8bc 	bl	800b084 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4802      	ldr	r0, [pc, #8]	; (8003f18 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003f10:	f7ff ff00 	bl	8003d14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003f14:	bf00      	nop
}
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	58000c00 	.word	0x58000c00

08003f1c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003f20:	2120      	movs	r1, #32
 8003f22:	4803      	ldr	r0, [pc, #12]	; (8003f30 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003f24:	f7ff fed2 	bl	8003ccc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003f28:	f007 f8dc 	bl	800b0e4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8003f2c:	bf00      	nop
}
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	58000c00 	.word	0x58000c00

08003f34 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4802      	ldr	r0, [pc, #8]	; (8003f44 <HW_IPCC_SYS_Init+0x10>)
 8003f3c:	f7ff fed8 	bl	8003cf0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003f40:	bf00      	nop
}
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	58000c00 	.word	0x58000c00

08003f48 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4804      	ldr	r0, [pc, #16]	; (8003f60 <HW_IPCC_SYS_SendCmd+0x18>)
 8003f50:	f7ff feee 	bl	8003d30 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003f54:	2102      	movs	r1, #2
 8003f56:	4802      	ldr	r0, [pc, #8]	; (8003f60 <HW_IPCC_SYS_SendCmd+0x18>)
 8003f58:	f7ff fea5 	bl	8003ca6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003f5c:	bf00      	nop
}
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	58000c00 	.word	0x58000c00

08003f64 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4803      	ldr	r0, [pc, #12]	; (8003f78 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003f6c:	f7ff feae 	bl	8003ccc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003f70:	f007 f908 	bl	800b184 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003f74:	bf00      	nop
}
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	58000c00 	.word	0x58000c00

08003f7c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003f80:	f007 f916 	bl	800b1b0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003f84:	2102      	movs	r1, #2
 8003f86:	4802      	ldr	r0, [pc, #8]	; (8003f90 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003f88:	f7ff fec4 	bl	8003d14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003f8c:	bf00      	nop
}
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	58000c00 	.word	0x58000c00

08003f94 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003f9c:	2108      	movs	r1, #8
 8003f9e:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003fa0:	f7ff fed5 	bl	8003d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003fb0:	2108      	movs	r1, #8
 8003fb2:	4807      	ldr	r0, [pc, #28]	; (8003fd0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003fb4:	f7ff fe77 	bl	8003ca6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003fb8:	e006      	b.n	8003fc8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003fbe:	2108      	movs	r1, #8
 8003fc0:	4803      	ldr	r0, [pc, #12]	; (8003fd0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003fc2:	f7ff feb5 	bl	8003d30 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003fc6:	bf00      	nop
}
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	58000c00 	.word	0x58000c00
 8003fd4:	200004b4 	.word	0x200004b4

08003fd8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003fdc:	2108      	movs	r1, #8
 8003fde:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003fe0:	f7ff fe74 	bl	8003ccc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003fea:	2108      	movs	r1, #8
 8003fec:	4802      	ldr	r0, [pc, #8]	; (8003ff8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003fee:	f7ff fe9f 	bl	8003d30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003ff2:	bf00      	nop
}
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	58000c00 	.word	0x58000c00
 8003ffc:	200004b4 	.word	0x200004b4

08004000 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004004:	2108      	movs	r1, #8
 8004006:	4802      	ldr	r0, [pc, #8]	; (8004010 <HW_IPCC_TRACES_Init+0x10>)
 8004008:	f7ff fe72 	bl	8003cf0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800400c:	bf00      	nop
}
 800400e:	bd80      	pop	{r7, pc}
 8004010:	58000c00 	.word	0x58000c00

08004014 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004018:	f007 f972 	bl	800b300 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800401c:	2108      	movs	r1, #8
 800401e:	4802      	ldr	r0, [pc, #8]	; (8004028 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004020:	f7ff fe78 	bl	8003d14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004024:	bf00      	nop
}
 8004026:	bd80      	pop	{r7, pc}
 8004028:	58000c00 	.word	0x58000c00

0800402c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800402c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800402e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004030:	3304      	adds	r3, #4

08004032 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004032:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004034:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004036:	d3f9      	bcc.n	800402c <CopyDataInit>
  bx lr
 8004038:	4770      	bx	lr

0800403a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800403a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800403c:	3004      	adds	r0, #4

0800403e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800403e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004040:	d3fb      	bcc.n	800403a <FillZerobss>
  bx lr
 8004042:	4770      	bx	lr

08004044 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004044:	480c      	ldr	r0, [pc, #48]	; (8004078 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004046:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004048:	f000 f91e 	bl	8004288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800404c:	480b      	ldr	r0, [pc, #44]	; (800407c <LoopForever+0x8>)
 800404e:	490c      	ldr	r1, [pc, #48]	; (8004080 <LoopForever+0xc>)
 8004050:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <LoopForever+0x10>)
 8004052:	2300      	movs	r3, #0
 8004054:	f7ff ffed 	bl	8004032 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004058:	480b      	ldr	r0, [pc, #44]	; (8004088 <LoopForever+0x14>)
 800405a:	490c      	ldr	r1, [pc, #48]	; (800408c <LoopForever+0x18>)
 800405c:	2300      	movs	r3, #0
 800405e:	f7ff ffee 	bl	800403e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004062:	480b      	ldr	r0, [pc, #44]	; (8004090 <LoopForever+0x1c>)
 8004064:	490b      	ldr	r1, [pc, #44]	; (8004094 <LoopForever+0x20>)
 8004066:	2300      	movs	r3, #0
 8004068:	f7ff ffe9 	bl	800403e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800406c:	f007 fc4a 	bl	800b904 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004070:	f7fd fefc 	bl	8001e6c <main>

08004074 <LoopForever>:

LoopForever:
  b LoopForever
 8004074:	e7fe      	b.n	8004074 <LoopForever>
 8004076:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004078:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800407c:	20000008 	.word	0x20000008
 8004080:	2000009c 	.word	0x2000009c
 8004084:	0800daec 	.word	0x0800daec
  INIT_BSS _sbss, _ebss
 8004088:	20000224 	.word	0x20000224
 800408c:	20001600 	.word	0x20001600
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004090:	200301e4 	.word	0x200301e4
 8004094:	20030a67 	.word	0x20030a67

08004098 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004098:	e7fe      	b.n	8004098 <ADC1_IRQHandler>

0800409a <LL_AHB2_GRP1_EnableClock>:
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80040d6:	f107 030c 	add.w	r3, r7, #12
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80040e6:	2002      	movs	r0, #2
 80040e8:	f7ff ffd7 	bl	800409a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <BSP_LED_Init+0x6c>)
 80040f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f6:	2301      	movs	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040fe:	2302      	movs	r3, #2
 8004100:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <BSP_LED_Init+0x70>)
 8004106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410a:	f107 020c 	add.w	r2, r7, #12
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fed9 	bl	8004ec8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	4a08      	ldr	r2, [pc, #32]	; (800413c <BSP_LED_Init+0x70>)
 800411a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	4a05      	ldr	r2, [pc, #20]	; (8004138 <BSP_LED_Init+0x6c>)
 8004122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004126:	2200      	movs	r2, #0
 8004128:	4619      	mov	r1, r3
 800412a:	f001 f83d 	bl	80051a8 <HAL_GPIO_WritePin>
}
 800412e:	bf00      	nop
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	0800d958 	.word	0x0800d958
 800413c:	2000000c 	.word	0x2000000c

08004140 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <BSP_LED_On+0x2c>)
 800414e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	4a06      	ldr	r2, [pc, #24]	; (8004170 <BSP_LED_On+0x30>)
 8004156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800415a:	2201      	movs	r2, #1
 800415c:	4619      	mov	r1, r3
 800415e:	f001 f823 	bl	80051a8 <HAL_GPIO_WritePin>
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c
 8004170:	0800d958 	.word	0x0800d958

08004174 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <BSP_LED_Off+0x2c>)
 8004182:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <BSP_LED_Off+0x30>)
 800418a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800418e:	2200      	movs	r2, #0
 8004190:	4619      	mov	r1, r3
 8004192:	f001 f809 	bl	80051a8 <HAL_GPIO_WritePin>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	2000000c 	.word	0x2000000c
 80041a4:	0800d958 	.word	0x0800d958

080041a8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	460a      	mov	r2, r1
 80041b2:	71fb      	strb	r3, [r7, #7]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80041b8:	f107 030c 	add.w	r3, r7, #12
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <BSP_PB_Init+0x2e>
 80041ce:	2004      	movs	r0, #4
 80041d0:	f7ff ff63 	bl	800409a <LL_AHB2_GRP1_EnableClock>
 80041d4:	e00c      	b.n	80041f0 <BSP_PB_Init+0x48>
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d103      	bne.n	80041e4 <BSP_PB_Init+0x3c>
 80041dc:	2008      	movs	r0, #8
 80041de:	f7ff ff5c 	bl	800409a <LL_AHB2_GRP1_EnableClock>
 80041e2:	e005      	b.n	80041f0 <BSP_PB_Init+0x48>
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d102      	bne.n	80041f0 <BSP_PB_Init+0x48>
 80041ea:	2008      	movs	r0, #8
 80041ec:	f7ff ff55 	bl	800409a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80041f0:	79bb      	ldrb	r3, [r7, #6]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d117      	bne.n	8004226 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	4a20      	ldr	r2, [pc, #128]	; (800427c <BSP_PB_Init+0xd4>)
 80041fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041fe:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004204:	2301      	movs	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004208:	2302      	movs	r3, #2
 800420a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <BSP_PB_Init+0xd8>)
 8004210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004214:	f107 020c 	add.w	r2, r7, #12
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fe54 	bl	8004ec8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004220:	2001      	movs	r0, #1
 8004222:	f7fc fe49 	bl	8000eb8 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004226:	79bb      	ldrb	r3, [r7, #6]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d123      	bne.n	8004274 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <BSP_PB_Init+0xd4>)
 8004230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004234:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800423a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800423e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	4a0f      	ldr	r2, [pc, #60]	; (8004280 <BSP_PB_Init+0xd8>)
 8004244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004248:	f107 020c 	add.w	r2, r7, #12
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fe3a 	bl	8004ec8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <BSP_PB_Init+0xdc>)
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	b25b      	sxtb	r3, r3
 800425c:	2200      	movs	r2, #0
 800425e:	210f      	movs	r1, #15
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa60 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	4a06      	ldr	r2, [pc, #24]	; (8004284 <BSP_PB_Init+0xdc>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	b25b      	sxtb	r3, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fa73 	bl	800475a <HAL_NVIC_EnableIRQ>
  }
}
 8004274:	bf00      	nop
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	0800d960 	.word	0x0800d960
 8004280:	20000018 	.word	0x20000018
 8004284:	0800d968 	.word	0x0800d968

08004288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800428c:	4b26      	ldr	r3, [pc, #152]	; (8004328 <SystemInit+0xa0>)
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004292:	4b25      	ldr	r3, [pc, #148]	; (8004328 <SystemInit+0xa0>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <SystemInit+0xa0>)
 800429a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800429e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80042ba:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <SystemInit+0xa4>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d8:	f023 0305 	bic.w	r3, r3, #5
 80042dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80042f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <SystemInit+0xa8>)
 80042fa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <SystemInit+0xa8>)
 8004302:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004312:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000ed00 	.word	0xe000ed00
 800432c:	faf6fefb 	.word	0xfaf6fefb
 8004330:	22041000 	.word	0x22041000

08004334 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6053      	str	r3, [r2, #4]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e0042000 	.word	0xe0042000

08004354 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a04      	ldr	r2, [pc, #16]	; (8004370 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	6053      	str	r3, [r2, #4]
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e0042000 	.word	0xe0042000

08004374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <HAL_Init+0x3c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <HAL_Init+0x3c>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800438a:	2003      	movs	r0, #3
 800438c:	f000 f9c0 	bl	8004710 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004390:	2000      	movs	r0, #0
 8004392:	f000 f80f 	bl	80043b4 <HAL_InitTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	71fb      	strb	r3, [r7, #7]
 80043a0:	e001      	b.n	80043a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043a2:	f7fd ff56 	bl	8002252 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043a6:	79fb      	ldrb	r3, [r7, #7]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	58004000 	.word	0x58004000

080043b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <HAL_InitTick+0x6c>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d024      	beq.n	8004412 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80043c8:	f002 f87c 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_InitTick+0x6c>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	4619      	mov	r1, r3
 80043d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f9d6 	bl	8004792 <HAL_SYSTICK_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b0f      	cmp	r3, #15
 80043f0:	d809      	bhi.n	8004406 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f2:	2200      	movs	r2, #0
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295
 80043fa:	f000 f994 	bl	8004726 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HAL_InitTick+0x70>)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e007      	b.n	8004416 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e004      	b.n	8004416 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e001      	b.n	8004416 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	2000002c 	.word	0x2000002c
 8004424:	20000028 	.word	0x20000028

08004428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_IncTick+0x20>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_IncTick+0x24>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4413      	add	r3, r2
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_IncTick+0x24>)
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	2000002c 	.word	0x2000002c
 800444c:	200004b8 	.word	0x200004b8

08004450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return uwTick;
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <HAL_GetTick+0x14>)
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	200004b8 	.word	0x200004b8

08004468 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_GetTickPrio+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000028 	.word	0x20000028

08004480 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_GetTickFreq+0x14>)
 8004486:	781b      	ldrb	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000002c 	.word	0x2000002c

08004498 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800449c:	f7ff ff4a 	bl	8004334 <LL_DBGMCU_EnableDBGSleepMode>
}
 80044a0:	bf00      	nop
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80044a8:	f7ff ff54 	bl	8004354 <LL_DBGMCU_EnableDBGStopMode>
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <__NVIC_SetPriorityGrouping+0x44>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044cc:	4013      	ands	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044e2:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <__NVIC_SetPriorityGrouping+0x44>)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	60d3      	str	r3, [r2, #12]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044fc:	4b04      	ldr	r3, [pc, #16]	; (8004510 <__NVIC_GetPriorityGrouping+0x18>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	f003 0307 	and.w	r3, r3, #7
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	2b00      	cmp	r3, #0
 8004524:	db0b      	blt.n	800453e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	f003 021f 	and.w	r2, r3, #31
 800452c:	4907      	ldr	r1, [pc, #28]	; (800454c <__NVIC_EnableIRQ+0x38>)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2001      	movs	r0, #1
 8004536:	fa00 f202 	lsl.w	r2, r0, r2
 800453a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000e100 	.word	0xe000e100

08004550 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	2b00      	cmp	r3, #0
 8004560:	db12      	blt.n	8004588 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	490a      	ldr	r1, [pc, #40]	; (8004594 <__NVIC_DisableIRQ+0x44>)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2001      	movs	r0, #1
 8004572:	fa00 f202 	lsl.w	r2, r0, r2
 8004576:	3320      	adds	r3, #32
 8004578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800457c:	f3bf 8f4f 	dsb	sy
}
 8004580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004582:	f3bf 8f6f 	isb	sy
}
 8004586:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000e100 	.word	0xe000e100

08004598 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	db0c      	blt.n	80045c4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	4907      	ldr	r1, [pc, #28]	; (80045d0 <__NVIC_SetPendingIRQ+0x38>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2001      	movs	r0, #1
 80045ba:	fa00 f202 	lsl.w	r2, r0, r2
 80045be:	3340      	adds	r3, #64	; 0x40
 80045c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000e100 	.word	0xe000e100

080045d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db0c      	blt.n	8004600 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	4907      	ldr	r1, [pc, #28]	; (800460c <__NVIC_ClearPendingIRQ+0x38>)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2001      	movs	r0, #1
 80045f6:	fa00 f202 	lsl.w	r2, r0, r2
 80045fa:	3360      	adds	r3, #96	; 0x60
 80045fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000e100 	.word	0xe000e100

08004610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db0a      	blt.n	800463a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	490c      	ldr	r1, [pc, #48]	; (800465c <__NVIC_SetPriority+0x4c>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	0112      	lsls	r2, r2, #4
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	440b      	add	r3, r1
 8004634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004638:	e00a      	b.n	8004650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4908      	ldr	r1, [pc, #32]	; (8004660 <__NVIC_SetPriority+0x50>)
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	3b04      	subs	r3, #4
 8004648:	0112      	lsls	r2, r2, #4
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	440b      	add	r3, r1
 800464e:	761a      	strb	r2, [r3, #24]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000e100 	.word	0xe000e100
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f1c3 0307 	rsb	r3, r3, #7
 800467e:	2b04      	cmp	r3, #4
 8004680:	bf28      	it	cs
 8004682:	2304      	movcs	r3, #4
 8004684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3304      	adds	r3, #4
 800468a:	2b06      	cmp	r3, #6
 800468c:	d902      	bls.n	8004694 <NVIC_EncodePriority+0x30>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3b03      	subs	r3, #3
 8004692:	e000      	b.n	8004696 <NVIC_EncodePriority+0x32>
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004698:	f04f 32ff 	mov.w	r2, #4294967295
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	401a      	ands	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046ac:	f04f 31ff 	mov.w	r1, #4294967295
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	43d9      	mvns	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046bc:	4313      	orrs	r3, r2
         );
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3724      	adds	r7, #36	; 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046dc:	d301      	bcc.n	80046e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046de:	2301      	movs	r3, #1
 80046e0:	e00f      	b.n	8004702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <SysTick_Config+0x40>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ea:	210f      	movs	r1, #15
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	f7ff ff8e 	bl	8004610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <SysTick_Config+0x40>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fa:	4b04      	ldr	r3, [pc, #16]	; (800470c <SysTick_Config+0x40>)
 80046fc:	2207      	movs	r2, #7
 80046fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	e000e010 	.word	0xe000e010

08004710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fec9 	bl	80044b0 <__NVIC_SetPriorityGrouping>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004734:	f7ff fee0 	bl	80044f8 <__NVIC_GetPriorityGrouping>
 8004738:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f7ff ff90 	bl	8004664 <NVIC_EncodePriority>
 8004744:	4602      	mov	r2, r0
 8004746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff5f 	bl	8004610 <__NVIC_SetPriority>
}
 8004752:	bf00      	nop
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fed3 	bl	8004514 <__NVIC_EnableIRQ>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fee3 	bl	8004550 <__NVIC_DisableIRQ>
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff ff96 	bl	80046cc <SysTick_Config>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4603      	mov	r3, r0
 80047b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80047b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff feed 	bl	8004598 <__NVIC_SetPendingIRQ>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fefd 	bl	80045d4 <__NVIC_ClearPendingIRQ>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e08e      	b.n	8004914 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_DMA_Init+0x138>)
 80047fe:	429a      	cmp	r2, r3
 8004800:	d80f      	bhi.n	8004822 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	4b45      	ldr	r3, [pc, #276]	; (8004920 <HAL_DMA_Init+0x13c>)
 800480a:	4413      	add	r3, r2
 800480c:	4a45      	ldr	r2, [pc, #276]	; (8004924 <HAL_DMA_Init+0x140>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	009a      	lsls	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a42      	ldr	r2, [pc, #264]	; (8004928 <HAL_DMA_Init+0x144>)
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
 8004820:	e00e      	b.n	8004840 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_DMA_Init+0x148>)
 800482a:	4413      	add	r3, r2
 800482c:	4a3d      	ldr	r2, [pc, #244]	; (8004924 <HAL_DMA_Init+0x140>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	009a      	lsls	r2, r3, #2
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <HAL_DMA_Init+0x14c>)
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa74 	bl	8004d80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a0:	d102      	bne.n	80048a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80048b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048be:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d010      	beq.n	80048ea <HAL_DMA_Init+0x106>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d80c      	bhi.n	80048ea <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fa93 	bl	8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	e008      	b.n	80048fc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40020407 	.word	0x40020407
 8004920:	bffdfff8 	.word	0xbffdfff8
 8004924:	cccccccd 	.word	0xcccccccd
 8004928:	40020000 	.word	0x40020000
 800492c:	bffdfbf8 	.word	0xbffdfbf8
 8004930:	40020400 	.word	0x40020400

08004934 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Start_IT+0x20>
 8004950:	2302      	movs	r3, #2
 8004952:	e066      	b.n	8004a22 <HAL_DMA_Start_IT+0xee>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d155      	bne.n	8004a14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f9b9 	bl	8004d04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 020e 	orr.w	r2, r2, #14
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e00f      	b.n	80049cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 020a 	orr.w	r2, r2, #10
 80049ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e005      	b.n	8004a20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e04f      	b.n	8004adc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d008      	beq.n	8004a5a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e040      	b.n	8004adc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 020e 	bic.w	r2, r2, #14
 8004a68:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f003 021c 	and.w	r2, r3, #28
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aa6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004abe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ac8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d005      	beq.n	8004b0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2204      	movs	r2, #4
 8004b04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
 8004b0a:	e047      	b.n	8004b9c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 020e 	bic.w	r2, r2, #14
 8004b1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	f003 021c 	and.w	r2, r3, #28
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
    }
  }
  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f003 031c 	and.w	r3, r3, #28
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d026      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x7a>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d021      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d107      	bne.n	8004bfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0204 	bic.w	r2, r2, #4
 8004bf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f003 021c 	and.w	r2, r3, #28
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2104      	movs	r1, #4
 8004c08:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d071      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c1e:	e06c      	b.n	8004cfa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	f003 031c 	and.w	r3, r3, #28
 8004c28:	2202      	movs	r2, #2
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02e      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xec>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d029      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 020a 	bic.w	r2, r2, #10
 8004c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c68:	f003 021c 	and.w	r2, r3, #28
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	2102      	movs	r1, #2
 8004c72:	fa01 f202 	lsl.w	r2, r1, r2
 8004c76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d038      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c90:	e033      	b.n	8004cfa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	f003 031c 	and.w	r3, r3, #28
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02a      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x156>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d025      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 020e 	bic.w	r2, r2, #14
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	f003 021c 	and.w	r2, r3, #28
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	2101      	movs	r1, #1
 8004cce:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
}
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f003 021c 	and.w	r2, r3, #28
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d108      	bne.n	8004d64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d62:	e007      	b.n	8004d74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d80a      	bhi.n	8004daa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d98:	089b      	lsrs	r3, r3, #2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004da0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6493      	str	r3, [r2, #72]	; 0x48
 8004da8:	e007      	b.n	8004dba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	009a      	lsls	r2, r3, #2
 8004db2:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004db4:	4413      	add	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	3b08      	subs	r3, #8
 8004dc2:	4a0c      	ldr	r2, [pc, #48]	; (8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004dd0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	2201      	movs	r2, #1
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40020407 	.word	0x40020407
 8004df0:	4002081c 	.word	0x4002081c
 8004df4:	cccccccd 	.word	0xcccccccd
 8004df8:	40020880 	.word	0x40020880

08004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004e20:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	1000823f 	.word	0x1000823f
 8004e44:	40020940 	.word	0x40020940

08004e48 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d12b      	bne.n	8004eb6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_DMAEx_ConfigMuxSync+0x24>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e025      	b.n	8004eb8 <HAL_DMAEx_ConfigMuxSync+0x70>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	6811      	ldr	r1, [r2, #0]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	68d2      	ldr	r2, [r2, #12]
 8004e86:	3a01      	subs	r2, #1
 8004e88:	04d2      	lsls	r2, r2, #19
 8004e8a:	4311      	orrs	r1, r2
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	6852      	ldr	r2, [r2, #4]
 8004e90:	4311      	orrs	r1, r2
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	7a12      	ldrb	r2, [r2, #8]
 8004e96:	0412      	lsls	r2, r2, #16
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	7a52      	ldrb	r2, [r2, #9]
 8004e9e:	0252      	lsls	r2, r2, #9
 8004ea0:	4311      	orrs	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	e000fdff 	.word	0xe000fdff

08004ec8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ed6:	e14c      	b.n	8005172 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2101      	movs	r1, #1
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 813e 	beq.w	800516c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d005      	beq.n	8004f08 <HAL_GPIO_Init+0x40>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d130      	bne.n	8004f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	2203      	movs	r2, #3
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f3e:	2201      	movs	r2, #1
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 0201 	and.w	r2, r3, #1
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d017      	beq.n	8004fa6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	2203      	movs	r2, #3
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d123      	bne.n	8004ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	08da      	lsrs	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3208      	adds	r2, #8
 8004fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	220f      	movs	r2, #15
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	08da      	lsrs	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3208      	adds	r2, #8
 8004ff4:	6939      	ldr	r1, [r7, #16]
 8004ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	2203      	movs	r2, #3
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43db      	mvns	r3, r3
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4013      	ands	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0203 	and.w	r2, r3, #3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 8098 	beq.w	800516c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800503c:	4a54      	ldr	r2, [pc, #336]	; (8005190 <HAL_GPIO_Init+0x2c8>)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	220f      	movs	r2, #15
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4013      	ands	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005066:	d019      	beq.n	800509c <HAL_GPIO_Init+0x1d4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a4a      	ldr	r2, [pc, #296]	; (8005194 <HAL_GPIO_Init+0x2cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_GPIO_Init+0x1d0>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a49      	ldr	r2, [pc, #292]	; (8005198 <HAL_GPIO_Init+0x2d0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00d      	beq.n	8005094 <HAL_GPIO_Init+0x1cc>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a48      	ldr	r2, [pc, #288]	; (800519c <HAL_GPIO_Init+0x2d4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <HAL_GPIO_Init+0x1c8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a47      	ldr	r2, [pc, #284]	; (80051a0 <HAL_GPIO_Init+0x2d8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_GPIO_Init+0x1c4>
 8005088:	2304      	movs	r3, #4
 800508a:	e008      	b.n	800509e <HAL_GPIO_Init+0x1d6>
 800508c:	2307      	movs	r3, #7
 800508e:	e006      	b.n	800509e <HAL_GPIO_Init+0x1d6>
 8005090:	2303      	movs	r3, #3
 8005092:	e004      	b.n	800509e <HAL_GPIO_Init+0x1d6>
 8005094:	2302      	movs	r3, #2
 8005096:	e002      	b.n	800509e <HAL_GPIO_Init+0x1d6>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_GPIO_Init+0x1d6>
 800509c:	2300      	movs	r3, #0
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	f002 0203 	and.w	r2, r2, #3
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	4093      	lsls	r3, r2
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050ae:	4938      	ldr	r1, [pc, #224]	; (8005190 <HAL_GPIO_Init+0x2c8>)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	3302      	adds	r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050bc:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050e0:	4a30      	ldr	r2, [pc, #192]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	43db      	mvns	r3, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800510a:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005110:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 8005112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	43db      	mvns	r3, r3
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4013      	ands	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005136:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800513e:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 8005140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	43db      	mvns	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005164:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <HAL_GPIO_Init+0x2dc>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3301      	adds	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	f47f aeab 	bne.w	8004ed8 <HAL_GPIO_Init+0x10>
  }
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40010000 	.word	0x40010000
 8005194:	48000400 	.word	0x48000400
 8005198:	48000800 	.word	0x48000800
 800519c:	48000c00 	.word	0x48000c00
 80051a0:	48001000 	.word	0x48001000
 80051a4:	58000800 	.word	0x58000800

080051a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	807b      	strh	r3, [r7, #2]
 80051b4:	4613      	mov	r3, r2
 80051b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051b8:	787b      	ldrb	r3, [r7, #1]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051c4:	e002      	b.n	80051cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051c6:	887a      	ldrh	r2, [r7, #2]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051ee:	4a05      	ldr	r2, [pc, #20]	; (8005204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fb fec2 	bl	8000f80 <HAL_GPIO_EXTI_Callback>
  }
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	58000800 	.word	0x58000800

08005208 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_HSEM_IRQHandler+0x30>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <HAL_HSEM_IRQHandler+0x30>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	43db      	mvns	r3, r3
 800521c:	4906      	ldr	r1, [pc, #24]	; (8005238 <HAL_HSEM_IRQHandler+0x30>)
 800521e:	4013      	ands	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <HAL_HSEM_IRQHandler+0x30>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f807 	bl	800523c <HAL_HSEM_FreeCallback>
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	58001500 	.word	0x58001500

0800523c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01e      	beq.n	80052a0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005262:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_IPCC_Init+0x60>)
 8005264:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fc fffe 	bl	8002274 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005278:	68b8      	ldr	r0, [r7, #8]
 800527a:	f000 f85b 	bl	8005334 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f82c 	bl	80052e8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800529e:	e001      	b.n	80052a4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	58000c00 	.word	0x58000c00

080052b4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e00f      	b.n	8005316 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	4a0b      	ldr	r2, [pc, #44]	; (800532c <IPCC_SetDefaultCallbacks+0x44>)
 8005300:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3306      	adds	r3, #6
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <IPCC_SetDefaultCallbacks+0x48>)
 800530e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3301      	adds	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b05      	cmp	r3, #5
 800531a:	d9ec      	bls.n	80052f6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	080052b5 	.word	0x080052b5
 8005330:	080052cf 	.word	0x080052cf

08005334 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005348:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	223f      	movs	r2, #63	; 0x3f
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a04      	ldr	r2, [pc, #16]	; (8005378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	58000400 	.word	0x58000400

0800537c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <HAL_PWREx_GetVoltageRange+0x18>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	58000400 	.word	0x58000400

08005398 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053aa:	d101      	bne.n	80053b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_RCC_HSE_Enable>:
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <LL_RCC_HSE_Disable>:
{
 80053da:	b480      	push	{r7}
 80053dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80053de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_RCC_HSE_IsReady>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540a:	d101      	bne.n	8005410 <LL_RCC_HSE_IsReady+0x18>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <LL_RCC_HSE_IsReady+0x1a>
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <LL_RCC_HSI_Enable>:
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800542a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542e:	6013      	str	r3, [r2, #0]
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <LL_RCC_HSI_Disable>:
{
 800543a:	b480      	push	{r7}
 800543c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800544c:	6013      	str	r3, [r2, #0]
}
 800544e:	bf00      	nop
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <LL_RCC_HSI_IsReady>:
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546a:	d101      	bne.n	8005470 <LL_RCC_HSI_IsReady+0x18>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <LL_RCC_HSI_IsReady+0x1a>
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_RCC_HSI_SetCalibTrimming>:
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_RCC_HSI48_Enable>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80054be:	bf00      	nop
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_RCC_HSI48_Disable>:
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80054e0:	bf00      	nop
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_RCC_HSI48_IsReady>:
{
 80054ea:	b480      	push	{r7}
 80054ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80054ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d101      	bne.n	8005502 <LL_RCC_HSI48_IsReady+0x18>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <LL_RCC_HSI48_IsReady+0x1a>
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_RCC_LSE_Enable>:
{
 800550e:	b480      	push	{r7}
 8005510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_RCC_LSE_Disable>:
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_RCC_LSE_EnableBypass>:
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005562:	f043 0304 	orr.w	r3, r3, #4
 8005566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <LL_RCC_LSE_DisableBypass>:
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800558c:	bf00      	nop
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <LL_RCC_LSE_IsReady>:
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d101      	bne.n	80055ae <LL_RCC_LSE_IsReady+0x18>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <LL_RCC_LSE_IsReady+0x1a>
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <LL_RCC_LSI1_Enable>:
{
 80055ba:	b480      	push	{r7}
 80055bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80055be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_LSI1_Disable>:
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80055e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <LL_RCC_LSI1_IsReady>:
{
 80055fe:	b480      	push	{r7}
 8005600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b02      	cmp	r3, #2
 8005610:	d101      	bne.n	8005616 <LL_RCC_LSI1_IsReady+0x18>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <LL_RCC_LSI1_IsReady+0x1a>
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_RCC_LSI2_Enable>:
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800562e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005632:	f043 0304 	orr.w	r3, r3, #4
 8005636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800563a:	bf00      	nop
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_RCC_LSI2_Disable>:
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005654:	f023 0304 	bic.w	r3, r3, #4
 8005658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800565c:	bf00      	nop
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <LL_RCC_LSI2_IsReady>:
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d101      	bne.n	800567e <LL_RCC_LSI2_IsReady+0x18>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <LL_RCC_LSI2_IsReady+0x1a>
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <LL_RCC_LSI2_SetTrimming>:
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_RCC_MSI_Enable>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <LL_RCC_MSI_Disable>:
{
 80056d6:	b480      	push	{r7}
 80056d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80056da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	6013      	str	r3, [r2, #0]
}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_RCC_MSI_IsReady>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b02      	cmp	r3, #2
 8005704:	d101      	bne.n	800570a <LL_RCC_MSI_IsReady+0x16>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <LL_RCC_MSI_IsReady+0x18>
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <LL_RCC_MSI_SetRange>:
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005728:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <LL_RCC_MSI_GetRange>:
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800574e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2bb0      	cmp	r3, #176	; 0xb0
 8005754:	d901      	bls.n	800575a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005756:	23b0      	movs	r3, #176	; 0xb0
 8005758:	607b      	str	r3, [r7, #4]
  return msiRange;
 800575a:	687b      	ldr	r3, [r7, #4]
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <LL_RCC_SetSysClkSource>:
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f023 0203 	bic.w	r2, r3, #3
 80057a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	608b      	str	r3, [r1, #8]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <LL_RCC_GetSysClkSource>:
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <LL_RCC_SetAHBPrescaler>:
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_C2_RCC_SetAHBPrescaler>:
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005806:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800580a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800580e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <LL_RCC_SetAHB4Prescaler>:
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005832:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005836:	f023 020f 	bic.w	r2, r3, #15
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_RCC_SetAPB1Prescaler>:
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800585c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4313      	orrs	r3, r2
 800586e:	608b      	str	r3, [r1, #8]
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <LL_RCC_SetAPB2Prescaler>:
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800588e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4313      	orrs	r3, r2
 8005896:	608b      	str	r3, [r1, #8]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_RCC_GetAHBPrescaler>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_RCC_GetAHB4Prescaler>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <LL_RCC_GetAPB1Prescaler>:
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <LL_RCC_GetAPB2Prescaler>:
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LL_RCC_PLL_Enable>:
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <LL_RCC_PLL_Disable>:
{
 8005926:	b480      	push	{r7}
 8005928:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800592a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005938:	6013      	str	r3, [r2, #0]
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_RCC_PLL_IsReady>:
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005956:	d101      	bne.n	800595c <LL_RCC_PLL_IsReady+0x18>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <LL_RCC_PLL_IsReady+0x1a>
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <LL_RCC_PLL_GetN>:
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_RCC_PLL_GetR>:
{
 8005982:	b480      	push	{r7}
 8005984:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005990:	4618      	mov	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_RCC_PLL_GetDivider>:
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <LL_RCC_PLL_GetMainSource>:
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0303 	and.w	r3, r3, #3
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_RCC_IsActiveFlag_HPRE>:
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d101      	bne.n	80059e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a02:	d101      	bne.n	8005a08 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a28:	d101      	bne.n	8005a2e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a4c:	d101      	bne.n	8005a52 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a70:	d101      	bne.n	8005a76 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b08d      	sub	sp, #52	; 0x34
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e363      	b.n	800615e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 808d 	beq.w	8005bbe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa4:	f7ff fe89 	bl	80057ba <LL_RCC_GetSysClkSource>
 8005aa8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aaa:	f7ff ff82 	bl	80059b2 <LL_RCC_PLL_GetMainSource>
 8005aae:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x3e>
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	d147      	bne.n	8005b4c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d144      	bne.n	8005b4c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e347      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005ad2:	f7ff fe34 	bl	800573e <LL_RCC_MSI_GetRange>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d914      	bls.n	8005b06 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fd2f 	bl	8006544 <RCC_SetFlashLatencyFromMSIRange>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e336      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fe0e 	bl	8005716 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fe32 	bl	8005768 <LL_RCC_MSI_SetCalibTrimming>
 8005b04:	e013      	b.n	8005b2e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fe03 	bl	8005716 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fe27 	bl	8005768 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fd10 	bl	8006544 <RCC_SetFlashLatencyFromMSIRange>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e317      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b2e:	f000 fcc9 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4aa4      	ldr	r2, [pc, #656]	; (8005dc8 <HAL_RCC_OscConfig+0x344>)
 8005b36:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b38:	4ba4      	ldr	r3, [pc, #656]	; (8005dcc <HAL_RCC_OscConfig+0x348>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fc39 	bl	80043b4 <HAL_InitTick>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d039      	beq.n	8005bbc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e308      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01e      	beq.n	8005b92 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b54:	f7ff fdb0 	bl	80056b8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b58:	f7fe fc7a 	bl	8004450 <HAL_GetTick>
 8005b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b60:	f7fe fc76 	bl	8004450 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e2f5      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b72:	f7ff fdbf 	bl	80056f4 <LL_RCC_MSI_IsReady>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0f1      	beq.n	8005b60 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fdc8 	bl	8005716 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fdec 	bl	8005768 <LL_RCC_MSI_SetCalibTrimming>
 8005b90:	e015      	b.n	8005bbe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b92:	f7ff fda0 	bl	80056d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b96:	f7fe fc5b 	bl	8004450 <HAL_GetTick>
 8005b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b9e:	f7fe fc57 	bl	8004450 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e2d6      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005bb0:	f7ff fda0 	bl	80056f4 <LL_RCC_MSI_IsReady>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f1      	bne.n	8005b9e <HAL_RCC_OscConfig+0x11a>
 8005bba:	e000      	b.n	8005bbe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005bbc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d047      	beq.n	8005c5a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bca:	f7ff fdf6 	bl	80057ba <LL_RCC_GetSysClkSource>
 8005bce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bd0:	f7ff feef 	bl	80059b2 <LL_RCC_PLL_GetMainSource>
 8005bd4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_OscConfig+0x164>
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	2b0c      	cmp	r3, #12
 8005be0:	d108      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d134      	bne.n	8005c5a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e2b4      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfc:	d102      	bne.n	8005c04 <HAL_RCC_OscConfig+0x180>
 8005bfe:	f7ff fbdd 	bl	80053bc <LL_RCC_HSE_Enable>
 8005c02:	e001      	b.n	8005c08 <HAL_RCC_OscConfig+0x184>
 8005c04:	f7ff fbe9 	bl	80053da <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d012      	beq.n	8005c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fe fc1e 	bl	8004450 <HAL_GetTick>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c18:	f7fe fc1a 	bl	8004450 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	; 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e299      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c2a:	f7ff fbe5 	bl	80053f8 <LL_RCC_HSE_IsReady>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f1      	beq.n	8005c18 <HAL_RCC_OscConfig+0x194>
 8005c34:	e011      	b.n	8005c5a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7fe fc0b 	bl	8004450 <HAL_GetTick>
 8005c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c3e:	f7fe fc07 	bl	8004450 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b64      	cmp	r3, #100	; 0x64
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e286      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c50:	f7ff fbd2 	bl	80053f8 <LL_RCC_HSE_IsReady>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f1      	bne.n	8005c3e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04c      	beq.n	8005d00 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c66:	f7ff fda8 	bl	80057ba <LL_RCC_GetSysClkSource>
 8005c6a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c6c:	f7ff fea1 	bl	80059b2 <LL_RCC_PLL_GetMainSource>
 8005c70:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_OscConfig+0x200>
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	d10e      	bne.n	8005c9c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d10b      	bne.n	8005c9c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e266      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fbf1 	bl	800547c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c9a:	e031      	b.n	8005d00 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d019      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ca4:	f7ff fbba 	bl	800541c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fe fbd2 	bl	8004450 <HAL_GetTick>
 8005cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb0:	f7fe fbce 	bl	8004450 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e24d      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cc2:	f7ff fbc9 	bl	8005458 <LL_RCC_HSI_IsReady>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f1      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fbd3 	bl	800547c <LL_RCC_HSI_SetCalibTrimming>
 8005cd6:	e013      	b.n	8005d00 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd8:	f7ff fbaf 	bl	800543a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fe fbb8 	bl	8004450 <HAL_GetTick>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce4:	f7fe fbb4 	bl	8004450 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e233      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005cf6:	f7ff fbaf 	bl	8005458 <LL_RCC_HSI_IsReady>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f1      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80a3 	beq.w	8005e60 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d076      	beq.n	8005e10 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d046      	beq.n	8005dbc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005d2e:	f7ff fc66 	bl	80055fe <LL_RCC_LSI1_IsReady>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d113      	bne.n	8005d60 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005d38:	f7ff fc3f 	bl	80055ba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d3c:	f7fe fb88 	bl	8004450 <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d44:	f7fe fb84 	bl	8004450 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e203      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005d56:	f7ff fc52 	bl	80055fe <LL_RCC_LSI1_IsReady>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f1      	beq.n	8005d44 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005d60:	f7ff fc5f 	bl	8005622 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fe fb74 	bl	8004450 <HAL_GetTick>
 8005d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d6c:	f7fe fb70 	bl	8004450 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e1ef      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005d7e:	f7ff fc72 	bl	8005666 <LL_RCC_LSI2_IsReady>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f1      	beq.n	8005d6c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fc7c 	bl	800568a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005d92:	f7ff fc23 	bl	80055dc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fe fb5b 	bl	8004450 <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d9e:	f7fe fb57 	bl	8004450 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e1d6      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005db0:	f7ff fc25 	bl	80055fe <LL_RCC_LSI1_IsReady>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f1      	bne.n	8005d9e <HAL_RCC_OscConfig+0x31a>
 8005dba:	e051      	b.n	8005e60 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005dbc:	f7ff fbfd 	bl	80055ba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fe fb46 	bl	8004450 <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005dc6:	e00c      	b.n	8005de2 <HAL_RCC_OscConfig+0x35e>
 8005dc8:	20000024 	.word	0x20000024
 8005dcc:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005dd0:	f7fe fb3e 	bl	8004450 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e1bd      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005de2:	f7ff fc0c 	bl	80055fe <LL_RCC_LSI1_IsReady>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f1      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005dec:	f7ff fc2a 	bl	8005644 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005df2:	f7fe fb2d 	bl	8004450 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e1ac      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005e04:	f7ff fc2f 	bl	8005666 <LL_RCC_LSI2_IsReady>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f1      	bne.n	8005df2 <HAL_RCC_OscConfig+0x36e>
 8005e0e:	e027      	b.n	8005e60 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005e10:	f7ff fc18 	bl	8005644 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e14:	f7fe fb1c 	bl	8004450 <HAL_GetTick>
 8005e18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005e1c:	f7fe fb18 	bl	8004450 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e197      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005e2e:	f7ff fc1a 	bl	8005666 <LL_RCC_LSI2_IsReady>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f1      	bne.n	8005e1c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005e38:	f7ff fbd0 	bl	80055dc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3c:	f7fe fb08 	bl	8004450 <HAL_GetTick>
 8005e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005e44:	f7fe fb04 	bl	8004450 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e183      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005e56:	f7ff fbd2 	bl	80055fe <LL_RCC_LSI1_IsReady>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f1      	bne.n	8005e44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d05b      	beq.n	8005f24 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e6c:	4ba7      	ldr	r3, [pc, #668]	; (800610c <HAL_RCC_OscConfig+0x688>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d114      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e78:	f7ff fa70 	bl	800535c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e7c:	f7fe fae8 	bl	8004450 <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e84:	f7fe fae4 	bl	8004450 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e163      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e96:	4b9d      	ldr	r3, [pc, #628]	; (800610c <HAL_RCC_OscConfig+0x688>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x42c>
 8005eaa:	f7ff fb30 	bl	800550e <LL_RCC_LSE_Enable>
 8005eae:	e00c      	b.n	8005eca <HAL_RCC_OscConfig+0x446>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d104      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x43e>
 8005eb8:	f7ff fb4b 	bl	8005552 <LL_RCC_LSE_EnableBypass>
 8005ebc:	f7ff fb27 	bl	800550e <LL_RCC_LSE_Enable>
 8005ec0:	e003      	b.n	8005eca <HAL_RCC_OscConfig+0x446>
 8005ec2:	f7ff fb35 	bl	8005530 <LL_RCC_LSE_Disable>
 8005ec6:	f7ff fb55 	bl	8005574 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d014      	beq.n	8005efc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed2:	f7fe fabd 	bl	8004450 <HAL_GetTick>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fe fab9 	bl	8004450 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e136      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ef0:	f7ff fb51 	bl	8005596 <LL_RCC_LSE_IsReady>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0ef      	beq.n	8005eda <HAL_RCC_OscConfig+0x456>
 8005efa:	e013      	b.n	8005f24 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7fe faa8 	bl	8004450 <HAL_GetTick>
 8005f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f02:	e00a      	b.n	8005f1a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f04:	f7fe faa4 	bl	8004450 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e121      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f1a:	f7ff fb3c 	bl	8005596 <LL_RCC_LSE_IsReady>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1ef      	bne.n	8005f04 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d02c      	beq.n	8005f8a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d014      	beq.n	8005f62 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f38:	f7ff fab5 	bl	80054a6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fe fa88 	bl	8004450 <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f44:	f7fe fa84 	bl	8004450 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e103      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005f56:	f7ff fac8 	bl	80054ea <LL_RCC_HSI48_IsReady>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f1      	beq.n	8005f44 <HAL_RCC_OscConfig+0x4c0>
 8005f60:	e013      	b.n	8005f8a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f62:	f7ff fab1 	bl	80054c8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f66:	f7fe fa73 	bl	8004450 <HAL_GetTick>
 8005f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f6e:	f7fe fa6f 	bl	8004450 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e0ee      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005f80:	f7ff fab3 	bl	80054ea <LL_RCC_HSI48_IsReady>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f1      	bne.n	8005f6e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 80e4 	beq.w	800615c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f94:	f7ff fc11 	bl	80057ba <LL_RCC_GetSysClkSource>
 8005f98:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	f040 80b4 	bne.w	8006114 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0203 	and.w	r2, r3, #3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d123      	bne.n	8006002 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d11c      	bne.n	8006002 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d114      	bne.n	8006002 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d10d      	bne.n	8006002 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d106      	bne.n	8006002 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d05d      	beq.n	80060be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b0c      	cmp	r3, #12
 8006006:	d058      	beq.n	80060ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0a1      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800601a:	f7ff fc84 	bl	8005926 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800601e:	f7fe fa17 	bl	8004450 <HAL_GetTick>
 8006022:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006026:	f7fe fa13 	bl	8004450 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e092      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1ef      	bne.n	8006026 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_RCC_OscConfig+0x68c>)
 800604e:	4013      	ands	r3, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006058:	4311      	orrs	r1, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800605e:	0212      	lsls	r2, r2, #8
 8006060:	4311      	orrs	r1, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006066:	4311      	orrs	r1, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800606c:	4311      	orrs	r1, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006072:	430a      	orrs	r2, r1
 8006074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006078:	4313      	orrs	r3, r2
 800607a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800607c:	f7ff fc44 	bl	8005908 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800608a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006090:	f7fe f9de 	bl	8004450 <HAL_GetTick>
 8006094:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006098:	f7fe f9da 	bl	8004450 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e059      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ef      	beq.n	8006098 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b8:	e050      	b.n	800615c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e04f      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d147      	bne.n	800615c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060cc:	f7ff fc1c 	bl	8005908 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060e0:	f7fe f9b6 	bl	8004450 <HAL_GetTick>
 80060e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fe f9b2 	bl	8004450 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e031      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0ef      	beq.n	80060e8 <HAL_RCC_OscConfig+0x664>
 8006108:	e028      	b.n	800615c <HAL_RCC_OscConfig+0x6d8>
 800610a:	bf00      	nop
 800610c:	58000400 	.word	0x58000400
 8006110:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b0c      	cmp	r3, #12
 8006118:	d01e      	beq.n	8006158 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	f7ff fc04 	bl	8005926 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611e:	f7fe f997 	bl	8004450 <HAL_GetTick>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006124:	e008      	b.n	8006138 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006126:	f7fe f993 	bl	8004450 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e012      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1ef      	bne.n	8006126 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <HAL_RCC_OscConfig+0x6e4>)
 8006152:	4013      	ands	r3, r2
 8006154:	60cb      	str	r3, [r1, #12]
 8006156:	e001      	b.n	800615c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3734      	adds	r7, #52	; 0x34
 8006162:	46bd      	mov	sp, r7
 8006164:	bd90      	pop	{r4, r7, pc}
 8006166:	bf00      	nop
 8006168:	eefefffc 	.word	0xeefefffc

0800616c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e12d      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006180:	4b98      	ldr	r3, [pc, #608]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d91b      	bls.n	80061c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618e:	4b95      	ldr	r3, [pc, #596]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 0207 	bic.w	r2, r3, #7
 8006196:	4993      	ldr	r1, [pc, #588]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	4313      	orrs	r3, r2
 800619c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800619e:	f7fe f957 	bl	8004450 <HAL_GetTick>
 80061a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061a6:	f7fe f953 	bl	8004450 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e111      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b8:	4b8a      	ldr	r3, [pc, #552]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d1ef      	bne.n	80061a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fafb 	bl	80057d2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061dc:	f7fe f938 	bl	8004450 <HAL_GetTick>
 80061e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061e4:	f7fe f934 	bl	8004450 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e0f2      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80061f6:	f7ff fbe8 	bl	80059ca <LL_RCC_IsActiveFlag_HPRE>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f1      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d016      	beq.n	800623a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff faf2 	bl	80057fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006216:	f7fe f91b 	bl	8004450 <HAL_GetTick>
 800621a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800621c:	e008      	b.n	8006230 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800621e:	f7fe f917 	bl	8004450 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e0d5      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006230:	f7ff fbdd 	bl	80059ee <LL_RCC_IsActiveFlag_C2HPRE>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f1      	beq.n	800621e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d016      	beq.n	8006274 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff faeb 	bl	8005826 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006250:	f7fe f8fe 	bl	8004450 <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006258:	f7fe f8fa 	bl	8004450 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e0b8      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800626a:	f7ff fbd3 	bl	8005a14 <LL_RCC_IsActiveFlag_SHDHPRE>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f1      	beq.n	8006258 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d016      	beq.n	80062ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fae5 	bl	8005854 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800628a:	f7fe f8e1 	bl	8004450 <HAL_GetTick>
 800628e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006292:	f7fe f8dd 	bl	8004450 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e09b      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80062a4:	f7ff fbc9 	bl	8005a3a <LL_RCC_IsActiveFlag_PPRE1>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f1      	beq.n	8006292 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d017      	beq.n	80062ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fadb 	bl	800587c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062c6:	f7fe f8c3 	bl	8004450 <HAL_GetTick>
 80062ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062ce:	f7fe f8bf 	bl	8004450 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e07d      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80062e0:	f7ff fbbd 	bl	8005a5e <LL_RCC_IsActiveFlag_PPRE2>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f1      	beq.n	80062ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d043      	beq.n	800637e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d106      	bne.n	800630c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80062fe:	f7ff f87b 	bl	80053f8 <LL_RCC_HSE_IsReady>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11e      	bne.n	8006346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e067      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d106      	bne.n	8006322 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006314:	f7ff fb16 	bl	8005944 <LL_RCC_PLL_IsReady>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d113      	bne.n	8006346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e05c      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800632a:	f7ff f9e3 	bl	80056f4 <LL_RCC_MSI_IsReady>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d108      	bne.n	8006346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e051      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006338:	f7ff f88e 	bl	8005458 <LL_RCC_HSI_IsReady>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e04a      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fa21 	bl	8005792 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006350:	f7fe f87e 	bl	8004450 <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006356:	e00a      	b.n	800636e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006358:	f7fe f87a 	bl	8004450 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	; 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e036      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636e:	f7ff fa24 	bl	80057ba <LL_RCC_GetSysClkSource>
 8006372:	4602      	mov	r2, r0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	429a      	cmp	r2, r3
 800637c:	d1ec      	bne.n	8006358 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800637e:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d21b      	bcs.n	80063c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638c:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f023 0207 	bic.w	r2, r3, #7
 8006394:	4913      	ldr	r1, [pc, #76]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639c:	f7fe f858 	bl	8004450 <HAL_GetTick>
 80063a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063a4:	f7fe f854 	bl	8004450 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e012      	b.n	80063dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <HAL_RCC_ClockConfig+0x278>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d1ef      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80063c4:	f000 f87e 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 80063c8:	4603      	mov	r3, r0
 80063ca:	4a07      	ldr	r2, [pc, #28]	; (80063e8 <HAL_RCC_ClockConfig+0x27c>)
 80063cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80063ce:	f7fe f84b 	bl	8004468 <HAL_GetTickPrio>
 80063d2:	4603      	mov	r3, r0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fd ffed 	bl	80043b4 <HAL_InitTick>
 80063da:	4603      	mov	r3, r0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	58004000 	.word	0x58004000
 80063e8:	20000024 	.word	0x20000024

080063ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ec:	b590      	push	{r4, r7, lr}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f2:	f7ff f9e2 	bl	80057ba <LL_RCC_GetSysClkSource>
 80063f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80063fe:	f7ff f99e 	bl	800573e <LL_RCC_MSI_GetRange>
 8006402:	4603      	mov	r3, r0
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	4a2b      	ldr	r2, [pc, #172]	; (80064b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800640c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	e04b      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b04      	cmp	r3, #4
 8006418:	d102      	bne.n	8006420 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800641a:	4b28      	ldr	r3, [pc, #160]	; (80064bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e045      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b08      	cmp	r3, #8
 8006424:	d10a      	bne.n	800643c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006426:	f7fe ffb7 	bl	8005398 <LL_RCC_HSE_IsEnabledDiv2>
 800642a:	4603      	mov	r3, r0
 800642c:	2b01      	cmp	r3, #1
 800642e:	d102      	bne.n	8006436 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006430:	4b22      	ldr	r3, [pc, #136]	; (80064bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e03a      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	e037      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800643c:	f7ff fab9 	bl	80059b2 <LL_RCC_PLL_GetMainSource>
 8006440:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d003      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x64>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b03      	cmp	r3, #3
 800644c:	d003      	beq.n	8006456 <HAL_RCC_GetSysClockFreq+0x6a>
 800644e:	e00d      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006450:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006452:	60bb      	str	r3, [r7, #8]
        break;
 8006454:	e015      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006456:	f7fe ff9f 	bl	8005398 <LL_RCC_HSE_IsEnabledDiv2>
 800645a:	4603      	mov	r3, r0
 800645c:	2b01      	cmp	r3, #1
 800645e:	d102      	bne.n	8006466 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006460:	4b16      	ldr	r3, [pc, #88]	; (80064bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006462:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006464:	e00d      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006466:	4b16      	ldr	r3, [pc, #88]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006468:	60bb      	str	r3, [r7, #8]
        break;
 800646a:	e00a      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800646c:	f7ff f967 	bl	800573e <LL_RCC_MSI_GetRange>
 8006470:	4603      	mov	r3, r0
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	4a0f      	ldr	r2, [pc, #60]	; (80064b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800647a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647e:	60bb      	str	r3, [r7, #8]
        break;
 8006480:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006482:	f7ff fa71 	bl	8005968 <LL_RCC_PLL_GetN>
 8006486:	4602      	mov	r2, r0
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	fb03 f402 	mul.w	r4, r3, r2
 800648e:	f7ff fa84 	bl	800599a <LL_RCC_PLL_GetDivider>
 8006492:	4603      	mov	r3, r0
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	3301      	adds	r3, #1
 8006498:	fbb4 f4f3 	udiv	r4, r4, r3
 800649c:	f7ff fa71 	bl	8005982 <LL_RCC_PLL_GetR>
 80064a0:	4603      	mov	r3, r0
 80064a2:	0f5b      	lsrs	r3, r3, #29
 80064a4:	3301      	adds	r3, #1
 80064a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80064aa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80064ac:	68fb      	ldr	r3, [r7, #12]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd90      	pop	{r4, r7, pc}
 80064b6:	bf00      	nop
 80064b8:	0800d9cc 	.word	0x0800d9cc
 80064bc:	00f42400 	.word	0x00f42400
 80064c0:	01e84800 	.word	0x01e84800

080064c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c4:	b598      	push	{r3, r4, r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064c8:	f7ff ff90 	bl	80063ec <HAL_RCC_GetSysClockFreq>
 80064cc:	4604      	mov	r4, r0
 80064ce:	f7ff f9e9 	bl	80058a4 <LL_RCC_GetAHBPrescaler>
 80064d2:	4603      	mov	r3, r0
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	4a03      	ldr	r2, [pc, #12]	; (80064e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80064dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	bd98      	pop	{r3, r4, r7, pc}
 80064e8:	0800d96c 	.word	0x0800d96c

080064ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ec:	b598      	push	{r3, r4, r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064f0:	f7ff ffe8 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 80064f4:	4604      	mov	r4, r0
 80064f6:	f7ff f9ef 	bl	80058d8 <LL_RCC_GetAPB1Prescaler>
 80064fa:	4603      	mov	r3, r0
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	4a04      	ldr	r2, [pc, #16]	; (8006514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd98      	pop	{r3, r4, r7, pc}
 8006514:	0800d9ac 	.word	0x0800d9ac

08006518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006518:	b598      	push	{r3, r4, r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800651c:	f7ff ffd2 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8006520:	4604      	mov	r4, r0
 8006522:	f7ff f9e5 	bl	80058f0 <LL_RCC_GetAPB2Prescaler>
 8006526:	4603      	mov	r3, r0
 8006528:	0adb      	lsrs	r3, r3, #11
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	4a04      	ldr	r2, [pc, #16]	; (8006540 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	fa24 f303 	lsr.w	r3, r4, r3
}
 800653c:	4618      	mov	r0, r3
 800653e:	bd98      	pop	{r3, r4, r7, pc}
 8006540:	0800d9ac 	.word	0x0800d9ac

08006544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2bb0      	cmp	r3, #176	; 0xb0
 8006550:	d903      	bls.n	800655a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e007      	b.n	800656a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	091b      	lsrs	r3, r3, #4
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006568:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800656a:	f7ff f9a7 	bl	80058bc <LL_RCC_GetAHB4Prescaler>
 800656e:	4603      	mov	r3, r0
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006582:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a0a      	ldr	r2, [pc, #40]	; (80065b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006588:	fba2 2303 	umull	r2, r3, r2, r3
 800658c:	0c9c      	lsrs	r4, r3, #18
 800658e:	f7fe fef5 	bl	800537c <HAL_PWREx_GetVoltageRange>
 8006592:	4603      	mov	r3, r0
 8006594:	4619      	mov	r1, r3
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f80c 	bl	80065b4 <RCC_SetFlashLatency>
 800659c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}
 80065a6:	bf00      	nop
 80065a8:	0800d9cc 	.word	0x0800d9cc
 80065ac:	0800d96c 	.word	0x0800d96c
 80065b0:	431bde83 	.word	0x431bde83

080065b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b093      	sub	sp, #76	; 0x4c
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80065be:	4b37      	ldr	r3, [pc, #220]	; (800669c <RCC_SetFlashLatency+0xe8>)
 80065c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80065c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80065ca:	4a35      	ldr	r2, [pc, #212]	; (80066a0 <RCC_SetFlashLatency+0xec>)
 80065cc:	f107 031c 	add.w	r3, r7, #28
 80065d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80065d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80065d6:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <RCC_SetFlashLatency+0xf0>)
 80065d8:	f107 040c 	add.w	r4, r7, #12
 80065dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80065e2:	2300      	movs	r3, #0
 80065e4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d11a      	bne.n	8006624 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065ee:	2300      	movs	r3, #0
 80065f0:	643b      	str	r3, [r7, #64]	; 0x40
 80065f2:	e013      	b.n	800661c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80065f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	3348      	adds	r3, #72	; 0x48
 80065fa:	443b      	add	r3, r7
 80065fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d807      	bhi.n	8006616 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	3348      	adds	r3, #72	; 0x48
 800660c:	443b      	add	r3, r7
 800660e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006614:	e020      	b.n	8006658 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006618:	3301      	adds	r3, #1
 800661a:	643b      	str	r3, [r7, #64]	; 0x40
 800661c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661e:	2b03      	cmp	r3, #3
 8006620:	d9e8      	bls.n	80065f4 <RCC_SetFlashLatency+0x40>
 8006622:	e019      	b.n	8006658 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006624:	2300      	movs	r3, #0
 8006626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006628:	e013      	b.n	8006652 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	3348      	adds	r3, #72	; 0x48
 8006630:	443b      	add	r3, r7
 8006632:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d807      	bhi.n	800664c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	3348      	adds	r3, #72	; 0x48
 8006642:	443b      	add	r3, r7
 8006644:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006648:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800664a:	e005      	b.n	8006658 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800664c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664e:	3301      	adds	r3, #1
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	2b02      	cmp	r3, #2
 8006656:	d9e8      	bls.n	800662a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006658:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <RCC_SetFlashLatency+0xf4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f023 0207 	bic.w	r2, r3, #7
 8006660:	4911      	ldr	r1, [pc, #68]	; (80066a8 <RCC_SetFlashLatency+0xf4>)
 8006662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006664:	4313      	orrs	r3, r2
 8006666:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006668:	f7fd fef2 	bl	8004450 <HAL_GetTick>
 800666c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800666e:	e008      	b.n	8006682 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006670:	f7fd feee 	bl	8004450 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e007      	b.n	8006692 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <RCC_SetFlashLatency+0xf4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668c:	429a      	cmp	r2, r3
 800668e:	d1ef      	bne.n	8006670 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	374c      	adds	r7, #76	; 0x4c
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}
 800669a:	bf00      	nop
 800669c:	0800d7d4 	.word	0x0800d7d4
 80066a0:	0800d7e4 	.word	0x0800d7e4
 80066a4:	0800d7f0 	.word	0x0800d7f0
 80066a8:	58004000 	.word	0x58004000

080066ac <LL_RCC_LSE_IsEnabled>:
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80066b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <LL_RCC_LSE_IsEnabled+0x18>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <LL_RCC_LSE_IsReady>:
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80066d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d101      	bne.n	80066e8 <LL_RCC_LSE_IsReady+0x18>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <LL_RCC_LSE_IsReady+0x1a>
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <LL_RCC_SetRFWKPClockSource>:
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80066fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006704:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <LL_RCC_SetSMPSClockSource>:
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f023 0203 	bic.w	r2, r3, #3
 8006732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4313      	orrs	r3, r2
 800673a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <LL_RCC_SetSMPSPrescaler>:
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800675a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4313      	orrs	r3, r2
 8006762:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <LL_RCC_SetUSARTClockSource>:
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f023 0203 	bic.w	r2, r3, #3
 8006784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <LL_RCC_SetLPUARTClockSource>:
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80067a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <LL_RCC_SetI2CClockSource>:
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80067d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067e0:	43db      	mvns	r3, r3
 80067e2:	401a      	ands	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <LL_RCC_SetLPTIMClockSource>:
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800680a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0c1b      	lsrs	r3, r3, #16
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	43db      	mvns	r3, r3
 800681a:	401a      	ands	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <LL_RCC_SetSAIClockSource>:
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800683e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800684a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <LL_RCC_SetRNGClockSource>:
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800686a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <LL_RCC_SetCLK48ClockSource>:
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <LL_RCC_SetUSBClockSource>:
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff ffe3 	bl	800688e <LL_RCC_SetCLK48ClockSource>
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <LL_RCC_SetADCClockSource>:
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80068d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <LL_RCC_SetRTCClockSource>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <LL_RCC_GetRTCClockSource>:
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800692c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006934:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006938:	4618      	mov	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <LL_RCC_ForceBackupDomainReset>:
{
 8006942:	b480      	push	{r7}
 8006944:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800697c:	bf00      	nop
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <LL_RCC_PLLSAI1_Enable>:
{
 8006986:	b480      	push	{r7}
 8006988:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800698a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006994:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006998:	6013      	str	r3, [r2, #0]
}
 800699a:	bf00      	nop
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <LL_RCC_PLLSAI1_Disable>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80069a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069b6:	6013      	str	r3, [r2, #0]
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <LL_RCC_PLLSAI1_IsReady>:
{
 80069c2:	b480      	push	{r7}
 80069c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80069c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069d4:	d101      	bne.n	80069da <LL_RCC_PLLSAI1_IsReady+0x18>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b088      	sub	sp, #32
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80069ee:	2300      	movs	r3, #0
 80069f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80069f2:	2300      	movs	r3, #0
 80069f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d034      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a0a:	d021      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006a0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a10:	d81b      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a16:	d01d      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a1c:	d815      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a26:	d110      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a36:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a38:	e00d      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f947 	bl	8006cd2 <RCCEx_PLLSAI1_ConfigNP>
 8006a44:	4603      	mov	r3, r0
 8006a46:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a48:	e005      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	77fb      	strb	r3, [r7, #31]
        break;
 8006a4e:	e002      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006a50:	bf00      	nop
 8006a52:	e000      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a56:	7ffb      	ldrb	r3, [r7, #31]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fee8 	bl	8006836 <LL_RCC_SetSAIClockSource>
 8006a66:	e001      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	7ffb      	ldrb	r3, [r7, #31]
 8006a6a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d046      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006a78:	f7ff ff56 	bl	8006928 <LL_RCC_GetRTCClockSource>
 8006a7c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d03c      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006a88:	f7fe fc68 	bl	800535c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff ff30 	bl	80068fc <LL_RCC_SetRTCClockSource>
 8006a9c:	e02e      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006aa8:	f7ff ff4b 	bl	8006942 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006aac:	f7ff ff5a 	bl	8006964 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006ac8:	f7ff fdf0 	bl	80066ac <LL_RCC_LSE_IsEnabled>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d114      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ad2:	f7fd fcbd 	bl	8004450 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006ad8:	e00b      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ada:	f7fd fcb9 	bl	8004450 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d902      	bls.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	77fb      	strb	r3, [r7, #31]
              break;
 8006af0:	e004      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006af2:	f7ff fded 	bl	80066d0 <LL_RCC_LSE_IsReady>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d1ee      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006afc:	7ffb      	ldrb	r3, [r7, #31]
 8006afe:	77bb      	strb	r3, [r7, #30]
 8006b00:	e001      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b02:	7ffb      	ldrb	r3, [r7, #31]
 8006b04:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fe2a 	bl	8006770 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fe35 	bl	800679c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff fe5d 	bl	8006802 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fe52 	bl	8006802 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fe2a 	bl	80067c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fe1f 	bl	80067c8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d022      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff fe8d 	bl	80068ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bb8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bc2:	d10b      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 f8dd 	bl	8006d88 <RCCEx_PLLSAI1_ConfigNQ>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006bd2:	7ffb      	ldrb	r3, [r7, #31]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006bd8:	7ffb      	ldrb	r3, [r7, #31]
 8006bda:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d02b      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d008      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bfa:	d003      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d105      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fe2a 	bl	8006862 <LL_RCC_SetRNGClockSource>
 8006c0e:	e00a      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f7ff fe21 	bl	8006862 <LL_RCC_SetRNGClockSource>
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fe34 	bl	800688e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006c2e:	d107      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d022      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fe3d 	bl	80068d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c6e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c78:	d10b      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f8dd 	bl	8006e3e <RCCEx_PLLSAI1_ConfigNR>
 8006c84:	4603      	mov	r3, r0
 8006c86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006c88:	7ffb      	ldrb	r3, [r7, #31]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006c8e:	7ffb      	ldrb	r3, [r7, #31]
 8006c90:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fd26 	bl	80066f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fd45 	bl	8006748 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fd2c 	bl	8006720 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006cc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006cde:	f7ff fe61 	bl	80069a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ce2:	f7fd fbb5 	bl	8004450 <HAL_GetTick>
 8006ce6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ce8:	e009      	b.n	8006cfe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cea:	f7fd fbb1 	bl	8004450 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d902      	bls.n	8006cfe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e004      	b.n	8006d08 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006cfe:	f7ff fe60 	bl	80069c2 <LL_RCC_PLLSAI1_IsReady>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f0      	bne.n	8006cea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d137      	bne.n	8006d7e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d22:	4313      	orrs	r3, r2
 8006d24:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006d3c:	f7ff fe23 	bl	8006986 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d40:	f7fd fb86 	bl	8004450 <HAL_GetTick>
 8006d44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d46:	e009      	b.n	8006d5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d48:	f7fd fb82 	bl	8004450 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d902      	bls.n	8006d5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	73fb      	strb	r3, [r7, #15]
        break;
 8006d5a:	e004      	b.n	8006d66 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d5c:	f7ff fe31 	bl	80069c2 <LL_RCC_PLLSAI1_IsReady>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d1f0      	bne.n	8006d48 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d108      	bne.n	8006d7e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006d94:	f7ff fe06 	bl	80069a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d98:	f7fd fb5a 	bl	8004450 <HAL_GetTick>
 8006d9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006d9e:	e009      	b.n	8006db4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006da0:	f7fd fb56 	bl	8004450 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d902      	bls.n	8006db4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	73fb      	strb	r3, [r7, #15]
      break;
 8006db2:	e004      	b.n	8006dbe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006db4:	f7ff fe05 	bl	80069c2 <LL_RCC_PLLSAI1_IsReady>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f0      	bne.n	8006da0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d137      	bne.n	8006e34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dee:	4313      	orrs	r3, r2
 8006df0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006df2:	f7ff fdc8 	bl	8006986 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df6:	f7fd fb2b 	bl	8004450 <HAL_GetTick>
 8006dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006dfc:	e009      	b.n	8006e12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006dfe:	f7fd fb27 	bl	8004450 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d902      	bls.n	8006e12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	73fb      	strb	r3, [r7, #15]
        break;
 8006e10:	e004      	b.n	8006e1c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006e12:	f7ff fdd6 	bl	80069c2 <LL_RCC_PLLSAI1_IsReady>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d1f0      	bne.n	8006dfe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d108      	bne.n	8006e34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e30:	4313      	orrs	r3, r2
 8006e32:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006e4a:	f7ff fdab 	bl	80069a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e4e:	f7fd faff 	bl	8004450 <HAL_GetTick>
 8006e52:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006e54:	e009      	b.n	8006e6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e56:	f7fd fafb 	bl	8004450 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d902      	bls.n	8006e6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	73fb      	strb	r3, [r7, #15]
      break;
 8006e68:	e004      	b.n	8006e74 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006e6a:	f7ff fdaa 	bl	80069c2 <LL_RCC_PLLSAI1_IsReady>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1f0      	bne.n	8006e56 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d137      	bne.n	8006eea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006ea8:	f7ff fd6d 	bl	8006986 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eac:	f7fd fad0 	bl	8004450 <HAL_GetTick>
 8006eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006eb2:	e009      	b.n	8006ec8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006eb4:	f7fd facc 	bl	8004450 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d902      	bls.n	8006ec8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ec6:	e004      	b.n	8006ed2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ec8:	f7ff fd7b 	bl	80069c2 <LL_RCC_PLLSAI1_IsReady>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d1f0      	bne.n	8006eb4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d108      	bne.n	8006eea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e090      	b.n	8007028 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fb fac2 	bl	80024a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	22ca      	movs	r2, #202	; 0xca
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2253      	movs	r2, #83	; 0x53
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f89f 	bl	800707c <RTC_EnterInitMode>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	22ff      	movs	r2, #255	; 0xff
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e067      	b.n	8007028 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6812      	ldr	r2, [r2, #0]
 8006f62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6899      	ldr	r1, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68d2      	ldr	r2, [r2, #12]
 8006f92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6919      	ldr	r1, [r3, #16]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	041a      	lsls	r2, r3, #16
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb6:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0203 	bic.w	r2, r2, #3
 8006fc6:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d113      	bne.n	8007016 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f81e 	bl	8007030 <HAL_RTC_WaitForSynchro>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00d      	beq.n	8007016 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2204      	movs	r2, #4
 8007006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e008      	b.n	8007028 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	22ff      	movs	r2, #255	; 0xff
 800701c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007026:	2300      	movs	r3, #0
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007046:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007048:	f7fd fa02 	bl	8004450 <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800704e:	e009      	b.n	8007064 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007050:	f7fd f9fe 	bl	8004450 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800705e:	d901      	bls.n	8007064 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e007      	b.n	8007074 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0ee      	beq.n	8007050 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d119      	bne.n	80070c6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800709c:	f7fd f9d8 	bl	8004450 <HAL_GetTick>
 80070a0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80070a2:	e009      	b.n	80070b8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80070a4:	f7fd f9d4 	bl	8004450 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070b2:	d901      	bls.n	80070b8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e007      	b.n	80070c8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0ee      	beq.n	80070a4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d101      	bne.n	80070ea <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80070e6:	2302      	movs	r3, #2
 80070e8:	e0a8      	b.n	800723c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	22ca      	movs	r2, #202	; 0xca
 8007100:	625a      	str	r2, [r3, #36]	; 0x24
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2253      	movs	r2, #83	; 0x53
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007114:	2b00      	cmp	r3, #0
 8007116:	d020      	beq.n	800715a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007118:	f7fd f99a 	bl	8004450 <HAL_GetTick>
 800711c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800711e:	e015      	b.n	800714c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007120:	f7fd f996 	bl	8004450 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712e:	d90d      	bls.n	800714c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2203      	movs	r2, #3
 800713c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e077      	b.n	800723c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e2      	bne.n	8007120 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007168:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800717a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800717c:	f7fd f968 	bl	8004450 <HAL_GetTick>
 8007180:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007182:	e015      	b.n	80071b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007184:	f7fd f964 	bl	8004450 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007192:	d90d      	bls.n	80071b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	22ff      	movs	r2, #255	; 0xff
 800719a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2203      	movs	r2, #3
 80071a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e045      	b.n	800723c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0e2      	beq.n	8007184 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0207 	bic.w	r2, r2, #7
 80071d4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6899      	ldr	r1, [r3, #8]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80071e6:	4b17      	ldr	r3, [pc, #92]	; (8007244 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80071e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ec:	4a15      	ldr	r2, [pc, #84]	; (8007244 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80071ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a12      	ldr	r2, [pc, #72]	; (8007244 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80071fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007200:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007210:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007220:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	58000800 	.word	0x58000800

08007248 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_RTCEx_EnableBypassShadow+0x16>
 800725a:	2302      	movs	r3, #2
 800725c:	e024      	b.n	80072a8 <HAL_RTCEx_EnableBypassShadow+0x60>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2202      	movs	r2, #2
 800726a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	22ca      	movs	r2, #202	; 0xca
 8007274:	625a      	str	r2, [r3, #36]	; 0x24
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2253      	movs	r2, #83	; 0x53
 800727c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0220 	orr.w	r2, r2, #32
 800728c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	22ff      	movs	r2, #255	; 0xff
 8007294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <LL_RCC_GetUSARTClockSource>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80072bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4013      	ands	r3, r2
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <LL_RCC_GetLPUARTClockSource>:
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80072dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4013      	ands	r3, r2
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e042      	b.n	800738c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730c:	2b00      	cmp	r3, #0
 800730e:	d106      	bne.n	800731e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fa ffcf 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2224      	movs	r2, #36	; 0x24
 8007322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fbf6 	bl	8007b28 <UART_SetConfig>
 800733c:	4603      	mov	r3, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e022      	b.n	800738c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fe10 	bl	8007f74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fe97 	bl	80080b8 <UART_CheckIdleState>
 800738a:	4603      	mov	r3, r0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d17a      	bne.n	80074a2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_UART_Transmit_DMA+0x24>
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e073      	b.n	80074a4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Transmit_DMA+0x36>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e06c      	b.n	80074a4 <HAL_UART_Transmit_DMA+0x110>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	88fa      	ldrh	r2, [r7, #6]
 80073dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2221      	movs	r2, #33	; 0x21
 80073f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d02c      	beq.n	800745a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007404:	4a29      	ldr	r2, [pc, #164]	; (80074ac <HAL_UART_Transmit_DMA+0x118>)
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800740c:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <HAL_UART_Transmit_DMA+0x11c>)
 800740e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007414:	4a27      	ldr	r2, [pc, #156]	; (80074b4 <HAL_UART_Transmit_DMA+0x120>)
 8007416:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741c:	2200      	movs	r2, #0
 800741e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007428:	4619      	mov	r1, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3328      	adds	r3, #40	; 0x28
 8007430:	461a      	mov	r2, r3
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	f7fd fa7e 	bl	8004934 <HAL_DMA_Start_IT>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00d      	beq.n	800745a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2210      	movs	r2, #16
 8007442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e024      	b.n	80074a4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3308      	adds	r3, #8
 8007470:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	613b      	str	r3, [r7, #16]
   return(result);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	623a      	str	r2, [r7, #32]
 800748c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	69f9      	ldr	r1, [r7, #28]
 8007490:	6a3a      	ldr	r2, [r7, #32]
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	61bb      	str	r3, [r7, #24]
   return(result);
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e5      	bne.n	800746a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	e000      	b.n	80074a4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80074a2:	2302      	movs	r3, #2
  }
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	; 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	0800842d 	.word	0x0800842d
 80074b0:	080084c7 	.word	0x080084c7
 80074b4:	080084e3 	.word	0x080084e3

080074b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b0ba      	sub	sp, #232	; 0xe8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80074e6:	4013      	ands	r3, r2
 80074e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d11b      	bne.n	800752c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d015      	beq.n	800752c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800750c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 82d6 	beq.w	8007ace <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
      }
      return;
 800752a:	e2d0      	b.n	8007ace <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800752c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 811f 	beq.w	8007774 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007536:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800753a:	4b8b      	ldr	r3, [pc, #556]	; (8007768 <HAL_UART_IRQHandler+0x2b0>)
 800753c:	4013      	ands	r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d106      	bne.n	8007550 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007542:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007546:	4b89      	ldr	r3, [pc, #548]	; (800776c <HAL_UART_IRQHandler+0x2b4>)
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8112 	beq.w	8007774 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d011      	beq.n	8007580 <HAL_UART_IRQHandler+0xc8>
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2201      	movs	r2, #1
 800756e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007576:	f043 0201 	orr.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d011      	beq.n	80075b0 <HAL_UART_IRQHandler+0xf8>
 800758c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2202      	movs	r2, #2
 800759e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a6:	f043 0204 	orr.w	r2, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d011      	beq.n	80075e0 <HAL_UART_IRQHandler+0x128>
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2204      	movs	r2, #4
 80075ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d6:	f043 0202 	orr.w	r2, r3, #2
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d017      	beq.n	800761c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80075fc:	4b5a      	ldr	r3, [pc, #360]	; (8007768 <HAL_UART_IRQHandler+0x2b0>)
 80075fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2208      	movs	r2, #8
 800760a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007612:	f043 0208 	orr.w	r2, r3, #8
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007624:	2b00      	cmp	r3, #0
 8007626:	d012      	beq.n	800764e <HAL_UART_IRQHandler+0x196>
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00c      	beq.n	800764e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800763c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007644:	f043 0220 	orr.w	r2, r3, #32
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 823c 	beq.w	8007ad2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800765a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d013      	beq.n	800768e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d105      	bne.n	800767e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d005      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d04f      	beq.n	8007752 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fe54 	bl	8008360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d141      	bne.n	800774a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800770a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1d9      	bne.n	80076c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d013      	beq.n	8007742 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771e:	4a14      	ldr	r2, [pc, #80]	; (8007770 <HAL_UART_IRQHandler+0x2b8>)
 8007720:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd f9de 	bl	8004ae8 <HAL_DMA_Abort_IT>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d017      	beq.n	8007762 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	e00f      	b.n	8007762 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9da 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007748:	e00b      	b.n	8007762 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9d6 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007750:	e007      	b.n	8007762 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9d2 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007760:	e1b7      	b.n	8007ad2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007762:	bf00      	nop
    return;
 8007764:	e1b5      	b.n	8007ad2 <HAL_UART_IRQHandler+0x61a>
 8007766:	bf00      	nop
 8007768:	10000001 	.word	0x10000001
 800776c:	04000120 	.word	0x04000120
 8007770:	08008563 	.word	0x08008563

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007778:	2b01      	cmp	r3, #1
 800777a:	f040 814a 	bne.w	8007a12 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8143 	beq.w	8007a12 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 813c 	beq.w	8007a12 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2210      	movs	r2, #16
 80077a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ac:	2b40      	cmp	r3, #64	; 0x40
 80077ae:	f040 80b5 	bne.w	800791c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80077be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 8187 	beq.w	8007ad6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077d2:	429a      	cmp	r2, r3
 80077d4:	f080 817f 	bcs.w	8007ad6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f040 8086 	bne.w	8007900 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800780c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800781e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007822:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800782a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1da      	bne.n	80077f4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800784e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800786a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e1      	bne.n	800783e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3308      	adds	r3, #8
 8007880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800788a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800789e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e3      	bne.n	800787a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d0:	f023 0310 	bic.w	r3, r3, #16
 80078d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e4      	bne.n	80078c0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fd f895 	bl	8004a2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800790c:	b29b      	uxth	r3, r3
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	b29b      	uxth	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f8fb 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800791a:	e0dc      	b.n	8007ad6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007928:	b29b      	uxth	r3, r3
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80ce 	beq.w	8007ada <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800793e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 80c9 	beq.w	8007ada <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800795c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800796a:	647b      	str	r3, [r7, #68]	; 0x44
 800796c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e4      	bne.n	8007948 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	623b      	str	r3, [r7, #32]
   return(result);
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079a6:	633a      	str	r2, [r7, #48]	; 0x30
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e1      	bne.n	800797e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	60fb      	str	r3, [r7, #12]
   return(result);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0310 	bic.w	r3, r3, #16
 80079e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	69b9      	ldr	r1, [r7, #24]
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	617b      	str	r3, [r7, #20]
   return(result);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e4      	bne.n	80079ce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f880 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a10:	e063      	b.n	8007ada <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <HAL_UART_IRQHandler+0x584>
 8007a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fdd5 	bl	80085e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a3a:	e051      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d014      	beq.n	8007a72 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d105      	bne.n	8007a60 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d008      	beq.n	8007a72 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d03a      	beq.n	8007ade <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
    }
    return;
 8007a70:	e035      	b.n	8007ade <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <HAL_UART_IRQHandler+0x5da>
 8007a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fd7f 	bl	800858e <UART_EndTransmit_IT>
    return;
 8007a90:	e026      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x5fa>
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fdae 	bl	800860c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ab0:	e016      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d010      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x628>
 8007abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da0c      	bge.n	8007ae0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fd96 	bl	80085f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007acc:	e008      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
      return;
 8007ace:	bf00      	nop
 8007ad0:	e006      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
    return;
 8007ad2:	bf00      	nop
 8007ad4:	e004      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
      return;
 8007ad6:	bf00      	nop
 8007ad8:	e002      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
      return;
 8007ada:	bf00      	nop
 8007adc:	e000      	b.n	8007ae0 <HAL_UART_IRQHandler+0x628>
    return;
 8007ade:	bf00      	nop
  }
}
 8007ae0:	37e8      	adds	r7, #232	; 0xe8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b2c:	b08c      	sub	sp, #48	; 0x30
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	4baf      	ldr	r3, [pc, #700]	; (8007e14 <UART_SetConfig+0x2ec>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b60:	430b      	orrs	r3, r1
 8007b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4aa4      	ldr	r2, [pc, #656]	; (8007e18 <UART_SetConfig+0x2f0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b90:	4313      	orrs	r3, r2
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	f023 010f 	bic.w	r1, r3, #15
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a95      	ldr	r2, [pc, #596]	; (8007e1c <UART_SetConfig+0x2f4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d125      	bne.n	8007c18 <UART_SetConfig+0xf0>
 8007bcc:	2003      	movs	r0, #3
 8007bce:	f7ff fb71 	bl	80072b4 <LL_RCC_GetUSARTClockSource>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d81b      	bhi.n	8007c10 <UART_SetConfig+0xe8>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <UART_SetConfig+0xb8>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007c01 	.word	0x08007c01
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c09 	.word	0x08007c09
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf6:	e042      	b.n	8007c7e <UART_SetConfig+0x156>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfe:	e03e      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c00:	2304      	movs	r3, #4
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c06:	e03a      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0e:	e036      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c10:	2310      	movs	r3, #16
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c16:	e032      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a7e      	ldr	r2, [pc, #504]	; (8007e18 <UART_SetConfig+0x2f0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d12a      	bne.n	8007c78 <UART_SetConfig+0x150>
 8007c22:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007c26:	f7ff fb55 	bl	80072d4 <LL_RCC_GetLPUARTClockSource>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c30:	d01a      	beq.n	8007c68 <UART_SetConfig+0x140>
 8007c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c36:	d81b      	bhi.n	8007c70 <UART_SetConfig+0x148>
 8007c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c3c:	d00c      	beq.n	8007c58 <UART_SetConfig+0x130>
 8007c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c42:	d815      	bhi.n	8007c70 <UART_SetConfig+0x148>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <UART_SetConfig+0x128>
 8007c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4c:	d008      	beq.n	8007c60 <UART_SetConfig+0x138>
 8007c4e:	e00f      	b.n	8007c70 <UART_SetConfig+0x148>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c56:	e012      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5e:	e00e      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c66:	e00a      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6e:	e006      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c76:	e002      	b.n	8007c7e <UART_SetConfig+0x156>
 8007c78:	2310      	movs	r3, #16
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a65      	ldr	r2, [pc, #404]	; (8007e18 <UART_SetConfig+0x2f0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	f040 8097 	bne.w	8007db8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d823      	bhi.n	8007cda <UART_SetConfig+0x1b2>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x170>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cdb 	.word	0x08007cdb
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007cdb 	.word	0x08007cdb
 8007ca8:	08007ccb 	.word	0x08007ccb
 8007cac:	08007cdb 	.word	0x08007cdb
 8007cb0:	08007cdb 	.word	0x08007cdb
 8007cb4:	08007cdb 	.word	0x08007cdb
 8007cb8:	08007cd3 	.word	0x08007cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cbc:	f7fe fc16 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8007cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cc2:	e010      	b.n	8007ce6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cc4:	4b56      	ldr	r3, [pc, #344]	; (8007e20 <UART_SetConfig+0x2f8>)
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cc8:	e00d      	b.n	8007ce6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cca:	f7fe fb8f 	bl	80063ec <HAL_RCC_GetSysClockFreq>
 8007cce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cd0:	e009      	b.n	8007ce6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cd8:	e005      	b.n	8007ce6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ce4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 812a 	beq.w	8007f42 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	4a4c      	ldr	r2, [pc, #304]	; (8007e24 <UART_SetConfig+0x2fc>)
 8007cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	4413      	add	r3, r2
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d305      	bcc.n	8007d1e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d903      	bls.n	8007d26 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d24:	e10d      	b.n	8007f42 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	2200      	movs	r2, #0
 8007d2a:	60bb      	str	r3, [r7, #8]
 8007d2c:	60fa      	str	r2, [r7, #12]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	4a3c      	ldr	r2, [pc, #240]	; (8007e24 <UART_SetConfig+0x2fc>)
 8007d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d48:	f7f8 fa72 	bl	8000230 <__aeabi_uldivmod>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4610      	mov	r0, r2
 8007d52:	4619      	mov	r1, r3
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	020b      	lsls	r3, r1, #8
 8007d5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d62:	0202      	lsls	r2, r0, #8
 8007d64:	6979      	ldr	r1, [r7, #20]
 8007d66:	6849      	ldr	r1, [r1, #4]
 8007d68:	0849      	lsrs	r1, r1, #1
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	4605      	mov	r5, r0
 8007d70:	eb12 0804 	adds.w	r8, r2, r4
 8007d74:	eb43 0905 	adc.w	r9, r3, r5
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	469a      	mov	sl, r3
 8007d80:	4693      	mov	fp, r2
 8007d82:	4652      	mov	r2, sl
 8007d84:	465b      	mov	r3, fp
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fa51 	bl	8000230 <__aeabi_uldivmod>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4613      	mov	r3, r2
 8007d94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d9c:	d308      	bcc.n	8007db0 <UART_SetConfig+0x288>
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007da4:	d204      	bcs.n	8007db0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a3a      	ldr	r2, [r7, #32]
 8007dac:	60da      	str	r2, [r3, #12]
 8007dae:	e0c8      	b.n	8007f42 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007db6:	e0c4      	b.n	8007f42 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	d16d      	bne.n	8007e9e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	2b07      	cmp	r3, #7
 8007dca:	d82d      	bhi.n	8007e28 <UART_SetConfig+0x300>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <UART_SetConfig+0x2ac>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007df5 	.word	0x08007df5
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e29 	.word	0x08007e29
 8007de0:	08007e03 	.word	0x08007e03
 8007de4:	08007e29 	.word	0x08007e29
 8007de8:	08007e29 	.word	0x08007e29
 8007dec:	08007e29 	.word	0x08007e29
 8007df0:	08007e0b 	.word	0x08007e0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007df4:	f7fe fb90 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 8007df8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dfa:	e01b      	b.n	8007e34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dfc:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <UART_SetConfig+0x2f8>)
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e00:	e018      	b.n	8007e34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e02:	f7fe faf3 	bl	80063ec <HAL_RCC_GetSysClockFreq>
 8007e06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e08:	e014      	b.n	8007e34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e10:	e010      	b.n	8007e34 <UART_SetConfig+0x30c>
 8007e12:	bf00      	nop
 8007e14:	cfff69f3 	.word	0xcfff69f3
 8007e18:	40008000 	.word	0x40008000
 8007e1c:	40013800 	.word	0x40013800
 8007e20:	00f42400 	.word	0x00f42400
 8007e24:	0800da0c 	.word	0x0800da0c
      default:
        pclk = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 8083 	beq.w	8007f42 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	4a4a      	ldr	r2, [pc, #296]	; (8007f6c <UART_SetConfig+0x444>)
 8007e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e46:	461a      	mov	r2, r3
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e4e:	005a      	lsls	r2, r3, #1
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	085b      	lsrs	r3, r3, #1
 8007e56:	441a      	add	r2, r3
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d916      	bls.n	8007e96 <UART_SetConfig+0x36e>
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6e:	d212      	bcs.n	8007e96 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	f023 030f 	bic.w	r3, r3, #15
 8007e78:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	8bfb      	ldrh	r3, [r7, #30]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	8bfa      	ldrh	r2, [r7, #30]
 8007e92:	60da      	str	r2, [r3, #12]
 8007e94:	e055      	b.n	8007f42 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e9c:	e051      	b.n	8007f42 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	2b07      	cmp	r3, #7
 8007ea6:	d822      	bhi.n	8007eee <UART_SetConfig+0x3c6>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <UART_SetConfig+0x388>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007ed1 	.word	0x08007ed1
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007eef 	.word	0x08007eef
 8007ebc:	08007edf 	.word	0x08007edf
 8007ec0:	08007eef 	.word	0x08007eef
 8007ec4:	08007eef 	.word	0x08007eef
 8007ec8:	08007eef 	.word	0x08007eef
 8007ecc:	08007ee7 	.word	0x08007ee7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed0:	f7fe fb22 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ed6:	e010      	b.n	8007efa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed8:	4b25      	ldr	r3, [pc, #148]	; (8007f70 <UART_SetConfig+0x448>)
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007edc:	e00d      	b.n	8007efa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ede:	f7fe fa85 	bl	80063ec <HAL_RCC_GetSysClockFreq>
 8007ee2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ee4:	e009      	b.n	8007efa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eec:	e005      	b.n	8007efa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d020      	beq.n	8007f42 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	4a19      	ldr	r2, [pc, #100]	; (8007f6c <UART_SetConfig+0x444>)
 8007f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	441a      	add	r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	2b0f      	cmp	r3, #15
 8007f28:	d908      	bls.n	8007f3c <UART_SetConfig+0x414>
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f30:	d204      	bcs.n	8007f3c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6a3a      	ldr	r2, [r7, #32]
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	e002      	b.n	8007f42 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2200      	movs	r2, #0
 8007f56:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3730      	adds	r7, #48	; 0x30
 8007f66:	46bd      	mov	sp, r7
 8007f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6c:	0800da0c 	.word	0x0800da0c
 8007f70:	00f42400 	.word	0x00f42400

08007f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00a      	beq.n	8007f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01a      	beq.n	800808a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008072:	d10a      	bne.n	800808a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	605a      	str	r2, [r3, #4]
  }
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af02      	add	r7, sp, #8
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080c8:	f7fc f9c2 	bl	8004450 <HAL_GetTick>
 80080cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d10e      	bne.n	80080fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f82f 	bl	800814e <UART_WaitOnFlagUntilTimeout>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e025      	b.n	8008146 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b04      	cmp	r3, #4
 8008106:	d10e      	bne.n	8008126 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f819 	bl	800814e <UART_WaitOnFlagUntilTimeout>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e00f      	b.n	8008146 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b09c      	sub	sp, #112	; 0x70
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	603b      	str	r3, [r7, #0]
 800815a:	4613      	mov	r3, r2
 800815c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800815e:	e0a9      	b.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	f000 80a5 	beq.w	80082b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800816a:	f7fc f971 	bl	8004450 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008176:	429a      	cmp	r2, r3
 8008178:	d302      	bcc.n	8008180 <UART_WaitOnFlagUntilTimeout+0x32>
 800817a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817c:	2b00      	cmp	r3, #0
 800817e:	d140      	bne.n	8008202 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800818e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008194:	667b      	str	r3, [r7, #100]	; 0x64
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800819e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e6      	bne.n	8008180 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3308      	adds	r3, #8
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	663b      	str	r3, [r7, #96]	; 0x60
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80081d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e5      	bne.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e069      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d051      	beq.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800821a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800821e:	d149      	bne.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008228:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800823e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
 800824a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800824e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e6      	bne.n	800822a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	613b      	str	r3, [r7, #16]
   return(result);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	66bb      	str	r3, [r7, #104]	; 0x68
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800827c:	623a      	str	r2, [r7, #32]
 800827e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	69f9      	ldr	r1, [r7, #28]
 8008282:	6a3a      	ldr	r2, [r7, #32]
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	61bb      	str	r3, [r7, #24]
   return(result);
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e5      	bne.n	800825c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2220      	movs	r2, #32
 8008294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e010      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69da      	ldr	r2, [r3, #28]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4013      	ands	r3, r2
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	bf0c      	ite	eq
 80082c4:	2301      	moveq	r3, #1
 80082c6:	2300      	movne	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	461a      	mov	r2, r3
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	f43f af46 	beq.w	8008160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3770      	adds	r7, #112	; 0x70
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082de:	b480      	push	{r7}
 80082e0:	b08f      	sub	sp, #60	; 0x3c
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008306:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800830a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e6      	bne.n	80082e6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3308      	adds	r3, #8
 800831e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	60bb      	str	r3, [r7, #8]
   return(result);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800832e:	633b      	str	r3, [r7, #48]	; 0x30
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3308      	adds	r3, #8
 8008336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008338:	61ba      	str	r2, [r7, #24]
 800833a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6979      	ldr	r1, [r7, #20]
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	613b      	str	r3, [r7, #16]
   return(result);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e5      	bne.n	8008318 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008354:	bf00      	nop
 8008356:	373c      	adds	r7, #60	; 0x3c
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b095      	sub	sp, #84	; 0x54
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800837c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008386:	643b      	str	r3, [r7, #64]	; 0x40
 8008388:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800838c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e6      	bne.n	8008368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083b0:	f023 0301 	bic.w	r3, r3, #1
 80083b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e3      	bne.n	800839a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d118      	bne.n	800840c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f023 0310 	bic.w	r3, r3, #16
 80083ee:	647b      	str	r3, [r7, #68]	; 0x44
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6979      	ldr	r1, [r7, #20]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	613b      	str	r3, [r7, #16]
   return(result);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e6      	bne.n	80083da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2220      	movs	r2, #32
 8008410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008420:	bf00      	nop
 8008422:	3754      	adds	r7, #84	; 0x54
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b090      	sub	sp, #64	; 0x40
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0320 	and.w	r3, r3, #32
 8008444:	2b00      	cmp	r3, #0
 8008446:	d137      	bne.n	80084b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844a:	2200      	movs	r2, #0
 800844c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3308      	adds	r3, #8
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	623b      	str	r3, [r7, #32]
   return(result);
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008466:	63bb      	str	r3, [r7, #56]	; 0x38
 8008468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008470:	633a      	str	r2, [r7, #48]	; 0x30
 8008472:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e5      	bne.n	8008450 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	60fb      	str	r3, [r7, #12]
   return(result);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
 800849a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	69b9      	ldr	r1, [r7, #24]
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	617b      	str	r3, [r7, #20]
   return(result);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e6      	bne.n	8008484 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084b6:	e002      	b.n	80084be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80084b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80084ba:	f7f9 fc71 	bl	8001da0 <HAL_UART_TxCpltCallback>
}
 80084be:	bf00      	nop
 80084c0:	3740      	adds	r7, #64	; 0x40
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7ff fb07 	bl	8007ae8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b086      	sub	sp, #24
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	2b80      	cmp	r3, #128	; 0x80
 800850c:	d109      	bne.n	8008522 <UART_DMAError+0x40>
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b21      	cmp	r3, #33	; 0x21
 8008512:	d106      	bne.n	8008522 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2200      	movs	r2, #0
 8008518:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800851c:	6978      	ldr	r0, [r7, #20]
 800851e:	f7ff fede 	bl	80082de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852c:	2b40      	cmp	r3, #64	; 0x40
 800852e:	d109      	bne.n	8008544 <UART_DMAError+0x62>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b22      	cmp	r3, #34	; 0x22
 8008534:	d106      	bne.n	8008544 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800853e:	6978      	ldr	r0, [r7, #20]
 8008540:	f7ff ff0e 	bl	8008360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800854a:	f043 0210 	orr.w	r2, r3, #16
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008554:	6978      	ldr	r0, [r7, #20]
 8008556:	f7ff fad1 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fabb 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b088      	sub	sp, #32
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085aa:	61fb      	str	r3, [r7, #28]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	6979      	ldr	r1, [r7, #20]
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	613b      	str	r3, [r7, #16]
   return(result);
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e6      	bne.n	8008596 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7f9 fbe2 	bl	8001da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085dc:	bf00      	nop
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_UARTEx_DisableFifoMode+0x16>
 8008632:	2302      	movs	r3, #2
 8008634:	e027      	b.n	8008686 <HAL_UARTEx_DisableFifoMode+0x66>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2224      	movs	r2, #36	; 0x24
 8008642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0201 	bic.w	r2, r2, #1
 800865c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008664:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e02d      	b.n	8008706 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2224      	movs	r2, #36	; 0x24
 80086b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0201 	bic.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f850 	bl	800878c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008722:	2302      	movs	r3, #2
 8008724:	e02d      	b.n	8008782 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2224      	movs	r2, #36	; 0x24
 8008732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0201 	bic.w	r2, r2, #1
 800874c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f812 	bl	800878c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008798:	2b00      	cmp	r3, #0
 800879a:	d108      	bne.n	80087ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087ac:	e031      	b.n	8008812 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ae:	2308      	movs	r3, #8
 80087b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087b2:	2308      	movs	r3, #8
 80087b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	0e5b      	lsrs	r3, r3, #25
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	0f5b      	lsrs	r3, r3, #29
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 0307 	and.w	r3, r3, #7
 80087d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	7b3a      	ldrb	r2, [r7, #12]
 80087da:	4911      	ldr	r1, [pc, #68]	; (8008820 <UARTEx_SetNbDataToProcess+0x94>)
 80087dc:	5c8a      	ldrb	r2, [r1, r2]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087e2:	7b3a      	ldrb	r2, [r7, #12]
 80087e4:	490f      	ldr	r1, [pc, #60]	; (8008824 <UARTEx_SetNbDataToProcess+0x98>)
 80087e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	7b7a      	ldrb	r2, [r7, #13]
 80087f8:	4909      	ldr	r1, [pc, #36]	; (8008820 <UARTEx_SetNbDataToProcess+0x94>)
 80087fa:	5c8a      	ldrb	r2, [r1, r2]
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008800:	7b7a      	ldrb	r2, [r7, #13]
 8008802:	4908      	ldr	r1, [pc, #32]	; (8008824 <UARTEx_SetNbDataToProcess+0x98>)
 8008804:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008806:	fb93 f3f2 	sdiv	r3, r3, r2
 800880a:	b29a      	uxth	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008812:	bf00      	nop
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	0800da24 	.word	0x0800da24
 8008824:	0800da2c 	.word	0x0800da2c

08008828 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b0cc      	sub	sp, #304	; 0x130
 800882c:	af00      	add	r7, sp, #0
 800882e:	4602      	mov	r2, r0
 8008830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008834:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008838:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800883a:	f107 0310 	add.w	r3, r7, #16
 800883e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008846:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008858:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800885c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008860:	7812      	ldrb	r2, [r2, #0]
 8008862:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008864:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008868:	3301      	adds	r3, #1
 800886a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800886e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008872:	2218      	movs	r2, #24
 8008874:	2100      	movs	r1, #0
 8008876:	4618      	mov	r0, r3
 8008878:	f001 fb16 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800887c:	233f      	movs	r3, #63	; 0x3f
 800887e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008882:	2385      	movs	r3, #133	; 0x85
 8008884:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008888:	f107 0310 	add.w	r3, r7, #16
 800888c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008894:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008898:	f107 030f 	add.w	r3, r7, #15
 800889c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088a0:	2301      	movs	r3, #1
 80088a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088aa:	2100      	movs	r1, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 f9bf 	bl	8009c30 <hci_send_req>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da01      	bge.n	80088bc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80088b8:	23ff      	movs	r3, #255	; 0xff
 80088ba:	e004      	b.n	80088c6 <aci_gap_set_io_capability+0x9e>
  return status;
 80088bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088c4:	781b      	ldrb	r3, [r3, #0]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80088d0:	b5b0      	push	{r4, r5, r7, lr}
 80088d2:	b0cc      	sub	sp, #304	; 0x130
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4605      	mov	r5, r0
 80088d8:	460c      	mov	r4, r1
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80088e6:	462a      	mov	r2, r5
 80088e8:	701a      	strb	r2, [r3, #0]
 80088ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80088f2:	4622      	mov	r2, r4
 80088f4:	701a      	strb	r2, [r3, #0]
 80088f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80088fe:	4602      	mov	r2, r0
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800890a:	460a      	mov	r2, r1
 800890c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800890e:	f107 0310 	add.w	r3, r7, #16
 8008912:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800892c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008930:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800893c:	3301      	adds	r3, #1
 800893e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800894a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008956:	3301      	adds	r3, #1
 8008958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800895c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008960:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008964:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008968:	7812      	ldrb	r2, [r2, #0]
 800896a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800896c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008970:	3301      	adds	r3, #1
 8008972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800897e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008986:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800898a:	3301      	adds	r3, #1
 800898c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008994:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008998:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800899a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800899e:	3301      	adds	r3, #1
 80089a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80089ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80089ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089b2:	3301      	adds	r3, #1
 80089b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80089b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089bc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80089c0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80089c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089c6:	3301      	adds	r3, #1
 80089c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80089cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80089d4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80089d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089dc:	3304      	adds	r3, #4
 80089de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80089e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80089ea:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80089ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089f0:	3301      	adds	r3, #1
 80089f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089fa:	2218      	movs	r2, #24
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 fa52 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a04:	233f      	movs	r3, #63	; 0x3f
 8008a06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008a0a:	2386      	movs	r3, #134	; 0x86
 8008a0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a10:	f107 0310 	add.w	r3, r7, #16
 8008a14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a20:	f107 030f 	add.w	r3, r7, #15
 8008a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 f8fb 	bl	8009c30 <hci_send_req>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da01      	bge.n	8008a44 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008a40:	23ff      	movs	r3, #255	; 0xff
 8008a42:	e004      	b.n	8008a4e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a48:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a4c:	781b      	ldrb	r3, [r3, #0]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bdb0      	pop	{r4, r5, r7, pc}

08008a58 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b0cd      	sub	sp, #308	; 0x134
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	4611      	mov	r1, r2
 8008a64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a68:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008a76:	4622      	mov	r2, r4
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a82:	4602      	mov	r2, r0
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008a8e:	460a      	mov	r2, r1
 8008a90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008a92:	f107 0310 	add.w	r3, r7, #16
 8008a96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008a9a:	f107 0308 	add.w	r3, r7, #8
 8008a9e:	2207      	movs	r2, #7
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f001 fa00 	bl	8009ea8 <Osal_MemSet>
  int index_input = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ab6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008aba:	7812      	ldrb	r2, [r2, #0]
 8008abc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008acc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ad0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008ad4:	7812      	ldrb	r2, [r2, #0]
 8008ad6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008adc:	3301      	adds	r3, #1
 8008ade:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008aea:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008aee:	7812      	ldrb	r2, [r2, #0]
 8008af0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008af6:	3301      	adds	r3, #1
 8008af8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008afc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b00:	2218      	movs	r2, #24
 8008b02:	2100      	movs	r1, #0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 f9cf 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b0a:	233f      	movs	r3, #63	; 0x3f
 8008b0c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008b10:	238a      	movs	r3, #138	; 0x8a
 8008b12:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b16:	f107 0310 	add.w	r3, r7, #16
 8008b1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008b26:	f107 0308 	add.w	r3, r7, #8
 8008b2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008b2e:	2307      	movs	r3, #7
 8008b30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 f878 	bl	8009c30 <hci_send_req>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da01      	bge.n	8008b4a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008b46:	23ff      	movs	r3, #255	; 0xff
 8008b48:	e02e      	b.n	8008ba8 <aci_gap_init+0x150>
  if ( resp.Status )
 8008b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <aci_gap_init+0x10c>
    return resp.Status;
 8008b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	e021      	b.n	8008ba8 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008b6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008b86:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008b90:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008b9a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008ba4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd90      	pop	{r4, r7, pc}

08008bb2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b088      	sub	sp, #32
 8008bb6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bbc:	f107 0308 	add.w	r3, r7, #8
 8008bc0:	2218      	movs	r2, #24
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 f96f 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bca:	233f      	movs	r3, #63	; 0x3f
 8008bcc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008bce:	2392      	movs	r3, #146	; 0x92
 8008bd0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008bd2:	1dfb      	adds	r3, r7, #7
 8008bd4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bda:	f107 0308 	add.w	r3, r7, #8
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 f825 	bl	8009c30 <hci_send_req>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da01      	bge.n	8008bf0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008bec:	23ff      	movs	r3, #255	; 0xff
 8008bee:	e000      	b.n	8008bf2 <aci_gap_configure_whitelist+0x40>
  return status;
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 8008bfa:	b5b0      	push	{r4, r5, r7, lr}
 8008bfc:	b0cc      	sub	sp, #304	; 0x130
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	4605      	mov	r5, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	4610      	mov	r0, r2
 8008c06:	4619      	mov	r1, r3
 8008c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c0c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008c10:	462a      	mov	r2, r5
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	801a      	strh	r2, [r3, #0]
 8008c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c24:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008c28:	4602      	mov	r2, r0
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c30:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008c34:	460a      	mov	r2, r1
 8008c36:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8008c38:	f107 0310 	add.w	r3, r7, #16
 8008c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c44:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c48:	2200      	movs	r2, #0
 8008c4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c5a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008c5e:	8812      	ldrh	r2, [r2, #0]
 8008c60:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c66:	3302      	adds	r3, #2
 8008c68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8008c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c74:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c78:	8812      	ldrh	r2, [r2, #0]
 8008c7a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c80:	3302      	adds	r3, #2
 8008c82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c8e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8008ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ca8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008cac:	7812      	ldrb	r2, [r2, #0]
 8008cae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008cb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cbe:	2218      	movs	r2, #24
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 f8f0 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cc8:	233f      	movs	r3, #63	; 0x3f
 8008cca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8008cce:	2397      	movs	r3, #151	; 0x97
 8008cd0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008cd4:	230f      	movs	r3, #15
 8008cd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008cda:	f107 0310 	add.w	r3, r7, #16
 8008cde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cea:	f107 030f 	add.w	r3, r7, #15
 8008cee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 ff96 	bl	8009c30 <hci_send_req>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	da01      	bge.n	8008d0e <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8008d0a:	23ff      	movs	r3, #255	; 0xff
 8008d0c:	e004      	b.n	8008d18 <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 8008d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d16:	781b      	ldrb	r3, [r3, #0]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bdb0      	pop	{r4, r5, r7, pc}

08008d22 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8008d22:	b590      	push	{r4, r7, lr}
 8008d24:	b0cf      	sub	sp, #316	; 0x13c
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	4604      	mov	r4, r0
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d32:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d3c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d40:	4622      	mov	r2, r4
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	801a      	strh	r2, [r3, #0]
 8008d50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d54:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008d58:	460a      	mov	r2, r1
 8008d5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8008d5c:	f107 0318 	add.w	r3, r7, #24
 8008d60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008d64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d68:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008d76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d7a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d7e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008d82:	8812      	ldrh	r2, [r2, #0]
 8008d84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d8a:	3302      	adds	r3, #2
 8008d8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8008d90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d94:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d9c:	8812      	ldrh	r2, [r2, #0]
 8008d9e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008da0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008da4:	3302      	adds	r3, #2
 8008da6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 8008daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008db2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008dba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 8008dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dc8:	1d58      	adds	r0, r3, #5
 8008dca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008dce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008dd2:	2206      	movs	r2, #6
 8008dd4:	6819      	ldr	r1, [r3, #0]
 8008dd6:	f001 f857 	bl	8009e88 <Osal_MemCpy>
  index_input += 6;
 8008dda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dde:	3306      	adds	r3, #6
 8008de0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8008de4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008de8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008dec:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008dee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008df2:	3301      	adds	r3, #1
 8008df4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008df8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dfc:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8008e00:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008e02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e06:	3302      	adds	r3, #2
 8008e08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008e0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e10:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8008e14:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8008e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e1a:	3302      	adds	r3, #2
 8008e1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 8008e20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e24:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8008e28:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8008e2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e2e:	3302      	adds	r3, #2
 8008e30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 8008e34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e38:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8008e3c:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8008e3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e42:	3302      	adds	r3, #2
 8008e44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008e48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e4c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008e50:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8008e52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e56:	3302      	adds	r3, #2
 8008e58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008e5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e60:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008e64:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8008e66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e6a:	3302      	adds	r3, #2
 8008e6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e74:	2218      	movs	r2, #24
 8008e76:	2100      	movs	r1, #0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f001 f815 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e7e:	233f      	movs	r3, #63	; 0x3f
 8008e80:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8008e84:	239c      	movs	r3, #156	; 0x9c
 8008e86:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8008e8a:	230f      	movs	r3, #15
 8008e8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8008e90:	f107 0318 	add.w	r3, r7, #24
 8008e94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008e98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8008ea0:	f107 0317 	add.w	r3, r7, #23
 8008ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008eae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 febb 	bl	8009c30 <hci_send_req>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	da01      	bge.n	8008ec4 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8008ec0:	23ff      	movs	r3, #255	; 0xff
 8008ec2:	e004      	b.n	8008ece <aci_gap_create_connection+0x1ac>
  return status;
 8008ec4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ec8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ecc:	781b      	ldrb	r3, [r3, #0]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd90      	pop	{r4, r7, pc}

08008ed8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	2218      	movs	r2, #24
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 ffdc 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ef0:	233f      	movs	r3, #63	; 0x3f
 8008ef2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008ef4:	f240 1301 	movw	r3, #257	; 0x101
 8008ef8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008efa:	1dfb      	adds	r3, r7, #7
 8008efc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008efe:	2301      	movs	r3, #1
 8008f00:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	2100      	movs	r1, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fe91 	bl	8009c30 <hci_send_req>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da01      	bge.n	8008f18 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008f14:	23ff      	movs	r3, #255	; 0xff
 8008f16:	e000      	b.n	8008f1a <aci_gatt_init+0x42>
  return status;
 8008f18:	79fb      	ldrb	r3, [r7, #7]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008f22:	b5b0      	push	{r4, r5, r7, lr}
 8008f24:	b0cc      	sub	sp, #304	; 0x130
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	4605      	mov	r5, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4619      	mov	r1, r3
 8008f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f34:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f38:	462a      	mov	r2, r5
 8008f3a:	801a      	strh	r2, [r3, #0]
 8008f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f44:	4622      	mov	r2, r4
 8008f46:	801a      	strh	r2, [r3, #0]
 8008f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008f50:	4602      	mov	r2, r0
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f58:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008f5c:	460a      	mov	r2, r1
 8008f5e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008f60:	f107 0310 	add.w	r3, r7, #16
 8008f64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f70:	2200      	movs	r2, #0
 8008f72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f82:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008f86:	8812      	ldrh	r2, [r2, #0]
 8008f88:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f8e:	3302      	adds	r3, #2
 8008f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f9c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fa0:	8812      	ldrh	r2, [r2, #0]
 8008fa2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fa8:	3302      	adds	r3, #2
 8008faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fb6:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008fba:	7812      	ldrb	r2, [r2, #0]
 8008fbc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fd0:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008fd4:	7812      	ldrb	r2, [r2, #0]
 8008fd6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fdc:	3301      	adds	r3, #1
 8008fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe6:	1d98      	adds	r0, r3, #6
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008ff8:	f000 ff46 	bl	8009e88 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009000:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800900a:	4413      	add	r3, r2
 800900c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009014:	2218      	movs	r2, #24
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f000 ff45 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800901e:	233f      	movs	r3, #63	; 0x3f
 8009020:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009024:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009028:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009038:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800903c:	f107 030f 	add.w	r3, r7, #15
 8009040:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009044:	2301      	movs	r3, #1
 8009046:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800904a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fded 	bl	8009c30 <hci_send_req>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	da01      	bge.n	8009060 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800905c:	23ff      	movs	r3, #255	; 0xff
 800905e:	e004      	b.n	800906a <aci_gatt_update_char_value+0x148>
  return status;
 8009060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009064:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009068:	781b      	ldrb	r3, [r3, #0]
}
 800906a:	4618      	mov	r0, r3
 800906c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009070:	46bd      	mov	sp, r7
 8009072:	bdb0      	pop	{r4, r5, r7, pc}

08009074 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b0cc      	sub	sp, #304	; 0x130
 8009078:	af00      	add	r7, sp, #0
 800907a:	4602      	mov	r2, r0
 800907c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009080:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009084:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 8009086:	f107 0310 	add.w	r3, r7, #16
 800908a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800908e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009092:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80090a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090a8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80090ac:	8812      	ldrh	r2, [r2, #0]
 80090ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090b4:	3302      	adds	r3, #2
 80090b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090be:	2218      	movs	r2, #24
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fef0 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090c8:	233f      	movs	r3, #63	; 0x3f
 80090ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 80090ce:	f44f 7389 	mov.w	r3, #274	; 0x112
 80090d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80090d6:	230f      	movs	r3, #15
 80090d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80090dc:	f107 0310 	add.w	r3, r7, #16
 80090e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090ec:	f107 030f 	add.w	r3, r7, #15
 80090f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80090f4:	2301      	movs	r3, #1
 80090f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fd95 	bl	8009c30 <hci_send_req>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	da01      	bge.n	8009110 <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 800910c:	23ff      	movs	r3, #255	; 0xff
 800910e:	e004      	b.n	800911a <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009118:	781b      	ldrb	r3, [r3, #0]
}
 800911a:	4618      	mov	r0, r3
 800911c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8009124:	b590      	push	{r4, r7, lr}
 8009126:	b0cd      	sub	sp, #308	; 0x134
 8009128:	af00      	add	r7, sp, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	4611      	mov	r1, r2
 8009130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009134:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009138:	4622      	mov	r2, r4
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009144:	4602      	mov	r2, r0
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009150:	460a      	mov	r2, r1
 8009152:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8009154:	f107 0310 	add.w	r3, r7, #16
 8009158:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800915c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009160:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009164:	2200      	movs	r2, #0
 8009166:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800916e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009172:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009176:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800917a:	8812      	ldrh	r2, [r2, #0]
 800917c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800917e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009182:	3302      	adds	r3, #2
 8009184:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 8009188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009190:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009194:	8812      	ldrh	r2, [r2, #0]
 8009196:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800919c:	3302      	adds	r3, #2
 800919e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80091a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091aa:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80091ae:	8812      	ldrh	r2, [r2, #0]
 80091b0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80091b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091b6:	3302      	adds	r3, #2
 80091b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091c0:	2218      	movs	r2, #24
 80091c2:	2100      	movs	r1, #0
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 fe6f 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80091ca:	233f      	movs	r3, #63	; 0x3f
 80091cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 80091d0:	f240 1315 	movw	r3, #277	; 0x115
 80091d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80091d8:	230f      	movs	r3, #15
 80091da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80091de:	f107 0310 	add.w	r3, r7, #16
 80091e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091ee:	f107 030f 	add.w	r3, r7, #15
 80091f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091f6:	2301      	movs	r3, #1
 80091f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fd14 	bl	8009c30 <hci_send_req>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	da01      	bge.n	8009212 <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 800920e:	23ff      	movs	r3, #255	; 0xff
 8009210:	e004      	b.n	800921c <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 8009212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009216:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800921a:	781b      	ldrb	r3, [r3, #0]
}
 800921c:	4618      	mov	r0, r3
 800921e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009222:	46bd      	mov	sp, r7
 8009224:	bd90      	pop	{r4, r7, pc}

08009226 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 8009226:	b590      	push	{r4, r7, lr}
 8009228:	b0cd      	sub	sp, #308	; 0x134
 800922a:	af00      	add	r7, sp, #0
 800922c:	4604      	mov	r4, r0
 800922e:	4608      	mov	r0, r1
 8009230:	4611      	mov	r1, r2
 8009232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009236:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800923a:	4622      	mov	r2, r4
 800923c:	801a      	strh	r2, [r3, #0]
 800923e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009246:	4602      	mov	r2, r0
 8009248:	801a      	strh	r2, [r3, #0]
 800924a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009252:	460a      	mov	r2, r1
 8009254:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800925e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009262:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009274:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009278:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800927c:	8812      	ldrh	r2, [r2, #0]
 800927e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009280:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009284:	3302      	adds	r3, #2
 8009286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800928a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800928e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009292:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009296:	8812      	ldrh	r2, [r2, #0]
 8009298:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800929a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800929e:	3302      	adds	r3, #2
 80092a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80092a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092ac:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80092b0:	8812      	ldrh	r2, [r2, #0]
 80092b2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80092b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092b8:	3302      	adds	r3, #2
 80092ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092c2:	2218      	movs	r2, #24
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fdee 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092cc:	233f      	movs	r3, #63	; 0x3f
 80092ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80092d2:	f240 1317 	movw	r3, #279	; 0x117
 80092d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80092da:	230f      	movs	r3, #15
 80092dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80092e0:	f107 0310 	add.w	r3, r7, #16
 80092e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80092f0:	f107 030f 	add.w	r3, r7, #15
 80092f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009302:	2100      	movs	r1, #0
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fc93 	bl	8009c30 <hci_send_req>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	da01      	bge.n	8009314 <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 8009310:	23ff      	movs	r3, #255	; 0xff
 8009312:	e004      	b.n	800931e <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 8009314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009318:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800931c:	781b      	ldrb	r3, [r3, #0]
}
 800931e:	4618      	mov	r0, r3
 8009320:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009324:	46bd      	mov	sp, r7
 8009326:	bd90      	pop	{r4, r7, pc}

08009328 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8009328:	b590      	push	{r4, r7, lr}
 800932a:	b0cf      	sub	sp, #316	; 0x13c
 800932c:	af00      	add	r7, sp, #0
 800932e:	4604      	mov	r4, r0
 8009330:	4608      	mov	r0, r1
 8009332:	4611      	mov	r1, r2
 8009334:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009338:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009342:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009346:	4622      	mov	r2, r4
 8009348:	801a      	strh	r2, [r3, #0]
 800934a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800934e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009352:	4602      	mov	r2, r0
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800935a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800935e:	460a      	mov	r2, r1
 8009360:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8009362:	f107 0318 	add.w	r3, r7, #24
 8009366:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800936a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800936e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800937c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009380:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009384:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009388:	8812      	ldrh	r2, [r2, #0]
 800938a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800938c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009390:	3302      	adds	r3, #2
 8009392:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8009396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800939a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800939e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80093a2:	8812      	ldrh	r2, [r2, #0]
 80093a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80093a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093aa:	3302      	adds	r3, #2
 80093ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80093b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093b4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80093b8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80093bc:	7812      	ldrb	r2, [r2, #0]
 80093be:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80093c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093c4:	3301      	adds	r3, #1
 80093c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80093ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093ce:	1d58      	adds	r0, r3, #5
 80093d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093d4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80093d8:	781a      	ldrb	r2, [r3, #0]
 80093da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80093e2:	6819      	ldr	r1, [r3, #0]
 80093e4:	f000 fd50 	bl	8009e88 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80093e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093ec:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80093f6:	4413      	add	r3, r2
 80093f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009400:	2218      	movs	r2, #24
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fd4f 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800940a:	233f      	movs	r3, #63	; 0x3f
 800940c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8009410:	f240 1321 	movw	r3, #289	; 0x121
 8009414:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8009418:	230f      	movs	r3, #15
 800941a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800941e:	f107 0318 	add.w	r3, r7, #24
 8009422:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009426:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800942a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800942e:	f107 0317 	add.w	r3, r7, #23
 8009432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009436:	2301      	movs	r3, #1
 8009438:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800943c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fbf4 	bl	8009c30 <hci_send_req>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	da01      	bge.n	8009452 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800944e:	23ff      	movs	r3, #255	; 0xff
 8009450:	e004      	b.n	800945c <aci_gatt_write_char_desc+0x134>
  return status;
 8009452:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009456:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800945a:	781b      	ldrb	r3, [r3, #0]
}
 800945c:	4618      	mov	r0, r3
 800945e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009462:	46bd      	mov	sp, r7
 8009464:	bd90      	pop	{r4, r7, pc}

08009466 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8009466:	b590      	push	{r4, r7, lr}
 8009468:	b0cf      	sub	sp, #316	; 0x13c
 800946a:	af00      	add	r7, sp, #0
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009476:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009480:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009484:	4622      	mov	r2, r4
 8009486:	801a      	strh	r2, [r3, #0]
 8009488:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800948c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009490:	4602      	mov	r2, r0
 8009492:	801a      	strh	r2, [r3, #0]
 8009494:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009498:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800949c:	460a      	mov	r2, r1
 800949e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 80094a0:	f107 0318 	add.w	r3, r7, #24
 80094a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80094a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094b0:	2200      	movs	r2, #0
 80094b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80094ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094be:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80094c2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80094c6:	8812      	ldrh	r2, [r2, #0]
 80094c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80094ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094ce:	3302      	adds	r3, #2
 80094d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 80094d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80094dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80094e0:	8812      	ldrh	r2, [r2, #0]
 80094e2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80094e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094e8:	3302      	adds	r3, #2
 80094ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80094ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80094f6:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80094fa:	7812      	ldrb	r2, [r2, #0]
 80094fc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80094fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009502:	3301      	adds	r3, #1
 8009504:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8009508:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800950c:	1d58      	adds	r0, r3, #5
 800950e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009512:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800951c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009520:	6819      	ldr	r1, [r3, #0]
 8009522:	f000 fcb1 	bl	8009e88 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009526:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800952a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009534:	4413      	add	r3, r2
 8009536:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800953a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800953e:	2218      	movs	r2, #24
 8009540:	2100      	movs	r1, #0
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fcb0 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009548:	233f      	movs	r3, #63	; 0x3f
 800954a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 800954e:	f240 1323 	movw	r3, #291	; 0x123
 8009552:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009556:	f107 0318 	add.w	r3, r7, #24
 800955a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800955e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009562:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009566:	f107 0317 	add.w	r3, r7, #23
 800956a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800956e:	2301      	movs	r3, #1
 8009570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009574:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009578:	2100      	movs	r1, #0
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fb58 	bl	8009c30 <hci_send_req>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	da01      	bge.n	800958a <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 8009586:	23ff      	movs	r3, #255	; 0xff
 8009588:	e004      	b.n	8009594 <aci_gatt_write_without_resp+0x12e>
  return status;
 800958a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800958e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009592:	781b      	ldrb	r3, [r3, #0]
}
 8009594:	4618      	mov	r0, r3
 8009596:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800959a:	46bd      	mov	sp, r7
 800959c:	bd90      	pop	{r4, r7, pc}

0800959e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b0cc      	sub	sp, #304	; 0x130
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80095b6:	4602      	mov	r2, r0
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80095c2:	460a      	mov	r2, r1
 80095c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80095c6:	f107 0310 	add.w	r3, r7, #16
 80095ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80095e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095e8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80095ec:	7812      	ldrb	r2, [r2, #0]
 80095ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095f4:	3301      	adds	r3, #1
 80095f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80095fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009602:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800960a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800960e:	3301      	adds	r3, #1
 8009610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009618:	1c98      	adds	r0, r3, #2
 800961a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800962c:	6819      	ldr	r1, [r3, #0]
 800962e:	f000 fc2b 	bl	8009e88 <Osal_MemCpy>
  index_input += Length;
 8009632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009636:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009640:	4413      	add	r3, r2
 8009642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009646:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800964a:	2218      	movs	r2, #24
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fc2a 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009654:	233f      	movs	r3, #63	; 0x3f
 8009656:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800965a:	230c      	movs	r3, #12
 800965c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009668:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800966c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009670:	f107 030f 	add.w	r3, r7, #15
 8009674:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009678:	2301      	movs	r3, #1
 800967a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800967e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009682:	2100      	movs	r1, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fad3 	bl	8009c30 <hci_send_req>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	da01      	bge.n	8009694 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009690:	23ff      	movs	r3, #255	; 0xff
 8009692:	e004      	b.n	800969e <aci_hal_write_config_data+0x100>
  return status;
 8009694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009698:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800969c:	781b      	ldrb	r3, [r3, #0]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b0cc      	sub	sp, #304	; 0x130
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4602      	mov	r2, r0
 80096b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80096c2:	460a      	mov	r2, r1
 80096c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80096c6:	f107 0310 	add.w	r3, r7, #16
 80096ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80096e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096e8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80096ec:	7812      	ldrb	r2, [r2, #0]
 80096ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096f4:	3301      	adds	r3, #1
 80096f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80096fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009702:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009706:	7812      	ldrb	r2, [r2, #0]
 8009708:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800970a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800970e:	3301      	adds	r3, #1
 8009710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009718:	2218      	movs	r2, #24
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fbc3 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009722:	233f      	movs	r3, #63	; 0x3f
 8009724:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009728:	230f      	movs	r3, #15
 800972a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800972e:	f107 0310 	add.w	r3, r7, #16
 8009732:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800973a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800973e:	f107 030f 	add.w	r3, r7, #15
 8009742:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009746:	2301      	movs	r3, #1
 8009748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800974c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fa6c 	bl	8009c30 <hci_send_req>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	da01      	bge.n	8009762 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800975e:	23ff      	movs	r3, #255	; 0xff
 8009760:	e004      	b.n	800976c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009766:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800976a:	781b      	ldrb	r3, [r3, #0]
}
 800976c:	4618      	mov	r0, r3
 800976e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b0cc      	sub	sp, #304	; 0x130
 800977a:	af00      	add	r7, sp, #0
 800977c:	4602      	mov	r2, r0
 800977e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009782:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009786:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009788:	f107 0310 	add.w	r3, r7, #16
 800978c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009794:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80097a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80097ae:	8812      	ldrh	r2, [r2, #0]
 80097b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80097b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097b6:	3302      	adds	r3, #2
 80097b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097c0:	2218      	movs	r2, #24
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 fb6f 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80097ca:	233f      	movs	r3, #63	; 0x3f
 80097cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80097d0:	2318      	movs	r3, #24
 80097d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097d6:	f107 0310 	add.w	r3, r7, #16
 80097da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097e6:	f107 030f 	add.w	r3, r7, #15
 80097ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fa18 	bl	8009c30 <hci_send_req>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	da01      	bge.n	800980a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009806:	23ff      	movs	r3, #255	; 0xff
 8009808:	e004      	b.n	8009814 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800980a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009812:	781b      	ldrb	r3, [r3, #0]
}
 8009814:	4618      	mov	r0, r3
 8009816:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b088      	sub	sp, #32
 8009822:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009828:	f107 0308 	add.w	r3, r7, #8
 800982c:	2218      	movs	r2, #24
 800982e:	2100      	movs	r1, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fb39 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x03;
 8009836:	2303      	movs	r3, #3
 8009838:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800983a:	2303      	movs	r3, #3
 800983c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800983e:	1dfb      	adds	r3, r7, #7
 8009840:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009842:	2301      	movs	r3, #1
 8009844:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009846:	f107 0308 	add.w	r3, r7, #8
 800984a:	2100      	movs	r1, #0
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f9ef 	bl	8009c30 <hci_send_req>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	da01      	bge.n	800985c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009858:	23ff      	movs	r3, #255	; 0xff
 800985a:	e000      	b.n	800985e <hci_reset+0x40>
  return status;
 800985c:	79fb      	ldrb	r3, [r7, #7]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3720      	adds	r7, #32
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8009866:	b5b0      	push	{r4, r5, r7, lr}
 8009868:	b0cc      	sub	sp, #304	; 0x130
 800986a:	af00      	add	r7, sp, #0
 800986c:	4605      	mov	r5, r0
 800986e:	460c      	mov	r4, r1
 8009870:	4610      	mov	r0, r2
 8009872:	4619      	mov	r1, r3
 8009874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009878:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800987c:	462a      	mov	r2, r5
 800987e:	801a      	strh	r2, [r3, #0]
 8009880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009888:	4622      	mov	r2, r4
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009890:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009894:	4602      	mov	r2, r0
 8009896:	801a      	strh	r2, [r3, #0]
 8009898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098a0:	460a      	mov	r2, r1
 80098a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 80098a4:	f107 0310 	add.w	r3, r7, #16
 80098a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80098ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098b8:	2300      	movs	r3, #0
 80098ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80098be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80098c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80098ca:	8812      	ldrh	r2, [r2, #0]
 80098cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80098ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098d2:	3302      	adds	r3, #2
 80098d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80098d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80098e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80098e4:	8812      	ldrh	r2, [r2, #0]
 80098e6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80098e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098ec:	3302      	adds	r3, #2
 80098ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80098f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80098fa:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80098fe:	8812      	ldrh	r2, [r2, #0]
 8009900:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8009902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009906:	3302      	adds	r3, #2
 8009908:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 800990c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009910:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009914:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009918:	8812      	ldrh	r2, [r2, #0]
 800991a:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800991c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009920:	3302      	adds	r3, #2
 8009922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8009926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992a:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800992e:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8009930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009934:	3302      	adds	r3, #2
 8009936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800993a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993e:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8009942:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8009944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009948:	3302      	adds	r3, #2
 800994a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800994e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009952:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8009956:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009958:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800995c:	3302      	adds	r3, #2
 800995e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8009962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009966:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800996a:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800996c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009970:	3301      	adds	r3, #1
 8009972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8009976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800997e:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8009980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009984:	3301      	adds	r3, #1
 8009986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800998a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800998e:	2218      	movs	r2, #24
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fa88 	bl	8009ea8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009998:	233f      	movs	r3, #63	; 0x3f
 800999a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800999e:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80099a2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80099a6:	f107 0310 	add.w	r3, r7, #16
 80099aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80099ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80099b6:	f107 030f 	add.w	r3, r7, #15
 80099ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80099be:	2301      	movs	r3, #1
 80099c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099c8:	2100      	movs	r1, #0
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f930 	bl	8009c30 <hci_send_req>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	da01      	bge.n	80099da <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 80099d6:	23ff      	movs	r3, #255	; 0xff
 80099d8:	e004      	b.n	80099e4 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 80099da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099e2:	781b      	ldrb	r3, [r3, #0]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080099f0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f6:	f3ef 8310 	mrs	r3, PRIMASK
 80099fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80099fc:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80099fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a00:	b672      	cpsid	i
}
 8009a02:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009a04:	1cbb      	adds	r3, r7, #2
 8009a06:	4619      	mov	r1, r3
 8009a08:	4812      	ldr	r0, [pc, #72]	; (8009a54 <DbgTrace_TxCpltCallback+0x64>)
 8009a0a:	f000 ffc2 	bl	800a992 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009a0e:	1cbb      	adds	r3, r7, #2
 8009a10:	4619      	mov	r1, r3
 8009a12:	4810      	ldr	r0, [pc, #64]	; (8009a54 <DbgTrace_TxCpltCallback+0x64>)
 8009a14:	f001 f8ae 	bl	800ab74 <CircularQueue_Sense>
 8009a18:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00c      	beq.n	8009a3a <DbgTrace_TxCpltCallback+0x4a>
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f383 8810 	msr	PRIMASK, r3
}
 8009a2a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009a2c:	887b      	ldrh	r3, [r7, #2]
 8009a2e:	4a0a      	ldr	r2, [pc, #40]	; (8009a58 <DbgTrace_TxCpltCallback+0x68>)
 8009a30:	4619      	mov	r1, r3
 8009a32:	6938      	ldr	r0, [r7, #16]
 8009a34:	f7f6 fea7 	bl	8000786 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009a38:	e008      	b.n	8009a4c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009a3a:	4b08      	ldr	r3, [pc, #32]	; (8009a5c <DbgTrace_TxCpltCallback+0x6c>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f383 8810 	msr	PRIMASK, r3
}
 8009a4a:	bf00      	nop
}
 8009a4c:	bf00      	nop
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	200004bc 	.word	0x200004bc
 8009a58:	080099f1 	.word	0x080099f1
 8009a5c:	2000002d 	.word	0x2000002d

08009a60 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009a66:	f7f6 fe88 	bl	800077a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a74:	4903      	ldr	r1, [pc, #12]	; (8009a84 <DbgTraceInit+0x24>)
 8009a76:	4804      	ldr	r0, [pc, #16]	; (8009a88 <DbgTraceInit+0x28>)
 8009a78:	f000 fd32 	bl	800a4e0 <CircularQueue_Init>
#endif 
#endif
  return;
 8009a7c:	bf00      	nop
}
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	200004dc 	.word	0x200004dc
 8009a88:	200004bc 	.word	0x200004bc

08009a8c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 f805 	bl	8009aac <DbgTraceWrite>
 8009aa2:	4603      	mov	r3, r0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	; 0x28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009abc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ac2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009ac4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009acc:	d102      	bne.n	8009ad4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad2:	e037      	b.n	8009b44 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d006      	beq.n	8009ae8 <DbgTraceWrite+0x3c>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d003      	beq.n	8009ae8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae6:	e02d      	b.n	8009b44 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d02a      	beq.n	8009b44 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009af2:	b672      	cpsid	i
}
 8009af4:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	2301      	movs	r3, #1
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	4814      	ldr	r0, [pc, #80]	; (8009b50 <DbgTraceWrite+0xa4>)
 8009b00:	f000 fd20 	bl	800a544 <CircularQueue_Add>
 8009b04:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d015      	beq.n	8009b38 <DbgTraceWrite+0x8c>
 8009b0c:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <DbgTraceWrite+0xa8>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d010      	beq.n	8009b38 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009b16:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <DbgTraceWrite+0xa8>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f383 8810 	msr	PRIMASK, r3
}
 8009b26:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <DbgTraceWrite+0xac>)
 8009b2e:	4619      	mov	r1, r3
 8009b30:	69f8      	ldr	r0, [r7, #28]
 8009b32:	f7f6 fe28 	bl	8000786 <DbgOutputTraces>
 8009b36:	e005      	b.n	8009b44 <DbgTraceWrite+0x98>
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f383 8810 	msr	PRIMASK, r3
}
 8009b42:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3728      	adds	r7, #40	; 0x28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	200004bc 	.word	0x200004bc
 8009b54:	2000002d 	.word	0x2000002d
 8009b58:	080099f1 	.word	0x080099f1

08009b5c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	4a08      	ldr	r2, [pc, #32]	; (8009b8c <hci_init+0x30>)
 8009b6c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009b6e:	4a08      	ldr	r2, [pc, #32]	; (8009b90 <hci_init+0x34>)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009b74:	4806      	ldr	r0, [pc, #24]	; (8009b90 <hci_init+0x34>)
 8009b76:	f000 f973 	bl	8009e60 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 f8d4 	bl	8009d2c <TlInit>

  return;
 8009b84:	bf00      	nop
}
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	20001504 	.word	0x20001504
 8009b90:	200014dc 	.word	0x200014dc

08009b94 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009b9a:	4822      	ldr	r0, [pc, #136]	; (8009c24 <hci_user_evt_proc+0x90>)
 8009b9c:	f000 fbf2 	bl	800a384 <LST_is_empty>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d12b      	bne.n	8009bfe <hci_user_evt_proc+0x6a>
 8009ba6:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <hci_user_evt_proc+0x94>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d027      	beq.n	8009bfe <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009bae:	f107 030c 	add.w	r3, r7, #12
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	481b      	ldr	r0, [pc, #108]	; (8009c24 <hci_user_evt_proc+0x90>)
 8009bb6:	f000 fc74 	bl	800a4a2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009bba:	4b1c      	ldr	r3, [pc, #112]	; (8009c2c <hci_user_evt_proc+0x98>)
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00c      	beq.n	8009bdc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009bca:	4b18      	ldr	r3, [pc, #96]	; (8009c2c <hci_user_evt_proc+0x98>)
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	1d3a      	adds	r2, r7, #4
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009bd4:	793a      	ldrb	r2, [r7, #4]
 8009bd6:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <hci_user_evt_proc+0x94>)
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	e002      	b.n	8009be2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009bdc:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <hci_user_evt_proc+0x94>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009be2:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <hci_user_evt_proc+0x94>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d004      	beq.n	8009bf4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 fb3d 	bl	800b26c <TL_MM_EvtDone>
 8009bf2:	e004      	b.n	8009bfe <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	480a      	ldr	r0, [pc, #40]	; (8009c24 <hci_user_evt_proc+0x90>)
 8009bfa:	f000 fbe5 	bl	800a3c8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009bfe:	4809      	ldr	r0, [pc, #36]	; (8009c24 <hci_user_evt_proc+0x90>)
 8009c00:	f000 fbc0 	bl	800a384 <LST_is_empty>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d107      	bne.n	8009c1a <hci_user_evt_proc+0x86>
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <hci_user_evt_proc+0x94>)
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009c12:	4804      	ldr	r0, [pc, #16]	; (8009c24 <hci_user_evt_proc+0x90>)
 8009c14:	f7f9 fa8e 	bl	8003134 <hci_notify_asynch_evt>
  }


  return;
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
}
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	200001d8 	.word	0x200001d8
 8009c28:	200001e4 	.word	0x200001e4
 8009c2c:	200014dc 	.word	0x200014dc

08009c30 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b088      	sub	sp, #32
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	f000 f8cb 	bl	8009dd8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009c42:	2300      	movs	r3, #0
 8009c44:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	885b      	ldrh	r3, [r3, #2]
 8009c4a:	b21b      	sxth	r3, r3
 8009c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c50:	b21a      	sxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	029b      	lsls	r3, r3, #10
 8009c58:	b21b      	sxth	r3, r3
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	b2d9      	uxtb	r1, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	8bbb      	ldrh	r3, [r7, #28]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f88d 	bl	8009d8c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009c72:	e04e      	b.n	8009d12 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009c74:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009c78:	f7f9 fa73 	bl	8003162 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009c7c:	e043      	b.n	8009d06 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009c7e:	f107 030c 	add.w	r3, r7, #12
 8009c82:	4619      	mov	r1, r3
 8009c84:	4828      	ldr	r0, [pc, #160]	; (8009d28 <hci_send_req+0xf8>)
 8009c86:	f000 fc0c 	bl	800a4a2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	7a5b      	ldrb	r3, [r3, #9]
 8009c8e:	2b0f      	cmp	r3, #15
 8009c90:	d114      	bne.n	8009cbc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	330b      	adds	r3, #11
 8009c96:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	885b      	ldrh	r3, [r3, #2]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	8bba      	ldrh	r2, [r7, #28]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d104      	bne.n	8009cae <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d027      	beq.n	8009d06 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	77fb      	strb	r3, [r7, #31]
 8009cba:	e024      	b.n	8009d06 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	330b      	adds	r3, #11
 8009cc0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	8bba      	ldrh	r2, [r7, #28]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d114      	bne.n	8009cfa <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	7a9b      	ldrb	r3, [r3, #10]
 8009cd4:	3b03      	subs	r3, #3
 8009cd6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	695a      	ldr	r2, [r3, #20]
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	bfa8      	it	ge
 8009ce2:	461a      	movge	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6918      	ldr	r0, [r3, #16]
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	1cd9      	adds	r1, r3, #3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	f001 fe29 	bl	800b94c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009d02:	2301      	movs	r3, #1
 8009d04:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009d06:	4808      	ldr	r0, [pc, #32]	; (8009d28 <hci_send_req+0xf8>)
 8009d08:	f000 fb3c 	bl	800a384 <LST_is_empty>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0b5      	beq.n	8009c7e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009d12:	7ffb      	ldrb	r3, [r7, #31]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d0ad      	beq.n	8009c74 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009d18:	2001      	movs	r0, #1
 8009d1a:	f000 f85d 	bl	8009dd8 <NotifyCmdStatus>

  return 0;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3720      	adds	r7, #32
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200014fc 	.word	0x200014fc

08009d2c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009d34:	480f      	ldr	r0, [pc, #60]	; (8009d74 <TlInit+0x48>)
 8009d36:	f000 fb15 	bl	800a364 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009d3a:	4a0f      	ldr	r2, [pc, #60]	; (8009d78 <TlInit+0x4c>)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009d40:	480e      	ldr	r0, [pc, #56]	; (8009d7c <TlInit+0x50>)
 8009d42:	f000 fb0f 	bl	800a364 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009d46:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <TlInit+0x54>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	; (8009d84 <TlInit+0x58>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00a      	beq.n	8009d6a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009d58:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <TlInit+0x5c>)
 8009d5a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009d5c:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <TlInit+0x58>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f107 0208 	add.w	r2, r7, #8
 8009d64:	4610      	mov	r0, r2
 8009d66:	4798      	blx	r3
  }

  return;
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
}
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	200014fc 	.word	0x200014fc
 8009d78:	200001e0 	.word	0x200001e0
 8009d7c:	200001d8 	.word	0x200001d8
 8009d80:	200001e4 	.word	0x200001e4
 8009d84:	200014dc 	.word	0x200014dc
 8009d88:	08009e19 	.word	0x08009e19

08009d8c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	603a      	str	r2, [r7, #0]
 8009d96:	80fb      	strh	r3, [r7, #6]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009d9c:	4b0c      	ldr	r3, [pc, #48]	; (8009dd0 <SendCmd+0x44>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	88fa      	ldrh	r2, [r7, #6]
 8009da2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009da6:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <SendCmd+0x44>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	797a      	ldrb	r2, [r7, #5]
 8009dac:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009dae:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <SendCmd+0x44>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	330c      	adds	r3, #12
 8009db4:	797a      	ldrb	r2, [r7, #5]
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 fdc7 	bl	800b94c <memcpy>

  hciContext.io.Send(0,0);
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <SendCmd+0x48>)
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	4798      	blx	r3

  return;
 8009dc8:	bf00      	nop
}
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	200001e0 	.word	0x200001e0
 8009dd4:	200014dc 	.word	0x200014dc

08009dd8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d108      	bne.n	8009dfa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009de8:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <NotifyCmdStatus+0x3c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00d      	beq.n	8009e0c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009df0:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <NotifyCmdStatus+0x3c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2000      	movs	r0, #0
 8009df6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009df8:	e008      	b.n	8009e0c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009dfa:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <NotifyCmdStatus+0x3c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009e02:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <NotifyCmdStatus+0x3c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2001      	movs	r0, #1
 8009e08:	4798      	blx	r3
  return;
 8009e0a:	bf00      	nop
 8009e0c:	bf00      	nop
}
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	20001504 	.word	0x20001504

08009e18 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7a5b      	ldrb	r3, [r3, #9]
 8009e24:	2b0f      	cmp	r3, #15
 8009e26:	d003      	beq.n	8009e30 <TlEvtReceived+0x18>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7a5b      	ldrb	r3, [r3, #9]
 8009e2c:	2b0e      	cmp	r3, #14
 8009e2e:	d107      	bne.n	8009e40 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009e30:	6879      	ldr	r1, [r7, #4]
 8009e32:	4809      	ldr	r0, [pc, #36]	; (8009e58 <TlEvtReceived+0x40>)
 8009e34:	f000 faee 	bl	800a414 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009e38:	2000      	movs	r0, #0
 8009e3a:	f7f9 f987 	bl	800314c <hci_cmd_resp_release>
 8009e3e:	e006      	b.n	8009e4e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	4806      	ldr	r0, [pc, #24]	; (8009e5c <TlEvtReceived+0x44>)
 8009e44:	f000 fae6 	bl	800a414 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009e48:	4804      	ldr	r0, [pc, #16]	; (8009e5c <TlEvtReceived+0x44>)
 8009e4a:	f7f9 f973 	bl	8003134 <hci_notify_asynch_evt>
  }

  return;
 8009e4e:	bf00      	nop
}
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200014fc 	.word	0x200014fc
 8009e5c:	200001d8 	.word	0x200001d8

08009e60 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a05      	ldr	r2, [pc, #20]	; (8009e80 <hci_register_io_bus+0x20>)
 8009e6c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a04      	ldr	r2, [pc, #16]	; (8009e84 <hci_register_io_bus+0x24>)
 8009e72:	611a      	str	r2, [r3, #16]

  return;
 8009e74:	bf00      	nop
}
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	0800afe5 	.word	0x0800afe5
 8009e84:	0800b04d 	.word	0x0800b04d

08009e88 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f001 fd57 	bl	800b94c <memcpy>
 8009e9e:	4603      	mov	r3, r0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f001 fd55 	bl	800b968 <memset>
 8009ebe:	4603      	mov	r3, r0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009ed2:	4b0f      	ldr	r3, [pc, #60]	; (8009f10 <OTP_Read+0x48>)
 8009ed4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009ed6:	e002      	b.n	8009ede <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3b08      	subs	r3, #8
 8009edc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3307      	adds	r3, #7
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	79fa      	ldrb	r2, [r7, #7]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d003      	beq.n	8009ef2 <OTP_Read+0x2a>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <OTP_Read+0x4c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d1f2      	bne.n	8009ed8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3307      	adds	r3, #7
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	79fa      	ldrb	r2, [r7, #7]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d001      	beq.n	8009f02 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009f02:	68fb      	ldr	r3, [r7, #12]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	1fff73f8 	.word	0x1fff73f8
 8009f14:	1fff7000 	.word	0x1fff7000

08009f18 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009f20:	f107 030c 	add.w	r3, r7, #12
 8009f24:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	212c      	movs	r1, #44	; 0x2c
 8009f30:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009f34:	f000 f94c 	bl	800a1d0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	330b      	adds	r3, #11
 8009f3c:	78db      	ldrb	r3, [r3, #3]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3720      	adds	r7, #32
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b088      	sub	sp, #32
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009f4e:	f107 030c 	add.w	r3, r7, #12
 8009f52:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	210f      	movs	r1, #15
 8009f5e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009f62:	f000 f935 	bl	800a1d0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	330b      	adds	r3, #11
 8009f6a:	78db      	ldrb	r3, [r3, #3]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3720      	adds	r7, #32
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009f7c:	f107 030c 	add.w	r3, r7, #12
 8009f80:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	210e      	movs	r1, #14
 8009f88:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009f8c:	f000 f920 	bl	800a1d0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	330b      	adds	r3, #11
 8009f94:	78db      	ldrb	r3, [r3, #3]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b08b      	sub	sp, #44	; 0x2c
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009fc8:	4b4a      	ldr	r3, [pc, #296]	; (800a0f4 <SHCI_GetWirelessFwInfo+0x154>)
 8009fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009fd0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009fda:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a44      	ldr	r2, [pc, #272]	; (800a0f8 <SHCI_GetWirelessFwInfo+0x158>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d10f      	bne.n	800a00c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	617b      	str	r3, [r7, #20]
 800a00a:	e01a      	b.n	800a042 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a014:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a018:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	0e1b      	lsrs	r3, r3, #24
 800a046:	b2da      	uxtb	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	0c1b      	lsrs	r3, r3, #16
 800a050:	b2da      	uxtb	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	0a1b      	lsrs	r3, r3, #8
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	091b      	lsrs	r3, r3, #4
 800a064:	b2db      	uxtb	r3, r3
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	0e1b      	lsrs	r3, r3, #24
 800a082:	b2da      	uxtb	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	0c1b      	lsrs	r3, r3, #16
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	0a1b      	lsrs	r3, r3, #8
 800a096:	b2da      	uxtb	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	0e1b      	lsrs	r3, r3, #24
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	0c1b      	lsrs	r3, r3, #16
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	0a1b      	lsrs	r3, r3, #8
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	0e1b      	lsrs	r3, r3, #24
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	0c1b      	lsrs	r3, r3, #16
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	372c      	adds	r7, #44	; 0x2c
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	58004000 	.word	0x58004000
 800a0f8:	a94656b9 	.word	0xa94656b9

0800a0fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	4a08      	ldr	r2, [pc, #32]	; (800a12c <shci_init+0x30>)
 800a10c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a10e:	4a08      	ldr	r2, [pc, #32]	; (800a130 <shci_init+0x34>)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a114:	4806      	ldr	r0, [pc, #24]	; (800a130 <shci_init+0x34>)
 800a116:	f000 f911 	bl	800a33c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f894 	bl	800a24c <TlInit>

  return;
 800a124:	bf00      	nop
}
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	20001528 	.word	0x20001528
 800a130:	20001508 	.word	0x20001508

0800a134 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a13a:	4822      	ldr	r0, [pc, #136]	; (800a1c4 <shci_user_evt_proc+0x90>)
 800a13c:	f000 f922 	bl	800a384 <LST_is_empty>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d12b      	bne.n	800a19e <shci_user_evt_proc+0x6a>
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <shci_user_evt_proc+0x94>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d027      	beq.n	800a19e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a14e:	f107 030c 	add.w	r3, r7, #12
 800a152:	4619      	mov	r1, r3
 800a154:	481b      	ldr	r0, [pc, #108]	; (800a1c4 <shci_user_evt_proc+0x90>)
 800a156:	f000 f9a4 	bl	800a4a2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a15a:	4b1c      	ldr	r3, [pc, #112]	; (800a1cc <shci_user_evt_proc+0x98>)
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00c      	beq.n	800a17c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a166:	2301      	movs	r3, #1
 800a168:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a16a:	4b18      	ldr	r3, [pc, #96]	; (800a1cc <shci_user_evt_proc+0x98>)
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	1d3a      	adds	r2, r7, #4
 800a170:	4610      	mov	r0, r2
 800a172:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a174:	793a      	ldrb	r2, [r7, #4]
 800a176:	4b14      	ldr	r3, [pc, #80]	; (800a1c8 <shci_user_evt_proc+0x94>)
 800a178:	701a      	strb	r2, [r3, #0]
 800a17a:	e002      	b.n	800a182 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <shci_user_evt_proc+0x94>)
 800a17e:	2201      	movs	r2, #1
 800a180:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a182:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <shci_user_evt_proc+0x94>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d004      	beq.n	800a194 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 f86d 	bl	800b26c <TL_MM_EvtDone>
 800a192:	e004      	b.n	800a19e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4619      	mov	r1, r3
 800a198:	480a      	ldr	r0, [pc, #40]	; (800a1c4 <shci_user_evt_proc+0x90>)
 800a19a:	f000 f915 	bl	800a3c8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a19e:	4809      	ldr	r0, [pc, #36]	; (800a1c4 <shci_user_evt_proc+0x90>)
 800a1a0:	f000 f8f0 	bl	800a384 <LST_is_empty>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d107      	bne.n	800a1ba <shci_user_evt_proc+0x86>
 800a1aa:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <shci_user_evt_proc+0x94>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a1b2:	4804      	ldr	r0, [pc, #16]	; (800a1c4 <shci_user_evt_proc+0x90>)
 800a1b4:	f7f6 fec1 	bl	8000f3a <shci_notify_asynch_evt>
  }


  return;
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
}
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000210 	.word	0x20000210
 800a1c8:	20000220 	.word	0x20000220
 800a1cc:	20001508 	.word	0x20001508

0800a1d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60ba      	str	r2, [r7, #8]
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	4603      	mov	r3, r0
 800a1dc:	81fb      	strh	r3, [r7, #14]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	f000 f864 	bl	800a2b0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a1e8:	4b16      	ldr	r3, [pc, #88]	; (800a244 <shci_send+0x74>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	89fa      	ldrh	r2, [r7, #14]
 800a1ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a1f2:	4b14      	ldr	r3, [pc, #80]	; (800a244 <shci_send+0x74>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	7b7a      	ldrb	r2, [r7, #13]
 800a1f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a1fa:	4b12      	ldr	r3, [pc, #72]	; (800a244 <shci_send+0x74>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	330c      	adds	r3, #12
 800a200:	7b7a      	ldrb	r2, [r7, #13]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	4618      	mov	r0, r3
 800a206:	f001 fba1 	bl	800b94c <memcpy>

  shciContext.io.Send(0,0);
 800a20a:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <shci_send+0x78>)
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2100      	movs	r1, #0
 800a210:	2000      	movs	r0, #0
 800a212:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a214:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a218:	f7f6 fea7 	bl	8000f6a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f103 0008 	add.w	r0, r3, #8
 800a222:	4b08      	ldr	r3, [pc, #32]	; (800a244 <shci_send+0x74>)
 800a224:	6819      	ldr	r1, [r3, #0]
 800a226:	4b07      	ldr	r3, [pc, #28]	; (800a244 <shci_send+0x74>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	789b      	ldrb	r3, [r3, #2]
 800a22c:	3303      	adds	r3, #3
 800a22e:	461a      	mov	r2, r3
 800a230:	f001 fb8c 	bl	800b94c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a234:	2001      	movs	r0, #1
 800a236:	f000 f83b 	bl	800a2b0 <Cmd_SetStatus>

  return;
 800a23a:	bf00      	nop
}
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	2000021c 	.word	0x2000021c
 800a248:	20001508 	.word	0x20001508

0800a24c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a254:	4a10      	ldr	r2, [pc, #64]	; (800a298 <TlInit+0x4c>)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a25a:	4810      	ldr	r0, [pc, #64]	; (800a29c <TlInit+0x50>)
 800a25c:	f000 f882 	bl	800a364 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a260:	2001      	movs	r0, #1
 800a262:	f000 f825 	bl	800a2b0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a266:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <TlInit+0x54>)
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <TlInit+0x58>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00c      	beq.n	800a28e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <TlInit+0x5c>)
 800a27a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a27c:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <TlInit+0x60>)
 800a27e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a280:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <TlInit+0x58>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f107 020c 	add.w	r2, r7, #12
 800a288:	4610      	mov	r0, r2
 800a28a:	4798      	blx	r3
  }

  return;
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
}
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	2000021c 	.word	0x2000021c
 800a29c:	20000210 	.word	0x20000210
 800a2a0:	20000220 	.word	0x20000220
 800a2a4:	20001508 	.word	0x20001508
 800a2a8:	0800a301 	.word	0x0800a301
 800a2ac:	0800a319 	.word	0x0800a319

0800a2b0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10b      	bne.n	800a2d8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a2c0:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <Cmd_SetStatus+0x48>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <Cmd_SetStatus+0x48>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <Cmd_SetStatus+0x4c>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a2d6:	e00b      	b.n	800a2f0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a2d8:	4b08      	ldr	r3, [pc, #32]	; (800a2fc <Cmd_SetStatus+0x4c>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a2de:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <Cmd_SetStatus+0x48>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d004      	beq.n	800a2f0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a2e6:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <Cmd_SetStatus+0x48>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	4798      	blx	r3
  return;
 800a2ee:	bf00      	nop
 800a2f0:	bf00      	nop
}
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20001528 	.word	0x20001528
 800a2fc:	20000218 	.word	0x20000218

0800a300 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a308:	2000      	movs	r0, #0
 800a30a:	f7f6 fe23 	bl	8000f54 <shci_cmd_resp_release>

  return;
 800a30e:	bf00      	nop
}
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	4805      	ldr	r0, [pc, #20]	; (800a338 <TlUserEvtReceived+0x20>)
 800a324:	f000 f876 	bl	800a414 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a328:	4803      	ldr	r0, [pc, #12]	; (800a338 <TlUserEvtReceived+0x20>)
 800a32a:	f7f6 fe06 	bl	8000f3a <shci_notify_asynch_evt>

  return;
 800a32e:	bf00      	nop
}
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20000210 	.word	0x20000210

0800a33c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a05      	ldr	r2, [pc, #20]	; (800a35c <shci_register_io_bus+0x20>)
 800a348:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a04      	ldr	r2, [pc, #16]	; (800a360 <shci_register_io_bus+0x24>)
 800a34e:	611a      	str	r2, [r3, #16]

  return;
 800a350:	bf00      	nop
}
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	0800b0f9 	.word	0x0800b0f9
 800a360:	0800b14d 	.word	0x0800b14d

0800a364 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	605a      	str	r2, [r3, #4]
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a384:	b480      	push	{r7}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a38c:	f3ef 8310 	mrs	r3, PRIMASK
 800a390:	60fb      	str	r3, [r7, #12]
  return(result);
 800a392:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a396:	b672      	cpsid	i
}
 800a398:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d102      	bne.n	800a3aa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	75fb      	strb	r3, [r7, #23]
 800a3a8:	e001      	b.n	800a3ae <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	f383 8810 	msr	PRIMASK, r3
}
 800a3b8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a3da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3dc:	b672      	cpsid	i
}
 800a3de:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	605a      	str	r2, [r3, #4]
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f383 8810 	msr	PRIMASK, r3
}
 800a406:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a408:	bf00      	nop
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a41e:	f3ef 8310 	mrs	r3, PRIMASK
 800a422:	60fb      	str	r3, [r7, #12]
  return(result);
 800a424:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a428:	b672      	cpsid	i
}
 800a42a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f383 8810 	msr	PRIMASK, r3
}
 800a452:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a454:	bf00      	nop
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a468:	f3ef 8310 	mrs	r3, PRIMASK
 800a46c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a46e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a472:	b672      	cpsid	i
}
 800a474:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	6812      	ldr	r2, [r2, #0]
 800a47e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6852      	ldr	r2, [r2, #4]
 800a488:	605a      	str	r2, [r3, #4]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	f383 8810 	msr	PRIMASK, r3
}
 800a494:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b086      	sub	sp, #24
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a4b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4b6:	b672      	cpsid	i
}
 800a4b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff ffca 	bl	800a460 <LST_remove_node>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f383 8810 	msr	PRIMASK, r3
}
 800a4d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a4d8:	bf00      	nop
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	887a      	ldrh	r2, [r7, #2]
 800a516:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	7e3a      	ldrb	r2, [r7, #24]
 800a51c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a51e:	7e3b      	ldrb	r3, [r7, #24]
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d006      	beq.n	800a536 <CircularQueue_Init+0x56>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	891b      	ldrh	r3, [r3, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a530:	f04f 33ff 	mov.w	r3, #4294967295
 800a534:	e000      	b.n	800a538 <CircularQueue_Init+0x58>
  }
  return 0;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08e      	sub	sp, #56	; 0x38
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	603b      	str	r3, [r7, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a554:	2300      	movs	r3, #0
 800a556:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a558:	2300      	movs	r3, #0
 800a55a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a55c:	2300      	movs	r3, #0
 800a55e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a560:	2300      	movs	r3, #0
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28
 800a564:	2300      	movs	r3, #0
 800a566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a568:	2300      	movs	r3, #0
 800a56a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a56c:	2300      	movs	r3, #0
 800a56e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	891b      	ldrh	r3, [r3, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <CircularQueue_Add+0x38>
 800a578:	2302      	movs	r3, #2
 800a57a:	e000      	b.n	800a57e <CircularQueue_Add+0x3a>
 800a57c:	2300      	movs	r3, #0
 800a57e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d02a      	beq.n	800a5de <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	891b      	ldrh	r3, [r3, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d123      	bne.n	800a5d8 <CircularQueue_Add+0x94>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	4413      	add	r3, r2
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	1c58      	adds	r0, r3, #1
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4298      	cmp	r0, r3
 800a5ae:	d306      	bcc.n	800a5be <CircularQueue_Add+0x7a>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6918      	ldr	r0, [r3, #16]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	1ac3      	subs	r3, r0, r3
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	e002      	b.n	800a5c4 <CircularQueue_Add+0x80>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	440b      	add	r3, r1
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	021b      	lsls	r3, r3, #8
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	4413      	add	r3, r2
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3302      	adds	r3, #2
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	e001      	b.n	800a5dc <CircularQueue_Add+0x98>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	891b      	ldrh	r3, [r3, #8]
 800a5dc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	891b      	ldrh	r3, [r3, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	891b      	ldrh	r3, [r3, #8]
 800a5ea:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	691a      	ldr	r2, [r3, #16]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d307      	bcc.n	800a608 <CircularQueue_Add+0xc4>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6919      	ldr	r1, [r3, #16]
 800a600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a602:	440b      	add	r3, r1
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	e000      	b.n	800a60a <CircularQueue_Add+0xc6>
 800a608:	2300      	movs	r3, #0
 800a60a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a60c:	88fa      	ldrh	r2, [r7, #6]
 800a60e:	7ffb      	ldrb	r3, [r7, #31]
 800a610:	4413      	add	r3, r2
 800a612:	461a      	mov	r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	fb02 f303 	mul.w	r3, r2, r3
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d80b      	bhi.n	800a638 <CircularQueue_Add+0xf4>
 800a620:	88fa      	ldrh	r2, [r7, #6]
 800a622:	7ffb      	ldrb	r3, [r7, #31]
 800a624:	4413      	add	r3, r2
 800a626:	461a      	mov	r2, r3
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a62e:	fb01 f202 	mul.w	r2, r1, r2
 800a632:	1a9b      	subs	r3, r3, r2
 800a634:	b2db      	uxtb	r3, r3
 800a636:	e000      	b.n	800a63a <CircularQueue_Add+0xf6>
 800a638:	2300      	movs	r3, #0
 800a63a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a63c:	7dfa      	ldrb	r2, [r7, #23]
 800a63e:	7ffb      	ldrb	r3, [r7, #31]
 800a640:	429a      	cmp	r2, r3
 800a642:	bf8c      	ite	hi
 800a644:	2301      	movhi	r3, #1
 800a646:	2300      	movls	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a64c:	7fbb      	ldrb	r3, [r7, #30]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <CircularQueue_Add+0x120>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	7f1b      	ldrb	r3, [r3, #28]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <CircularQueue_Add+0x120>
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	b29b      	uxth	r3, r3
 800a662:	e000      	b.n	800a666 <CircularQueue_Add+0x122>
 800a664:	8bbb      	ldrh	r3, [r7, #28]
 800a666:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a668:	7fbb      	ldrb	r3, [r7, #30]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d008      	beq.n	800a680 <CircularQueue_Add+0x13c>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	7f1b      	ldrb	r3, [r3, #28]
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <CircularQueue_Add+0x13c>
 800a67a:	7ffb      	ldrb	r3, [r7, #31]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	e000      	b.n	800a682 <CircularQueue_Add+0x13e>
 800a680:	8bbb      	ldrh	r3, [r7, #28]
 800a682:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a684:	88fb      	ldrh	r3, [r7, #6]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 817e 	beq.w	800a988 <CircularQueue_Add+0x444>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	695a      	ldr	r2, [r3, #20]
 800a690:	88f9      	ldrh	r1, [r7, #6]
 800a692:	7ffb      	ldrb	r3, [r7, #31]
 800a694:	440b      	add	r3, r1
 800a696:	4619      	mov	r1, r3
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	fb01 f303 	mul.w	r3, r1, r3
 800a69e:	441a      	add	r2, r3
 800a6a0:	8bbb      	ldrh	r3, [r7, #28]
 800a6a2:	441a      	add	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	f200 816d 	bhi.w	800a988 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6b2:	e14a      	b.n	800a94a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6ba:	441a      	add	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d307      	bcc.n	800a6d4 <CircularQueue_Add+0x190>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6ca:	441a      	add	r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	e003      	b.n	800a6dc <CircularQueue_Add+0x198>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	691a      	ldr	r2, [r3, #16]
 800a6d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6da:	4413      	add	r3, r2
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	891b      	ldrh	r3, [r3, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d130      	bne.n	800a750 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	1c59      	adds	r1, r3, #1
 800a6f6:	6339      	str	r1, [r7, #48]	; 0x30
 800a6f8:	4413      	add	r3, r2
 800a6fa:	88fa      	ldrh	r2, [r7, #6]
 800a6fc:	b2d2      	uxtb	r2, r2
 800a6fe:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a706:	429a      	cmp	r2, r3
 800a708:	d304      	bcc.n	800a714 <CircularQueue_Add+0x1d0>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	e000      	b.n	800a716 <CircularQueue_Add+0x1d2>
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	0a1b      	lsrs	r3, r3, #8
 800a71c:	b298      	uxth	r0, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	1c59      	adds	r1, r3, #1
 800a726:	6339      	str	r1, [r7, #48]	; 0x30
 800a728:	4413      	add	r3, r2
 800a72a:	b2c2      	uxtb	r2, r0
 800a72c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a734:	429a      	cmp	r2, r3
 800a736:	d304      	bcc.n	800a742 <CircularQueue_Add+0x1fe>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	e000      	b.n	800a744 <CircularQueue_Add+0x200>
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	1c9a      	adds	r2, r3, #2
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a750:	88fa      	ldrh	r2, [r7, #6]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6859      	ldr	r1, [r3, #4]
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	1acb      	subs	r3, r1, r3
 800a75a:	4293      	cmp	r3, r2
 800a75c:	bf28      	it	cs
 800a75e:	4613      	movcs	r3, r2
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a762:	88fb      	ldrh	r3, [r7, #6]
 800a764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a766:	429a      	cmp	r2, r3
 800a768:	d007      	beq.n	800a77a <CircularQueue_Add+0x236>
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76e:	429a      	cmp	r2, r3
 800a770:	d225      	bcs.n	800a7be <CircularQueue_Add+0x27a>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	7f1b      	ldrb	r3, [r3, #28]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d121      	bne.n	800a7be <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	18d0      	adds	r0, r2, r3
 800a782:	88fb      	ldrh	r3, [r7, #6]
 800a784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a786:	fb02 f303 	mul.w	r3, r2, r3
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4413      	add	r3, r2
 800a78e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a790:	4619      	mov	r1, r3
 800a792:	f001 f8db 	bl	800b94c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	695a      	ldr	r2, [r3, #20]
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	441a      	add	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a7aa:	88fa      	ldrh	r2, [r7, #6]
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a7b2:	7ffb      	ldrb	r3, [r7, #31]
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	88fb      	ldrh	r3, [r7, #6]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a7bc:	e0a4      	b.n	800a908 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 80a1 	beq.w	800a908 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	7f1b      	ldrb	r3, [r3, #28]
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d03a      	beq.n	800a848 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	891b      	ldrh	r3, [r3, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10d      	bne.n	800a7f6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	3b02      	subs	r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	22ff      	movs	r2, #255	; 0xff
 800a7e6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	4413      	add	r3, r2
 800a7f2:	22ff      	movs	r2, #255	; 0xff
 800a7f4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	441a      	add	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a806:	88fb      	ldrh	r3, [r7, #6]
 800a808:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a80a:	2300      	movs	r3, #0
 800a80c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	891b      	ldrh	r3, [r3, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d16f      	bne.n	800a8f6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	1c59      	adds	r1, r3, #1
 800a81e:	6339      	str	r1, [r7, #48]	; 0x30
 800a820:	4413      	add	r3, r2
 800a822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a824:	b2d2      	uxtb	r2, r2
 800a826:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	0a18      	lsrs	r0, r3, #8
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	1c59      	adds	r1, r3, #1
 800a834:	6339      	str	r1, [r7, #48]	; 0x30
 800a836:	4413      	add	r3, r2
 800a838:	b2c2      	uxtb	r2, r0
 800a83a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	1c9a      	adds	r2, r3, #2
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	615a      	str	r2, [r3, #20]
 800a846:	e056      	b.n	800a8f6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	7f1b      	ldrb	r3, [r3, #28]
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b00      	cmp	r3, #0
 800a852:	d050      	beq.n	800a8f6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	891b      	ldrh	r3, [r3, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d14a      	bne.n	800a8f2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	3b02      	subs	r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a868:	b2d2      	uxtb	r2, r2
 800a86a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	0a19      	lsrs	r1, r3, #8
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	3b01      	subs	r3, #1
 800a878:	4413      	add	r3, r2
 800a87a:	b2ca      	uxtb	r2, r1
 800a87c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	18d0      	adds	r0, r2, r3
 800a886:	88fb      	ldrh	r3, [r7, #6]
 800a888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a88a:	fb02 f303 	mul.w	r3, r2, r3
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	4413      	add	r3, r2
 800a892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a894:	4619      	mov	r1, r3
 800a896:	f001 f859 	bl	800b94c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	695a      	ldr	r2, [r3, #20]
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	441a      	add	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a8aa:	88fa      	ldrh	r2, [r7, #6]
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	1c5a      	adds	r2, r3, #1
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a8bc:	2300      	movs	r3, #0
 800a8be:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	1c59      	adds	r1, r3, #1
 800a8c8:	6339      	str	r1, [r7, #48]	; 0x30
 800a8ca:	4413      	add	r3, r2
 800a8cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	0a18      	lsrs	r0, r3, #8
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	1c59      	adds	r1, r3, #1
 800a8de:	6339      	str	r1, [r7, #48]	; 0x30
 800a8e0:	4413      	add	r3, r2
 800a8e2:	b2c2      	uxtb	r2, r0
 800a8e4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	1c9a      	adds	r2, r3, #2
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	615a      	str	r2, [r3, #20]
 800a8f0:	e001      	b.n	800a8f6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e049      	b.n	800a98a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a8f6:	7ffb      	ldrb	r3, [r7, #31]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4413      	add	r3, r2
 800a900:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d015      	beq.n	800a93a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	18d0      	adds	r0, r2, r3
 800a916:	88fb      	ldrh	r3, [r7, #6]
 800a918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a91a:	fb03 f202 	mul.w	r2, r3, r2
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	4413      	add	r3, r2
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	4413      	add	r3, r2
 800a926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a928:	4619      	mov	r1, r3
 800a92a:	f001 f80f 	bl	800b94c <memcpy>
        q->byteCount += NbBytesToCopy;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	695a      	ldr	r2, [r3, #20]
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	441a      	add	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	3301      	adds	r3, #1
 800a948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a94a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	f4ff aeb0 	bcc.w	800a6b4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6919      	ldr	r1, [r3, #16]
 800a95c:	7ffb      	ldrb	r3, [r7, #31]
 800a95e:	4419      	add	r1, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	4299      	cmp	r1, r3
 800a966:	d307      	bcc.n	800a978 <CircularQueue_Add+0x434>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6919      	ldr	r1, [r3, #16]
 800a96c:	7ffb      	ldrb	r3, [r7, #31]
 800a96e:	4419      	add	r1, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	1acb      	subs	r3, r1, r3
 800a976:	e003      	b.n	800a980 <CircularQueue_Add+0x43c>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6919      	ldr	r1, [r3, #16]
 800a97c:	7ffb      	ldrb	r3, [r7, #31]
 800a97e:	440b      	add	r3, r1
 800a980:	4413      	add	r3, r2
 800a982:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	e000      	b.n	800a98a <CircularQueue_Add+0x446>
    return NULL;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3738      	adds	r7, #56	; 0x38
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	891b      	ldrh	r3, [r3, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <CircularQueue_Remove+0x1e>
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	e000      	b.n	800a9b2 <CircularQueue_Remove+0x20>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 80cc 	beq.w	800ab5a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	891b      	ldrh	r3, [r3, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d121      	bne.n	800aa0e <CircularQueue_Remove+0x7c>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6819      	ldr	r1, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	1c58      	adds	r0, r3, #1
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	4298      	cmp	r0, r3
 800a9e8:	d306      	bcc.n	800a9f8 <CircularQueue_Remove+0x66>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68d8      	ldr	r0, [r3, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	1ac3      	subs	r3, r0, r3
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	e002      	b.n	800a9fe <CircularQueue_Remove+0x6c>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	440b      	add	r3, r1
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	021b      	lsls	r3, r3, #8
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4413      	add	r3, r2
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	e001      	b.n	800aa12 <CircularQueue_Remove+0x80>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	891b      	ldrh	r3, [r3, #8]
 800aa12:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7f1b      	ldrb	r3, [r3, #28]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d057      	beq.n	800aad0 <CircularQueue_Remove+0x13e>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7f1b      	ldrb	r3, [r3, #28]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d151      	bne.n	800aad0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa2c:	897b      	ldrh	r3, [r7, #10]
 800aa2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d103      	bne.n	800aa3e <CircularQueue_Remove+0xac>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	891b      	ldrh	r3, [r3, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d012      	beq.n	800aa64 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68da      	ldr	r2, [r3, #12]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d942      	bls.n	800aad0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	891b      	ldrh	r3, [r3, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d03e      	beq.n	800aad0 <CircularQueue_Remove+0x13e>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	8912      	ldrh	r2, [r2, #8]
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d235      	bcs.n	800aad0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	695a      	ldr	r2, [r3, #20]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68d9      	ldr	r1, [r3, #12]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	1acb      	subs	r3, r1, r3
 800aa72:	441a      	add	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	891b      	ldrh	r3, [r3, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d121      	bne.n	800aaca <CircularQueue_Remove+0x138>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6819      	ldr	r1, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	1c58      	adds	r0, r3, #1
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	4298      	cmp	r0, r3
 800aaa4:	d306      	bcc.n	800aab4 <CircularQueue_Remove+0x122>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68d8      	ldr	r0, [r3, #12]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	1ac3      	subs	r3, r0, r3
 800aab0:	3301      	adds	r3, #1
 800aab2:	e002      	b.n	800aaba <CircularQueue_Remove+0x128>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	440b      	add	r3, r1
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	021b      	lsls	r3, r3, #8
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	4413      	add	r3, r2
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	e001      	b.n	800aace <CircularQueue_Remove+0x13c>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	891b      	ldrh	r3, [r3, #8]
 800aace:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68d9      	ldr	r1, [r3, #12]
 800aad8:	7a7b      	ldrb	r3, [r7, #9]
 800aada:	4419      	add	r1, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	4299      	cmp	r1, r3
 800aae2:	d307      	bcc.n	800aaf4 <CircularQueue_Remove+0x162>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68d9      	ldr	r1, [r3, #12]
 800aae8:	7a7b      	ldrb	r3, [r7, #9]
 800aaea:	4419      	add	r1, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	1acb      	subs	r3, r1, r3
 800aaf2:	e003      	b.n	800aafc <CircularQueue_Remove+0x16a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68d9      	ldr	r1, [r3, #12]
 800aaf8:	7a7b      	ldrb	r3, [r7, #9]
 800aafa:	440b      	add	r3, r1
 800aafc:	4413      	add	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	8979      	ldrh	r1, [r7, #10]
 800ab06:	7a7a      	ldrb	r2, [r7, #9]
 800ab08:	440a      	add	r2, r1
 800ab0a:	1a9a      	subs	r2, r3, r2
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d01b      	beq.n	800ab50 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68da      	ldr	r2, [r3, #12]
 800ab1c:	897b      	ldrh	r3, [r7, #10]
 800ab1e:	441a      	add	r2, r3
 800ab20:	7a7b      	ldrb	r3, [r7, #9]
 800ab22:	441a      	add	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d309      	bcc.n	800ab40 <CircularQueue_Remove+0x1ae>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	897b      	ldrh	r3, [r7, #10]
 800ab32:	441a      	add	r2, r3
 800ab34:	7a7b      	ldrb	r3, [r7, #9]
 800ab36:	441a      	add	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	e005      	b.n	800ab4c <CircularQueue_Remove+0x1ba>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68da      	ldr	r2, [r3, #12]
 800ab44:	897b      	ldrh	r3, [r7, #10]
 800ab46:	441a      	add	r2, r3
 800ab48:	7a7b      	ldrb	r3, [r7, #9]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	1e5a      	subs	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	897a      	ldrh	r2, [r7, #10]
 800ab64:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800ab66:	68fb      	ldr	r3, [r7, #12]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	891b      	ldrh	r3, [r3, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <CircularQueue_Sense+0x1e>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	e000      	b.n	800ab94 <CircularQueue_Sense+0x20>
 800ab92:	2300      	movs	r3, #0
 800ab94:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 8090 	beq.w	800acc8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	891b      	ldrh	r3, [r3, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d121      	bne.n	800abfa <CircularQueue_Sense+0x86>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6819      	ldr	r1, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	1c58      	adds	r0, r3, #1
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	4298      	cmp	r0, r3
 800abd4:	d306      	bcc.n	800abe4 <CircularQueue_Sense+0x70>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68d8      	ldr	r0, [r3, #12]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	1ac3      	subs	r3, r0, r3
 800abe0:	3301      	adds	r3, #1
 800abe2:	e002      	b.n	800abea <CircularQueue_Sense+0x76>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	3301      	adds	r3, #1
 800abea:	440b      	add	r3, r1
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	021b      	lsls	r3, r3, #8
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	4413      	add	r3, r2
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	e001      	b.n	800abfe <CircularQueue_Sense+0x8a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	891b      	ldrh	r3, [r3, #8]
 800abfe:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	7f1b      	ldrb	r3, [r3, #28]
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d048      	beq.n	800ac9e <CircularQueue_Sense+0x12a>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	7f1b      	ldrb	r3, [r3, #28]
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d142      	bne.n	800ac9e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ac18:	8a7b      	ldrh	r3, [r7, #18]
 800ac1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d103      	bne.n	800ac2a <CircularQueue_Sense+0xb6>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	891b      	ldrh	r3, [r3, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d012      	beq.n	800ac50 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d933      	bls.n	800ac9e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	891b      	ldrh	r3, [r3, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d02f      	beq.n	800ac9e <CircularQueue_Sense+0x12a>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	8912      	ldrh	r2, [r2, #8]
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d226      	bcs.n	800ac9e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ac50:	2300      	movs	r3, #0
 800ac52:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	891b      	ldrh	r3, [r3, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d11d      	bne.n	800ac98 <CircularQueue_Sense+0x124>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6819      	ldr	r1, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	1c58      	adds	r0, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4298      	cmp	r0, r3
 800ac76:	d305      	bcc.n	800ac84 <CircularQueue_Sense+0x110>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	1ac3      	subs	r3, r0, r3
 800ac80:	3301      	adds	r3, #1
 800ac82:	e001      	b.n	800ac88 <CircularQueue_Sense+0x114>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3301      	adds	r3, #1
 800ac88:	440b      	add	r3, r1
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	021b      	lsls	r3, r3, #8
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	4413      	add	r3, r2
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	e001      	b.n	800ac9c <CircularQueue_Sense+0x128>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	891b      	ldrh	r3, [r3, #8]
 800ac9c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	7af9      	ldrb	r1, [r7, #11]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	4419      	add	r1, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	4299      	cmp	r1, r3
 800acae:	d306      	bcc.n	800acbe <CircularQueue_Sense+0x14a>
 800acb0:	7af9      	ldrb	r1, [r7, #11]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	4419      	add	r1, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	1acb      	subs	r3, r1, r3
 800acbc:	e002      	b.n	800acc4 <CircularQueue_Sense+0x150>
 800acbe:	7af9      	ldrb	r1, [r7, #11]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	440b      	add	r3, r1
 800acc4:	4413      	add	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	8a7a      	ldrh	r2, [r7, #18]
 800acd2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800acd4:	697b      	ldr	r3, [r7, #20]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ace2:	b480      	push	{r7}
 800ace4:	af00      	add	r7, sp, #0
  return;
 800ace6:	bf00      	nop
}
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800acf0:	b480      	push	{r7}
 800acf2:	af00      	add	r7, sp, #0
  return;
 800acf4:	bf00      	nop
}
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800acfe:	b480      	push	{r7}
 800ad00:	af00      	add	r7, sp, #0
  return;
 800ad02:	bf00      	nop
}
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
  return;
 800ad10:	bf00      	nop
}
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	af00      	add	r7, sp, #0
  return;
 800ad1e:	bf00      	nop
}
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	af00      	add	r7, sp, #0
  return;
 800ad2c:	bf00      	nop
}
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ad36:	b480      	push	{r7}
 800ad38:	af00      	add	r7, sp, #0
  return;
 800ad3a:	bf00      	nop
}
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	af00      	add	r7, sp, #0
  return;
 800ad48:	bf00      	nop
}
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ad52:	b480      	push	{r7}
 800ad54:	af00      	add	r7, sp, #0
  return;
 800ad56:	bf00      	nop
}
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
  return;
 800ad64:	bf00      	nop
}
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ad6e:	b480      	push	{r7}
 800ad70:	af00      	add	r7, sp, #0
  return;
 800ad72:	bf00      	nop
}
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	af00      	add	r7, sp, #0
  return;
 800ad80:	bf00      	nop
}
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	af00      	add	r7, sp, #0
  return;
 800ad8e:	bf00      	nop
}
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
  return;
 800ad9c:	bf00      	nop
}
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ada6:	b480      	push	{r7}
 800ada8:	af00      	add	r7, sp, #0
  return;
 800adaa:	bf00      	nop
}
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
  return;
 800adb8:	bf00      	nop
}
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800adc2:	b480      	push	{r7}
 800adc4:	af00      	add	r7, sp, #0
  return;
 800adc6:	bf00      	nop
}
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
  return;
 800add4:	bf00      	nop
}
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ade4:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <SVCCTL_Init+0x18>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800adea:	4b04      	ldr	r3, [pc, #16]	; (800adfc <SVCCTL_Init+0x1c>)
 800adec:	2200      	movs	r2, #0
 800adee:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800adf0:	f000 f806 	bl	800ae00 <SVCCTL_SvcInit>

  return;
 800adf4:	bf00      	nop
}
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	200001e8 	.word	0x200001e8
 800adfc:	20000208 	.word	0x20000208

0800ae00 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  BAS_Init();
 800ae04:	f7ff ff6d 	bl	800ace2 <BAS_Init>

  BLS_Init();
 800ae08:	f7ff ff72 	bl	800acf0 <BLS_Init>

  CRS_STM_Init();
 800ae0c:	f7ff ff77 	bl	800acfe <CRS_STM_Init>

  DIS_Init();
 800ae10:	f7ff ff7c 	bl	800ad0c <DIS_Init>

  EDS_STM_Init();
 800ae14:	f7ff ff81 	bl	800ad1a <EDS_STM_Init>

  HIDS_Init();
 800ae18:	f7ff ff86 	bl	800ad28 <HIDS_Init>

  HRS_Init();
 800ae1c:	f7ff ff8b 	bl	800ad36 <HRS_Init>

  HTS_Init();
 800ae20:	f7ff ff90 	bl	800ad44 <HTS_Init>

  IAS_Init();
 800ae24:	f7ff ff95 	bl	800ad52 <IAS_Init>

  LLS_Init();
 800ae28:	f7ff ff9a 	bl	800ad60 <LLS_Init>

  TPS_Init();
 800ae2c:	f7ff ff9f 	bl	800ad6e <TPS_Init>

  MOTENV_STM_Init();
 800ae30:	f7ff ffa4 	bl	800ad7c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ae34:	f7ff ffa9 	bl	800ad8a <P2PS_STM_Init>

  ZDD_STM_Init();
 800ae38:	f7ff ffae 	bl	800ad98 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ae3c:	f7ff ffb3 	bl	800ada6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ae40:	f7ff ffbf 	bl	800adc2 <BVOPUS_STM_Init>

  MESH_Init();
 800ae44:	f7ff ffb6 	bl	800adb4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ae48:	f7ff ffc2 	bl	800add0 <SVCCTL_InitCustomSvc>
  
  return;
 800ae4c:	bf00      	nop
}
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800ae58:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <SVCCTL_RegisterCltHandler+0x30>)
 800ae5a:	791b      	ldrb	r3, [r3, #4]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4a08      	ldr	r2, [pc, #32]	; (800ae80 <SVCCTL_RegisterCltHandler+0x30>)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800ae66:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <SVCCTL_RegisterCltHandler+0x30>)
 800ae68:	791b      	ldrb	r3, [r3, #4]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <SVCCTL_RegisterCltHandler+0x30>)
 800ae70:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800ae72:	bf00      	nop
}
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	20000208 	.word	0x20000208

0800ae84 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ae92:	2300      	movs	r3, #0
 800ae94:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2bff      	cmp	r3, #255	; 0xff
 800ae9c:	d13f      	bne.n	800af1e <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	3302      	adds	r3, #2
 800aea2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aeae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aeb2:	d132      	bne.n	800af1a <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	757b      	strb	r3, [r7, #21]
 800aeb8:	e00d      	b.n	800aed6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800aeba:	7d7b      	ldrb	r3, [r7, #21]
 800aebc:	4a27      	ldr	r2, [pc, #156]	; (800af5c <SVCCTL_UserEvtRx+0xd8>)
 800aebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	4798      	blx	r3
 800aec6:	4603      	mov	r3, r0
 800aec8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d108      	bne.n	800aee2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aed0:	7d7b      	ldrb	r3, [r7, #21]
 800aed2:	3301      	adds	r3, #1
 800aed4:	757b      	strb	r3, [r7, #21]
 800aed6:	4b21      	ldr	r3, [pc, #132]	; (800af5c <SVCCTL_UserEvtRx+0xd8>)
 800aed8:	7f1b      	ldrb	r3, [r3, #28]
 800aeda:	7d7a      	ldrb	r2, [r7, #21]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3ec      	bcc.n	800aeba <SVCCTL_UserEvtRx+0x36>
 800aee0:	e000      	b.n	800aee4 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800aee2:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800aee4:	2300      	movs	r3, #0
 800aee6:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800aee8:	2300      	movs	r3, #0
 800aeea:	757b      	strb	r3, [r7, #21]
 800aeec:	e00d      	b.n	800af0a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800aeee:	7d7b      	ldrb	r3, [r7, #21]
 800aef0:	4a1b      	ldr	r2, [pc, #108]	; (800af60 <SVCCTL_UserEvtRx+0xdc>)
 800aef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
 800aefa:	4603      	mov	r3, r0
 800aefc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d108      	bne.n	800af16 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800af04:	7d7b      	ldrb	r3, [r7, #21]
 800af06:	3301      	adds	r3, #1
 800af08:	757b      	strb	r3, [r7, #21]
 800af0a:	4b15      	ldr	r3, [pc, #84]	; (800af60 <SVCCTL_UserEvtRx+0xdc>)
 800af0c:	791b      	ldrb	r3, [r3, #4]
 800af0e:	7d7a      	ldrb	r2, [r7, #21]
 800af10:	429a      	cmp	r2, r3
 800af12:	d3ec      	bcc.n	800aeee <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800af14:	e002      	b.n	800af1c <SVCCTL_UserEvtRx+0x98>
              break;
 800af16:	bf00      	nop
          break;
 800af18:	e000      	b.n	800af1c <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800af1a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800af1c:	e000      	b.n	800af20 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800af1e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	2b02      	cmp	r3, #2
 800af24:	d00f      	beq.n	800af46 <SVCCTL_UserEvtRx+0xc2>
 800af26:	2b02      	cmp	r3, #2
 800af28:	dc10      	bgt.n	800af4c <SVCCTL_UserEvtRx+0xc8>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <SVCCTL_UserEvtRx+0xb0>
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d006      	beq.n	800af40 <SVCCTL_UserEvtRx+0xbc>
 800af32:	e00b      	b.n	800af4c <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7f7 fc9b 	bl	8002870 <SVCCTL_App_Notification>
 800af3a:	4603      	mov	r3, r0
 800af3c:	75bb      	strb	r3, [r7, #22]
      break;
 800af3e:	e008      	b.n	800af52 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800af40:	2301      	movs	r3, #1
 800af42:	75bb      	strb	r3, [r7, #22]
      break;
 800af44:	e005      	b.n	800af52 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800af46:	2300      	movs	r3, #0
 800af48:	75bb      	strb	r3, [r7, #22]
      break;
 800af4a:	e002      	b.n	800af52 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800af4c:	2301      	movs	r3, #1
 800af4e:	75bb      	strb	r3, [r7, #22]
      break;
 800af50:	bf00      	nop
  }

  return (return_status);
 800af52:	7dbb      	ldrb	r3, [r7, #22]
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	200001e8 	.word	0x200001e8
 800af60:	20000208 	.word	0x20000208

0800af64 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800af68:	f7f8 ff8e 	bl	8003e88 <HW_IPCC_Enable>

  return;
 800af6c:	bf00      	nop
}
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <TL_Init>:


void TL_Init( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800af74:	4b10      	ldr	r3, [pc, #64]	; (800afb8 <TL_Init+0x48>)
 800af76:	4a11      	ldr	r2, [pc, #68]	; (800afbc <TL_Init+0x4c>)
 800af78:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800af7a:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <TL_Init+0x48>)
 800af7c:	4a10      	ldr	r2, [pc, #64]	; (800afc0 <TL_Init+0x50>)
 800af7e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800af80:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <TL_Init+0x48>)
 800af82:	4a10      	ldr	r2, [pc, #64]	; (800afc4 <TL_Init+0x54>)
 800af84:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <TL_Init+0x48>)
 800af88:	4a0f      	ldr	r2, [pc, #60]	; (800afc8 <TL_Init+0x58>)
 800af8a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <TL_Init+0x48>)
 800af8e:	4a0f      	ldr	r2, [pc, #60]	; (800afcc <TL_Init+0x5c>)
 800af90:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <TL_Init+0x48>)
 800af94:	4a0e      	ldr	r2, [pc, #56]	; (800afd0 <TL_Init+0x60>)
 800af96:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <TL_Init+0x48>)
 800af9a:	4a0e      	ldr	r2, [pc, #56]	; (800afd4 <TL_Init+0x64>)
 800af9c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <TL_Init+0x48>)
 800afa0:	4a0d      	ldr	r2, [pc, #52]	; (800afd8 <TL_Init+0x68>)
 800afa2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800afa4:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <TL_Init+0x48>)
 800afa6:	4a0d      	ldr	r2, [pc, #52]	; (800afdc <TL_Init+0x6c>)
 800afa8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800afaa:	4b03      	ldr	r3, [pc, #12]	; (800afb8 <TL_Init+0x48>)
 800afac:	4a0c      	ldr	r2, [pc, #48]	; (800afe0 <TL_Init+0x70>)
 800afae:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800afb0:	f7f8 ff7e 	bl	8003eb0 <HW_IPCC_Init>

  return;
 800afb4:	bf00      	nop
}
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20030000 	.word	0x20030000
 800afbc:	20030134 	.word	0x20030134
 800afc0:	20030154 	.word	0x20030154
 800afc4:	20030164 	.word	0x20030164
 800afc8:	20030174 	.word	0x20030174
 800afcc:	2003017c 	.word	0x2003017c
 800afd0:	20030184 	.word	0x20030184
 800afd4:	2003018c 	.word	0x2003018c
 800afd8:	200301a8 	.word	0x200301a8
 800afdc:	200301ac 	.word	0x200301ac
 800afe0:	200301b8 	.word	0x200301b8

0800afe4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800aff0:	4811      	ldr	r0, [pc, #68]	; (800b038 <TL_BLE_Init+0x54>)
 800aff2:	f7ff f9b7 	bl	800a364 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800aff6:	4b11      	ldr	r3, [pc, #68]	; (800b03c <TL_BLE_Init+0x58>)
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	68da      	ldr	r2, [r3, #12]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	4a0c      	ldr	r2, [pc, #48]	; (800b040 <TL_BLE_Init+0x5c>)
 800b010:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	4a08      	ldr	r2, [pc, #32]	; (800b038 <TL_BLE_Init+0x54>)
 800b016:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b018:	f7f8 ff60 	bl	8003edc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a08      	ldr	r2, [pc, #32]	; (800b044 <TL_BLE_Init+0x60>)
 800b022:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	4a07      	ldr	r2, [pc, #28]	; (800b048 <TL_BLE_Init+0x64>)
 800b02a:	6013      	str	r3, [r2, #0]

  return 0;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	200301d4 	.word	0x200301d4
 800b03c:	20030000 	.word	0x20030000
 800b040:	20030a58 	.word	0x20030a58
 800b044:	20001534 	.word	0x20001534
 800b048:	20001538 	.word	0x20001538

0800b04c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b058:	4b09      	ldr	r3, [pc, #36]	; (800b080 <TL_BLE_SendCmd+0x34>)
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2201      	movs	r2, #1
 800b060:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b062:	4b07      	ldr	r3, [pc, #28]	; (800b080 <TL_BLE_SendCmd+0x34>)
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	2001      	movs	r0, #1
 800b06c:	f000 f96c 	bl	800b348 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b070:	f7f8 ff3e 	bl	8003ef0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20030000 	.word	0x20030000

0800b084 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b08a:	e01c      	b.n	800b0c6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b08c:	1d3b      	adds	r3, r7, #4
 800b08e:	4619      	mov	r1, r3
 800b090:	4812      	ldr	r0, [pc, #72]	; (800b0dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b092:	f7ff fa06 	bl	800a4a2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	7a5b      	ldrb	r3, [r3, #9]
 800b09a:	2b0f      	cmp	r3, #15
 800b09c:	d003      	beq.n	800b0a6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	7a5b      	ldrb	r3, [r3, #9]
 800b0a2:	2b0e      	cmp	r3, #14
 800b0a4:	d105      	bne.n	800b0b2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	2002      	movs	r0, #2
 800b0ac:	f000 f94c 	bl	800b348 <OutputDbgTrace>
 800b0b0:	e004      	b.n	800b0bc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	2003      	movs	r0, #3
 800b0b8:	f000 f946 	bl	800b348 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b0bc:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b0c6:	4805      	ldr	r0, [pc, #20]	; (800b0dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b0c8:	f7ff f95c 	bl	800a384 <LST_is_empty>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0dc      	beq.n	800b08c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b0d2:	bf00      	nop
}
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	200301d4 	.word	0x200301d4
 800b0e0:	20001534 	.word	0x20001534

0800b0e4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b0e8:	4b02      	ldr	r3, [pc, #8]	; (800b0f4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4798      	blx	r3

  return;
 800b0ee:	bf00      	nop
}
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20001538 	.word	0x20001538

0800b0f8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b104:	480d      	ldr	r0, [pc, #52]	; (800b13c <TL_SYS_Init+0x44>)
 800b106:	f7ff f92d 	bl	800a364 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b10a:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <TL_SYS_Init+0x48>)
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4a08      	ldr	r2, [pc, #32]	; (800b13c <TL_SYS_Init+0x44>)
 800b11c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b11e:	f7f8 ff09 	bl	8003f34 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a07      	ldr	r2, [pc, #28]	; (800b144 <TL_SYS_Init+0x4c>)
 800b128:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	4a06      	ldr	r2, [pc, #24]	; (800b148 <TL_SYS_Init+0x50>)
 800b130:	6013      	str	r3, [r2, #0]

  return 0;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	200301dc 	.word	0x200301dc
 800b140:	20030000 	.word	0x20030000
 800b144:	2000153c 	.word	0x2000153c
 800b148:	20001540 	.word	0x20001540

0800b14c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b158:	4b09      	ldr	r3, [pc, #36]	; (800b180 <TL_SYS_SendCmd+0x34>)
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2210      	movs	r2, #16
 800b160:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <TL_SYS_SendCmd+0x34>)
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4619      	mov	r1, r3
 800b16a:	2004      	movs	r0, #4
 800b16c:	f000 f8ec 	bl	800b348 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b170:	f7f8 feea 	bl	8003f48 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20030000 	.word	0x20030000

0800b184 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b188:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4619      	mov	r1, r3
 800b190:	2005      	movs	r0, #5
 800b192:	f000 f8d9 	bl	800b348 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b196:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a03      	ldr	r2, [pc, #12]	; (800b1a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b19c:	68d2      	ldr	r2, [r2, #12]
 800b19e:	6812      	ldr	r2, [r2, #0]
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4798      	blx	r3

  return;
 800b1a4:	bf00      	nop
}
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20030000 	.word	0x20030000
 800b1ac:	2000153c 	.word	0x2000153c

0800b1b0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b1b6:	e00e      	b.n	800b1d6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b1b8:	1d3b      	adds	r3, r7, #4
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	480b      	ldr	r0, [pc, #44]	; (800b1ec <HW_IPCC_SYS_EvtNot+0x3c>)
 800b1be:	f7ff f970 	bl	800a4a2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	2006      	movs	r0, #6
 800b1c8:	f000 f8be 	bl	800b348 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b1cc:	4b08      	ldr	r3, [pc, #32]	; (800b1f0 <HW_IPCC_SYS_EvtNot+0x40>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b1d6:	4805      	ldr	r0, [pc, #20]	; (800b1ec <HW_IPCC_SYS_EvtNot+0x3c>)
 800b1d8:	f7ff f8d4 	bl	800a384 <LST_is_empty>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0ea      	beq.n	800b1b8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b1e2:	bf00      	nop
}
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200301dc 	.word	0x200301dc
 800b1f0:	20001540 	.word	0x20001540

0800b1f4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b1fc:	4817      	ldr	r0, [pc, #92]	; (800b25c <TL_MM_Init+0x68>)
 800b1fe:	f7ff f8b1 	bl	800a364 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b202:	4817      	ldr	r0, [pc, #92]	; (800b260 <TL_MM_Init+0x6c>)
 800b204:	f7ff f8ae 	bl	800a364 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b208:	4b16      	ldr	r3, [pc, #88]	; (800b264 <TL_MM_Init+0x70>)
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	4a16      	ldr	r2, [pc, #88]	; (800b268 <TL_MM_Init+0x74>)
 800b20e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b210:	4b15      	ldr	r3, [pc, #84]	; (800b268 <TL_MM_Init+0x74>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	6892      	ldr	r2, [r2, #8]
 800b218:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b21a:	4b13      	ldr	r3, [pc, #76]	; (800b268 <TL_MM_Init+0x74>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	68d2      	ldr	r2, [r2, #12]
 800b222:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b224:	4b10      	ldr	r3, [pc, #64]	; (800b268 <TL_MM_Init+0x74>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a0c      	ldr	r2, [pc, #48]	; (800b25c <TL_MM_Init+0x68>)
 800b22a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b22c:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <TL_MM_Init+0x74>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	6812      	ldr	r2, [r2, #0]
 800b234:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b236:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <TL_MM_Init+0x74>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6852      	ldr	r2, [r2, #4]
 800b23e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b240:	4b09      	ldr	r3, [pc, #36]	; (800b268 <TL_MM_Init+0x74>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	6912      	ldr	r2, [r2, #16]
 800b248:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b24a:	4b07      	ldr	r3, [pc, #28]	; (800b268 <TL_MM_Init+0x74>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	6952      	ldr	r2, [r2, #20]
 800b252:	619a      	str	r2, [r3, #24]

  return;
 800b254:	bf00      	nop
}
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	200301c4 	.word	0x200301c4
 800b260:	2000152c 	.word	0x2000152c
 800b264:	20030000 	.word	0x20030000
 800b268:	20001544 	.word	0x20001544

0800b26c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b274:	6879      	ldr	r1, [r7, #4]
 800b276:	4807      	ldr	r0, [pc, #28]	; (800b294 <TL_MM_EvtDone+0x28>)
 800b278:	f7ff f8cc 	bl	800a414 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b27c:	6879      	ldr	r1, [r7, #4]
 800b27e:	2000      	movs	r0, #0
 800b280:	f000 f862 	bl	800b348 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b284:	4804      	ldr	r0, [pc, #16]	; (800b298 <TL_MM_EvtDone+0x2c>)
 800b286:	f7f8 fe85 	bl	8003f94 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b28a:	bf00      	nop
}
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	2000152c 	.word	0x2000152c
 800b298:	0800b29d 	.word	0x0800b29d

0800b29c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b2a2:	e00c      	b.n	800b2be <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	480a      	ldr	r0, [pc, #40]	; (800b2d4 <SendFreeBuf+0x38>)
 800b2aa:	f7ff f8fa 	bl	800a4a2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b2ae:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <SendFreeBuf+0x3c>)
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7ff f8ab 	bl	800a414 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b2be:	4805      	ldr	r0, [pc, #20]	; (800b2d4 <SendFreeBuf+0x38>)
 800b2c0:	f7ff f860 	bl	800a384 <LST_is_empty>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0ec      	beq.n	800b2a4 <SendFreeBuf+0x8>
  }

  return;
 800b2ca:	bf00      	nop
}
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	2000152c 	.word	0x2000152c
 800b2d8:	20030000 	.word	0x20030000

0800b2dc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b2e0:	4805      	ldr	r0, [pc, #20]	; (800b2f8 <TL_TRACES_Init+0x1c>)
 800b2e2:	f7ff f83f 	bl	800a364 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <TL_TRACES_Init+0x20>)
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	4a03      	ldr	r2, [pc, #12]	; (800b2f8 <TL_TRACES_Init+0x1c>)
 800b2ec:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b2ee:	f7f8 fe87 	bl	8004000 <HW_IPCC_TRACES_Init>

  return;
 800b2f2:	bf00      	nop
}
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200301cc 	.word	0x200301cc
 800b2fc:	20030000 	.word	0x20030000

0800b300 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b306:	e008      	b.n	800b31a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b308:	1d3b      	adds	r3, r7, #4
 800b30a:	4619      	mov	r1, r3
 800b30c:	4808      	ldr	r0, [pc, #32]	; (800b330 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b30e:	f7ff f8c8 	bl	800a4a2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 f80d 	bl	800b334 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b31a:	4805      	ldr	r0, [pc, #20]	; (800b330 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b31c:	f7ff f832 	bl	800a384 <LST_is_empty>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d0f0      	beq.n	800b308 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b326:	bf00      	nop
}
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	200301cc 	.word	0x200301cc

0800b334 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	2b06      	cmp	r3, #6
 800b358:	d845      	bhi.n	800b3e6 <OutputDbgTrace+0x9e>
 800b35a:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <OutputDbgTrace+0x18>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b37d 	.word	0x0800b37d
 800b364:	0800b3a1 	.word	0x0800b3a1
 800b368:	0800b3a7 	.word	0x0800b3a7
 800b36c:	0800b3bb 	.word	0x0800b3bb
 800b370:	0800b3c7 	.word	0x0800b3c7
 800b374:	0800b3cd 	.word	0x0800b3cd
 800b378:	0800b3db 	.word	0x0800b3db
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	7a5b      	ldrb	r3, [r3, #9]
 800b384:	2bff      	cmp	r3, #255	; 0xff
 800b386:	d005      	beq.n	800b394 <OutputDbgTrace+0x4c>
 800b388:	2bff      	cmp	r3, #255	; 0xff
 800b38a:	dc05      	bgt.n	800b398 <OutputDbgTrace+0x50>
 800b38c:	2b0e      	cmp	r3, #14
 800b38e:	d005      	beq.n	800b39c <OutputDbgTrace+0x54>
 800b390:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b392:	e001      	b.n	800b398 <OutputDbgTrace+0x50>
          break;
 800b394:	bf00      	nop
 800b396:	e027      	b.n	800b3e8 <OutputDbgTrace+0xa0>
          break;
 800b398:	bf00      	nop
 800b39a:	e025      	b.n	800b3e8 <OutputDbgTrace+0xa0>
          break;
 800b39c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b39e:	e023      	b.n	800b3e8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b3a4:	e020      	b.n	800b3e8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	7a5b      	ldrb	r3, [r3, #9]
 800b3ae:	2b0e      	cmp	r3, #14
 800b3b0:	d001      	beq.n	800b3b6 <OutputDbgTrace+0x6e>
 800b3b2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b3b4:	e000      	b.n	800b3b8 <OutputDbgTrace+0x70>
          break;
 800b3b6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b3b8:	e016      	b.n	800b3e8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	7a5b      	ldrb	r3, [r3, #9]
 800b3c2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b3c4:	e010      	b.n	800b3e8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b3ca:	e00d      	b.n	800b3e8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	7a5b      	ldrb	r3, [r3, #9]
 800b3d4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b3d6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b3d8:	e006      	b.n	800b3e8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	7a5b      	ldrb	r3, [r3, #9]
 800b3e2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b3e4:	e000      	b.n	800b3e8 <OutputDbgTrace+0xa0>

    default:
      break;
 800b3e6:	bf00      	nop
  }

  return;
 800b3e8:	bf00      	nop
}
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <UTIL_LPM_Init+0x1c>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b3fe:	4b05      	ldr	r3, [pc, #20]	; (800b414 <UTIL_LPM_Init+0x20>)
 800b400:	2200      	movs	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b404:	bf00      	nop
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	20001548 	.word	0x20001548
 800b414:	2000154c 	.word	0x2000154c

0800b418 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b418:	b480      	push	{r7}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b424:	f3ef 8310 	mrs	r3, PRIMASK
 800b428:	613b      	str	r3, [r7, #16]
  return(result);
 800b42a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b42c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b42e:	b672      	cpsid	i
}
 800b430:	bf00      	nop
  
  switch(state)
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d008      	beq.n	800b44a <UTIL_LPM_SetOffMode+0x32>
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d10e      	bne.n	800b45a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b43c:	4b0d      	ldr	r3, [pc, #52]	; (800b474 <UTIL_LPM_SetOffMode+0x5c>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4313      	orrs	r3, r2
 800b444:	4a0b      	ldr	r2, [pc, #44]	; (800b474 <UTIL_LPM_SetOffMode+0x5c>)
 800b446:	6013      	str	r3, [r2, #0]
      break;
 800b448:	e008      	b.n	800b45c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	43da      	mvns	r2, r3
 800b44e:	4b09      	ldr	r3, [pc, #36]	; (800b474 <UTIL_LPM_SetOffMode+0x5c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4013      	ands	r3, r2
 800b454:	4a07      	ldr	r2, [pc, #28]	; (800b474 <UTIL_LPM_SetOffMode+0x5c>)
 800b456:	6013      	str	r3, [r2, #0]
      break;
 800b458:	e000      	b.n	800b45c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b45a:	bf00      	nop
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f383 8810 	msr	PRIMASK, r3
}
 800b466:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b468:	bf00      	nop
 800b46a:	371c      	adds	r7, #28
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	2000154c 	.word	0x2000154c

0800b478 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b090      	sub	sp, #64	; 0x40
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b480:	4b74      	ldr	r3, [pc, #464]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b486:	4b73      	ldr	r3, [pc, #460]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4013      	ands	r3, r2
 800b48e:	4a71      	ldr	r2, [pc, #452]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b490:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b492:	4b71      	ldr	r3, [pc, #452]	; (800b658 <UTIL_SEQ_Run+0x1e0>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b498:	4b70      	ldr	r3, [pc, #448]	; (800b65c <UTIL_SEQ_Run+0x1e4>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b49e:	4b70      	ldr	r3, [pc, #448]	; (800b660 <UTIL_SEQ_Run+0x1e8>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b4a4:	4b6f      	ldr	r3, [pc, #444]	; (800b664 <UTIL_SEQ_Run+0x1ec>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b4aa:	e08d      	b.n	800b5c8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b4b0:	e002      	b.n	800b4b8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b4b8:	4a6b      	ldr	r2, [pc, #428]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	401a      	ands	r2, r3
 800b4c4:	4b63      	ldr	r3, [pc, #396]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0f1      	beq.n	800b4b2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b4ce:	4a66      	ldr	r2, [pc, #408]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	401a      	ands	r2, r3
 800b4da:	4b5e      	ldr	r3, [pc, #376]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4013      	ands	r3, r2
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b4e2:	4a61      	ldr	r2, [pc, #388]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	4413      	add	r3, r2
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b4f4:	4a5c      	ldr	r2, [pc, #368]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f8:	00db      	lsls	r3, r3, #3
 800b4fa:	4413      	add	r3, r2
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b500:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b502:	4a59      	ldr	r2, [pc, #356]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b506:	00db      	lsls	r3, r3, #3
 800b508:	4413      	add	r3, r2
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	4013      	ands	r3, r2
 800b510:	4618      	mov	r0, r3
 800b512:	f000 f9b5 	bl	800b880 <SEQ_BitPosition>
 800b516:	4603      	mov	r3, r0
 800b518:	461a      	mov	r2, r3
 800b51a:	4b54      	ldr	r3, [pc, #336]	; (800b66c <UTIL_SEQ_Run+0x1f4>)
 800b51c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b51e:	4a52      	ldr	r2, [pc, #328]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	4413      	add	r3, r2
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	4b50      	ldr	r3, [pc, #320]	; (800b66c <UTIL_SEQ_Run+0x1f4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2101      	movs	r1, #1
 800b52e:	fa01 f303 	lsl.w	r3, r1, r3
 800b532:	43db      	mvns	r3, r3
 800b534:	401a      	ands	r2, r3
 800b536:	494c      	ldr	r1, [pc, #304]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	440b      	add	r3, r1
 800b53e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b540:	f3ef 8310 	mrs	r3, PRIMASK
 800b544:	61bb      	str	r3, [r7, #24]
  return(result);
 800b546:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b548:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b54a:	b672      	cpsid	i
}
 800b54c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b54e:	4b47      	ldr	r3, [pc, #284]	; (800b66c <UTIL_SEQ_Run+0x1f4>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2201      	movs	r2, #1
 800b554:	fa02 f303 	lsl.w	r3, r2, r3
 800b558:	43da      	mvns	r2, r3
 800b55a:	4b3f      	ldr	r3, [pc, #252]	; (800b658 <UTIL_SEQ_Run+0x1e0>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4013      	ands	r3, r2
 800b560:	4a3d      	ldr	r2, [pc, #244]	; (800b658 <UTIL_SEQ_Run+0x1e0>)
 800b562:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b564:	2302      	movs	r3, #2
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b568:	e013      	b.n	800b592 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56c:	3b01      	subs	r3, #1
 800b56e:	4a3e      	ldr	r2, [pc, #248]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b570:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b574:	4b3d      	ldr	r3, [pc, #244]	; (800b66c <UTIL_SEQ_Run+0x1f4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2201      	movs	r2, #1
 800b57a:	fa02 f303 	lsl.w	r3, r2, r3
 800b57e:	43da      	mvns	r2, r3
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b582:	3b01      	subs	r3, #1
 800b584:	400a      	ands	r2, r1
 800b586:	4938      	ldr	r1, [pc, #224]	; (800b668 <UTIL_SEQ_Run+0x1f0>)
 800b588:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58e:	3b01      	subs	r3, #1
 800b590:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e8      	bne.n	800b56a <UTIL_SEQ_Run+0xf2>
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f383 8810 	msr	PRIMASK, r3
}
 800b5a2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b5a4:	4b31      	ldr	r3, [pc, #196]	; (800b66c <UTIL_SEQ_Run+0x1f4>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a31      	ldr	r2, [pc, #196]	; (800b670 <UTIL_SEQ_Run+0x1f8>)
 800b5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5ae:	4798      	blx	r3
    local_taskset = TaskSet;
 800b5b0:	4b29      	ldr	r3, [pc, #164]	; (800b658 <UTIL_SEQ_Run+0x1e0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b5b6:	4b29      	ldr	r3, [pc, #164]	; (800b65c <UTIL_SEQ_Run+0x1e4>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b5bc:	4b28      	ldr	r3, [pc, #160]	; (800b660 <UTIL_SEQ_Run+0x1e8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b5c2:	4b28      	ldr	r3, [pc, #160]	; (800b664 <UTIL_SEQ_Run+0x1ec>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b5c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	401a      	ands	r2, r3
 800b5ce:	4b21      	ldr	r3, [pc, #132]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <UTIL_SEQ_Run+0x16c>
 800b5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	4013      	ands	r3, r2
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f43f af64 	beq.w	800b4ac <UTIL_SEQ_Run+0x34>
  }
  HAL_Delay(200);
 800b5e4:	20c8      	movs	r0, #200	; 0xc8
 800b5e6:	f7f5 fc67 	bl	8000eb8 <HAL_Delay>
  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b5ea:	4b20      	ldr	r3, [pc, #128]	; (800b66c <UTIL_SEQ_Run+0x1f4>)
 800b5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f0:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b5f2:	f000 f937 	bl	800b864 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5fa:	613b      	str	r3, [r7, #16]
  return(result);
 800b5fc:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b5fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b600:	b672      	cpsid	i
}
 800b602:	bf00      	nop
  local_taskset = TaskSet;
 800b604:	4b14      	ldr	r3, [pc, #80]	; (800b658 <UTIL_SEQ_Run+0x1e0>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b60a:	4b14      	ldr	r3, [pc, #80]	; (800b65c <UTIL_SEQ_Run+0x1e4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b610:	4b13      	ldr	r3, [pc, #76]	; (800b660 <UTIL_SEQ_Run+0x1e8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	401a      	ands	r2, r3
 800b61c:	4b0d      	ldr	r3, [pc, #52]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4013      	ands	r3, r2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d107      	bne.n	800b636 <UTIL_SEQ_Run+0x1be>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b626:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <UTIL_SEQ_Run+0x1ec>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62c:	4013      	ands	r3, r2
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <UTIL_SEQ_Run+0x1be>
    {
      UTIL_SEQ_Idle( );
 800b632:	f7f5 fc6e 	bl	8000f12 <UTIL_SEQ_Idle>
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f383 8810 	msr	PRIMASK, r3
}
 800b640:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b642:	f000 f916 	bl	800b872 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b646:	4a03      	ldr	r2, [pc, #12]	; (800b654 <UTIL_SEQ_Run+0x1dc>)
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	6013      	str	r3, [r2, #0]

  return;
 800b64c:	bf00      	nop
}
 800b64e:	3740      	adds	r7, #64	; 0x40
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20000034 	.word	0x20000034
 800b658:	20001550 	.word	0x20001550
 800b65c:	20001554 	.word	0x20001554
 800b660:	20000030 	.word	0x20000030
 800b664:	20001558 	.word	0x20001558
 800b668:	200015e0 	.word	0x200015e0
 800b66c:	2000155c 	.word	0x2000155c
 800b670:	20001560 	.word	0x20001560

0800b674 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b680:	f3ef 8310 	mrs	r3, PRIMASK
 800b684:	617b      	str	r3, [r7, #20]
  return(result);
 800b686:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b68a:	b672      	cpsid	i
}
 800b68c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 f8f6 	bl	800b880 <SEQ_BitPosition>
 800b694:	4603      	mov	r3, r0
 800b696:	4619      	mov	r1, r3
 800b698:	4a06      	ldr	r2, [pc, #24]	; (800b6b4 <UTIL_SEQ_RegTask+0x40>)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	f383 8810 	msr	PRIMASK, r3
}
 800b6aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b6ac:	bf00      	nop
}
 800b6ae:	3720      	adds	r7, #32
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20001560 	.word	0x20001560

0800b6b8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b6ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6cc:	b672      	cpsid	i
}
 800b6ce:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b6d0:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <UTIL_SEQ_SetTask+0x50>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	4a0b      	ldr	r2, [pc, #44]	; (800b708 <UTIL_SEQ_SetTask+0x50>)
 800b6da:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b6dc:	4a0b      	ldr	r2, [pc, #44]	; (800b70c <UTIL_SEQ_SetTask+0x54>)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	4908      	ldr	r1, [pc, #32]	; (800b70c <UTIL_SEQ_SetTask+0x54>)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	f383 8810 	msr	PRIMASK, r3
}
 800b6fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b6fc:	bf00      	nop
}
 800b6fe:	371c      	adds	r7, #28
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	20001550 	.word	0x20001550
 800b70c:	200015e0 	.word	0x200015e0

0800b710 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b710:	b480      	push	{r7}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b718:	f3ef 8310 	mrs	r3, PRIMASK
 800b71c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b71e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b722:	b672      	cpsid	i
}
 800b724:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	43da      	mvns	r2, r3
 800b72a:	4b08      	ldr	r3, [pc, #32]	; (800b74c <UTIL_SEQ_PauseTask+0x3c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4013      	ands	r3, r2
 800b730:	4a06      	ldr	r2, [pc, #24]	; (800b74c <UTIL_SEQ_PauseTask+0x3c>)
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	f383 8810 	msr	PRIMASK, r3
}
 800b73e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b740:	bf00      	nop
}
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	20000030 	.word	0x20000030

0800b750 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b758:	f3ef 8310 	mrs	r3, PRIMASK
 800b75c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b75e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b762:	b672      	cpsid	i
}
 800b764:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b766:	4b09      	ldr	r3, [pc, #36]	; (800b78c <UTIL_SEQ_ResumeTask+0x3c>)
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	4a07      	ldr	r2, [pc, #28]	; (800b78c <UTIL_SEQ_ResumeTask+0x3c>)
 800b770:	6013      	str	r3, [r2, #0]
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	f383 8810 	msr	PRIMASK, r3
}
 800b77c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b77e:	bf00      	nop
}
 800b780:	371c      	adds	r7, #28
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	20000030 	.word	0x20000030

0800b790 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b798:	f3ef 8310 	mrs	r3, PRIMASK
 800b79c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b79e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b7a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7a2:	b672      	cpsid	i
}
 800b7a4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b7a6:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <UTIL_SEQ_SetEvt+0x3c>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	4a07      	ldr	r2, [pc, #28]	; (800b7cc <UTIL_SEQ_SetEvt+0x3c>)
 800b7b0:	6013      	str	r3, [r2, #0]
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	f383 8810 	msr	PRIMASK, r3
}
 800b7bc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b7be:	bf00      	nop
}
 800b7c0:	371c      	adds	r7, #28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	20001554 	.word	0x20001554

0800b7d0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b7d8:	4b1f      	ldr	r3, [pc, #124]	; (800b858 <UTIL_SEQ_WaitEvt+0x88>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b7de:	4b1e      	ldr	r3, [pc, #120]	; (800b858 <UTIL_SEQ_WaitEvt+0x88>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e6:	d102      	bne.n	800b7ee <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	e005      	b.n	800b7fa <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b7ee:	4b1a      	ldr	r3, [pc, #104]	; (800b858 <UTIL_SEQ_WaitEvt+0x88>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b7fa:	4b18      	ldr	r3, [pc, #96]	; (800b85c <UTIL_SEQ_WaitEvt+0x8c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b800:	4a16      	ldr	r2, [pc, #88]	; (800b85c <UTIL_SEQ_WaitEvt+0x8c>)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b806:	e003      	b.n	800b810 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b808:	6879      	ldr	r1, [r7, #4]
 800b80a:	69f8      	ldr	r0, [r7, #28]
 800b80c:	f7f5 fb88 	bl	8000f20 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b810:	4b13      	ldr	r3, [pc, #76]	; (800b860 <UTIL_SEQ_WaitEvt+0x90>)
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4013      	ands	r3, r2
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d0f5      	beq.n	800b808 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b81c:	4a0e      	ldr	r2, [pc, #56]	; (800b858 <UTIL_SEQ_WaitEvt+0x88>)
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b822:	f3ef 8310 	mrs	r3, PRIMASK
 800b826:	60bb      	str	r3, [r7, #8]
  return(result);
 800b828:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b82a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b82c:	b672      	cpsid	i
}
 800b82e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	43da      	mvns	r2, r3
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <UTIL_SEQ_WaitEvt+0x90>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4013      	ands	r3, r2
 800b83a:	4a09      	ldr	r2, [pc, #36]	; (800b860 <UTIL_SEQ_WaitEvt+0x90>)
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f383 8810 	msr	PRIMASK, r3
}
 800b848:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b84a:	4a04      	ldr	r2, [pc, #16]	; (800b85c <UTIL_SEQ_WaitEvt+0x8c>)
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	6013      	str	r3, [r2, #0]
  return;
 800b850:	bf00      	nop
}
 800b852:	3720      	adds	r7, #32
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	2000155c 	.word	0x2000155c
 800b85c:	20001558 	.word	0x20001558
 800b860:	20001554 	.word	0x20001554

0800b864 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b864:	b480      	push	{r7}
 800b866:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b868:	bf00      	nop
}
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b872:	b480      	push	{r7}
 800b874:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b876:	bf00      	nop
}
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	0c1b      	lsrs	r3, r3, #16
 800b894:	041b      	lsls	r3, r3, #16
 800b896:	2b00      	cmp	r3, #0
 800b898:	d104      	bne.n	800b8a4 <SEQ_BitPosition+0x24>
 800b89a:	2310      	movs	r3, #16
 800b89c:	73fb      	strb	r3, [r7, #15]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	041b      	lsls	r3, r3, #16
 800b8a2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d105      	bne.n	800b8ba <SEQ_BitPosition+0x3a>
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	73fb      	strb	r3, [r7, #15]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	021b      	lsls	r3, r3, #8
 800b8b8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d105      	bne.n	800b8d0 <SEQ_BitPosition+0x50>
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	73fb      	strb	r3, [r7, #15]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	011b      	lsls	r3, r3, #4
 800b8ce:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	0f1b      	lsrs	r3, r3, #28
 800b8d4:	4a07      	ldr	r2, [pc, #28]	; (800b8f4 <SEQ_BitPosition+0x74>)
 800b8d6:	5cd2      	ldrb	r2, [r2, r3]
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	4413      	add	r3, r2
 800b8dc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	f1c3 031f 	rsb	r3, r3, #31
 800b8e4:	b2db      	uxtb	r3, r3
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	0800da34 	.word	0x0800da34

0800b8f8 <__errno>:
 800b8f8:	4b01      	ldr	r3, [pc, #4]	; (800b900 <__errno+0x8>)
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20000038 	.word	0x20000038

0800b904 <__libc_init_array>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4d0d      	ldr	r5, [pc, #52]	; (800b93c <__libc_init_array+0x38>)
 800b908:	4c0d      	ldr	r4, [pc, #52]	; (800b940 <__libc_init_array+0x3c>)
 800b90a:	1b64      	subs	r4, r4, r5
 800b90c:	10a4      	asrs	r4, r4, #2
 800b90e:	2600      	movs	r6, #0
 800b910:	42a6      	cmp	r6, r4
 800b912:	d109      	bne.n	800b928 <__libc_init_array+0x24>
 800b914:	4d0b      	ldr	r5, [pc, #44]	; (800b944 <__libc_init_array+0x40>)
 800b916:	4c0c      	ldr	r4, [pc, #48]	; (800b948 <__libc_init_array+0x44>)
 800b918:	f001 f890 	bl	800ca3c <_init>
 800b91c:	1b64      	subs	r4, r4, r5
 800b91e:	10a4      	asrs	r4, r4, #2
 800b920:	2600      	movs	r6, #0
 800b922:	42a6      	cmp	r6, r4
 800b924:	d105      	bne.n	800b932 <__libc_init_array+0x2e>
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	f855 3b04 	ldr.w	r3, [r5], #4
 800b92c:	4798      	blx	r3
 800b92e:	3601      	adds	r6, #1
 800b930:	e7ee      	b.n	800b910 <__libc_init_array+0xc>
 800b932:	f855 3b04 	ldr.w	r3, [r5], #4
 800b936:	4798      	blx	r3
 800b938:	3601      	adds	r6, #1
 800b93a:	e7f2      	b.n	800b922 <__libc_init_array+0x1e>
 800b93c:	0800dae4 	.word	0x0800dae4
 800b940:	0800dae4 	.word	0x0800dae4
 800b944:	0800dae4 	.word	0x0800dae4
 800b948:	0800dae8 	.word	0x0800dae8

0800b94c <memcpy>:
 800b94c:	440a      	add	r2, r1
 800b94e:	4291      	cmp	r1, r2
 800b950:	f100 33ff 	add.w	r3, r0, #4294967295
 800b954:	d100      	bne.n	800b958 <memcpy+0xc>
 800b956:	4770      	bx	lr
 800b958:	b510      	push	{r4, lr}
 800b95a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b95e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b962:	4291      	cmp	r1, r2
 800b964:	d1f9      	bne.n	800b95a <memcpy+0xe>
 800b966:	bd10      	pop	{r4, pc}

0800b968 <memset>:
 800b968:	4402      	add	r2, r0
 800b96a:	4603      	mov	r3, r0
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d100      	bne.n	800b972 <memset+0xa>
 800b970:	4770      	bx	lr
 800b972:	f803 1b01 	strb.w	r1, [r3], #1
 800b976:	e7f9      	b.n	800b96c <memset+0x4>

0800b978 <iprintf>:
 800b978:	b40f      	push	{r0, r1, r2, r3}
 800b97a:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <iprintf+0x2c>)
 800b97c:	b513      	push	{r0, r1, r4, lr}
 800b97e:	681c      	ldr	r4, [r3, #0]
 800b980:	b124      	cbz	r4, 800b98c <iprintf+0x14>
 800b982:	69a3      	ldr	r3, [r4, #24]
 800b984:	b913      	cbnz	r3, 800b98c <iprintf+0x14>
 800b986:	4620      	mov	r0, r4
 800b988:	f000 fa74 	bl	800be74 <__sinit>
 800b98c:	ab05      	add	r3, sp, #20
 800b98e:	9a04      	ldr	r2, [sp, #16]
 800b990:	68a1      	ldr	r1, [r4, #8]
 800b992:	9301      	str	r3, [sp, #4]
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fc7d 	bl	800c294 <_vfiprintf_r>
 800b99a:	b002      	add	sp, #8
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	b004      	add	sp, #16
 800b9a2:	4770      	bx	lr
 800b9a4:	20000038 	.word	0x20000038

0800b9a8 <putchar>:
 800b9a8:	4b09      	ldr	r3, [pc, #36]	; (800b9d0 <putchar+0x28>)
 800b9aa:	b513      	push	{r0, r1, r4, lr}
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	b134      	cbz	r4, 800b9c0 <putchar+0x18>
 800b9b2:	69a3      	ldr	r3, [r4, #24]
 800b9b4:	b923      	cbnz	r3, 800b9c0 <putchar+0x18>
 800b9b6:	9001      	str	r0, [sp, #4]
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fa5b 	bl	800be74 <__sinit>
 800b9be:	9901      	ldr	r1, [sp, #4]
 800b9c0:	68a2      	ldr	r2, [r4, #8]
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	b002      	add	sp, #8
 800b9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ca:	f000 bf27 	b.w	800c81c <_putc_r>
 800b9ce:	bf00      	nop
 800b9d0:	20000038 	.word	0x20000038

0800b9d4 <_puts_r>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	460e      	mov	r6, r1
 800b9d8:	4605      	mov	r5, r0
 800b9da:	b118      	cbz	r0, 800b9e4 <_puts_r+0x10>
 800b9dc:	6983      	ldr	r3, [r0, #24]
 800b9de:	b90b      	cbnz	r3, 800b9e4 <_puts_r+0x10>
 800b9e0:	f000 fa48 	bl	800be74 <__sinit>
 800b9e4:	69ab      	ldr	r3, [r5, #24]
 800b9e6:	68ac      	ldr	r4, [r5, #8]
 800b9e8:	b913      	cbnz	r3, 800b9f0 <_puts_r+0x1c>
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f000 fa42 	bl	800be74 <__sinit>
 800b9f0:	4b2c      	ldr	r3, [pc, #176]	; (800baa4 <_puts_r+0xd0>)
 800b9f2:	429c      	cmp	r4, r3
 800b9f4:	d120      	bne.n	800ba38 <_puts_r+0x64>
 800b9f6:	686c      	ldr	r4, [r5, #4]
 800b9f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9fa:	07db      	lsls	r3, r3, #31
 800b9fc:	d405      	bmi.n	800ba0a <_puts_r+0x36>
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	0598      	lsls	r0, r3, #22
 800ba02:	d402      	bmi.n	800ba0a <_puts_r+0x36>
 800ba04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba06:	f000 fad3 	bl	800bfb0 <__retarget_lock_acquire_recursive>
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	0719      	lsls	r1, r3, #28
 800ba0e:	d51d      	bpl.n	800ba4c <_puts_r+0x78>
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	b1db      	cbz	r3, 800ba4c <_puts_r+0x78>
 800ba14:	3e01      	subs	r6, #1
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	60a3      	str	r3, [r4, #8]
 800ba20:	bb39      	cbnz	r1, 800ba72 <_puts_r+0x9e>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	da38      	bge.n	800ba98 <_puts_r+0xc4>
 800ba26:	4622      	mov	r2, r4
 800ba28:	210a      	movs	r1, #10
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f000 f848 	bl	800bac0 <__swbuf_r>
 800ba30:	3001      	adds	r0, #1
 800ba32:	d011      	beq.n	800ba58 <_puts_r+0x84>
 800ba34:	250a      	movs	r5, #10
 800ba36:	e011      	b.n	800ba5c <_puts_r+0x88>
 800ba38:	4b1b      	ldr	r3, [pc, #108]	; (800baa8 <_puts_r+0xd4>)
 800ba3a:	429c      	cmp	r4, r3
 800ba3c:	d101      	bne.n	800ba42 <_puts_r+0x6e>
 800ba3e:	68ac      	ldr	r4, [r5, #8]
 800ba40:	e7da      	b.n	800b9f8 <_puts_r+0x24>
 800ba42:	4b1a      	ldr	r3, [pc, #104]	; (800baac <_puts_r+0xd8>)
 800ba44:	429c      	cmp	r4, r3
 800ba46:	bf08      	it	eq
 800ba48:	68ec      	ldreq	r4, [r5, #12]
 800ba4a:	e7d5      	b.n	800b9f8 <_puts_r+0x24>
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f000 f888 	bl	800bb64 <__swsetup_r>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d0dd      	beq.n	800ba14 <_puts_r+0x40>
 800ba58:	f04f 35ff 	mov.w	r5, #4294967295
 800ba5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba5e:	07da      	lsls	r2, r3, #31
 800ba60:	d405      	bmi.n	800ba6e <_puts_r+0x9a>
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	059b      	lsls	r3, r3, #22
 800ba66:	d402      	bmi.n	800ba6e <_puts_r+0x9a>
 800ba68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba6a:	f000 faa2 	bl	800bfb2 <__retarget_lock_release_recursive>
 800ba6e:	4628      	mov	r0, r5
 800ba70:	bd70      	pop	{r4, r5, r6, pc}
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da04      	bge.n	800ba80 <_puts_r+0xac>
 800ba76:	69a2      	ldr	r2, [r4, #24]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	dc06      	bgt.n	800ba8a <_puts_r+0xb6>
 800ba7c:	290a      	cmp	r1, #10
 800ba7e:	d004      	beq.n	800ba8a <_puts_r+0xb6>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	6022      	str	r2, [r4, #0]
 800ba86:	7019      	strb	r1, [r3, #0]
 800ba88:	e7c5      	b.n	800ba16 <_puts_r+0x42>
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f000 f817 	bl	800bac0 <__swbuf_r>
 800ba92:	3001      	adds	r0, #1
 800ba94:	d1bf      	bne.n	800ba16 <_puts_r+0x42>
 800ba96:	e7df      	b.n	800ba58 <_puts_r+0x84>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	250a      	movs	r5, #10
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	6022      	str	r2, [r4, #0]
 800baa0:	701d      	strb	r5, [r3, #0]
 800baa2:	e7db      	b.n	800ba5c <_puts_r+0x88>
 800baa4:	0800da68 	.word	0x0800da68
 800baa8:	0800da88 	.word	0x0800da88
 800baac:	0800da48 	.word	0x0800da48

0800bab0 <puts>:
 800bab0:	4b02      	ldr	r3, [pc, #8]	; (800babc <puts+0xc>)
 800bab2:	4601      	mov	r1, r0
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	f7ff bf8d 	b.w	800b9d4 <_puts_r>
 800baba:	bf00      	nop
 800babc:	20000038 	.word	0x20000038

0800bac0 <__swbuf_r>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	460e      	mov	r6, r1
 800bac4:	4614      	mov	r4, r2
 800bac6:	4605      	mov	r5, r0
 800bac8:	b118      	cbz	r0, 800bad2 <__swbuf_r+0x12>
 800baca:	6983      	ldr	r3, [r0, #24]
 800bacc:	b90b      	cbnz	r3, 800bad2 <__swbuf_r+0x12>
 800bace:	f000 f9d1 	bl	800be74 <__sinit>
 800bad2:	4b21      	ldr	r3, [pc, #132]	; (800bb58 <__swbuf_r+0x98>)
 800bad4:	429c      	cmp	r4, r3
 800bad6:	d12b      	bne.n	800bb30 <__swbuf_r+0x70>
 800bad8:	686c      	ldr	r4, [r5, #4]
 800bada:	69a3      	ldr	r3, [r4, #24]
 800badc:	60a3      	str	r3, [r4, #8]
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	071a      	lsls	r2, r3, #28
 800bae2:	d52f      	bpl.n	800bb44 <__swbuf_r+0x84>
 800bae4:	6923      	ldr	r3, [r4, #16]
 800bae6:	b36b      	cbz	r3, 800bb44 <__swbuf_r+0x84>
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	6820      	ldr	r0, [r4, #0]
 800baec:	1ac0      	subs	r0, r0, r3
 800baee:	6963      	ldr	r3, [r4, #20]
 800baf0:	b2f6      	uxtb	r6, r6
 800baf2:	4283      	cmp	r3, r0
 800baf4:	4637      	mov	r7, r6
 800baf6:	dc04      	bgt.n	800bb02 <__swbuf_r+0x42>
 800baf8:	4621      	mov	r1, r4
 800bafa:	4628      	mov	r0, r5
 800bafc:	f000 f926 	bl	800bd4c <_fflush_r>
 800bb00:	bb30      	cbnz	r0, 800bb50 <__swbuf_r+0x90>
 800bb02:	68a3      	ldr	r3, [r4, #8]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	60a3      	str	r3, [r4, #8]
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	6022      	str	r2, [r4, #0]
 800bb0e:	701e      	strb	r6, [r3, #0]
 800bb10:	6963      	ldr	r3, [r4, #20]
 800bb12:	3001      	adds	r0, #1
 800bb14:	4283      	cmp	r3, r0
 800bb16:	d004      	beq.n	800bb22 <__swbuf_r+0x62>
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	07db      	lsls	r3, r3, #31
 800bb1c:	d506      	bpl.n	800bb2c <__swbuf_r+0x6c>
 800bb1e:	2e0a      	cmp	r6, #10
 800bb20:	d104      	bne.n	800bb2c <__swbuf_r+0x6c>
 800bb22:	4621      	mov	r1, r4
 800bb24:	4628      	mov	r0, r5
 800bb26:	f000 f911 	bl	800bd4c <_fflush_r>
 800bb2a:	b988      	cbnz	r0, 800bb50 <__swbuf_r+0x90>
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <__swbuf_r+0x9c>)
 800bb32:	429c      	cmp	r4, r3
 800bb34:	d101      	bne.n	800bb3a <__swbuf_r+0x7a>
 800bb36:	68ac      	ldr	r4, [r5, #8]
 800bb38:	e7cf      	b.n	800bada <__swbuf_r+0x1a>
 800bb3a:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <__swbuf_r+0xa0>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	bf08      	it	eq
 800bb40:	68ec      	ldreq	r4, [r5, #12]
 800bb42:	e7ca      	b.n	800bada <__swbuf_r+0x1a>
 800bb44:	4621      	mov	r1, r4
 800bb46:	4628      	mov	r0, r5
 800bb48:	f000 f80c 	bl	800bb64 <__swsetup_r>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d0cb      	beq.n	800bae8 <__swbuf_r+0x28>
 800bb50:	f04f 37ff 	mov.w	r7, #4294967295
 800bb54:	e7ea      	b.n	800bb2c <__swbuf_r+0x6c>
 800bb56:	bf00      	nop
 800bb58:	0800da68 	.word	0x0800da68
 800bb5c:	0800da88 	.word	0x0800da88
 800bb60:	0800da48 	.word	0x0800da48

0800bb64 <__swsetup_r>:
 800bb64:	4b32      	ldr	r3, [pc, #200]	; (800bc30 <__swsetup_r+0xcc>)
 800bb66:	b570      	push	{r4, r5, r6, lr}
 800bb68:	681d      	ldr	r5, [r3, #0]
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	b125      	cbz	r5, 800bb7a <__swsetup_r+0x16>
 800bb70:	69ab      	ldr	r3, [r5, #24]
 800bb72:	b913      	cbnz	r3, 800bb7a <__swsetup_r+0x16>
 800bb74:	4628      	mov	r0, r5
 800bb76:	f000 f97d 	bl	800be74 <__sinit>
 800bb7a:	4b2e      	ldr	r3, [pc, #184]	; (800bc34 <__swsetup_r+0xd0>)
 800bb7c:	429c      	cmp	r4, r3
 800bb7e:	d10f      	bne.n	800bba0 <__swsetup_r+0x3c>
 800bb80:	686c      	ldr	r4, [r5, #4]
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb88:	0719      	lsls	r1, r3, #28
 800bb8a:	d42c      	bmi.n	800bbe6 <__swsetup_r+0x82>
 800bb8c:	06dd      	lsls	r5, r3, #27
 800bb8e:	d411      	bmi.n	800bbb4 <__swsetup_r+0x50>
 800bb90:	2309      	movs	r3, #9
 800bb92:	6033      	str	r3, [r6, #0]
 800bb94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9e:	e03e      	b.n	800bc1e <__swsetup_r+0xba>
 800bba0:	4b25      	ldr	r3, [pc, #148]	; (800bc38 <__swsetup_r+0xd4>)
 800bba2:	429c      	cmp	r4, r3
 800bba4:	d101      	bne.n	800bbaa <__swsetup_r+0x46>
 800bba6:	68ac      	ldr	r4, [r5, #8]
 800bba8:	e7eb      	b.n	800bb82 <__swsetup_r+0x1e>
 800bbaa:	4b24      	ldr	r3, [pc, #144]	; (800bc3c <__swsetup_r+0xd8>)
 800bbac:	429c      	cmp	r4, r3
 800bbae:	bf08      	it	eq
 800bbb0:	68ec      	ldreq	r4, [r5, #12]
 800bbb2:	e7e6      	b.n	800bb82 <__swsetup_r+0x1e>
 800bbb4:	0758      	lsls	r0, r3, #29
 800bbb6:	d512      	bpl.n	800bbde <__swsetup_r+0x7a>
 800bbb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbba:	b141      	cbz	r1, 800bbce <__swsetup_r+0x6a>
 800bbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbc0:	4299      	cmp	r1, r3
 800bbc2:	d002      	beq.n	800bbca <__swsetup_r+0x66>
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	f000 fa5b 	bl	800c080 <_free_r>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	6363      	str	r3, [r4, #52]	; 0x34
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	6063      	str	r3, [r4, #4]
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	f043 0308 	orr.w	r3, r3, #8
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	b94b      	cbnz	r3, 800bbfe <__swsetup_r+0x9a>
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf4:	d003      	beq.n	800bbfe <__swsetup_r+0x9a>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f000 fa01 	bl	800c000 <__smakebuf_r>
 800bbfe:	89a0      	ldrh	r0, [r4, #12]
 800bc00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc04:	f010 0301 	ands.w	r3, r0, #1
 800bc08:	d00a      	beq.n	800bc20 <__swsetup_r+0xbc>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60a3      	str	r3, [r4, #8]
 800bc0e:	6963      	ldr	r3, [r4, #20]
 800bc10:	425b      	negs	r3, r3
 800bc12:	61a3      	str	r3, [r4, #24]
 800bc14:	6923      	ldr	r3, [r4, #16]
 800bc16:	b943      	cbnz	r3, 800bc2a <__swsetup_r+0xc6>
 800bc18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc1c:	d1ba      	bne.n	800bb94 <__swsetup_r+0x30>
 800bc1e:	bd70      	pop	{r4, r5, r6, pc}
 800bc20:	0781      	lsls	r1, r0, #30
 800bc22:	bf58      	it	pl
 800bc24:	6963      	ldrpl	r3, [r4, #20]
 800bc26:	60a3      	str	r3, [r4, #8]
 800bc28:	e7f4      	b.n	800bc14 <__swsetup_r+0xb0>
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	e7f7      	b.n	800bc1e <__swsetup_r+0xba>
 800bc2e:	bf00      	nop
 800bc30:	20000038 	.word	0x20000038
 800bc34:	0800da68 	.word	0x0800da68
 800bc38:	0800da88 	.word	0x0800da88
 800bc3c:	0800da48 	.word	0x0800da48

0800bc40 <__sflush_r>:
 800bc40:	898a      	ldrh	r2, [r1, #12]
 800bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	4605      	mov	r5, r0
 800bc48:	0710      	lsls	r0, r2, #28
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	d458      	bmi.n	800bd00 <__sflush_r+0xc0>
 800bc4e:	684b      	ldr	r3, [r1, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dc05      	bgt.n	800bc60 <__sflush_r+0x20>
 800bc54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dc02      	bgt.n	800bc60 <__sflush_r+0x20>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	d0f9      	beq.n	800bc5a <__sflush_r+0x1a>
 800bc66:	2300      	movs	r3, #0
 800bc68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc6c:	682f      	ldr	r7, [r5, #0]
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	d032      	beq.n	800bcd8 <__sflush_r+0x98>
 800bc72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	075a      	lsls	r2, r3, #29
 800bc78:	d505      	bpl.n	800bc86 <__sflush_r+0x46>
 800bc7a:	6863      	ldr	r3, [r4, #4]
 800bc7c:	1ac0      	subs	r0, r0, r3
 800bc7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc80:	b10b      	cbz	r3, 800bc86 <__sflush_r+0x46>
 800bc82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc84:	1ac0      	subs	r0, r0, r3
 800bc86:	2300      	movs	r3, #0
 800bc88:	4602      	mov	r2, r0
 800bc8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc8c:	6a21      	ldr	r1, [r4, #32]
 800bc8e:	4628      	mov	r0, r5
 800bc90:	47b0      	blx	r6
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	d106      	bne.n	800bca6 <__sflush_r+0x66>
 800bc98:	6829      	ldr	r1, [r5, #0]
 800bc9a:	291d      	cmp	r1, #29
 800bc9c:	d82c      	bhi.n	800bcf8 <__sflush_r+0xb8>
 800bc9e:	4a2a      	ldr	r2, [pc, #168]	; (800bd48 <__sflush_r+0x108>)
 800bca0:	40ca      	lsrs	r2, r1
 800bca2:	07d6      	lsls	r6, r2, #31
 800bca4:	d528      	bpl.n	800bcf8 <__sflush_r+0xb8>
 800bca6:	2200      	movs	r2, #0
 800bca8:	6062      	str	r2, [r4, #4]
 800bcaa:	04d9      	lsls	r1, r3, #19
 800bcac:	6922      	ldr	r2, [r4, #16]
 800bcae:	6022      	str	r2, [r4, #0]
 800bcb0:	d504      	bpl.n	800bcbc <__sflush_r+0x7c>
 800bcb2:	1c42      	adds	r2, r0, #1
 800bcb4:	d101      	bne.n	800bcba <__sflush_r+0x7a>
 800bcb6:	682b      	ldr	r3, [r5, #0]
 800bcb8:	b903      	cbnz	r3, 800bcbc <__sflush_r+0x7c>
 800bcba:	6560      	str	r0, [r4, #84]	; 0x54
 800bcbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcbe:	602f      	str	r7, [r5, #0]
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	d0ca      	beq.n	800bc5a <__sflush_r+0x1a>
 800bcc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcc8:	4299      	cmp	r1, r3
 800bcca:	d002      	beq.n	800bcd2 <__sflush_r+0x92>
 800bccc:	4628      	mov	r0, r5
 800bcce:	f000 f9d7 	bl	800c080 <_free_r>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	6360      	str	r0, [r4, #52]	; 0x34
 800bcd6:	e7c1      	b.n	800bc5c <__sflush_r+0x1c>
 800bcd8:	6a21      	ldr	r1, [r4, #32]
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b0      	blx	r6
 800bce0:	1c41      	adds	r1, r0, #1
 800bce2:	d1c7      	bne.n	800bc74 <__sflush_r+0x34>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d0c4      	beq.n	800bc74 <__sflush_r+0x34>
 800bcea:	2b1d      	cmp	r3, #29
 800bcec:	d001      	beq.n	800bcf2 <__sflush_r+0xb2>
 800bcee:	2b16      	cmp	r3, #22
 800bcf0:	d101      	bne.n	800bcf6 <__sflush_r+0xb6>
 800bcf2:	602f      	str	r7, [r5, #0]
 800bcf4:	e7b1      	b.n	800bc5a <__sflush_r+0x1a>
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	e7ad      	b.n	800bc5c <__sflush_r+0x1c>
 800bd00:	690f      	ldr	r7, [r1, #16]
 800bd02:	2f00      	cmp	r7, #0
 800bd04:	d0a9      	beq.n	800bc5a <__sflush_r+0x1a>
 800bd06:	0793      	lsls	r3, r2, #30
 800bd08:	680e      	ldr	r6, [r1, #0]
 800bd0a:	bf08      	it	eq
 800bd0c:	694b      	ldreq	r3, [r1, #20]
 800bd0e:	600f      	str	r7, [r1, #0]
 800bd10:	bf18      	it	ne
 800bd12:	2300      	movne	r3, #0
 800bd14:	eba6 0807 	sub.w	r8, r6, r7
 800bd18:	608b      	str	r3, [r1, #8]
 800bd1a:	f1b8 0f00 	cmp.w	r8, #0
 800bd1e:	dd9c      	ble.n	800bc5a <__sflush_r+0x1a>
 800bd20:	6a21      	ldr	r1, [r4, #32]
 800bd22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd24:	4643      	mov	r3, r8
 800bd26:	463a      	mov	r2, r7
 800bd28:	4628      	mov	r0, r5
 800bd2a:	47b0      	blx	r6
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	dc06      	bgt.n	800bd3e <__sflush_r+0xfe>
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd36:	81a3      	strh	r3, [r4, #12]
 800bd38:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3c:	e78e      	b.n	800bc5c <__sflush_r+0x1c>
 800bd3e:	4407      	add	r7, r0
 800bd40:	eba8 0800 	sub.w	r8, r8, r0
 800bd44:	e7e9      	b.n	800bd1a <__sflush_r+0xda>
 800bd46:	bf00      	nop
 800bd48:	20400001 	.word	0x20400001

0800bd4c <_fflush_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	690b      	ldr	r3, [r1, #16]
 800bd50:	4605      	mov	r5, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	b913      	cbnz	r3, 800bd5c <_fflush_r+0x10>
 800bd56:	2500      	movs	r5, #0
 800bd58:	4628      	mov	r0, r5
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	b118      	cbz	r0, 800bd66 <_fflush_r+0x1a>
 800bd5e:	6983      	ldr	r3, [r0, #24]
 800bd60:	b90b      	cbnz	r3, 800bd66 <_fflush_r+0x1a>
 800bd62:	f000 f887 	bl	800be74 <__sinit>
 800bd66:	4b14      	ldr	r3, [pc, #80]	; (800bdb8 <_fflush_r+0x6c>)
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	d11b      	bne.n	800bda4 <_fflush_r+0x58>
 800bd6c:	686c      	ldr	r4, [r5, #4]
 800bd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0ef      	beq.n	800bd56 <_fflush_r+0xa>
 800bd76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd78:	07d0      	lsls	r0, r2, #31
 800bd7a:	d404      	bmi.n	800bd86 <_fflush_r+0x3a>
 800bd7c:	0599      	lsls	r1, r3, #22
 800bd7e:	d402      	bmi.n	800bd86 <_fflush_r+0x3a>
 800bd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd82:	f000 f915 	bl	800bfb0 <__retarget_lock_acquire_recursive>
 800bd86:	4628      	mov	r0, r5
 800bd88:	4621      	mov	r1, r4
 800bd8a:	f7ff ff59 	bl	800bc40 <__sflush_r>
 800bd8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd90:	07da      	lsls	r2, r3, #31
 800bd92:	4605      	mov	r5, r0
 800bd94:	d4e0      	bmi.n	800bd58 <_fflush_r+0xc>
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	059b      	lsls	r3, r3, #22
 800bd9a:	d4dd      	bmi.n	800bd58 <_fflush_r+0xc>
 800bd9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd9e:	f000 f908 	bl	800bfb2 <__retarget_lock_release_recursive>
 800bda2:	e7d9      	b.n	800bd58 <_fflush_r+0xc>
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <_fflush_r+0x70>)
 800bda6:	429c      	cmp	r4, r3
 800bda8:	d101      	bne.n	800bdae <_fflush_r+0x62>
 800bdaa:	68ac      	ldr	r4, [r5, #8]
 800bdac:	e7df      	b.n	800bd6e <_fflush_r+0x22>
 800bdae:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <_fflush_r+0x74>)
 800bdb0:	429c      	cmp	r4, r3
 800bdb2:	bf08      	it	eq
 800bdb4:	68ec      	ldreq	r4, [r5, #12]
 800bdb6:	e7da      	b.n	800bd6e <_fflush_r+0x22>
 800bdb8:	0800da68 	.word	0x0800da68
 800bdbc:	0800da88 	.word	0x0800da88
 800bdc0:	0800da48 	.word	0x0800da48

0800bdc4 <std>:
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	4604      	mov	r4, r0
 800bdca:	e9c0 3300 	strd	r3, r3, [r0]
 800bdce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdd2:	6083      	str	r3, [r0, #8]
 800bdd4:	8181      	strh	r1, [r0, #12]
 800bdd6:	6643      	str	r3, [r0, #100]	; 0x64
 800bdd8:	81c2      	strh	r2, [r0, #14]
 800bdda:	6183      	str	r3, [r0, #24]
 800bddc:	4619      	mov	r1, r3
 800bdde:	2208      	movs	r2, #8
 800bde0:	305c      	adds	r0, #92	; 0x5c
 800bde2:	f7ff fdc1 	bl	800b968 <memset>
 800bde6:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <std+0x38>)
 800bde8:	6263      	str	r3, [r4, #36]	; 0x24
 800bdea:	4b05      	ldr	r3, [pc, #20]	; (800be00 <std+0x3c>)
 800bdec:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdee:	4b05      	ldr	r3, [pc, #20]	; (800be04 <std+0x40>)
 800bdf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdf2:	4b05      	ldr	r3, [pc, #20]	; (800be08 <std+0x44>)
 800bdf4:	6224      	str	r4, [r4, #32]
 800bdf6:	6323      	str	r3, [r4, #48]	; 0x30
 800bdf8:	bd10      	pop	{r4, pc}
 800bdfa:	bf00      	nop
 800bdfc:	0800c8cd 	.word	0x0800c8cd
 800be00:	0800c8ef 	.word	0x0800c8ef
 800be04:	0800c927 	.word	0x0800c927
 800be08:	0800c94b 	.word	0x0800c94b

0800be0c <_cleanup_r>:
 800be0c:	4901      	ldr	r1, [pc, #4]	; (800be14 <_cleanup_r+0x8>)
 800be0e:	f000 b8af 	b.w	800bf70 <_fwalk_reent>
 800be12:	bf00      	nop
 800be14:	0800bd4d 	.word	0x0800bd4d

0800be18 <__sfmoreglue>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	2268      	movs	r2, #104	; 0x68
 800be1c:	1e4d      	subs	r5, r1, #1
 800be1e:	4355      	muls	r5, r2
 800be20:	460e      	mov	r6, r1
 800be22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be26:	f000 f997 	bl	800c158 <_malloc_r>
 800be2a:	4604      	mov	r4, r0
 800be2c:	b140      	cbz	r0, 800be40 <__sfmoreglue+0x28>
 800be2e:	2100      	movs	r1, #0
 800be30:	e9c0 1600 	strd	r1, r6, [r0]
 800be34:	300c      	adds	r0, #12
 800be36:	60a0      	str	r0, [r4, #8]
 800be38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be3c:	f7ff fd94 	bl	800b968 <memset>
 800be40:	4620      	mov	r0, r4
 800be42:	bd70      	pop	{r4, r5, r6, pc}

0800be44 <__sfp_lock_acquire>:
 800be44:	4801      	ldr	r0, [pc, #4]	; (800be4c <__sfp_lock_acquire+0x8>)
 800be46:	f000 b8b3 	b.w	800bfb0 <__retarget_lock_acquire_recursive>
 800be4a:	bf00      	nop
 800be4c:	200015f1 	.word	0x200015f1

0800be50 <__sfp_lock_release>:
 800be50:	4801      	ldr	r0, [pc, #4]	; (800be58 <__sfp_lock_release+0x8>)
 800be52:	f000 b8ae 	b.w	800bfb2 <__retarget_lock_release_recursive>
 800be56:	bf00      	nop
 800be58:	200015f1 	.word	0x200015f1

0800be5c <__sinit_lock_acquire>:
 800be5c:	4801      	ldr	r0, [pc, #4]	; (800be64 <__sinit_lock_acquire+0x8>)
 800be5e:	f000 b8a7 	b.w	800bfb0 <__retarget_lock_acquire_recursive>
 800be62:	bf00      	nop
 800be64:	200015f2 	.word	0x200015f2

0800be68 <__sinit_lock_release>:
 800be68:	4801      	ldr	r0, [pc, #4]	; (800be70 <__sinit_lock_release+0x8>)
 800be6a:	f000 b8a2 	b.w	800bfb2 <__retarget_lock_release_recursive>
 800be6e:	bf00      	nop
 800be70:	200015f2 	.word	0x200015f2

0800be74 <__sinit>:
 800be74:	b510      	push	{r4, lr}
 800be76:	4604      	mov	r4, r0
 800be78:	f7ff fff0 	bl	800be5c <__sinit_lock_acquire>
 800be7c:	69a3      	ldr	r3, [r4, #24]
 800be7e:	b11b      	cbz	r3, 800be88 <__sinit+0x14>
 800be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be84:	f7ff bff0 	b.w	800be68 <__sinit_lock_release>
 800be88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be8c:	6523      	str	r3, [r4, #80]	; 0x50
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <__sinit+0x68>)
 800be90:	4a13      	ldr	r2, [pc, #76]	; (800bee0 <__sinit+0x6c>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	62a2      	str	r2, [r4, #40]	; 0x28
 800be96:	42a3      	cmp	r3, r4
 800be98:	bf04      	itt	eq
 800be9a:	2301      	moveq	r3, #1
 800be9c:	61a3      	streq	r3, [r4, #24]
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 f820 	bl	800bee4 <__sfp>
 800bea4:	6060      	str	r0, [r4, #4]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f81c 	bl	800bee4 <__sfp>
 800beac:	60a0      	str	r0, [r4, #8]
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 f818 	bl	800bee4 <__sfp>
 800beb4:	2200      	movs	r2, #0
 800beb6:	60e0      	str	r0, [r4, #12]
 800beb8:	2104      	movs	r1, #4
 800beba:	6860      	ldr	r0, [r4, #4]
 800bebc:	f7ff ff82 	bl	800bdc4 <std>
 800bec0:	68a0      	ldr	r0, [r4, #8]
 800bec2:	2201      	movs	r2, #1
 800bec4:	2109      	movs	r1, #9
 800bec6:	f7ff ff7d 	bl	800bdc4 <std>
 800beca:	68e0      	ldr	r0, [r4, #12]
 800becc:	2202      	movs	r2, #2
 800bece:	2112      	movs	r1, #18
 800bed0:	f7ff ff78 	bl	800bdc4 <std>
 800bed4:	2301      	movs	r3, #1
 800bed6:	61a3      	str	r3, [r4, #24]
 800bed8:	e7d2      	b.n	800be80 <__sinit+0xc>
 800beda:	bf00      	nop
 800bedc:	0800da44 	.word	0x0800da44
 800bee0:	0800be0d 	.word	0x0800be0d

0800bee4 <__sfp>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	4607      	mov	r7, r0
 800bee8:	f7ff ffac 	bl	800be44 <__sfp_lock_acquire>
 800beec:	4b1e      	ldr	r3, [pc, #120]	; (800bf68 <__sfp+0x84>)
 800beee:	681e      	ldr	r6, [r3, #0]
 800bef0:	69b3      	ldr	r3, [r6, #24]
 800bef2:	b913      	cbnz	r3, 800befa <__sfp+0x16>
 800bef4:	4630      	mov	r0, r6
 800bef6:	f7ff ffbd 	bl	800be74 <__sinit>
 800befa:	3648      	adds	r6, #72	; 0x48
 800befc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	d503      	bpl.n	800bf0c <__sfp+0x28>
 800bf04:	6833      	ldr	r3, [r6, #0]
 800bf06:	b30b      	cbz	r3, 800bf4c <__sfp+0x68>
 800bf08:	6836      	ldr	r6, [r6, #0]
 800bf0a:	e7f7      	b.n	800befc <__sfp+0x18>
 800bf0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf10:	b9d5      	cbnz	r5, 800bf48 <__sfp+0x64>
 800bf12:	4b16      	ldr	r3, [pc, #88]	; (800bf6c <__sfp+0x88>)
 800bf14:	60e3      	str	r3, [r4, #12]
 800bf16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf1a:	6665      	str	r5, [r4, #100]	; 0x64
 800bf1c:	f000 f847 	bl	800bfae <__retarget_lock_init_recursive>
 800bf20:	f7ff ff96 	bl	800be50 <__sfp_lock_release>
 800bf24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf2c:	6025      	str	r5, [r4, #0]
 800bf2e:	61a5      	str	r5, [r4, #24]
 800bf30:	2208      	movs	r2, #8
 800bf32:	4629      	mov	r1, r5
 800bf34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf38:	f7ff fd16 	bl	800b968 <memset>
 800bf3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf44:	4620      	mov	r0, r4
 800bf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf48:	3468      	adds	r4, #104	; 0x68
 800bf4a:	e7d9      	b.n	800bf00 <__sfp+0x1c>
 800bf4c:	2104      	movs	r1, #4
 800bf4e:	4638      	mov	r0, r7
 800bf50:	f7ff ff62 	bl	800be18 <__sfmoreglue>
 800bf54:	4604      	mov	r4, r0
 800bf56:	6030      	str	r0, [r6, #0]
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d1d5      	bne.n	800bf08 <__sfp+0x24>
 800bf5c:	f7ff ff78 	bl	800be50 <__sfp_lock_release>
 800bf60:	230c      	movs	r3, #12
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	e7ee      	b.n	800bf44 <__sfp+0x60>
 800bf66:	bf00      	nop
 800bf68:	0800da44 	.word	0x0800da44
 800bf6c:	ffff0001 	.word	0xffff0001

0800bf70 <_fwalk_reent>:
 800bf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf74:	4606      	mov	r6, r0
 800bf76:	4688      	mov	r8, r1
 800bf78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf7c:	2700      	movs	r7, #0
 800bf7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf82:	f1b9 0901 	subs.w	r9, r9, #1
 800bf86:	d505      	bpl.n	800bf94 <_fwalk_reent+0x24>
 800bf88:	6824      	ldr	r4, [r4, #0]
 800bf8a:	2c00      	cmp	r4, #0
 800bf8c:	d1f7      	bne.n	800bf7e <_fwalk_reent+0xe>
 800bf8e:	4638      	mov	r0, r7
 800bf90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf94:	89ab      	ldrh	r3, [r5, #12]
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d907      	bls.n	800bfaa <_fwalk_reent+0x3a>
 800bf9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	d003      	beq.n	800bfaa <_fwalk_reent+0x3a>
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	47c0      	blx	r8
 800bfa8:	4307      	orrs	r7, r0
 800bfaa:	3568      	adds	r5, #104	; 0x68
 800bfac:	e7e9      	b.n	800bf82 <_fwalk_reent+0x12>

0800bfae <__retarget_lock_init_recursive>:
 800bfae:	4770      	bx	lr

0800bfb0 <__retarget_lock_acquire_recursive>:
 800bfb0:	4770      	bx	lr

0800bfb2 <__retarget_lock_release_recursive>:
 800bfb2:	4770      	bx	lr

0800bfb4 <__swhatbuf_r>:
 800bfb4:	b570      	push	{r4, r5, r6, lr}
 800bfb6:	460e      	mov	r6, r1
 800bfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	b096      	sub	sp, #88	; 0x58
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	461d      	mov	r5, r3
 800bfc4:	da08      	bge.n	800bfd8 <__swhatbuf_r+0x24>
 800bfc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	602a      	str	r2, [r5, #0]
 800bfce:	061a      	lsls	r2, r3, #24
 800bfd0:	d410      	bmi.n	800bff4 <__swhatbuf_r+0x40>
 800bfd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd6:	e00e      	b.n	800bff6 <__swhatbuf_r+0x42>
 800bfd8:	466a      	mov	r2, sp
 800bfda:	f000 fcdd 	bl	800c998 <_fstat_r>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	dbf1      	blt.n	800bfc6 <__swhatbuf_r+0x12>
 800bfe2:	9a01      	ldr	r2, [sp, #4]
 800bfe4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfe8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfec:	425a      	negs	r2, r3
 800bfee:	415a      	adcs	r2, r3
 800bff0:	602a      	str	r2, [r5, #0]
 800bff2:	e7ee      	b.n	800bfd2 <__swhatbuf_r+0x1e>
 800bff4:	2340      	movs	r3, #64	; 0x40
 800bff6:	2000      	movs	r0, #0
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	b016      	add	sp, #88	; 0x58
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c000 <__smakebuf_r>:
 800c000:	898b      	ldrh	r3, [r1, #12]
 800c002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c004:	079d      	lsls	r5, r3, #30
 800c006:	4606      	mov	r6, r0
 800c008:	460c      	mov	r4, r1
 800c00a:	d507      	bpl.n	800c01c <__smakebuf_r+0x1c>
 800c00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c010:	6023      	str	r3, [r4, #0]
 800c012:	6123      	str	r3, [r4, #16]
 800c014:	2301      	movs	r3, #1
 800c016:	6163      	str	r3, [r4, #20]
 800c018:	b002      	add	sp, #8
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	ab01      	add	r3, sp, #4
 800c01e:	466a      	mov	r2, sp
 800c020:	f7ff ffc8 	bl	800bfb4 <__swhatbuf_r>
 800c024:	9900      	ldr	r1, [sp, #0]
 800c026:	4605      	mov	r5, r0
 800c028:	4630      	mov	r0, r6
 800c02a:	f000 f895 	bl	800c158 <_malloc_r>
 800c02e:	b948      	cbnz	r0, 800c044 <__smakebuf_r+0x44>
 800c030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c034:	059a      	lsls	r2, r3, #22
 800c036:	d4ef      	bmi.n	800c018 <__smakebuf_r+0x18>
 800c038:	f023 0303 	bic.w	r3, r3, #3
 800c03c:	f043 0302 	orr.w	r3, r3, #2
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	e7e3      	b.n	800c00c <__smakebuf_r+0xc>
 800c044:	4b0d      	ldr	r3, [pc, #52]	; (800c07c <__smakebuf_r+0x7c>)
 800c046:	62b3      	str	r3, [r6, #40]	; 0x28
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	6020      	str	r0, [r4, #0]
 800c04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c050:	81a3      	strh	r3, [r4, #12]
 800c052:	9b00      	ldr	r3, [sp, #0]
 800c054:	6163      	str	r3, [r4, #20]
 800c056:	9b01      	ldr	r3, [sp, #4]
 800c058:	6120      	str	r0, [r4, #16]
 800c05a:	b15b      	cbz	r3, 800c074 <__smakebuf_r+0x74>
 800c05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c060:	4630      	mov	r0, r6
 800c062:	f000 fcab 	bl	800c9bc <_isatty_r>
 800c066:	b128      	cbz	r0, 800c074 <__smakebuf_r+0x74>
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	f023 0303 	bic.w	r3, r3, #3
 800c06e:	f043 0301 	orr.w	r3, r3, #1
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	89a0      	ldrh	r0, [r4, #12]
 800c076:	4305      	orrs	r5, r0
 800c078:	81a5      	strh	r5, [r4, #12]
 800c07a:	e7cd      	b.n	800c018 <__smakebuf_r+0x18>
 800c07c:	0800be0d 	.word	0x0800be0d

0800c080 <_free_r>:
 800c080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c082:	2900      	cmp	r1, #0
 800c084:	d044      	beq.n	800c110 <_free_r+0x90>
 800c086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c08a:	9001      	str	r0, [sp, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f1a1 0404 	sub.w	r4, r1, #4
 800c092:	bfb8      	it	lt
 800c094:	18e4      	addlt	r4, r4, r3
 800c096:	f000 fcb3 	bl	800ca00 <__malloc_lock>
 800c09a:	4a1e      	ldr	r2, [pc, #120]	; (800c114 <_free_r+0x94>)
 800c09c:	9801      	ldr	r0, [sp, #4]
 800c09e:	6813      	ldr	r3, [r2, #0]
 800c0a0:	b933      	cbnz	r3, 800c0b0 <_free_r+0x30>
 800c0a2:	6063      	str	r3, [r4, #4]
 800c0a4:	6014      	str	r4, [r2, #0]
 800c0a6:	b003      	add	sp, #12
 800c0a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0ac:	f000 bcae 	b.w	800ca0c <__malloc_unlock>
 800c0b0:	42a3      	cmp	r3, r4
 800c0b2:	d908      	bls.n	800c0c6 <_free_r+0x46>
 800c0b4:	6825      	ldr	r5, [r4, #0]
 800c0b6:	1961      	adds	r1, r4, r5
 800c0b8:	428b      	cmp	r3, r1
 800c0ba:	bf01      	itttt	eq
 800c0bc:	6819      	ldreq	r1, [r3, #0]
 800c0be:	685b      	ldreq	r3, [r3, #4]
 800c0c0:	1949      	addeq	r1, r1, r5
 800c0c2:	6021      	streq	r1, [r4, #0]
 800c0c4:	e7ed      	b.n	800c0a2 <_free_r+0x22>
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	b10b      	cbz	r3, 800c0d0 <_free_r+0x50>
 800c0cc:	42a3      	cmp	r3, r4
 800c0ce:	d9fa      	bls.n	800c0c6 <_free_r+0x46>
 800c0d0:	6811      	ldr	r1, [r2, #0]
 800c0d2:	1855      	adds	r5, r2, r1
 800c0d4:	42a5      	cmp	r5, r4
 800c0d6:	d10b      	bne.n	800c0f0 <_free_r+0x70>
 800c0d8:	6824      	ldr	r4, [r4, #0]
 800c0da:	4421      	add	r1, r4
 800c0dc:	1854      	adds	r4, r2, r1
 800c0de:	42a3      	cmp	r3, r4
 800c0e0:	6011      	str	r1, [r2, #0]
 800c0e2:	d1e0      	bne.n	800c0a6 <_free_r+0x26>
 800c0e4:	681c      	ldr	r4, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	6053      	str	r3, [r2, #4]
 800c0ea:	4421      	add	r1, r4
 800c0ec:	6011      	str	r1, [r2, #0]
 800c0ee:	e7da      	b.n	800c0a6 <_free_r+0x26>
 800c0f0:	d902      	bls.n	800c0f8 <_free_r+0x78>
 800c0f2:	230c      	movs	r3, #12
 800c0f4:	6003      	str	r3, [r0, #0]
 800c0f6:	e7d6      	b.n	800c0a6 <_free_r+0x26>
 800c0f8:	6825      	ldr	r5, [r4, #0]
 800c0fa:	1961      	adds	r1, r4, r5
 800c0fc:	428b      	cmp	r3, r1
 800c0fe:	bf04      	itt	eq
 800c100:	6819      	ldreq	r1, [r3, #0]
 800c102:	685b      	ldreq	r3, [r3, #4]
 800c104:	6063      	str	r3, [r4, #4]
 800c106:	bf04      	itt	eq
 800c108:	1949      	addeq	r1, r1, r5
 800c10a:	6021      	streq	r1, [r4, #0]
 800c10c:	6054      	str	r4, [r2, #4]
 800c10e:	e7ca      	b.n	800c0a6 <_free_r+0x26>
 800c110:	b003      	add	sp, #12
 800c112:	bd30      	pop	{r4, r5, pc}
 800c114:	200015f4 	.word	0x200015f4

0800c118 <sbrk_aligned>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	4e0e      	ldr	r6, [pc, #56]	; (800c154 <sbrk_aligned+0x3c>)
 800c11c:	460c      	mov	r4, r1
 800c11e:	6831      	ldr	r1, [r6, #0]
 800c120:	4605      	mov	r5, r0
 800c122:	b911      	cbnz	r1, 800c12a <sbrk_aligned+0x12>
 800c124:	f000 fbc2 	bl	800c8ac <_sbrk_r>
 800c128:	6030      	str	r0, [r6, #0]
 800c12a:	4621      	mov	r1, r4
 800c12c:	4628      	mov	r0, r5
 800c12e:	f000 fbbd 	bl	800c8ac <_sbrk_r>
 800c132:	1c43      	adds	r3, r0, #1
 800c134:	d00a      	beq.n	800c14c <sbrk_aligned+0x34>
 800c136:	1cc4      	adds	r4, r0, #3
 800c138:	f024 0403 	bic.w	r4, r4, #3
 800c13c:	42a0      	cmp	r0, r4
 800c13e:	d007      	beq.n	800c150 <sbrk_aligned+0x38>
 800c140:	1a21      	subs	r1, r4, r0
 800c142:	4628      	mov	r0, r5
 800c144:	f000 fbb2 	bl	800c8ac <_sbrk_r>
 800c148:	3001      	adds	r0, #1
 800c14a:	d101      	bne.n	800c150 <sbrk_aligned+0x38>
 800c14c:	f04f 34ff 	mov.w	r4, #4294967295
 800c150:	4620      	mov	r0, r4
 800c152:	bd70      	pop	{r4, r5, r6, pc}
 800c154:	200015f8 	.word	0x200015f8

0800c158 <_malloc_r>:
 800c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15c:	1ccd      	adds	r5, r1, #3
 800c15e:	f025 0503 	bic.w	r5, r5, #3
 800c162:	3508      	adds	r5, #8
 800c164:	2d0c      	cmp	r5, #12
 800c166:	bf38      	it	cc
 800c168:	250c      	movcc	r5, #12
 800c16a:	2d00      	cmp	r5, #0
 800c16c:	4607      	mov	r7, r0
 800c16e:	db01      	blt.n	800c174 <_malloc_r+0x1c>
 800c170:	42a9      	cmp	r1, r5
 800c172:	d905      	bls.n	800c180 <_malloc_r+0x28>
 800c174:	230c      	movs	r3, #12
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	2600      	movs	r6, #0
 800c17a:	4630      	mov	r0, r6
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	4e2e      	ldr	r6, [pc, #184]	; (800c23c <_malloc_r+0xe4>)
 800c182:	f000 fc3d 	bl	800ca00 <__malloc_lock>
 800c186:	6833      	ldr	r3, [r6, #0]
 800c188:	461c      	mov	r4, r3
 800c18a:	bb34      	cbnz	r4, 800c1da <_malloc_r+0x82>
 800c18c:	4629      	mov	r1, r5
 800c18e:	4638      	mov	r0, r7
 800c190:	f7ff ffc2 	bl	800c118 <sbrk_aligned>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	4604      	mov	r4, r0
 800c198:	d14d      	bne.n	800c236 <_malloc_r+0xde>
 800c19a:	6834      	ldr	r4, [r6, #0]
 800c19c:	4626      	mov	r6, r4
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	d140      	bne.n	800c224 <_malloc_r+0xcc>
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	4631      	mov	r1, r6
 800c1a6:	4638      	mov	r0, r7
 800c1a8:	eb04 0803 	add.w	r8, r4, r3
 800c1ac:	f000 fb7e 	bl	800c8ac <_sbrk_r>
 800c1b0:	4580      	cmp	r8, r0
 800c1b2:	d13a      	bne.n	800c22a <_malloc_r+0xd2>
 800c1b4:	6821      	ldr	r1, [r4, #0]
 800c1b6:	3503      	adds	r5, #3
 800c1b8:	1a6d      	subs	r5, r5, r1
 800c1ba:	f025 0503 	bic.w	r5, r5, #3
 800c1be:	3508      	adds	r5, #8
 800c1c0:	2d0c      	cmp	r5, #12
 800c1c2:	bf38      	it	cc
 800c1c4:	250c      	movcc	r5, #12
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	f7ff ffa5 	bl	800c118 <sbrk_aligned>
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d02b      	beq.n	800c22a <_malloc_r+0xd2>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	442b      	add	r3, r5
 800c1d6:	6023      	str	r3, [r4, #0]
 800c1d8:	e00e      	b.n	800c1f8 <_malloc_r+0xa0>
 800c1da:	6822      	ldr	r2, [r4, #0]
 800c1dc:	1b52      	subs	r2, r2, r5
 800c1de:	d41e      	bmi.n	800c21e <_malloc_r+0xc6>
 800c1e0:	2a0b      	cmp	r2, #11
 800c1e2:	d916      	bls.n	800c212 <_malloc_r+0xba>
 800c1e4:	1961      	adds	r1, r4, r5
 800c1e6:	42a3      	cmp	r3, r4
 800c1e8:	6025      	str	r5, [r4, #0]
 800c1ea:	bf18      	it	ne
 800c1ec:	6059      	strne	r1, [r3, #4]
 800c1ee:	6863      	ldr	r3, [r4, #4]
 800c1f0:	bf08      	it	eq
 800c1f2:	6031      	streq	r1, [r6, #0]
 800c1f4:	5162      	str	r2, [r4, r5]
 800c1f6:	604b      	str	r3, [r1, #4]
 800c1f8:	4638      	mov	r0, r7
 800c1fa:	f104 060b 	add.w	r6, r4, #11
 800c1fe:	f000 fc05 	bl	800ca0c <__malloc_unlock>
 800c202:	f026 0607 	bic.w	r6, r6, #7
 800c206:	1d23      	adds	r3, r4, #4
 800c208:	1af2      	subs	r2, r6, r3
 800c20a:	d0b6      	beq.n	800c17a <_malloc_r+0x22>
 800c20c:	1b9b      	subs	r3, r3, r6
 800c20e:	50a3      	str	r3, [r4, r2]
 800c210:	e7b3      	b.n	800c17a <_malloc_r+0x22>
 800c212:	6862      	ldr	r2, [r4, #4]
 800c214:	42a3      	cmp	r3, r4
 800c216:	bf0c      	ite	eq
 800c218:	6032      	streq	r2, [r6, #0]
 800c21a:	605a      	strne	r2, [r3, #4]
 800c21c:	e7ec      	b.n	800c1f8 <_malloc_r+0xa0>
 800c21e:	4623      	mov	r3, r4
 800c220:	6864      	ldr	r4, [r4, #4]
 800c222:	e7b2      	b.n	800c18a <_malloc_r+0x32>
 800c224:	4634      	mov	r4, r6
 800c226:	6876      	ldr	r6, [r6, #4]
 800c228:	e7b9      	b.n	800c19e <_malloc_r+0x46>
 800c22a:	230c      	movs	r3, #12
 800c22c:	603b      	str	r3, [r7, #0]
 800c22e:	4638      	mov	r0, r7
 800c230:	f000 fbec 	bl	800ca0c <__malloc_unlock>
 800c234:	e7a1      	b.n	800c17a <_malloc_r+0x22>
 800c236:	6025      	str	r5, [r4, #0]
 800c238:	e7de      	b.n	800c1f8 <_malloc_r+0xa0>
 800c23a:	bf00      	nop
 800c23c:	200015f4 	.word	0x200015f4

0800c240 <__sfputc_r>:
 800c240:	6893      	ldr	r3, [r2, #8]
 800c242:	3b01      	subs	r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	b410      	push	{r4}
 800c248:	6093      	str	r3, [r2, #8]
 800c24a:	da08      	bge.n	800c25e <__sfputc_r+0x1e>
 800c24c:	6994      	ldr	r4, [r2, #24]
 800c24e:	42a3      	cmp	r3, r4
 800c250:	db01      	blt.n	800c256 <__sfputc_r+0x16>
 800c252:	290a      	cmp	r1, #10
 800c254:	d103      	bne.n	800c25e <__sfputc_r+0x1e>
 800c256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c25a:	f7ff bc31 	b.w	800bac0 <__swbuf_r>
 800c25e:	6813      	ldr	r3, [r2, #0]
 800c260:	1c58      	adds	r0, r3, #1
 800c262:	6010      	str	r0, [r2, #0]
 800c264:	7019      	strb	r1, [r3, #0]
 800c266:	4608      	mov	r0, r1
 800c268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <__sfputs_r>:
 800c26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c270:	4606      	mov	r6, r0
 800c272:	460f      	mov	r7, r1
 800c274:	4614      	mov	r4, r2
 800c276:	18d5      	adds	r5, r2, r3
 800c278:	42ac      	cmp	r4, r5
 800c27a:	d101      	bne.n	800c280 <__sfputs_r+0x12>
 800c27c:	2000      	movs	r0, #0
 800c27e:	e007      	b.n	800c290 <__sfputs_r+0x22>
 800c280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c284:	463a      	mov	r2, r7
 800c286:	4630      	mov	r0, r6
 800c288:	f7ff ffda 	bl	800c240 <__sfputc_r>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d1f3      	bne.n	800c278 <__sfputs_r+0xa>
 800c290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c294 <_vfiprintf_r>:
 800c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	460d      	mov	r5, r1
 800c29a:	b09d      	sub	sp, #116	; 0x74
 800c29c:	4614      	mov	r4, r2
 800c29e:	4698      	mov	r8, r3
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	b118      	cbz	r0, 800c2ac <_vfiprintf_r+0x18>
 800c2a4:	6983      	ldr	r3, [r0, #24]
 800c2a6:	b90b      	cbnz	r3, 800c2ac <_vfiprintf_r+0x18>
 800c2a8:	f7ff fde4 	bl	800be74 <__sinit>
 800c2ac:	4b89      	ldr	r3, [pc, #548]	; (800c4d4 <_vfiprintf_r+0x240>)
 800c2ae:	429d      	cmp	r5, r3
 800c2b0:	d11b      	bne.n	800c2ea <_vfiprintf_r+0x56>
 800c2b2:	6875      	ldr	r5, [r6, #4]
 800c2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2b6:	07d9      	lsls	r1, r3, #31
 800c2b8:	d405      	bmi.n	800c2c6 <_vfiprintf_r+0x32>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	059a      	lsls	r2, r3, #22
 800c2be:	d402      	bmi.n	800c2c6 <_vfiprintf_r+0x32>
 800c2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2c2:	f7ff fe75 	bl	800bfb0 <__retarget_lock_acquire_recursive>
 800c2c6:	89ab      	ldrh	r3, [r5, #12]
 800c2c8:	071b      	lsls	r3, r3, #28
 800c2ca:	d501      	bpl.n	800c2d0 <_vfiprintf_r+0x3c>
 800c2cc:	692b      	ldr	r3, [r5, #16]
 800c2ce:	b9eb      	cbnz	r3, 800c30c <_vfiprintf_r+0x78>
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff fc46 	bl	800bb64 <__swsetup_r>
 800c2d8:	b1c0      	cbz	r0, 800c30c <_vfiprintf_r+0x78>
 800c2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2dc:	07dc      	lsls	r4, r3, #31
 800c2de:	d50e      	bpl.n	800c2fe <_vfiprintf_r+0x6a>
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	b01d      	add	sp, #116	; 0x74
 800c2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ea:	4b7b      	ldr	r3, [pc, #492]	; (800c4d8 <_vfiprintf_r+0x244>)
 800c2ec:	429d      	cmp	r5, r3
 800c2ee:	d101      	bne.n	800c2f4 <_vfiprintf_r+0x60>
 800c2f0:	68b5      	ldr	r5, [r6, #8]
 800c2f2:	e7df      	b.n	800c2b4 <_vfiprintf_r+0x20>
 800c2f4:	4b79      	ldr	r3, [pc, #484]	; (800c4dc <_vfiprintf_r+0x248>)
 800c2f6:	429d      	cmp	r5, r3
 800c2f8:	bf08      	it	eq
 800c2fa:	68f5      	ldreq	r5, [r6, #12]
 800c2fc:	e7da      	b.n	800c2b4 <_vfiprintf_r+0x20>
 800c2fe:	89ab      	ldrh	r3, [r5, #12]
 800c300:	0598      	lsls	r0, r3, #22
 800c302:	d4ed      	bmi.n	800c2e0 <_vfiprintf_r+0x4c>
 800c304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c306:	f7ff fe54 	bl	800bfb2 <__retarget_lock_release_recursive>
 800c30a:	e7e9      	b.n	800c2e0 <_vfiprintf_r+0x4c>
 800c30c:	2300      	movs	r3, #0
 800c30e:	9309      	str	r3, [sp, #36]	; 0x24
 800c310:	2320      	movs	r3, #32
 800c312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c316:	f8cd 800c 	str.w	r8, [sp, #12]
 800c31a:	2330      	movs	r3, #48	; 0x30
 800c31c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4e0 <_vfiprintf_r+0x24c>
 800c320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c324:	f04f 0901 	mov.w	r9, #1
 800c328:	4623      	mov	r3, r4
 800c32a:	469a      	mov	sl, r3
 800c32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c330:	b10a      	cbz	r2, 800c336 <_vfiprintf_r+0xa2>
 800c332:	2a25      	cmp	r2, #37	; 0x25
 800c334:	d1f9      	bne.n	800c32a <_vfiprintf_r+0x96>
 800c336:	ebba 0b04 	subs.w	fp, sl, r4
 800c33a:	d00b      	beq.n	800c354 <_vfiprintf_r+0xc0>
 800c33c:	465b      	mov	r3, fp
 800c33e:	4622      	mov	r2, r4
 800c340:	4629      	mov	r1, r5
 800c342:	4630      	mov	r0, r6
 800c344:	f7ff ff93 	bl	800c26e <__sfputs_r>
 800c348:	3001      	adds	r0, #1
 800c34a:	f000 80aa 	beq.w	800c4a2 <_vfiprintf_r+0x20e>
 800c34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c350:	445a      	add	r2, fp
 800c352:	9209      	str	r2, [sp, #36]	; 0x24
 800c354:	f89a 3000 	ldrb.w	r3, [sl]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 80a2 	beq.w	800c4a2 <_vfiprintf_r+0x20e>
 800c35e:	2300      	movs	r3, #0
 800c360:	f04f 32ff 	mov.w	r2, #4294967295
 800c364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c368:	f10a 0a01 	add.w	sl, sl, #1
 800c36c:	9304      	str	r3, [sp, #16]
 800c36e:	9307      	str	r3, [sp, #28]
 800c370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c374:	931a      	str	r3, [sp, #104]	; 0x68
 800c376:	4654      	mov	r4, sl
 800c378:	2205      	movs	r2, #5
 800c37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37e:	4858      	ldr	r0, [pc, #352]	; (800c4e0 <_vfiprintf_r+0x24c>)
 800c380:	f7f3 ff06 	bl	8000190 <memchr>
 800c384:	9a04      	ldr	r2, [sp, #16]
 800c386:	b9d8      	cbnz	r0, 800c3c0 <_vfiprintf_r+0x12c>
 800c388:	06d1      	lsls	r1, r2, #27
 800c38a:	bf44      	itt	mi
 800c38c:	2320      	movmi	r3, #32
 800c38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c392:	0713      	lsls	r3, r2, #28
 800c394:	bf44      	itt	mi
 800c396:	232b      	movmi	r3, #43	; 0x2b
 800c398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c39c:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c3a2:	d015      	beq.n	800c3d0 <_vfiprintf_r+0x13c>
 800c3a4:	9a07      	ldr	r2, [sp, #28]
 800c3a6:	4654      	mov	r4, sl
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	f04f 0c0a 	mov.w	ip, #10
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3b4:	3b30      	subs	r3, #48	; 0x30
 800c3b6:	2b09      	cmp	r3, #9
 800c3b8:	d94e      	bls.n	800c458 <_vfiprintf_r+0x1c4>
 800c3ba:	b1b0      	cbz	r0, 800c3ea <_vfiprintf_r+0x156>
 800c3bc:	9207      	str	r2, [sp, #28]
 800c3be:	e014      	b.n	800c3ea <_vfiprintf_r+0x156>
 800c3c0:	eba0 0308 	sub.w	r3, r0, r8
 800c3c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	9304      	str	r3, [sp, #16]
 800c3cc:	46a2      	mov	sl, r4
 800c3ce:	e7d2      	b.n	800c376 <_vfiprintf_r+0xe2>
 800c3d0:	9b03      	ldr	r3, [sp, #12]
 800c3d2:	1d19      	adds	r1, r3, #4
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	9103      	str	r1, [sp, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	bfbb      	ittet	lt
 800c3dc:	425b      	neglt	r3, r3
 800c3de:	f042 0202 	orrlt.w	r2, r2, #2
 800c3e2:	9307      	strge	r3, [sp, #28]
 800c3e4:	9307      	strlt	r3, [sp, #28]
 800c3e6:	bfb8      	it	lt
 800c3e8:	9204      	strlt	r2, [sp, #16]
 800c3ea:	7823      	ldrb	r3, [r4, #0]
 800c3ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ee:	d10c      	bne.n	800c40a <_vfiprintf_r+0x176>
 800c3f0:	7863      	ldrb	r3, [r4, #1]
 800c3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3f4:	d135      	bne.n	800c462 <_vfiprintf_r+0x1ce>
 800c3f6:	9b03      	ldr	r3, [sp, #12]
 800c3f8:	1d1a      	adds	r2, r3, #4
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	9203      	str	r2, [sp, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	bfb8      	it	lt
 800c402:	f04f 33ff 	movlt.w	r3, #4294967295
 800c406:	3402      	adds	r4, #2
 800c408:	9305      	str	r3, [sp, #20]
 800c40a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4f0 <_vfiprintf_r+0x25c>
 800c40e:	7821      	ldrb	r1, [r4, #0]
 800c410:	2203      	movs	r2, #3
 800c412:	4650      	mov	r0, sl
 800c414:	f7f3 febc 	bl	8000190 <memchr>
 800c418:	b140      	cbz	r0, 800c42c <_vfiprintf_r+0x198>
 800c41a:	2340      	movs	r3, #64	; 0x40
 800c41c:	eba0 000a 	sub.w	r0, r0, sl
 800c420:	fa03 f000 	lsl.w	r0, r3, r0
 800c424:	9b04      	ldr	r3, [sp, #16]
 800c426:	4303      	orrs	r3, r0
 800c428:	3401      	adds	r4, #1
 800c42a:	9304      	str	r3, [sp, #16]
 800c42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c430:	482c      	ldr	r0, [pc, #176]	; (800c4e4 <_vfiprintf_r+0x250>)
 800c432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c436:	2206      	movs	r2, #6
 800c438:	f7f3 feaa 	bl	8000190 <memchr>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d03f      	beq.n	800c4c0 <_vfiprintf_r+0x22c>
 800c440:	4b29      	ldr	r3, [pc, #164]	; (800c4e8 <_vfiprintf_r+0x254>)
 800c442:	bb1b      	cbnz	r3, 800c48c <_vfiprintf_r+0x1f8>
 800c444:	9b03      	ldr	r3, [sp, #12]
 800c446:	3307      	adds	r3, #7
 800c448:	f023 0307 	bic.w	r3, r3, #7
 800c44c:	3308      	adds	r3, #8
 800c44e:	9303      	str	r3, [sp, #12]
 800c450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c452:	443b      	add	r3, r7
 800c454:	9309      	str	r3, [sp, #36]	; 0x24
 800c456:	e767      	b.n	800c328 <_vfiprintf_r+0x94>
 800c458:	fb0c 3202 	mla	r2, ip, r2, r3
 800c45c:	460c      	mov	r4, r1
 800c45e:	2001      	movs	r0, #1
 800c460:	e7a5      	b.n	800c3ae <_vfiprintf_r+0x11a>
 800c462:	2300      	movs	r3, #0
 800c464:	3401      	adds	r4, #1
 800c466:	9305      	str	r3, [sp, #20]
 800c468:	4619      	mov	r1, r3
 800c46a:	f04f 0c0a 	mov.w	ip, #10
 800c46e:	4620      	mov	r0, r4
 800c470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c474:	3a30      	subs	r2, #48	; 0x30
 800c476:	2a09      	cmp	r2, #9
 800c478:	d903      	bls.n	800c482 <_vfiprintf_r+0x1ee>
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0c5      	beq.n	800c40a <_vfiprintf_r+0x176>
 800c47e:	9105      	str	r1, [sp, #20]
 800c480:	e7c3      	b.n	800c40a <_vfiprintf_r+0x176>
 800c482:	fb0c 2101 	mla	r1, ip, r1, r2
 800c486:	4604      	mov	r4, r0
 800c488:	2301      	movs	r3, #1
 800c48a:	e7f0      	b.n	800c46e <_vfiprintf_r+0x1da>
 800c48c:	ab03      	add	r3, sp, #12
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	462a      	mov	r2, r5
 800c492:	4b16      	ldr	r3, [pc, #88]	; (800c4ec <_vfiprintf_r+0x258>)
 800c494:	a904      	add	r1, sp, #16
 800c496:	4630      	mov	r0, r6
 800c498:	f3af 8000 	nop.w
 800c49c:	4607      	mov	r7, r0
 800c49e:	1c78      	adds	r0, r7, #1
 800c4a0:	d1d6      	bne.n	800c450 <_vfiprintf_r+0x1bc>
 800c4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4a4:	07d9      	lsls	r1, r3, #31
 800c4a6:	d405      	bmi.n	800c4b4 <_vfiprintf_r+0x220>
 800c4a8:	89ab      	ldrh	r3, [r5, #12]
 800c4aa:	059a      	lsls	r2, r3, #22
 800c4ac:	d402      	bmi.n	800c4b4 <_vfiprintf_r+0x220>
 800c4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4b0:	f7ff fd7f 	bl	800bfb2 <__retarget_lock_release_recursive>
 800c4b4:	89ab      	ldrh	r3, [r5, #12]
 800c4b6:	065b      	lsls	r3, r3, #25
 800c4b8:	f53f af12 	bmi.w	800c2e0 <_vfiprintf_r+0x4c>
 800c4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4be:	e711      	b.n	800c2e4 <_vfiprintf_r+0x50>
 800c4c0:	ab03      	add	r3, sp, #12
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	462a      	mov	r2, r5
 800c4c6:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <_vfiprintf_r+0x258>)
 800c4c8:	a904      	add	r1, sp, #16
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f000 f880 	bl	800c5d0 <_printf_i>
 800c4d0:	e7e4      	b.n	800c49c <_vfiprintf_r+0x208>
 800c4d2:	bf00      	nop
 800c4d4:	0800da68 	.word	0x0800da68
 800c4d8:	0800da88 	.word	0x0800da88
 800c4dc:	0800da48 	.word	0x0800da48
 800c4e0:	0800daa8 	.word	0x0800daa8
 800c4e4:	0800dab2 	.word	0x0800dab2
 800c4e8:	00000000 	.word	0x00000000
 800c4ec:	0800c26f 	.word	0x0800c26f
 800c4f0:	0800daae 	.word	0x0800daae

0800c4f4 <_printf_common>:
 800c4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f8:	4616      	mov	r6, r2
 800c4fa:	4699      	mov	r9, r3
 800c4fc:	688a      	ldr	r2, [r1, #8]
 800c4fe:	690b      	ldr	r3, [r1, #16]
 800c500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c504:	4293      	cmp	r3, r2
 800c506:	bfb8      	it	lt
 800c508:	4613      	movlt	r3, r2
 800c50a:	6033      	str	r3, [r6, #0]
 800c50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c510:	4607      	mov	r7, r0
 800c512:	460c      	mov	r4, r1
 800c514:	b10a      	cbz	r2, 800c51a <_printf_common+0x26>
 800c516:	3301      	adds	r3, #1
 800c518:	6033      	str	r3, [r6, #0]
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	0699      	lsls	r1, r3, #26
 800c51e:	bf42      	ittt	mi
 800c520:	6833      	ldrmi	r3, [r6, #0]
 800c522:	3302      	addmi	r3, #2
 800c524:	6033      	strmi	r3, [r6, #0]
 800c526:	6825      	ldr	r5, [r4, #0]
 800c528:	f015 0506 	ands.w	r5, r5, #6
 800c52c:	d106      	bne.n	800c53c <_printf_common+0x48>
 800c52e:	f104 0a19 	add.w	sl, r4, #25
 800c532:	68e3      	ldr	r3, [r4, #12]
 800c534:	6832      	ldr	r2, [r6, #0]
 800c536:	1a9b      	subs	r3, r3, r2
 800c538:	42ab      	cmp	r3, r5
 800c53a:	dc26      	bgt.n	800c58a <_printf_common+0x96>
 800c53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c540:	1e13      	subs	r3, r2, #0
 800c542:	6822      	ldr	r2, [r4, #0]
 800c544:	bf18      	it	ne
 800c546:	2301      	movne	r3, #1
 800c548:	0692      	lsls	r2, r2, #26
 800c54a:	d42b      	bmi.n	800c5a4 <_printf_common+0xb0>
 800c54c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c550:	4649      	mov	r1, r9
 800c552:	4638      	mov	r0, r7
 800c554:	47c0      	blx	r8
 800c556:	3001      	adds	r0, #1
 800c558:	d01e      	beq.n	800c598 <_printf_common+0xa4>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	68e5      	ldr	r5, [r4, #12]
 800c55e:	6832      	ldr	r2, [r6, #0]
 800c560:	f003 0306 	and.w	r3, r3, #6
 800c564:	2b04      	cmp	r3, #4
 800c566:	bf08      	it	eq
 800c568:	1aad      	subeq	r5, r5, r2
 800c56a:	68a3      	ldr	r3, [r4, #8]
 800c56c:	6922      	ldr	r2, [r4, #16]
 800c56e:	bf0c      	ite	eq
 800c570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c574:	2500      	movne	r5, #0
 800c576:	4293      	cmp	r3, r2
 800c578:	bfc4      	itt	gt
 800c57a:	1a9b      	subgt	r3, r3, r2
 800c57c:	18ed      	addgt	r5, r5, r3
 800c57e:	2600      	movs	r6, #0
 800c580:	341a      	adds	r4, #26
 800c582:	42b5      	cmp	r5, r6
 800c584:	d11a      	bne.n	800c5bc <_printf_common+0xc8>
 800c586:	2000      	movs	r0, #0
 800c588:	e008      	b.n	800c59c <_printf_common+0xa8>
 800c58a:	2301      	movs	r3, #1
 800c58c:	4652      	mov	r2, sl
 800c58e:	4649      	mov	r1, r9
 800c590:	4638      	mov	r0, r7
 800c592:	47c0      	blx	r8
 800c594:	3001      	adds	r0, #1
 800c596:	d103      	bne.n	800c5a0 <_printf_common+0xac>
 800c598:	f04f 30ff 	mov.w	r0, #4294967295
 800c59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a0:	3501      	adds	r5, #1
 800c5a2:	e7c6      	b.n	800c532 <_printf_common+0x3e>
 800c5a4:	18e1      	adds	r1, r4, r3
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	2030      	movs	r0, #48	; 0x30
 800c5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5ae:	4422      	add	r2, r4
 800c5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5b8:	3302      	adds	r3, #2
 800c5ba:	e7c7      	b.n	800c54c <_printf_common+0x58>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	4622      	mov	r2, r4
 800c5c0:	4649      	mov	r1, r9
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	47c0      	blx	r8
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	d0e6      	beq.n	800c598 <_printf_common+0xa4>
 800c5ca:	3601      	adds	r6, #1
 800c5cc:	e7d9      	b.n	800c582 <_printf_common+0x8e>
	...

0800c5d0 <_printf_i>:
 800c5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d4:	7e0f      	ldrb	r7, [r1, #24]
 800c5d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5d8:	2f78      	cmp	r7, #120	; 0x78
 800c5da:	4691      	mov	r9, r2
 800c5dc:	4680      	mov	r8, r0
 800c5de:	460c      	mov	r4, r1
 800c5e0:	469a      	mov	sl, r3
 800c5e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5e6:	d807      	bhi.n	800c5f8 <_printf_i+0x28>
 800c5e8:	2f62      	cmp	r7, #98	; 0x62
 800c5ea:	d80a      	bhi.n	800c602 <_printf_i+0x32>
 800c5ec:	2f00      	cmp	r7, #0
 800c5ee:	f000 80d8 	beq.w	800c7a2 <_printf_i+0x1d2>
 800c5f2:	2f58      	cmp	r7, #88	; 0x58
 800c5f4:	f000 80a3 	beq.w	800c73e <_printf_i+0x16e>
 800c5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c600:	e03a      	b.n	800c678 <_printf_i+0xa8>
 800c602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c606:	2b15      	cmp	r3, #21
 800c608:	d8f6      	bhi.n	800c5f8 <_printf_i+0x28>
 800c60a:	a101      	add	r1, pc, #4	; (adr r1, 800c610 <_printf_i+0x40>)
 800c60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c610:	0800c669 	.word	0x0800c669
 800c614:	0800c67d 	.word	0x0800c67d
 800c618:	0800c5f9 	.word	0x0800c5f9
 800c61c:	0800c5f9 	.word	0x0800c5f9
 800c620:	0800c5f9 	.word	0x0800c5f9
 800c624:	0800c5f9 	.word	0x0800c5f9
 800c628:	0800c67d 	.word	0x0800c67d
 800c62c:	0800c5f9 	.word	0x0800c5f9
 800c630:	0800c5f9 	.word	0x0800c5f9
 800c634:	0800c5f9 	.word	0x0800c5f9
 800c638:	0800c5f9 	.word	0x0800c5f9
 800c63c:	0800c789 	.word	0x0800c789
 800c640:	0800c6ad 	.word	0x0800c6ad
 800c644:	0800c76b 	.word	0x0800c76b
 800c648:	0800c5f9 	.word	0x0800c5f9
 800c64c:	0800c5f9 	.word	0x0800c5f9
 800c650:	0800c7ab 	.word	0x0800c7ab
 800c654:	0800c5f9 	.word	0x0800c5f9
 800c658:	0800c6ad 	.word	0x0800c6ad
 800c65c:	0800c5f9 	.word	0x0800c5f9
 800c660:	0800c5f9 	.word	0x0800c5f9
 800c664:	0800c773 	.word	0x0800c773
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	1d1a      	adds	r2, r3, #4
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	602a      	str	r2, [r5, #0]
 800c670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c678:	2301      	movs	r3, #1
 800c67a:	e0a3      	b.n	800c7c4 <_printf_i+0x1f4>
 800c67c:	6820      	ldr	r0, [r4, #0]
 800c67e:	6829      	ldr	r1, [r5, #0]
 800c680:	0606      	lsls	r6, r0, #24
 800c682:	f101 0304 	add.w	r3, r1, #4
 800c686:	d50a      	bpl.n	800c69e <_printf_i+0xce>
 800c688:	680e      	ldr	r6, [r1, #0]
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	2e00      	cmp	r6, #0
 800c68e:	da03      	bge.n	800c698 <_printf_i+0xc8>
 800c690:	232d      	movs	r3, #45	; 0x2d
 800c692:	4276      	negs	r6, r6
 800c694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c698:	485e      	ldr	r0, [pc, #376]	; (800c814 <_printf_i+0x244>)
 800c69a:	230a      	movs	r3, #10
 800c69c:	e019      	b.n	800c6d2 <_printf_i+0x102>
 800c69e:	680e      	ldr	r6, [r1, #0]
 800c6a0:	602b      	str	r3, [r5, #0]
 800c6a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6a6:	bf18      	it	ne
 800c6a8:	b236      	sxthne	r6, r6
 800c6aa:	e7ef      	b.n	800c68c <_printf_i+0xbc>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	6820      	ldr	r0, [r4, #0]
 800c6b0:	1d19      	adds	r1, r3, #4
 800c6b2:	6029      	str	r1, [r5, #0]
 800c6b4:	0601      	lsls	r1, r0, #24
 800c6b6:	d501      	bpl.n	800c6bc <_printf_i+0xec>
 800c6b8:	681e      	ldr	r6, [r3, #0]
 800c6ba:	e002      	b.n	800c6c2 <_printf_i+0xf2>
 800c6bc:	0646      	lsls	r6, r0, #25
 800c6be:	d5fb      	bpl.n	800c6b8 <_printf_i+0xe8>
 800c6c0:	881e      	ldrh	r6, [r3, #0]
 800c6c2:	4854      	ldr	r0, [pc, #336]	; (800c814 <_printf_i+0x244>)
 800c6c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c6c6:	bf0c      	ite	eq
 800c6c8:	2308      	moveq	r3, #8
 800c6ca:	230a      	movne	r3, #10
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6d2:	6865      	ldr	r5, [r4, #4]
 800c6d4:	60a5      	str	r5, [r4, #8]
 800c6d6:	2d00      	cmp	r5, #0
 800c6d8:	bfa2      	ittt	ge
 800c6da:	6821      	ldrge	r1, [r4, #0]
 800c6dc:	f021 0104 	bicge.w	r1, r1, #4
 800c6e0:	6021      	strge	r1, [r4, #0]
 800c6e2:	b90e      	cbnz	r6, 800c6e8 <_printf_i+0x118>
 800c6e4:	2d00      	cmp	r5, #0
 800c6e6:	d04d      	beq.n	800c784 <_printf_i+0x1b4>
 800c6e8:	4615      	mov	r5, r2
 800c6ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6ee:	fb03 6711 	mls	r7, r3, r1, r6
 800c6f2:	5dc7      	ldrb	r7, [r0, r7]
 800c6f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6f8:	4637      	mov	r7, r6
 800c6fa:	42bb      	cmp	r3, r7
 800c6fc:	460e      	mov	r6, r1
 800c6fe:	d9f4      	bls.n	800c6ea <_printf_i+0x11a>
 800c700:	2b08      	cmp	r3, #8
 800c702:	d10b      	bne.n	800c71c <_printf_i+0x14c>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	07de      	lsls	r6, r3, #31
 800c708:	d508      	bpl.n	800c71c <_printf_i+0x14c>
 800c70a:	6923      	ldr	r3, [r4, #16]
 800c70c:	6861      	ldr	r1, [r4, #4]
 800c70e:	4299      	cmp	r1, r3
 800c710:	bfde      	ittt	le
 800c712:	2330      	movle	r3, #48	; 0x30
 800c714:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c71c:	1b52      	subs	r2, r2, r5
 800c71e:	6122      	str	r2, [r4, #16]
 800c720:	f8cd a000 	str.w	sl, [sp]
 800c724:	464b      	mov	r3, r9
 800c726:	aa03      	add	r2, sp, #12
 800c728:	4621      	mov	r1, r4
 800c72a:	4640      	mov	r0, r8
 800c72c:	f7ff fee2 	bl	800c4f4 <_printf_common>
 800c730:	3001      	adds	r0, #1
 800c732:	d14c      	bne.n	800c7ce <_printf_i+0x1fe>
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	b004      	add	sp, #16
 800c73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73e:	4835      	ldr	r0, [pc, #212]	; (800c814 <_printf_i+0x244>)
 800c740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c744:	6829      	ldr	r1, [r5, #0]
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	f851 6b04 	ldr.w	r6, [r1], #4
 800c74c:	6029      	str	r1, [r5, #0]
 800c74e:	061d      	lsls	r5, r3, #24
 800c750:	d514      	bpl.n	800c77c <_printf_i+0x1ac>
 800c752:	07df      	lsls	r7, r3, #31
 800c754:	bf44      	itt	mi
 800c756:	f043 0320 	orrmi.w	r3, r3, #32
 800c75a:	6023      	strmi	r3, [r4, #0]
 800c75c:	b91e      	cbnz	r6, 800c766 <_printf_i+0x196>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	f023 0320 	bic.w	r3, r3, #32
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	2310      	movs	r3, #16
 800c768:	e7b0      	b.n	800c6cc <_printf_i+0xfc>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	f043 0320 	orr.w	r3, r3, #32
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	2378      	movs	r3, #120	; 0x78
 800c774:	4828      	ldr	r0, [pc, #160]	; (800c818 <_printf_i+0x248>)
 800c776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c77a:	e7e3      	b.n	800c744 <_printf_i+0x174>
 800c77c:	0659      	lsls	r1, r3, #25
 800c77e:	bf48      	it	mi
 800c780:	b2b6      	uxthmi	r6, r6
 800c782:	e7e6      	b.n	800c752 <_printf_i+0x182>
 800c784:	4615      	mov	r5, r2
 800c786:	e7bb      	b.n	800c700 <_printf_i+0x130>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	6826      	ldr	r6, [r4, #0]
 800c78c:	6961      	ldr	r1, [r4, #20]
 800c78e:	1d18      	adds	r0, r3, #4
 800c790:	6028      	str	r0, [r5, #0]
 800c792:	0635      	lsls	r5, r6, #24
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	d501      	bpl.n	800c79c <_printf_i+0x1cc>
 800c798:	6019      	str	r1, [r3, #0]
 800c79a:	e002      	b.n	800c7a2 <_printf_i+0x1d2>
 800c79c:	0670      	lsls	r0, r6, #25
 800c79e:	d5fb      	bpl.n	800c798 <_printf_i+0x1c8>
 800c7a0:	8019      	strh	r1, [r3, #0]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	6123      	str	r3, [r4, #16]
 800c7a6:	4615      	mov	r5, r2
 800c7a8:	e7ba      	b.n	800c720 <_printf_i+0x150>
 800c7aa:	682b      	ldr	r3, [r5, #0]
 800c7ac:	1d1a      	adds	r2, r3, #4
 800c7ae:	602a      	str	r2, [r5, #0]
 800c7b0:	681d      	ldr	r5, [r3, #0]
 800c7b2:	6862      	ldr	r2, [r4, #4]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f7f3 fcea 	bl	8000190 <memchr>
 800c7bc:	b108      	cbz	r0, 800c7c2 <_printf_i+0x1f2>
 800c7be:	1b40      	subs	r0, r0, r5
 800c7c0:	6060      	str	r0, [r4, #4]
 800c7c2:	6863      	ldr	r3, [r4, #4]
 800c7c4:	6123      	str	r3, [r4, #16]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7cc:	e7a8      	b.n	800c720 <_printf_i+0x150>
 800c7ce:	6923      	ldr	r3, [r4, #16]
 800c7d0:	462a      	mov	r2, r5
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	47d0      	blx	sl
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d0ab      	beq.n	800c734 <_printf_i+0x164>
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	079b      	lsls	r3, r3, #30
 800c7e0:	d413      	bmi.n	800c80a <_printf_i+0x23a>
 800c7e2:	68e0      	ldr	r0, [r4, #12]
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	4298      	cmp	r0, r3
 800c7e8:	bfb8      	it	lt
 800c7ea:	4618      	movlt	r0, r3
 800c7ec:	e7a4      	b.n	800c738 <_printf_i+0x168>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	47d0      	blx	sl
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d09b      	beq.n	800c734 <_printf_i+0x164>
 800c7fc:	3501      	adds	r5, #1
 800c7fe:	68e3      	ldr	r3, [r4, #12]
 800c800:	9903      	ldr	r1, [sp, #12]
 800c802:	1a5b      	subs	r3, r3, r1
 800c804:	42ab      	cmp	r3, r5
 800c806:	dcf2      	bgt.n	800c7ee <_printf_i+0x21e>
 800c808:	e7eb      	b.n	800c7e2 <_printf_i+0x212>
 800c80a:	2500      	movs	r5, #0
 800c80c:	f104 0619 	add.w	r6, r4, #25
 800c810:	e7f5      	b.n	800c7fe <_printf_i+0x22e>
 800c812:	bf00      	nop
 800c814:	0800dab9 	.word	0x0800dab9
 800c818:	0800daca 	.word	0x0800daca

0800c81c <_putc_r>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	460d      	mov	r5, r1
 800c820:	4614      	mov	r4, r2
 800c822:	4606      	mov	r6, r0
 800c824:	b118      	cbz	r0, 800c82e <_putc_r+0x12>
 800c826:	6983      	ldr	r3, [r0, #24]
 800c828:	b90b      	cbnz	r3, 800c82e <_putc_r+0x12>
 800c82a:	f7ff fb23 	bl	800be74 <__sinit>
 800c82e:	4b1c      	ldr	r3, [pc, #112]	; (800c8a0 <_putc_r+0x84>)
 800c830:	429c      	cmp	r4, r3
 800c832:	d124      	bne.n	800c87e <_putc_r+0x62>
 800c834:	6874      	ldr	r4, [r6, #4]
 800c836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c838:	07d8      	lsls	r0, r3, #31
 800c83a:	d405      	bmi.n	800c848 <_putc_r+0x2c>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	0599      	lsls	r1, r3, #22
 800c840:	d402      	bmi.n	800c848 <_putc_r+0x2c>
 800c842:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c844:	f7ff fbb4 	bl	800bfb0 <__retarget_lock_acquire_recursive>
 800c848:	68a3      	ldr	r3, [r4, #8]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	60a3      	str	r3, [r4, #8]
 800c850:	da05      	bge.n	800c85e <_putc_r+0x42>
 800c852:	69a2      	ldr	r2, [r4, #24]
 800c854:	4293      	cmp	r3, r2
 800c856:	db1c      	blt.n	800c892 <_putc_r+0x76>
 800c858:	b2eb      	uxtb	r3, r5
 800c85a:	2b0a      	cmp	r3, #10
 800c85c:	d019      	beq.n	800c892 <_putc_r+0x76>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	6022      	str	r2, [r4, #0]
 800c864:	701d      	strb	r5, [r3, #0]
 800c866:	b2ed      	uxtb	r5, r5
 800c868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c86a:	07da      	lsls	r2, r3, #31
 800c86c:	d405      	bmi.n	800c87a <_putc_r+0x5e>
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	059b      	lsls	r3, r3, #22
 800c872:	d402      	bmi.n	800c87a <_putc_r+0x5e>
 800c874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c876:	f7ff fb9c 	bl	800bfb2 <__retarget_lock_release_recursive>
 800c87a:	4628      	mov	r0, r5
 800c87c:	bd70      	pop	{r4, r5, r6, pc}
 800c87e:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <_putc_r+0x88>)
 800c880:	429c      	cmp	r4, r3
 800c882:	d101      	bne.n	800c888 <_putc_r+0x6c>
 800c884:	68b4      	ldr	r4, [r6, #8]
 800c886:	e7d6      	b.n	800c836 <_putc_r+0x1a>
 800c888:	4b07      	ldr	r3, [pc, #28]	; (800c8a8 <_putc_r+0x8c>)
 800c88a:	429c      	cmp	r4, r3
 800c88c:	bf08      	it	eq
 800c88e:	68f4      	ldreq	r4, [r6, #12]
 800c890:	e7d1      	b.n	800c836 <_putc_r+0x1a>
 800c892:	4629      	mov	r1, r5
 800c894:	4622      	mov	r2, r4
 800c896:	4630      	mov	r0, r6
 800c898:	f7ff f912 	bl	800bac0 <__swbuf_r>
 800c89c:	4605      	mov	r5, r0
 800c89e:	e7e3      	b.n	800c868 <_putc_r+0x4c>
 800c8a0:	0800da68 	.word	0x0800da68
 800c8a4:	0800da88 	.word	0x0800da88
 800c8a8:	0800da48 	.word	0x0800da48

0800c8ac <_sbrk_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d06      	ldr	r5, [pc, #24]	; (800c8c8 <_sbrk_r+0x1c>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	602b      	str	r3, [r5, #0]
 800c8b8:	f7f5 ff00 	bl	80026bc <_sbrk>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_sbrk_r+0x1a>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_sbrk_r+0x1a>
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	200015fc 	.word	0x200015fc

0800c8cc <__sread>:
 800c8cc:	b510      	push	{r4, lr}
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d4:	f000 f8a0 	bl	800ca18 <_read_r>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	bfab      	itete	ge
 800c8dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8de:	89a3      	ldrhlt	r3, [r4, #12]
 800c8e0:	181b      	addge	r3, r3, r0
 800c8e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8e6:	bfac      	ite	ge
 800c8e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8ea:	81a3      	strhlt	r3, [r4, #12]
 800c8ec:	bd10      	pop	{r4, pc}

0800c8ee <__swrite>:
 800c8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f2:	461f      	mov	r7, r3
 800c8f4:	898b      	ldrh	r3, [r1, #12]
 800c8f6:	05db      	lsls	r3, r3, #23
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	4616      	mov	r6, r2
 800c8fe:	d505      	bpl.n	800c90c <__swrite+0x1e>
 800c900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c904:	2302      	movs	r3, #2
 800c906:	2200      	movs	r2, #0
 800c908:	f000 f868 	bl	800c9dc <_lseek_r>
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c916:	81a3      	strh	r3, [r4, #12]
 800c918:	4632      	mov	r2, r6
 800c91a:	463b      	mov	r3, r7
 800c91c:	4628      	mov	r0, r5
 800c91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	f000 b817 	b.w	800c954 <_write_r>

0800c926 <__sseek>:
 800c926:	b510      	push	{r4, lr}
 800c928:	460c      	mov	r4, r1
 800c92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c92e:	f000 f855 	bl	800c9dc <_lseek_r>
 800c932:	1c43      	adds	r3, r0, #1
 800c934:	89a3      	ldrh	r3, [r4, #12]
 800c936:	bf15      	itete	ne
 800c938:	6560      	strne	r0, [r4, #84]	; 0x54
 800c93a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c93e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c942:	81a3      	strheq	r3, [r4, #12]
 800c944:	bf18      	it	ne
 800c946:	81a3      	strhne	r3, [r4, #12]
 800c948:	bd10      	pop	{r4, pc}

0800c94a <__sclose>:
 800c94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c94e:	f000 b813 	b.w	800c978 <_close_r>
	...

0800c954 <_write_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	4d07      	ldr	r5, [pc, #28]	; (800c974 <_write_r+0x20>)
 800c958:	4604      	mov	r4, r0
 800c95a:	4608      	mov	r0, r1
 800c95c:	4611      	mov	r1, r2
 800c95e:	2200      	movs	r2, #0
 800c960:	602a      	str	r2, [r5, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	f7fd f892 	bl	8009a8c <_write>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d102      	bne.n	800c972 <_write_r+0x1e>
 800c96c:	682b      	ldr	r3, [r5, #0]
 800c96e:	b103      	cbz	r3, 800c972 <_write_r+0x1e>
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	200015fc 	.word	0x200015fc

0800c978 <_close_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4d06      	ldr	r5, [pc, #24]	; (800c994 <_close_r+0x1c>)
 800c97c:	2300      	movs	r3, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	f7f5 fe66 	bl	8002654 <_close>
 800c988:	1c43      	adds	r3, r0, #1
 800c98a:	d102      	bne.n	800c992 <_close_r+0x1a>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	b103      	cbz	r3, 800c992 <_close_r+0x1a>
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	200015fc 	.word	0x200015fc

0800c998 <_fstat_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d07      	ldr	r5, [pc, #28]	; (800c9b8 <_fstat_r+0x20>)
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	602b      	str	r3, [r5, #0]
 800c9a6:	f7f5 fe61 	bl	800266c <_fstat>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	d102      	bne.n	800c9b4 <_fstat_r+0x1c>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b103      	cbz	r3, 800c9b4 <_fstat_r+0x1c>
 800c9b2:	6023      	str	r3, [r4, #0]
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	bf00      	nop
 800c9b8:	200015fc 	.word	0x200015fc

0800c9bc <_isatty_r>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4d06      	ldr	r5, [pc, #24]	; (800c9d8 <_isatty_r+0x1c>)
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	602b      	str	r3, [r5, #0]
 800c9c8:	f7f5 fe60 	bl	800268c <_isatty>
 800c9cc:	1c43      	adds	r3, r0, #1
 800c9ce:	d102      	bne.n	800c9d6 <_isatty_r+0x1a>
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	b103      	cbz	r3, 800c9d6 <_isatty_r+0x1a>
 800c9d4:	6023      	str	r3, [r4, #0]
 800c9d6:	bd38      	pop	{r3, r4, r5, pc}
 800c9d8:	200015fc 	.word	0x200015fc

0800c9dc <_lseek_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4d07      	ldr	r5, [pc, #28]	; (800c9fc <_lseek_r+0x20>)
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	4608      	mov	r0, r1
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	602a      	str	r2, [r5, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f7f5 fe59 	bl	80026a2 <_lseek>
 800c9f0:	1c43      	adds	r3, r0, #1
 800c9f2:	d102      	bne.n	800c9fa <_lseek_r+0x1e>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	b103      	cbz	r3, 800c9fa <_lseek_r+0x1e>
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	200015fc 	.word	0x200015fc

0800ca00 <__malloc_lock>:
 800ca00:	4801      	ldr	r0, [pc, #4]	; (800ca08 <__malloc_lock+0x8>)
 800ca02:	f7ff bad5 	b.w	800bfb0 <__retarget_lock_acquire_recursive>
 800ca06:	bf00      	nop
 800ca08:	200015f0 	.word	0x200015f0

0800ca0c <__malloc_unlock>:
 800ca0c:	4801      	ldr	r0, [pc, #4]	; (800ca14 <__malloc_unlock+0x8>)
 800ca0e:	f7ff bad0 	b.w	800bfb2 <__retarget_lock_release_recursive>
 800ca12:	bf00      	nop
 800ca14:	200015f0 	.word	0x200015f0

0800ca18 <_read_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d07      	ldr	r5, [pc, #28]	; (800ca38 <_read_r+0x20>)
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	4608      	mov	r0, r1
 800ca20:	4611      	mov	r1, r2
 800ca22:	2200      	movs	r2, #0
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f7f5 fdf7 	bl	800261a <_read>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_read_r+0x1e>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_read_r+0x1e>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	200015fc 	.word	0x200015fc

0800ca3c <_init>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	bf00      	nop
 800ca40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca42:	bc08      	pop	{r3}
 800ca44:	469e      	mov	lr, r3
 800ca46:	4770      	bx	lr

0800ca48 <_fini>:
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	bf00      	nop
 800ca4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca4e:	bc08      	pop	{r3}
 800ca50:	469e      	mov	lr, r3
 800ca52:	4770      	bx	lr
