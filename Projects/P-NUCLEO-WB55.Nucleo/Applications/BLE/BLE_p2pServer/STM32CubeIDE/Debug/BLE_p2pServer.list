
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151c4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a98  08015308  08015308  00025308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016da0  08016da0  00026da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016da8  08016da8  00026da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016dac  08016dac  00026dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000008  08016db0  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000228  08016fd0  00030228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 000000a4  200002c4  08017069  000302c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000025  20000368  0801710d  00030368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000390  08017132  00030390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000016d0  200003a8  08017143  000303a8  2**3
                  ALLOC
 12 ._user_heap_stack 00001400  20001a78  08017143  00031a78  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 17 .comment      00000043  00000000  00000000  000303d1  2**0
                  CONTENTS, READONLY
 18 .debug_info   0003a6a3  00000000  00000000  00030414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00007ba7  00000000  00000000  0006aab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003430  00000000  00000000  00072660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002813  00000000  00000000  00075a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00031662  00000000  00000000  000782a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0003fb5a  00000000  00000000  000a9905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0011160f  00000000  00000000  000e945f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000f514  00000000  00000000  001faa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000cc  00000000  00000000  00209f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003a8 	.word	0x200003a8
 800015c:	00000000 	.word	0x00000000
 8000160:	080152ec 	.word	0x080152ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003ac 	.word	0x200003ac
 800017c:	080152ec 	.word	0x080152ec

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a6 	b.w	8000f9c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	460d      	mov	r5, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4694      	mov	ip, r2
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0xe2>
 8000cea:	fab2 f382 	clz	r3, r2
 8000cee:	b143      	cbz	r3, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	f1c3 0220 	rsb	r2, r3, #32
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	409c      	lsls	r4, r3
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fa1f f58c 	uxth.w	r5, ip
 8000d0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d18:	fb01 f005 	mul.w	r0, r1, r5
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d20:	eb1c 0202 	adds.w	r2, ip, r2
 8000d24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d28:	f080 811c 	bcs.w	8000f64 <__udivmoddi4+0x290>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f240 8119 	bls.w	8000f64 <__udivmoddi4+0x290>
 8000d32:	3902      	subs	r1, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	b2a4      	uxth	r4, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d46:	fb00 f505 	mul.w	r5, r0, r5
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x90>
 8000d4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x294>
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x294>
 8000d60:	4464      	add	r4, ip
 8000d62:	3802      	subs	r0, #2
 8000d64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11e      	cbz	r6, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	e9c6 4300 	strd	r4, r3, [r6]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0xbc>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f000 80ed 	beq.w	8000f5e <__udivmoddi4+0x28a>
 8000d84:	2100      	movs	r1, #0
 8000d86:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	fab3 f183 	clz	r1, r3
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d149      	bne.n	8000e2c <__udivmoddi4+0x158>
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d302      	bcc.n	8000da2 <__udivmoddi4+0xce>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	f200 80f8 	bhi.w	8000f92 <__udivmoddi4+0x2be>
 8000da2:	1a84      	subs	r4, r0, r2
 8000da4:	eb65 0203 	sbc.w	r2, r5, r3
 8000da8:	2001      	movs	r0, #1
 8000daa:	4617      	mov	r7, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d0e2      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	e9c6 4700 	strd	r4, r7, [r6]
 8000db4:	e7df      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db6:	b902      	cbnz	r2, 8000dba <__udivmoddi4+0xe6>
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8090 	bne.w	8000ee4 <__udivmoddi4+0x210>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd8:	0c22      	lsrs	r2, r4, #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb0e f005 	mul.w	r0, lr, r5
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x124>
 8000de6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x122>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b8>
 8000df6:	4645      	mov	r5, r8
 8000df8:	1a12      	subs	r2, r2, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e00:	fb07 2210 	mls	r2, r7, r0, r2
 8000e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x14e>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x14c>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2c2>
 8000e20:	4610      	mov	r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2a:	e79f      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e42:	40fd      	lsrs	r5, r7
 8000e44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fb09 5518 	mls	r5, r9, r8, r5
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b0>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2b4>
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2b4>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4464      	add	r4, ip
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	b29d      	uxth	r5, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1da>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2ac>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2ac>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46ae      	mov	lr, r5
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x29c>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x298>
 8000ec4:	b156      	cbz	r6, 8000edc <__udivmoddi4+0x208>
 8000ec6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eca:	eb64 040e 	sbc.w	r4, r4, lr
 8000ece:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	e9c6 7400 	strd	r7, r4, [r6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	f1c3 0120 	rsb	r1, r3, #32
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	432a      	orrs	r2, r5
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f04:	fb07 1510 	mls	r5, r7, r0, r1
 8000f08:	0c11      	lsrs	r1, r2, #16
 8000f0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f12:	428d      	cmp	r5, r1
 8000f14:	fa04 f403 	lsl.w	r4, r4, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x258>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f24:	428d      	cmp	r5, r1
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f34:	fb07 1115 	mls	r1, r7, r5, r1
 8000f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f40:	4291      	cmp	r1, r2
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x282>
 8000f44:	eb1c 0202 	adds.w	r2, ip, r2
 8000f48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000f52:	3d02      	subs	r5, #2
 8000f54:	4462      	add	r2, ip
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0xfc>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000f64:	4639      	mov	r1, r7
 8000f66:	e6e6      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x90>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f80:	462b      	mov	r3, r5
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1da>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x258>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b0>
 8000f8c:	3d02      	subs	r5, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x124>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e70a      	b.n	8000dac <__udivmoddi4+0xd8>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x14e>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <AD5697R_write>:
#include <AD5697R.h>
#include <stdint.h>
extern I2C_HandleTypeDef hi2c1;

static HAL_StatusTypeDef AD5697R_write(uint8_t* writeBuffer)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retval;
	uint8_t ex[3];

	ex[0] = *writeBuffer;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	733b      	strb	r3, [r7, #12]
	ex[1] = *(writeBuffer+1);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	737b      	strb	r3, [r7, #13]
	ex[2] = *(writeBuffer+2);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	789b      	ldrb	r3, [r3, #2]
 8000fb8:	73bb      	strb	r3, [r7, #14]
	retval = HAL_I2C_Master_Transmit(&hi2c1, (uint8_t)AD5697R_ADDRESS, ex, 3, 100);
 8000fba:	f107 020c 	add.w	r2, r7, #12
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	2118      	movs	r1, #24
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <AD5697R_write+0x3c>)
 8000fc8:	f007 f9f2 	bl	80083b0 <HAL_I2C_Master_Transmit>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
	return retval;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000049c 	.word	0x2000049c

08000fe0 <AD5697R_setDAC>:

void AD5697R_setDAC(uint8_t port, double Vout)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	ed87 0b00 	vstr	d0, [r7]
 8000fec:	73fb      	strb	r3, [r7, #15]
	uint16_t ADCval = AD5697R_retDACval(Vout);
 8000fee:	ed97 0b00 	vldr	d0, [r7]
 8000ff2:	f000 f839 	bl	8001068 <AD5697R_retDACval>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	82fb      	strh	r3, [r7, #22]

	uint8_t writeBuffer[3];

	if(port == 0){
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <AD5697R_setDAC+0x26>
		writeBuffer[0] = AD5697R_COM_WRUP | AD5697R_PORT_DACA;
 8001000:	2331      	movs	r3, #49	; 0x31
 8001002:	743b      	strb	r3, [r7, #16]
 8001004:	e001      	b.n	800100a <AD5697R_setDAC+0x2a>
	}
	else{
		writeBuffer[0] = AD5697R_COM_WRUP | AD5697R_PORT_DACB;
 8001006:	2338      	movs	r3, #56	; 0x38
 8001008:	743b      	strb	r3, [r7, #16]
	}

	uint8_t a = 0b00000000;
 800100a:	2300      	movs	r3, #0
 800100c:	757b      	strb	r3, [r7, #21]
	uint8_t b = 0b00000000;
 800100e:	2300      	movs	r3, #0
 8001010:	753b      	strb	r3, [r7, #20]

	writeBuffer[1] = a|(ADCval>>4);
 8001012:	8afb      	ldrh	r3, [r7, #22]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	b29b      	uxth	r3, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	7d7b      	ldrb	r3, [r7, #21]
 800101c:	4313      	orrs	r3, r2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	747b      	strb	r3, [r7, #17]
	writeBuffer[2] = b|(ADCval<<4);
 8001022:	8afb      	ldrh	r3, [r7, #22]
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	b25a      	sxtb	r2, r3
 8001028:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800102c:	4313      	orrs	r3, r2
 800102e:	b25b      	sxtb	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	74bb      	strb	r3, [r7, #18]

	AD5697R_write(writeBuffer);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffb1 	bl	8000fa0 <AD5697R_write>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <AD5697R_init>:

void AD5697R_init()
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
	uint8_t writeBuffer[3];


	writeBuffer[0] = AD5697R_COM_PWDN | AD5697R_PWDN_NOOP;
 800104c:	237c      	movs	r3, #124	; 0x7c
 800104e:	713b      	strb	r3, [r7, #4]
	writeBuffer[1] = 0b00000000;
 8001050:	2300      	movs	r3, #0
 8001052:	717b      	strb	r3, [r7, #5]
	writeBuffer[2] = AD5697R_PWDN_NOOP;
 8001054:	233c      	movs	r3, #60	; 0x3c
 8001056:	71bb      	strb	r3, [r7, #6]

	AD5697R_write(writeBuffer);
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffa0 	bl	8000fa0 <AD5697R_write>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <AD5697R_retDACval>:

static uint16_t AD5697R_retDACval(double Vout)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0b00 	vstr	d0, [r7]
	double ADC_val = 0;
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	ADC_val = Vout/2.5*4096;
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <AD5697R_retDACval+0x54>)
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fbb8 	bl	80007fc <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <AD5697R_retDACval+0x58>)
 800109a:	f7ff fa85 	bl	80005a8 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint16_t retVal = (int)ADC_val;
 80010a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010aa:	f7ff fd2d 	bl	8000b08 <__aeabi_d2iz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	81fb      	strh	r3, [r7, #14]

	return retVal;
 80010b2:	89fb      	ldrh	r3, [r7, #14]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40040000 	.word	0x40040000
 80010c0:	40b00000 	.word	0x40b00000

080010c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80010ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80010d2:	4905      	ldr	r1, [pc, #20]	; (80010e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	58000800 	.word	0x58000800

080010ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800112e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4313      	orrs	r3, r2
 8001136:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001148:	68fb      	ldr	r3, [r7, #12]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800115a:	f004 fccb 	bl	8005af4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800115e:	f004 fccf 	bl	8005b00 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001162:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001166:	f7ff ffad 	bl	80010c4 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800116a:	f00c fa31 	bl	800d5d0 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800116e:	f000 f821 	bl	80011b4 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001172:	f000 f8c1 	bl	80012f8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001176:	bf00      	nop
}
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <APPD_EnableCPU2+0x34>)
 8001184:	1d3c      	adds	r4, r7, #4
 8001186:	461d      	mov	r5, r3
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001190:	c403      	stmia	r4!, {r0, r1}
 8001192:	8022      	strh	r2, [r4, #0]
 8001194:	3402      	adds	r4, #2
 8001196:	0c13      	lsrs	r3, r2, #16
 8001198:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800119a:	f00d ff5f 	bl	800f05c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00c fdb4 	bl	800dd0e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80011a6:	bf00      	nop
}
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bdb0      	pop	{r4, r5, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08015308 	.word	0x08015308

080011b4 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	77fb      	strb	r3, [r7, #31]
 80011d8:	e036      	b.n	8001248 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80011da:	7ffb      	ldrb	r3, [r7, #31]
 80011dc:	4a43      	ldr	r2, [pc, #268]	; (80012ec <APPD_SetCPU2GpioConfig+0x138>)
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	799b      	ldrb	r3, [r3, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d02c      	beq.n	8001242 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	4a40      	ldr	r2, [pc, #256]	; (80012ec <APPD_SetCPU2GpioConfig+0x138>)
 80011ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011f0:	4a3f      	ldr	r2, [pc, #252]	; (80012f0 <APPD_SetCPU2GpioConfig+0x13c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d01b      	beq.n	800122e <APPD_SetCPU2GpioConfig+0x7a>
 80011f6:	4a3e      	ldr	r2, [pc, #248]	; (80012f0 <APPD_SetCPU2GpioConfig+0x13c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d821      	bhi.n	8001240 <APPD_SetCPU2GpioConfig+0x8c>
 80011fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001200:	d003      	beq.n	800120a <APPD_SetCPU2GpioConfig+0x56>
 8001202:	4a3c      	ldr	r2, [pc, #240]	; (80012f4 <APPD_SetCPU2GpioConfig+0x140>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d009      	beq.n	800121c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001208:	e01a      	b.n	8001240 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800120a:	7ffb      	ldrb	r3, [r7, #31]
 800120c:	4a37      	ldr	r2, [pc, #220]	; (80012ec <APPD_SetCPU2GpioConfig+0x138>)
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	889a      	ldrh	r2, [r3, #4]
 8001214:	8bbb      	ldrh	r3, [r7, #28]
 8001216:	4313      	orrs	r3, r2
 8001218:	83bb      	strh	r3, [r7, #28]
          break;
 800121a:	e012      	b.n	8001242 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	4a33      	ldr	r2, [pc, #204]	; (80012ec <APPD_SetCPU2GpioConfig+0x138>)
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	889a      	ldrh	r2, [r3, #4]
 8001226:	8b7b      	ldrh	r3, [r7, #26]
 8001228:	4313      	orrs	r3, r2
 800122a:	837b      	strh	r3, [r7, #26]
          break;
 800122c:	e009      	b.n	8001242 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <APPD_SetCPU2GpioConfig+0x138>)
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	889a      	ldrh	r2, [r3, #4]
 8001238:	8b3b      	ldrh	r3, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	833b      	strh	r3, [r7, #24]
          break;
 800123e:	e000      	b.n	8001242 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001240:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	3301      	adds	r3, #1
 8001246:	77fb      	strb	r3, [r7, #31]
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	2b25      	cmp	r3, #37	; 0x25
 800124c:	d9c5      	bls.n	80011da <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800125a:	8bbb      	ldrh	r3, [r7, #28]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d014      	beq.n	800128a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001260:	8bbb      	ldrh	r3, [r7, #28]
 8001262:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff ff41 	bl	80010ec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff ff57 	bl	800111e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f006 fe46 	bl	8007f08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800127c:	8bbb      	ldrh	r3, [r7, #28]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f006 ffaf 	bl	80081e8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800128a:	8b7b      	ldrh	r3, [r7, #26]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d012      	beq.n	80012b6 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001290:	8b7b      	ldrh	r3, [r7, #26]
 8001292:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff ff29 	bl	80010ec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800129a:	2002      	movs	r0, #2
 800129c:	f7ff ff3f 	bl	800111e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <APPD_SetCPU2GpioConfig+0x140>)
 80012a6:	f006 fe2f 	bl	8007f08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <APPD_SetCPU2GpioConfig+0x140>)
 80012b2:	f006 ff99 	bl	80081e8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80012b6:	8b3b      	ldrh	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 80012bc:	8b3b      	ldrh	r3, [r7, #24]
 80012be:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	2004      	movs	r0, #4
 80012c2:	f7ff ff13 	bl	80010ec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80012c6:	2004      	movs	r0, #4
 80012c8:	f7ff ff29 	bl	800111e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <APPD_SetCPU2GpioConfig+0x13c>)
 80012d2:	f006 fe19 	bl	8007f08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80012d6:	8b3b      	ldrh	r3, [r7, #24]
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <APPD_SetCPU2GpioConfig+0x13c>)
 80012de:	f006 ff83 	bl	80081e8 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
}
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	080166fc 	.word	0x080166fc
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000400 	.word	0x48000400

080012f8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80012fc:	bf00      	nop
}
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800130a:	f001 fd31 	bl	8002d70 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 800130e:	bf00      	nop
}
 8001310:	bd80      	pop	{r7, pc}

08001312 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	460b      	mov	r3, r1
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001320:	897a      	ldrh	r2, [r7, #10]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68f9      	ldr	r1, [r7, #12]
 8001326:	2000      	movs	r0, #0
 8001328:	f001 fab0 	bl	800288c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800132c:	bf00      	nop
}
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <LL_C2_PWR_SetPowerMode+0x28>)
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001342:	f023 0207 	bic.w	r2, r3, #7
 8001346:	4905      	ldr	r1, [pc, #20]	; (800135c <LL_C2_PWR_SetPowerMode+0x28>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4313      	orrs	r3, r2
 800134c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58000400 	.word	0x58000400

08001360 <LL_EXTI_EnableIT_32_63>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <LL_EXTI_EnableIT_32_63+0x24>)
 800136a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800136e:	4905      	ldr	r1, [pc, #20]	; (8001384 <LL_EXTI_EnableIT_32_63+0x24>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	58000800 	.word	0x58000800

08001388 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001396:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ae:	4313      	orrs	r3, r2
 80013b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	cafecafe 	.word	0xcafecafe

080013c4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001444:	d101      	bne.n	800144a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800146a:	d101      	bne.n	8001470 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_AHB3_GRP1_EnableClock>:
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <LL_DBGMCU_GetRevisionID+0x18>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	b29b      	uxth	r3, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e0042000 	.word	0xe0042000

080014cc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	605a      	str	r2, [r3, #4]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	615a      	str	r2, [r3, #20]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	615a      	str	r2, [r3, #20]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	609a      	str	r2, [r3, #8]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	619a      	str	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <LL_LPM_EnableSleep+0x1c>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <LL_LPM_EnableSleep+0x1c>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	22ca      	movs	r2, #202	; 0xca
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2253      	movs	r2, #83	; 0x53
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 0207 	bic.w	r2, r3, #7
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <MX_APPE_Config+0x18>)
 8001616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800161a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800161c:	f000 f82e 	bl	800167c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001620:	f000 f86e 	bl	8001700 <Config_HSE>

  return;
 8001624:	bf00      	nop
}
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58004000 	.word	0x58004000

0800162c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001630:	f000 f87a 	bl	8001728 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001634:	f000 f892 	bl	800175c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <MX_APPE_Init+0x30>)
 800163a:	2000      	movs	r0, #0
 800163c:	f000 fea4 	bl	8002388 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001640:	f7ff fd89 	bl	8001156 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001644:	2101      	movs	r1, #1
 8001646:	2001      	movs	r0, #1
 8001648:	f00d fda6 	bl	800f198 <UTIL_LPM_SetOffMode>

  Led_Init();
 800164c:	f000 f9da 	bl	8001a04 <Led_Init>

  Button_Init();
 8001650:	f000 f9df 	bl	8001a12 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001654:	f000 f890 	bl	8001778 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001658:	bf00      	nop
}
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000720 	.word	0x20000720

08001660 <Init_Smps>:

void Init_Smps(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001664:	bf00      	nop
}
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <Init_Exti>:

void Init_Exti(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001672:	2050      	movs	r0, #80	; 0x50
 8001674:	f7ff fe74 	bl	8001360 <LL_EXTI_EnableIT_32_63>

  return;
 8001678:	bf00      	nop
}
 800167a:	bd80      	pop	{r7, pc}

0800167c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001680:	f000 f804 	bl	800168c <Reset_BackupDomain>

  Reset_IPCC();
 8001684:	f000 f81a 	bl	80016bc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001688:	bf00      	nop
}
 800168a:	bd80      	pop	{r7, pc}

0800168c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001690:	f7ff fece 	bl	8001430 <LL_RCC_IsActiveFlag_PINRST>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <Reset_BackupDomain+0x2a>
 800169a:	f7ff fedc 	bl	8001456 <LL_RCC_IsActiveFlag_SFTRST>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d108      	bne.n	80016b6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80016a4:	f007 fa94 	bl	8008bd0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80016a8:	f007 fa92 	bl	8008bd0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80016ac:	f7ff fe9e 	bl	80013ec <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80016b0:	f7ff fead 	bl	800140e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
}
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80016c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80016c4:	f7ff feda 	bl	800147c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80016c8:	213f      	movs	r1, #63	; 0x3f
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <Reset_IPCC+0x40>)
 80016cc:	f7ff ff44 	bl	8001558 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80016d0:	213f      	movs	r1, #63	; 0x3f
 80016d2:	480a      	ldr	r0, [pc, #40]	; (80016fc <Reset_IPCC+0x40>)
 80016d4:	f7ff ff4e 	bl	8001574 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80016d8:	213f      	movs	r1, #63	; 0x3f
 80016da:	4808      	ldr	r0, [pc, #32]	; (80016fc <Reset_IPCC+0x40>)
 80016dc:	f7ff fef6 	bl	80014cc <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80016e0:	213f      	movs	r1, #63	; 0x3f
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <Reset_IPCC+0x40>)
 80016e4:	f7ff ff15 	bl	8001512 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80016e8:	213f      	movs	r1, #63	; 0x3f
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <Reset_IPCC+0x40>)
 80016ec:	f7ff ff00 	bl	80014f0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80016f0:	213f      	movs	r1, #63	; 0x3f
 80016f2:	4802      	ldr	r0, [pc, #8]	; (80016fc <Reset_IPCC+0x40>)
 80016f4:	f7ff ff1f 	bl	8001536 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80016f8:	bf00      	nop
}
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58000c00 	.word	0x58000c00

08001700 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001706:	2000      	movs	r0, #0
 8001708:	f00c f996 	bl	800da38 <OTP_Read>
 800170c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	799b      	ldrb	r3, [r3, #6]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe35 	bl	8001388 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800171e:	bf00      	nop
 8001720:	bf00      	nop
}
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <System_Init>:

static void System_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  Init_Smps();
 800172c:	f7ff ff98 	bl	8001660 <Init_Smps>

  Init_Exti();
 8001730:	f7ff ff9d 	bl	800166e <Init_Exti>

  Init_Rtc();
 8001734:	f000 f802 	bl	800173c <Init_Rtc>

  return;
 8001738:	bf00      	nop
}
 800173a:	bd80      	pop	{r7, pc}

0800173c <Init_Rtc>:

static void Init_Rtc(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <Init_Rtc+0x1c>)
 8001742:	f7ff ff42 	bl	80015ca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001746:	2100      	movs	r1, #0
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <Init_Rtc+0x1c>)
 800174a:	f7ff ff4e 	bl	80015ea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800174e:	4802      	ldr	r0, [pc, #8]	; (8001758 <Init_Rtc+0x1c>)
 8001750:	f7ff ff2e 	bl	80015b0 <LL_RTC_EnableWriteProtection>

  return;
 8001754:	bf00      	nop
}
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40002800 	.word	0x40002800

0800175c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001760:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001764:	f7ff fe2e 	bl	80013c4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001768:	f00d fd04 	bl	800f174 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800176c:	2004      	movs	r0, #4
 800176e:	f7ff fde1 	bl	8001334 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001772:	bf00      	nop
}
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800177e:	f00d fab7 	bl	800ecf0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001782:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <appe_Tl_Init+0x50>)
 8001784:	2100      	movs	r1, #0
 8001786:	2040      	movs	r0, #64	; 0x40
 8001788:	f00d fe32 	bl	800f3f0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <appe_Tl_Init+0x54>)
 800178e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <appe_Tl_Init+0x58>)
 8001792:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	480e      	ldr	r0, [pc, #56]	; (80017d4 <appe_Tl_Init+0x5c>)
 800179a:	f00c fb93 	bl	800dec4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <appe_Tl_Init+0x60>)
 80017a0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <appe_Tl_Init+0x64>)
 80017a4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <appe_Tl_Init+0x68>)
 80017a8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80017aa:	f240 533c 	movw	r3, #1340	; 0x53c
 80017ae:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00d fbdd 	bl	800ef74 <TL_MM_Init>

  TL_Enable();
 80017ba:	f00d fa93 	bl	800ece4 <TL_Enable>

  return;
 80017be:	bf00      	nop
}
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	0800defd 	.word	0x0800defd
 80017cc:	20030734 	.word	0x20030734
 80017d0:	080017e5 	.word	0x080017e5
 80017d4:	080017fd 	.word	0x080017fd
 80017d8:	2003094c 	.word	0x2003094c
 80017dc:	20030840 	.word	0x20030840
 80017e0:	200301f8 	.word	0x200301f8

080017e4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80017ee:	bf00      	nop
}
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	330b      	adds	r3, #11
 800180a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001816:	2b07      	cmp	r3, #7
 8001818:	d860      	bhi.n	80018dc <APPE_SysUserEvtRx+0xe0>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <APPE_SysUserEvtRx+0x24>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001841 	.word	0x08001841
 8001824:	08001883 	.word	0x08001883
 8001828:	08001891 	.word	0x08001891
 800182c:	080018dd 	.word	0x080018dd
 8001830:	080018ad 	.word	0x080018ad
 8001834:	080018bd 	.word	0x080018bd
 8001838:	080018c5 	.word	0x080018c5
 800183c:	080018d5 	.word	0x080018d5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4618      	mov	r0, r3
 8001846:	f00c fa8f 	bl	800dd68 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800184a:	7b3b      	ldrb	r3, [r7, #12]
 800184c:	4619      	mov	r1, r3
 800184e:	7b7b      	ldrb	r3, [r7, #13]
 8001850:	461a      	mov	r2, r3
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	4824      	ldr	r0, [pc, #144]	; (80018e8 <APPE_SysUserEvtRx+0xec>)
 8001856:	f00e fe45 	bl	80104e4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800185a:	7c3b      	ldrb	r3, [r7, #16]
 800185c:	4619      	mov	r1, r3
 800185e:	4823      	ldr	r0, [pc, #140]	; (80018ec <APPE_SysUserEvtRx+0xf0>)
 8001860:	f00e fe40 	bl	80104e4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001864:	7dbb      	ldrb	r3, [r7, #22]
 8001866:	4619      	mov	r1, r3
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	461a      	mov	r2, r3
 800186c:	7e3b      	ldrb	r3, [r7, #24]
 800186e:	4820      	ldr	r0, [pc, #128]	; (80018f0 <APPE_SysUserEvtRx+0xf4>)
 8001870:	f00e fe38 	bl	80104e4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001874:	481f      	ldr	r0, [pc, #124]	; (80018f4 <APPE_SysUserEvtRx+0xf8>)
 8001876:	f00e fe35 	bl	80104e4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f870 	bl	8001960 <APPE_SysEvtReadyProcessing>
    break;
 8001880:	e02d      	b.n	80018de <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001882:	481d      	ldr	r0, [pc, #116]	; (80018f8 <APPE_SysUserEvtRx+0xfc>)
 8001884:	f00e fe2e 	bl	80104e4 <iprintf>
    APPE_SysEvtError(pPayload);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f843 	bl	8001914 <APPE_SysEvtError>
    break;
 800188e:	e026      	b.n	80018de <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001890:	481a      	ldr	r0, [pc, #104]	; (80018fc <APPE_SysUserEvtRx+0x100>)
 8001892:	f00e fe95 	bl	80105c0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800189a:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4816      	ldr	r0, [pc, #88]	; (8001900 <APPE_SysUserEvtRx+0x104>)
 80018a6:	f00e fe1d 	bl	80104e4 <iprintf>
    break;
 80018aa:	e018      	b.n	80018de <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <APPE_SysUserEvtRx+0x108>)
 80018b6:	f00e fe15 	bl	80104e4 <iprintf>
    break;
 80018ba:	e010      	b.n	80018de <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80018bc:	4812      	ldr	r0, [pc, #72]	; (8001908 <APPE_SysUserEvtRx+0x10c>)
 80018be:	f00e fe11 	bl	80104e4 <iprintf>
    break;
 80018c2:	e00c      	b.n	80018de <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	480f      	ldr	r0, [pc, #60]	; (800190c <APPE_SysUserEvtRx+0x110>)
 80018ce:	f00e fe09 	bl	80104e4 <iprintf>
    break;
 80018d2:	e004      	b.n	80018de <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80018d4:	480e      	ldr	r0, [pc, #56]	; (8001910 <APPE_SysUserEvtRx+0x114>)
 80018d6:	f00e fe05 	bl	80104e4 <iprintf>
    break;
 80018da:	e000      	b.n	80018de <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80018dc:	bf00      	nop
  }

  return;
 80018de:	bf00      	nop
}
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	08015324 	.word	0x08015324
 80018ec:	08015348 	.word	0x08015348
 80018f0:	08015364 	.word	0x08015364
 80018f4:	0801537c 	.word	0x0801537c
 80018f8:	0801539c 	.word	0x0801539c
 80018fc:	080153c0 	.word	0x080153c0
 8001900:	08015410 	.word	0x08015410
 8001904:	08015438 	.word	0x08015438
 8001908:	08015474 	.word	0x08015474
 800190c:	08015498 	.word	0x08015498
 8001910:	080154d4 	.word	0x080154d4

08001914 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	330b      	adds	r3, #11
 8001922:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3302      	adds	r3, #2
 8001928:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <APPE_SysEvtError+0x40>)
 8001932:	f00e fdd7 	bl	80104e4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <APPE_SysEvtError+0x44>)
 8001940:	f00e fe3e 	bl	80105c0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001944:	e003      	b.n	800194e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <APPE_SysEvtError+0x48>)
 8001948:	f00e fe3a 	bl	80105c0 <puts>
  return;
 800194c:	bf00      	nop
}
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	080154f8 	.word	0x080154f8
 8001958:	08015528 	.word	0x08015528
 800195c:	08015564 	.word	0x08015564

08001960 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	330b      	adds	r3, #11
 8001980:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	3302      	adds	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d11e      	bne.n	80019ce <APPE_SysEvtReadyProcessing+0x6e>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <APPE_SysEvtReadyProcessing+0x94>)
 8001992:	f00e fe15 	bl	80105c0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001996:	f7ff fbf1 	bl	800117c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800199a:	230d      	movs	r3, #13
 800199c:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800199e:	237f      	movs	r3, #127	; 0x7f
 80019a0:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80019a2:	f7ff fd85 	bl	80014b0 <LL_DBGMCU_GetRevisionID>
 80019a6:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80019a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019aa:	4813      	ldr	r0, [pc, #76]	; (80019f8 <APPE_SysEvtReadyProcessing+0x98>)
 80019ac:	f00e fd9a 	bl	80104e4 <iprintf>

    config_param.RevisionID = RevisionID;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00c f9be 	bl	800dd3c <SHCI_C2_Config>

    APP_BLE_Init();
 80019c0:	f001 ffc6 	bl	8003950 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2001      	movs	r0, #1
 80019c8:	f00d fbe6 	bl	800f198 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80019cc:	e00e      	b.n	80019ec <APPE_SysEvtReadyProcessing+0x8c>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d106      	bne.n	80019e4 <APPE_SysEvtReadyProcessing+0x84>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <APPE_SysEvtReadyProcessing+0x9c>)
 80019d8:	f00e fd84 	bl	80104e4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
  return;
 80019e2:	e003      	b.n	80019ec <APPE_SysEvtReadyProcessing+0x8c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <APPE_SysEvtReadyProcessing+0xa0>)
 80019e6:	f00e fd7d 	bl	80104e4 <iprintf>
  return;
 80019ea:	bf00      	nop
}
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	0801559c 	.word	0x0801559c
 80019f8:	080155b8 	.word	0x080155b8
 80019fc:	080155dc 	.word	0x080155dc
 8001a00:	08015610 	.word	0x08015610

08001a04 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /**
   * Leds Initialization
   */
#endif

  return;
 8001a08:	bf00      	nop
}
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <Button_Init>:

static void Button_Init( void )
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001a16:	2101      	movs	r1, #1
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f003 fecf 	bl	80057bc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2001      	movs	r0, #1
 8001a22:	f003 fecb 	bl	80057bc <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001a26:	2101      	movs	r1, #1
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f003 fec7 	bl	80057bc <BSP_PB_Init>
#endif

  return;
 8001a2e:	bf00      	nop
}
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3a:	f004 f80f 	bl	8005a5c <HAL_GetTick>
 8001a3e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4a:	d00a      	beq.n	8001a62 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001a4c:	f004 f846 	bl	8005adc <HAL_GetTickFreq>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5a:	e002      	b.n	8001a62 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001a5c:	f7ff fd98 	bl	8001590 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001a60:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001a62:	f003 fffb 	bl	8005a5c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d8f4      	bhi.n	8001a5c <HAL_Delay+0x2a>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f00d fbb8 	bl	800f1f8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001a90:	bf00      	nop
}
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f00d fba6 	bl	800f1f8 <UTIL_SEQ_Run>

  return;
 8001aac:	bf00      	nop
}
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2040      	movs	r0, #64	; 0x40
 8001ac0:	f00d fcb8 	bl	800f434 <UTIL_SEQ_SetTask>
  return;
 8001ac4:	bf00      	nop
}
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f00d fd19 	bl	800f50c <UTIL_SEQ_SetEvt>
  return;
 8001ada:	bf00      	nop
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001aea:	2002      	movs	r0, #2
 8001aec:	f00d fd2e 	bl	800f54c <UTIL_SEQ_WaitEvt>
  return;
 8001af0:	bf00      	nop
}
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_EXTI_Callback+0x1e>
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	dc0d      	bgt.n	8001b28 <HAL_GPIO_EXTI_Callback+0x30>
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <HAL_GPIO_EXTI_Callback+0x24>
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001b16:	f002 fa29 	bl	8003f6c <APP_BLE_Key_Button1_Action>
      break; 
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8001b1c:	f002 fa2c 	bl	8003f78 <APP_BLE_Key_Button2_Action>
      break; 
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001b22:	f002 fa31 	bl	8003f88 <APP_BLE_Key_Button3_Action>
      break;
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001b28:	bf00      	nop

  }
  return;
 8001b2a:	bf00      	nop
}
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <LL_EXTI_EnableIT_0_31>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <LL_EXTI_EnableIT_0_31+0x24>)
 8001b3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b42:	4905      	ldr	r1, [pc, #20]	; (8001b58 <LL_EXTI_EnableIT_0_31+0x24>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	58000800 	.word	0x58000800

08001b5c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4904      	ldr	r1, [pc, #16]	; (8001b7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]

}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	58000800 	.word	0x58000800

08001b80 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <ReadRtcSsrValue+0x3c>)
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <ReadRtcSsrValue+0x3c>)
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001b96:	e005      	b.n	8001ba4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <ReadRtcSsrValue+0x3c>)
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1f5      	bne.n	8001b98 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001bac:	683b      	ldr	r3, [r7, #0]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40002800 	.word	0x40002800

08001bc0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460a      	mov	r2, r1
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001bd0:	79ba      	ldrb	r2, [r7, #6]
 8001bd2:	491d      	ldr	r1, [pc, #116]	; (8001c48 <LinkTimerAfter+0x88>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3315      	adds	r3, #21
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d009      	beq.n	8001bfe <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <LinkTimerAfter+0x88>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3314      	adds	r3, #20
 8001bfa:	79fa      	ldrb	r2, [r7, #7]
 8001bfc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	4911      	ldr	r1, [pc, #68]	; (8001c48 <LinkTimerAfter+0x88>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3315      	adds	r3, #21
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001c12:	79fa      	ldrb	r2, [r7, #7]
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <LinkTimerAfter+0x88>)
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	3314      	adds	r3, #20
 8001c22:	79ba      	ldrb	r2, [r7, #6]
 8001c24:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001c26:	79ba      	ldrb	r2, [r7, #6]
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <LinkTimerAfter+0x88>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3315      	adds	r3, #21
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	701a      	strb	r2, [r3, #0]

  return;
 8001c3a:	bf00      	nop
}
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000228 	.word	0x20000228

08001c4c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	71fb      	strb	r3, [r7, #7]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <LinkTimerBefore+0xb8>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	79ba      	ldrb	r2, [r7, #6]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d032      	beq.n	8001cce <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001c68:	79ba      	ldrb	r2, [r7, #6]
 8001c6a:	4927      	ldr	r1, [pc, #156]	; (8001d08 <LinkTimerBefore+0xbc>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	3314      	adds	r3, #20
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	4922      	ldr	r1, [pc, #136]	; (8001d08 <LinkTimerBefore+0xbc>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	3315      	adds	r3, #21
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001c90:	79fa      	ldrb	r2, [r7, #7]
 8001c92:	491d      	ldr	r1, [pc, #116]	; (8001d08 <LinkTimerBefore+0xbc>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3315      	adds	r3, #21
 8001ca0:	79ba      	ldrb	r2, [r7, #6]
 8001ca2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	4918      	ldr	r1, [pc, #96]	; (8001d08 <LinkTimerBefore+0xbc>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3314      	adds	r3, #20
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001cb8:	79ba      	ldrb	r2, [r7, #6]
 8001cba:	4913      	ldr	r1, [pc, #76]	; (8001d08 <LinkTimerBefore+0xbc>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3314      	adds	r3, #20
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ccc:	e014      	b.n	8001cf8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	490d      	ldr	r1, [pc, #52]	; (8001d08 <LinkTimerBefore+0xbc>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	3315      	adds	r3, #21
 8001cde:	79ba      	ldrb	r2, [r7, #6]
 8001ce0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ce2:	79ba      	ldrb	r2, [r7, #6]
 8001ce4:	4908      	ldr	r1, [pc, #32]	; (8001d08 <LinkTimerBefore+0xbc>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	3314      	adds	r3, #20
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	701a      	strb	r2, [r3, #0]
  return;
 8001cf6:	bf00      	nop
}
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	200002b8 	.word	0x200002b8
 8001d08:	20000228 	.word	0x20000228

08001d0c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d16:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <linkTimer+0x144>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d118      	bne.n	8001d52 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d20:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <linkTimer+0x144>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <linkTimer+0x148>)
 8001d28:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001d2a:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <linkTimer+0x144>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	4949      	ldr	r1, [pc, #292]	; (8001e58 <linkTimer+0x14c>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3315      	adds	r3, #21
 8001d40:	2206      	movs	r2, #6
 8001d42:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d44:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <linkTimer+0x150>)
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	81fb      	strh	r3, [r7, #14]
 8001d50:	e078      	b.n	8001e44 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001d52:	f000 f909 	bl	8001f68 <ReturnTimeElapsed>
 8001d56:	4603      	mov	r3, r0
 8001d58:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	493e      	ldr	r1, [pc, #248]	; (8001e58 <linkTimer+0x14c>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3308      	adds	r3, #8
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	4419      	add	r1, r3
 8001d72:	4839      	ldr	r0, [pc, #228]	; (8001e58 <linkTimer+0x14c>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4403      	add	r3, r0
 8001d7e:	3308      	adds	r3, #8
 8001d80:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	4934      	ldr	r1, [pc, #208]	; (8001e58 <linkTimer+0x14c>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	3308      	adds	r3, #8
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <linkTimer+0x144>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <linkTimer+0x14c>)
 8001da0:	460b      	mov	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	440b      	add	r3, r1
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	3308      	adds	r3, #8
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d337      	bcc.n	8001e24 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <linkTimer+0x144>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001dba:	7b7a      	ldrb	r2, [r7, #13]
 8001dbc:	4926      	ldr	r1, [pc, #152]	; (8001e58 <linkTimer+0x14c>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3315      	adds	r3, #21
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001dce:	e013      	b.n	8001df8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001dd0:	7b7a      	ldrb	r2, [r7, #13]
 8001dd2:	4921      	ldr	r1, [pc, #132]	; (8001e58 <linkTimer+0x14c>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	3315      	adds	r3, #21
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001de4:	7b7a      	ldrb	r2, [r7, #13]
 8001de6:	491c      	ldr	r1, [pc, #112]	; (8001e58 <linkTimer+0x14c>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3315      	adds	r3, #21
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d00b      	beq.n	8001e16 <linkTimer+0x10a>
 8001dfe:	7b3a      	ldrb	r2, [r7, #12]
 8001e00:	4915      	ldr	r1, [pc, #84]	; (8001e58 <linkTimer+0x14c>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3308      	adds	r3, #8
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d2dc      	bcs.n	8001dd0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001e16:	7b7a      	ldrb	r2, [r7, #13]
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fecf 	bl	8001bc0 <LinkTimerAfter>
 8001e22:	e00f      	b.n	8001e44 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <linkTimer+0x144>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff0c 	bl	8001c4c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <linkTimer+0x144>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <linkTimer+0x148>)
 8001e3c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <linkTimer+0x144>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001e44:	89fb      	ldrh	r3, [r7, #14]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200002b8 	.word	0x200002b8
 8001e54:	200002b9 	.word	0x200002b9
 8001e58:	20000228 	.word	0x20000228
 8001e5c:	200002bc 	.word	0x200002bc

08001e60 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	71fb      	strb	r3, [r7, #7]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <UnlinkTimer+0xf8>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d111      	bne.n	8001ea0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <UnlinkTimer+0xf8>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <UnlinkTimer+0xfc>)
 8001e84:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	4935      	ldr	r1, [pc, #212]	; (8001f60 <UnlinkTimer+0x100>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	3315      	adds	r3, #21
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <UnlinkTimer+0xf8>)
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e03e      	b.n	8001f1e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001ea0:	79fa      	ldrb	r2, [r7, #7]
 8001ea2:	492f      	ldr	r1, [pc, #188]	; (8001f60 <UnlinkTimer+0x100>)
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	3314      	adds	r3, #20
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	492a      	ldr	r1, [pc, #168]	; (8001f60 <UnlinkTimer+0x100>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3315      	adds	r3, #21
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001ec8:	79f9      	ldrb	r1, [r7, #7]
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	4824      	ldr	r0, [pc, #144]	; (8001f60 <UnlinkTimer+0x100>)
 8001ece:	460b      	mov	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	440b      	add	r3, r1
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4403      	add	r3, r0
 8001ed8:	3315      	adds	r3, #21
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2d8      	uxtb	r0, r3
 8001ede:	4920      	ldr	r1, [pc, #128]	; (8001f60 <UnlinkTimer+0x100>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3315      	adds	r3, #21
 8001eec:	4602      	mov	r2, r0
 8001eee:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d013      	beq.n	8001f1e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001ef6:	79f9      	ldrb	r1, [r7, #7]
 8001ef8:	7bba      	ldrb	r2, [r7, #14]
 8001efa:	4819      	ldr	r0, [pc, #100]	; (8001f60 <UnlinkTimer+0x100>)
 8001efc:	460b      	mov	r3, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	440b      	add	r3, r1
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4403      	add	r3, r0
 8001f06:	3314      	adds	r3, #20
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b2d8      	uxtb	r0, r3
 8001f0c:	4914      	ldr	r1, [pc, #80]	; (8001f60 <UnlinkTimer+0x100>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	3314      	adds	r3, #20
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	490f      	ldr	r1, [pc, #60]	; (8001f60 <UnlinkTimer+0x100>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <UnlinkTimer+0xf8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d107      	bne.n	8001f4c <UnlinkTimer+0xec>
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d104      	bne.n	8001f4c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <UnlinkTimer+0x104>)
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	601a      	str	r2, [r3, #0]
  }

  return;
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
}
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	200002b8 	.word	0x200002b8
 8001f5c:	200002b9 	.word	0x200002b9
 8001f60:	20000228 	.word	0x20000228
 8001f64:	200002bc 	.word	0x200002bc

08001f68 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <ReturnTimeElapsed+0x70>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d026      	beq.n	8001fc6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001f78:	f7ff fe02 	bl	8001b80 <ReadRtcSsrValue>
 8001f7c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <ReturnTimeElapsed+0x70>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d805      	bhi.n	8001f94 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <ReturnTimeElapsed+0x70>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	e00a      	b.n	8001faa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <ReturnTimeElapsed+0x74>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <ReturnTimeElapsed+0x70>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <ReturnTimeElapsed+0x78>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <ReturnTimeElapsed+0x7c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	40d3      	lsrs	r3, r2
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	e001      	b.n	8001fca <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	b29b      	uxth	r3, r3
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200002bc 	.word	0x200002bc
 8001fdc:	200003ca 	.word	0x200003ca
 8001fe0:	200003c9 	.word	0x200003c9
 8001fe4:	200003c8 	.word	0x200003c8

08001fe8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d108      	bne.n	800200a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ff8:	f7ff fdc2 	bl	8001b80 <ReadRtcSsrValue>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a24      	ldr	r2, [pc, #144]	; (8002090 <RestartWakeupCounter+0xa8>)
 8002000:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002002:	2003      	movs	r0, #3
 8002004:	f005 fbeb 	bl	80077de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002008:	e03e      	b.n	8002088 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d803      	bhi.n	8002018 <RestartWakeupCounter+0x30>
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <RestartWakeupCounter+0xac>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d002      	beq.n	800201e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	3b01      	subs	r3, #1
 800201c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800201e:	bf00      	nop
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <RestartWakeupCounter+0xb0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f7      	beq.n	8002020 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <RestartWakeupCounter+0xb0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <RestartWakeupCounter+0xb0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002044:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <RestartWakeupCounter+0xb4>)
 8002048:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800204c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800204e:	2003      	movs	r0, #3
 8002050:	f005 fbd3 	bl	80077fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <RestartWakeupCounter+0xb8>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	88fa      	ldrh	r2, [r7, #6]
 800205e:	4910      	ldr	r1, [pc, #64]	; (80020a0 <RestartWakeupCounter+0xb8>)
 8002060:	4313      	orrs	r3, r2
 8002062:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002064:	f7ff fd8c 	bl	8001b80 <ReadRtcSsrValue>
 8002068:	4603      	mov	r3, r0
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <RestartWakeupCounter+0xa8>)
 800206c:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <RestartWakeupCounter+0xb0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <RestartWakeupCounter+0xb0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002080:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002082:	f3af 8000 	nop.w
  return ;
 8002086:	bf00      	nop
}
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200002bc 	.word	0x200002bc
 8002094:	200003c8 	.word	0x200003c8
 8002098:	200003c4 	.word	0x200003c4
 800209c:	58000800 	.word	0x58000800
 80020a0:	40002800 	.word	0x40002800

080020a4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <RescheduleTimerList+0x124>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d108      	bne.n	80020ca <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80020b8:	bf00      	nop
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <RescheduleTimerList+0x128>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f7      	bne.n	80020ba <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80020ca:	4b40      	ldr	r3, [pc, #256]	; (80021cc <RescheduleTimerList+0x128>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <RescheduleTimerList+0x128>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80020de:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <RescheduleTimerList+0x12c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	493b      	ldr	r1, [pc, #236]	; (80021d4 <RescheduleTimerList+0x130>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	3308      	adds	r3, #8
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80020f8:	f7ff ff36 	bl	8001f68 <ReturnTimeElapsed>
 80020fc:	4603      	mov	r3, r0
 80020fe:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	429a      	cmp	r2, r3
 8002106:	d205      	bcs.n	8002114 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <RescheduleTimerList+0x134>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e04d      	b.n	80021b0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4a31      	ldr	r2, [pc, #196]	; (80021dc <RescheduleTimerList+0x138>)
 8002118:	8812      	ldrh	r2, [r2, #0]
 800211a:	b292      	uxth	r2, r2
 800211c:	4413      	add	r3, r2
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4293      	cmp	r3, r2
 8002124:	d906      	bls.n	8002134 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <RescheduleTimerList+0x138>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <RescheduleTimerList+0x134>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e03d      	b.n	80021b0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	b29a      	uxth	r2, r3
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <RescheduleTimerList+0x134>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002144:	e034      	b.n	80021b0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	4922      	ldr	r1, [pc, #136]	; (80021d4 <RescheduleTimerList+0x130>)
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	3308      	adds	r3, #8
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	429a      	cmp	r2, r3
 800215c:	d20a      	bcs.n	8002174 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	491c      	ldr	r1, [pc, #112]	; (80021d4 <RescheduleTimerList+0x130>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3308      	adds	r3, #8
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e013      	b.n	800219c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	4917      	ldr	r1, [pc, #92]	; (80021d4 <RescheduleTimerList+0x130>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	3308      	adds	r3, #8
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	1ac9      	subs	r1, r1, r3
 800218c:	4811      	ldr	r0, [pc, #68]	; (80021d4 <RescheduleTimerList+0x130>)
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4403      	add	r3, r0
 8002198:	3308      	adds	r3, #8
 800219a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	490d      	ldr	r1, [pc, #52]	; (80021d4 <RescheduleTimerList+0x130>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	3315      	adds	r3, #21
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d1c7      	bne.n	8002146 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80021b6:	89bb      	ldrh	r3, [r7, #12]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff15 	bl	8001fe8 <RestartWakeupCounter>

  return ;
 80021be:	bf00      	nop
}
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40002800 	.word	0x40002800
 80021cc:	200003c4 	.word	0x200003c4
 80021d0:	200002b8 	.word	0x200002b8
 80021d4:	20000228 	.word	0x20000228
 80021d8:	200002c0 	.word	0x200002c0
 80021dc:	200003cc 	.word	0x200003cc

080021e0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e6:	f3ef 8310 	mrs	r3, PRIMASK
 80021ea:	617b      	str	r3, [r7, #20]
  return(result);
 80021ec:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80021f0:	b672      	cpsid	i
}
 80021f2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80021f4:	4b5f      	ldr	r3, [pc, #380]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	22ca      	movs	r2, #202	; 0xca
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2253      	movs	r2, #83	; 0x53
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8002208:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b58      	ldr	r3, [pc, #352]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800221c:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002224:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002228:	4954      	ldr	r1, [pc, #336]	; (800237c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	330c      	adds	r3, #12
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d172      	bne.n	8002324 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800223e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002242:	494e      	ldr	r1, [pc, #312]	; (800237c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002252:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002256:	4949      	ldr	r1, [pc, #292]	; (800237c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3310      	adds	r3, #16
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d050      	beq.n	8002314 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002272:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002276:	4941      	ldr	r1, [pc, #260]	; (800237c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	330d      	adds	r3, #13
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d126      	bne.n	80022da <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800228c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fde4 	bl	8001e60 <UnlinkTimer>
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f383 8810 	msr	PRIMASK, r3
}
 80022a2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80022a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022a8:	4934      	ldr	r1, [pc, #208]	; (800237c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fa4e 	bl	8002760 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	22ca      	movs	r2, #202	; 0xca
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2253      	movs	r2, #83	; 0x53
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
 80022d8:	e014      	b.n	8002304 <HW_TS_RTC_Wakeup_Handler+0x124>
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f383 8810 	msr	PRIMASK, r3
}
 80022e4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80022e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f9ac 	bl	8002648 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	22ca      	movs	r2, #202	; 0xca
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2253      	movs	r2, #83	; 0x53
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	4619      	mov	r1, r3
 800230c:	69b8      	ldr	r0, [r7, #24]
 800230e:	f000 faaf 	bl	8002870 <HW_TS_RTC_Int_AppNot>
 8002312:	e025      	b.n	8002360 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8002314:	f7ff fec6 	bl	80020a4 <RescheduleTimerList>
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	e01d      	b.n	8002360 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002324:	bf00      	nop
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f7      	beq.n	8002326 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800234a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 800234e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f383 8810 	msr	PRIMASK, r3
}
 800235e:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	22ff      	movs	r2, #255	; 0xff
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800236a:	bf00      	nop
}
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200003c4 	.word	0x200003c4
 8002378:	200002b8 	.word	0x200002b8
 800237c:	20000228 	.word	0x20000228
 8002380:	200002c0 	.word	0x200002c0
 8002384:	58000800 	.word	0x58000800

08002388 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002394:	4a64      	ldr	r2, [pc, #400]	; (8002528 <HW_TS_Init+0x1a0>)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HW_TS_Init+0x1a0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	22ca      	movs	r2, #202	; 0xca
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
 80023a4:	4b60      	ldr	r3, [pc, #384]	; (8002528 <HW_TS_Init+0x1a0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2253      	movs	r2, #83	; 0x53
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80023ae:	4b5f      	ldr	r3, [pc, #380]	; (800252c <HW_TS_Init+0x1a4>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4a5e      	ldr	r2, [pc, #376]	; (800252c <HW_TS_Init+0x1a4>)
 80023b4:	f043 0320 	orr.w	r3, r3, #32
 80023b8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80023ba:	4b5c      	ldr	r3, [pc, #368]	; (800252c <HW_TS_Init+0x1a4>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f1c3 0304 	rsb	r3, r3, #4
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HW_TS_Init+0x1a8>)
 80023ce:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80023d0:	4b56      	ldr	r3, [pc, #344]	; (800252c <HW_TS_Init+0x1a4>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023d8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80023dc:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d101      	bne.n	80023f4 <HW_TS_Init+0x6c>
  {
    return 32U;
 80023f0:	2220      	movs	r2, #32
 80023f2:	e003      	b.n	80023fc <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	40d3      	lsrs	r3, r2
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HW_TS_Init+0x1ac>)
 8002406:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <HW_TS_Init+0x1a4>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	b29b      	uxth	r3, r3
 800240e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002412:	b29b      	uxth	r3, r3
 8002414:	3301      	adds	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HW_TS_Init+0x1b0>)
 800241a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HW_TS_Init+0x1b0>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	3b01      	subs	r3, #1
 8002422:	4a44      	ldr	r2, [pc, #272]	; (8002534 <HW_TS_Init+0x1ac>)
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <HW_TS_Init+0x1a8>)
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	40d3      	lsrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800243c:	4293      	cmp	r3, r2
 800243e:	d904      	bls.n	800244a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002440:	4b3e      	ldr	r3, [pc, #248]	; (800253c <HW_TS_Init+0x1b4>)
 8002442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002446:	801a      	strh	r2, [r3, #0]
 8002448:	e003      	b.n	8002452 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	b29a      	uxth	r2, r3
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HW_TS_Init+0x1b4>)
 8002450:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002452:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002456:	f7ff fb81 	bl	8001b5c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800245a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800245e:	f7ff fb69 	bl	8001b34 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d143      	bne.n	80024f0 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002468:	4b35      	ldr	r3, [pc, #212]	; (8002540 <HW_TS_Init+0x1b8>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800246e:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HW_TS_Init+0x1bc>)
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002476:	2300      	movs	r3, #0
 8002478:	77fb      	strb	r3, [r7, #31]
 800247a:	e00c      	b.n	8002496 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800247c:	7ffa      	ldrb	r2, [r7, #31]
 800247e:	4932      	ldr	r1, [pc, #200]	; (8002548 <HW_TS_Init+0x1c0>)
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	330c      	adds	r3, #12
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002490:	7ffb      	ldrb	r3, [r7, #31]
 8002492:	3301      	adds	r3, #1
 8002494:	77fb      	strb	r3, [r7, #31]
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d9ef      	bls.n	800247c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HW_TS_Init+0x1c4>)
 800249e:	2206      	movs	r2, #6
 80024a0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80024a2:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HW_TS_Init+0x1a0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HW_TS_Init+0x1a0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HW_TS_Init+0x1a0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HW_TS_Init+0x1a0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024ca:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HW_TS_Init+0x1c8>)
 80024ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024d2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80024d4:	2003      	movs	r0, #3
 80024d6:	f005 f990 	bl	80077fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HW_TS_Init+0x1a0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HW_TS_Init+0x1a0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	e00a      	b.n	8002506 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HW_TS_Init+0x1a0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002500:	2003      	movs	r0, #3
 8002502:	f005 f96c 	bl	80077de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HW_TS_Init+0x1a0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002510:	2200      	movs	r2, #0
 8002512:	2103      	movs	r1, #3
 8002514:	2003      	movs	r0, #3
 8002516:	f005 f920 	bl	800775a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800251a:	2003      	movs	r0, #3
 800251c:	f005 f937 	bl	800778e <HAL_NVIC_EnableIRQ>

  return;
 8002520:	bf00      	nop
}
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200003c4 	.word	0x200003c4
 800252c:	40002800 	.word	0x40002800
 8002530:	200003c8 	.word	0x200003c8
 8002534:	200003c9 	.word	0x200003c9
 8002538:	200003ca 	.word	0x200003ca
 800253c:	200003cc 	.word	0x200003cc
 8002540:	200002c0 	.word	0x200002c0
 8002544:	200002bc 	.word	0x200002bc
 8002548:	20000228 	.word	0x20000228
 800254c:	200002b8 	.word	0x200002b8
 8002550:	58000800 	.word	0x58000800

08002554 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002554:	b480      	push	{r7}
 8002556:	b08b      	sub	sp, #44	; 0x2c
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800256a:	f3ef 8310 	mrs	r3, PRIMASK
 800256e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002570:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002572:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002578:	e004      	b.n	8002584 <HW_TS_Create+0x30>
  {
    loop++;
 800257a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800257e:	3301      	adds	r3, #1
 8002580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002588:	2b05      	cmp	r3, #5
 800258a:	d80c      	bhi.n	80025a6 <HW_TS_Create+0x52>
 800258c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002590:	492c      	ldr	r1, [pc, #176]	; (8002644 <HW_TS_Create+0xf0>)
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	330c      	adds	r3, #12
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e9      	bne.n	800257a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d038      	beq.n	8002620 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80025ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80025b2:	4924      	ldr	r1, [pc, #144]	; (8002644 <HW_TS_Create+0xf0>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	330c      	adds	r3, #12
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f383 8810 	msr	PRIMASK, r3
}
 80025ce:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80025d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80025d4:	491b      	ldr	r1, [pc, #108]	; (8002644 <HW_TS_Create+0xf0>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3310      	adds	r3, #16
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80025e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80025ea:	4916      	ldr	r1, [pc, #88]	; (8002644 <HW_TS_Create+0xf0>)
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	330d      	adds	r3, #13
 80025f8:	79fa      	ldrb	r2, [r7, #7]
 80025fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80025fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002600:	4910      	ldr	r1, [pc, #64]	; (8002644 <HW_TS_Create+0xf0>)
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002616:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800261e:	e008      	b.n	8002632 <HW_TS_Create+0xde>
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f383 8810 	msr	PRIMASK, r3
}
 800262a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002636:	4618      	mov	r0, r3
 8002638:	372c      	adds	r7, #44	; 0x2c
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000228 	.word	0x20000228

08002648 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002652:	f3ef 8310 	mrs	r3, PRIMASK
 8002656:	60fb      	str	r3, [r7, #12]
  return(result);
 8002658:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800265a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
}
 800265e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002660:	2003      	movs	r0, #3
 8002662:	f005 f8a2 	bl	80077aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HW_TS_Stop+0x100>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	22ca      	movs	r2, #202	; 0xca
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
 8002670:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HW_TS_Stop+0x100>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2253      	movs	r2, #83	; 0x53
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800267a:	79fa      	ldrb	r2, [r7, #7]
 800267c:	4933      	ldr	r1, [pc, #204]	; (800274c <HW_TS_Stop+0x104>)
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	330c      	adds	r3, #12
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d148      	bne.n	8002724 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fbe2 	bl	8001e60 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800269c:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HW_TS_Stop+0x108>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d135      	bne.n	8002714 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HW_TS_Stop+0x10c>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d108      	bne.n	80026c8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80026b6:	bf00      	nop
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HW_TS_Stop+0x100>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f7      	bne.n	80026b8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HW_TS_Stop+0x100>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HW_TS_Stop+0x100>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026da:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80026dc:	bf00      	nop
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HW_TS_Stop+0x100>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f7      	beq.n	80026de <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HW_TS_Stop+0x100>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HW_TS_Stop+0x100>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002702:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HW_TS_Stop+0x110>)
 8002706:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800270a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800270c:	2003      	movs	r0, #3
 800270e:	f005 f874 	bl	80077fa <HAL_NVIC_ClearPendingIRQ>
 8002712:	e007      	b.n	8002724 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HW_TS_Stop+0x114>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	7cfa      	ldrb	r2, [r7, #19]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8002720:	f7ff fcc0 	bl	80020a4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HW_TS_Stop+0x100>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	22ff      	movs	r2, #255	; 0xff
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800272e:	2003      	movs	r0, #3
 8002730:	f005 f82d 	bl	800778e <HAL_NVIC_EnableIRQ>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002740:	bf00      	nop
}
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200003c4 	.word	0x200003c4
 800274c:	20000228 	.word	0x20000228
 8002750:	200002b8 	.word	0x200002b8
 8002754:	40002800 	.word	0x40002800
 8002758:	58000800 	.word	0x58000800
 800275c:	200002b9 	.word	0x200002b9

08002760 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800276c:	79fa      	ldrb	r2, [r7, #7]
 800276e:	493c      	ldr	r1, [pc, #240]	; (8002860 <HW_TS_Start+0x100>)
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	330c      	adds	r3, #12
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d103      	bne.n	800278c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff5e 	bl	8002648 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278c:	f3ef 8310 	mrs	r3, PRIMASK
 8002790:	60fb      	str	r3, [r7, #12]
  return(result);
 8002792:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002796:	b672      	cpsid	i
}
 8002798:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800279a:	2003      	movs	r0, #3
 800279c:	f005 f805 	bl	80077aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80027a0:	4b30      	ldr	r3, [pc, #192]	; (8002864 <HW_TS_Start+0x104>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	22ca      	movs	r2, #202	; 0xca
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
 80027aa:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <HW_TS_Start+0x104>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2253      	movs	r2, #83	; 0x53
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80027b4:	79fa      	ldrb	r2, [r7, #7]
 80027b6:	492a      	ldr	r1, [pc, #168]	; (8002860 <HW_TS_Start+0x100>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	330c      	adds	r3, #12
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80027c8:	79fa      	ldrb	r2, [r7, #7]
 80027ca:	4925      	ldr	r1, [pc, #148]	; (8002860 <HW_TS_Start+0x100>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	3308      	adds	r3, #8
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	4920      	ldr	r1, [pc, #128]	; (8002860 <HW_TS_Start+0x100>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3304      	adds	r3, #4
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fa8a 	bl	8001d0c <linkTimer>
 80027f8:	4603      	mov	r3, r0
 80027fa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HW_TS_Start+0x108>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HW_TS_Start+0x10c>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	7c7a      	ldrb	r2, [r7, #17]
 800280a:	429a      	cmp	r2, r3
 800280c:	d002      	beq.n	8002814 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800280e:	f7ff fc49 	bl	80020a4 <RescheduleTimerList>
 8002812:	e013      	b.n	800283c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002814:	79fa      	ldrb	r2, [r7, #7]
 8002816:	4912      	ldr	r1, [pc, #72]	; (8002860 <HW_TS_Start+0x100>)
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	3308      	adds	r3, #8
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	8a7b      	ldrh	r3, [r7, #18]
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	1ac9      	subs	r1, r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <HW_TS_Start+0x100>)
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4403      	add	r3, r0
 8002838:	3308      	adds	r3, #8
 800283a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HW_TS_Start+0x104>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002846:	2003      	movs	r0, #3
 8002848:	f004 ffa1 	bl	800778e <HAL_NVIC_EnableIRQ>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002858:	bf00      	nop
}
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000228 	.word	0x20000228
 8002864:	200003c4 	.word	0x200003c4
 8002868:	200002b8 	.word	0x200002b8
 800286c:	200002b9 	.word	0x200002b9

08002870 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	460b      	mov	r3, r1
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4798      	blx	r3

  return;
 8002882:	bf00      	nop
}
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	4613      	mov	r3, r2
 800289c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HW_UART_Transmit_DMA+0x26>
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d00f      	beq.n	80028d0 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80028b0:	e01d      	b.n	80028ee <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HW_UART_Transmit_DMA+0xa4>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80028b8:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <HW_UART_Transmit_DMA+0xa8>)
 80028ba:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HW_UART_Transmit_DMA+0xac>)
 80028bc:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80028be:	89bb      	ldrh	r3, [r7, #12]
 80028c0:	461a      	mov	r2, r3
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	481b      	ldr	r0, [pc, #108]	; (8002934 <HW_UART_Transmit_DMA+0xa8>)
 80028c6:	f008 f9bb 	bl	800ac40 <HAL_UART_Transmit_DMA>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]
            break;
 80028ce:	e00e      	b.n	80028ee <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80028d0:	4a1a      	ldr	r2, [pc, #104]	; (800293c <HW_UART_Transmit_DMA+0xb0>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HW_UART_Transmit_DMA+0xb4>)
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HW_UART_Transmit_DMA+0xb8>)
 80028da:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80028dc:	89bb      	ldrh	r3, [r7, #12]
 80028de:	461a      	mov	r2, r3
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	4817      	ldr	r0, [pc, #92]	; (8002940 <HW_UART_Transmit_DMA+0xb4>)
 80028e4:	f008 f9ac 	bl	800ac40 <HAL_UART_Transmit_DMA>
 80028e8:	4603      	mov	r3, r0
 80028ea:	75fb      	strb	r3, [r7, #23]
            break;
 80028ec:	bf00      	nop
    }

    switch (hal_status)
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d817      	bhi.n	8002924 <HW_UART_Transmit_DMA+0x98>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HW_UART_Transmit_DMA+0x70>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	08002913 	.word	0x08002913
 8002904:	08002919 	.word	0x08002919
 8002908:	0800291f 	.word	0x0800291f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800290c:	2300      	movs	r3, #0
 800290e:	75bb      	strb	r3, [r7, #22]
            break;
 8002910:	e009      	b.n	8002926 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002912:	2301      	movs	r3, #1
 8002914:	75bb      	strb	r3, [r7, #22]
            break;
 8002916:	e006      	b.n	8002926 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002918:	2302      	movs	r3, #2
 800291a:	75bb      	strb	r3, [r7, #22]
            break;
 800291c:	e003      	b.n	8002926 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800291e:	2303      	movs	r3, #3
 8002920:	75bb      	strb	r3, [r7, #22]
            break;
 8002922:	e000      	b.n	8002926 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002924:	bf00      	nop
    }

    return hw_status;
 8002926:	7dbb      	ldrb	r3, [r7, #22]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200003d0 	.word	0x200003d0
 8002934:	200005bc 	.word	0x200005bc
 8002938:	40013800 	.word	0x40013800
 800293c:	200003d4 	.word	0x200003d4
 8002940:	2000052c 	.word	0x2000052c
 8002944:	40008000 	.word	0x40008000

08002948 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <HAL_UART_TxCpltCallback+0x4c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00a      	beq.n	8002970 <HAL_UART_TxCpltCallback+0x28>
 800295a:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <HAL_UART_TxCpltCallback+0x50>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d10f      	bne.n	8002980 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_UART_TxCpltCallback+0x54>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_UART_TxCpltCallback+0x54>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4798      	blx	r3
            }
            break;
 800296e:	e009      	b.n	8002984 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_UART_TxCpltCallback+0x58>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_UART_TxCpltCallback+0x58>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4798      	blx	r3
            }
            break;
 800297e:	e003      	b.n	8002988 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002980:	bf00      	nop
 8002982:	e002      	b.n	800298a <HAL_UART_TxCpltCallback+0x42>
            break;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <HAL_UART_TxCpltCallback+0x42>
            break;
 8002988:	bf00      	nop
    }

    return;
 800298a:	bf00      	nop
}
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40008000 	.word	0x40008000
 8002998:	40013800 	.word	0x40013800
 800299c:	200003d0 	.word	0x200003d0
 80029a0:	200003d4 	.word	0x200003d4

080029a4 <LL_RCC_LSE_SetDriveCapability>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f023 0218 	bic.w	r2, r3, #24
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_AHB1_GRP1_EnableClock>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f4:	68fb      	ldr	r3, [r7, #12]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_AHB2_GRP1_EnableClock>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	0000      	movs	r0, r0
	...

08002a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a3c:	f002 ffa0 	bl	8005980 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a40:	f7fe fde6 	bl	8001610 <MX_APPE_Config>
  /* USER CODE BEGIN Init */
  //while(HAL_ADCEx_Calibration_Start(&hadc1, 0) != HAL_OK);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a44:	f000 f83e 	bl	8002ac4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a48:	f000 f8aa 	bl	8002ba0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002a4c:	f000 f97c 	bl	8002d48 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a50:	f000 fa88 	bl	8002f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a54:	f000 fa60 	bl	8002f18 <MX_DMA_Init>
  MX_RF_Init();
 8002a58:	f000 f9d8 	bl	8002e0c <MX_RF_Init>
  MX_RTC_Init();
 8002a5c:	f000 f9f4 	bl	8002e48 <MX_RTC_Init>
  MX_RNG_Init();
 8002a60:	f000 f9dc 	bl	8002e1c <MX_RNG_Init>
  MX_I2C1_Init();
 8002a64:	f000 f930 	bl	8002cc8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002a68:	f000 f8ba 	bl	8002be0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002a6c:	f000 fa16 	bl	8002e9c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_SetTickFreq(HAL_TICK_FREQ_1KHZ);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f003 f80b 	bl	8005a8c <HAL_SetTickFreq>
  while(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK);
 8002a76:	bf00      	nop
 8002a78:	217f      	movs	r1, #127	; 0x7f
 8002a7a:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <main+0x88>)
 8002a7c:	f004 fc9e 	bl	80073bc <HAL_ADCEx_Calibration_Start>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f8      	bne.n	8002a78 <main+0x40>
  //HAL_GPIO_WritePin(LED1_OUT_GPIO_Port, LED1_OUT_Pin, GPIO_PIN_SET);
  AD5697R_init();
 8002a86:	f7fe fade 	bl	8001046 <AD5697R_init>
  AD5697R_setDAC(0,0.5);
 8002a8a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8002ab8 <main+0x80>
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe faa6 	bl	8000fe0 <AD5697R_setDAC>
  AD5697R_setDAC(1,0.5);
 8002a94:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002ab8 <main+0x80>
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f7fe faa1 	bl	8000fe0 <AD5697R_setDAC>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa6:	f005 fb9f 	bl	80081e8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002aaa:	f7fe fdbf 	bl	800162c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002aae:	f7fe ffe5 	bl	8001a7c <MX_APPE_Process>
 8002ab2:	e7fc      	b.n	8002aae <main+0x76>
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	00000000 	.word	0x00000000
 8002abc:	3fe00000 	.word	0x3fe00000
 8002ac0:	200003d8 	.word	0x200003d8

08002ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b09a      	sub	sp, #104	; 0x68
 8002ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aca:	f107 0320 	add.w	r3, r7, #32
 8002ace:	2248      	movs	r2, #72	; 0x48
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f00d fe74 	bl	80107c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	615a      	str	r2, [r3, #20]
 8002ae8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002aea:	f006 f871 	bl	8008bd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff ff58 	bl	80029a4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <SystemClock_Config+0xd8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <SystemClock_Config+0xd8>)
 8002afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <SystemClock_Config+0xd8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002b10:	2347      	movs	r3, #71	; 0x47
 8002b12:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002b24:	2301      	movs	r3, #1
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b28:	2340      	movs	r3, #64	; 0x40
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b30:	2302      	movs	r3, #2
 8002b32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002b46:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b4e:	f107 0320 	add.w	r3, r7, #32
 8002b52:	4618      	mov	r0, r3
 8002b54:	f006 fbd0 	bl	80092f8 <HAL_RCC_OscConfig>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b5e:	f000 fa41 	bl	8002fe4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002b62:	236f      	movs	r3, #111	; 0x6f
 8002b64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002b66:	2302      	movs	r3, #2
 8002b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f006 ff2c 	bl	80099e0 <HAL_RCC_ClockConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002b8e:	f000 fa29 	bl	8002fe4 <Error_Handler>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3768      	adds	r7, #104	; 0x68
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	58000400 	.word	0x58000400

08002ba0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b094      	sub	sp, #80	; 0x50
 8002ba4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	2250      	movs	r2, #80	; 0x50
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f00d fe07 	bl	80107c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002bb2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002bb6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f007 fb46 	bl	800a25a <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002bd4:	f000 fa06 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002bd8:	bf00      	nop
 8002bda:	3750      	adds	r7, #80	; 0x50
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002be6:	463b      	mov	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
 8002bf4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002bf8:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <MX_ADC1_Init+0xdc>)
 8002bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c16:	2204      	movs	r2, #4
 8002c18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c28:	2202      	movs	r2, #2
 8002c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c56:	4818      	ldr	r0, [pc, #96]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c58:	f003 f98e 	bl	8005f78 <HAL_ADC_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002c62:	f000 f9bf 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <MX_ADC1_Init+0xe0>)
 8002c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c72:	237f      	movs	r3, #127	; 0x7f
 8002c74:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c76:	2304      	movs	r3, #4
 8002c78:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c7e:	463b      	mov	r3, r7
 8002c80:	4619      	mov	r1, r3
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002c84:	f003 fd7e 	bl	8006784 <HAL_ADC_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002c8e:	f000 f9a9 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <MX_ADC1_Init+0xe4>)
 8002c94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c96:	230c      	movs	r3, #12
 8002c98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <MX_ADC1_Init+0xd8>)
 8002ca0:	f003 fd70 	bl	8006784 <HAL_ADC_ConfigChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8002caa:	f000 f99b 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200003d8 	.word	0x200003d8
 8002cbc:	50040000 	.word	0x50040000
 8002cc0:	3ef08000 	.word	0x3ef08000
 8002cc4:	32601000 	.word	0x32601000

08002cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <MX_I2C1_Init+0x78>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <MX_I2C1_Init+0x7c>)
 8002cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002cd8:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d02:	480e      	ldr	r0, [pc, #56]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002d04:	f005 fac4 	bl	8008290 <HAL_I2C_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d0e:	f000 f969 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d12:	2100      	movs	r1, #0
 8002d14:	4809      	ldr	r0, [pc, #36]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002d16:	f005 fe3d 	bl	8008994 <HAL_I2CEx_ConfigAnalogFilter>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d20:	f000 f960 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d24:	2100      	movs	r1, #0
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_I2C1_Init+0x74>)
 8002d28:	f005 fe7f 	bl	8008a2a <HAL_I2CEx_ConfigDigitalFilter>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d32:	f000 f957 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000049c 	.word	0x2000049c
 8002d40:	40005400 	.word	0x40005400
 8002d44:	00707cbb 	.word	0x00707cbb

08002d48 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_IPCC_Init+0x20>)
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <MX_IPCC_Init+0x24>)
 8002d50:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <MX_IPCC_Init+0x20>)
 8002d54:	f005 feb6 	bl	8008ac4 <HAL_IPCC_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d5e:	f000 f941 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200004f0 	.word	0x200004f0
 8002d6c:	58000c00 	.word	0x58000c00

08002d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d74:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d76:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <MX_USART1_UART_Init+0x98>)
 8002d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002da2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002da6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dba:	4812      	ldr	r0, [pc, #72]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002dbc:	f007 fef0 	bl	800aba0 <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002dc6:	f000 f90d 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002dce:	f009 f8b6 	bl	800bf3e <HAL_UARTEx_SetTxFifoThreshold>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002dd8:	f000 f904 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4809      	ldr	r0, [pc, #36]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002de0:	f009 f8eb 	bl	800bfba <HAL_UARTEx_SetRxFifoThreshold>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002dea:	f000 f8fb 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002df0:	f009 f86c 	bl	800becc <HAL_UARTEx_DisableFifoMode>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002dfa:	f000 f8f3 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200005bc 	.word	0x200005bc
 8002e08:	40013800 	.word	0x40013800

08002e0c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <MX_RNG_Init+0x24>)
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <MX_RNG_Init+0x28>)
 8002e24:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_RNG_Init+0x24>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <MX_RNG_Init+0x24>)
 8002e2e:	f007 fc9b 	bl	800a768 <HAL_RNG_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002e38:	f000 f8d4 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	2000070c 	.word	0x2000070c
 8002e44:	58001000 	.word	0x58001000

08002e48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <MX_RTC_Init+0x50>)
 8002e50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e7e:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_RTC_Init+0x4c>)
 8002e80:	f007 fca7 	bl	800a7d2 <HAL_RTC_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002e8a:	f000 f8ab 	bl	8002fe4 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000720 	.word	0x20000720
 8002e98:	40002800 	.word	0x40002800

08002e9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <MX_SPI2_Init+0x78>)
 8002ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002eb6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002eba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ece:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002eea:	2207      	movs	r2, #7
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002efa:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_SPI2_Init+0x74>)
 8002efc:	f007 fd8d 	bl	800aa1a <HAL_SPI_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002f06:	f000 f86d 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000744 	.word	0x20000744
 8002f14:	40003800 	.word	0x40003800

08002f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f1c:	2004      	movs	r0, #4
 8002f1e:	f7ff fd57 	bl	80029d0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f22:	2001      	movs	r0, #1
 8002f24:	f7ff fd54 	bl	80029d0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f7ff fd51 	bl	80029d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	200b      	movs	r0, #11
 8002f34:	f004 fc11 	bl	800775a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f38:	200b      	movs	r0, #11
 8002f3a:	f004 fc28 	bl	800778e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	210f      	movs	r1, #15
 8002f42:	200e      	movs	r0, #14
 8002f44:	f004 fc09 	bl	800775a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f48:	200e      	movs	r0, #14
 8002f4a:	f004 fc20 	bl	800778e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	210f      	movs	r1, #15
 8002f52:	203a      	movs	r0, #58	; 0x3a
 8002f54:	f004 fc01 	bl	800775a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002f58:	203a      	movs	r0, #58	; 0x3a
 8002f5a:	f004 fc18 	bl	800778e <HAL_NVIC_EnableIRQ>

}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f78:	2004      	movs	r0, #4
 8002f7a:	f7ff fd42 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f7ff fd3f 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7ff fd3c 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_EN_GPIO_Port, LDO_EN_Pin, GPIO_PIN_SET);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f92:	f005 f929 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002f96:	2201      	movs	r2, #1
 8002f98:	2120      	movs	r1, #32
 8002f9a:	4811      	ldr	r0, [pc, #68]	; (8002fe0 <MX_GPIO_Init+0x7c>)
 8002f9c:	f005 f924 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LDO_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LDO_EN_GPIO_Port, &GPIO_InitStruct);
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb8:	f004 ffa6 	bl	8007f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <MX_GPIO_Init+0x7c>)
 8002fd2:	f004 ff99 	bl	8007f08 <HAL_GPIO_Init>

}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	48000800 	.word	0x48000800

08002fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_RCC_EnableRTC>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_AHB2_GRP1_EnableClock>:
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4313      	orrs	r3, r2
 800302a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_AHB3_GRP1_EnableClock>:
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_APB1_GRP1_EnableClock>:
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4313      	orrs	r3, r2
 800308e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800309c:	68fb      	ldr	r3, [r7, #12]
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_APB1_GRP2_EnableClock>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4313      	orrs	r3, r2
 80030c0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4013      	ands	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030ce:	68fb      	ldr	r3, [r7, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_APB2_GRP1_EnableClock>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4013      	ands	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003112:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003116:	f7ff ff96 	bl	8003046 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	202e      	movs	r0, #46	; 0x2e
 8003120:	f004 fb1b 	bl	800775a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003124:	202e      	movs	r0, #46	; 0x2e
 8003126:	f004 fb32 	bl	800778e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b09c      	sub	sp, #112	; 0x70
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003148:	f107 030c 	add.w	r3, r7, #12
 800314c:	2250      	movs	r2, #80	; 0x50
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f00d fb35 	bl	80107c0 <memset>
  if(hadc->Instance==ADC1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a37      	ldr	r2, [pc, #220]	; (8003238 <HAL_ADC_MspInit+0x108>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d166      	bne.n	800322e <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003164:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 8003166:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	4618      	mov	r0, r3
 8003172:	f007 f872 	bl	800a25a <HAL_RCCEx_PeriphCLKConfig>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800317c:	f7ff ff32 	bl	8002fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003180:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003184:	f7ff ff46 	bl	8003014 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff ff43 	bl	8003014 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800318e:	2004      	movs	r0, #4
 8003190:	f7ff ff40 	bl	8003014 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    PA8     ------> ADC1_IN15
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003194:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003198:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800319a:	2303      	movs	r3, #3
 800319c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ac:	f004 feac 	bl	8007f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031b0:	2310      	movs	r3, #16
 80031b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b4:	2303      	movs	r3, #3
 80031b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031c0:	4619      	mov	r1, r3
 80031c2:	481e      	ldr	r0, [pc, #120]	; (800323c <HAL_ADC_MspInit+0x10c>)
 80031c4:	f004 fea0 	bl	8007f08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_ADC_MspInit+0x114>)
 80031cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031d0:	2205      	movs	r2, #5
 80031d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031da:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031e0:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031f8:	2220      	movs	r2, #32
 80031fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_ADC_MspInit+0x110>)
 80031fe:	2200      	movs	r2, #0
 8003200:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003202:	480f      	ldr	r0, [pc, #60]	; (8003240 <HAL_ADC_MspInit+0x110>)
 8003204:	f004 fb0e 	bl	8007824 <HAL_DMA_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800320e:	f7ff fee9 	bl	8002fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_ADC_MspInit+0x110>)
 8003216:	64da      	str	r2, [r3, #76]	; 0x4c
 8003218:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_ADC_MspInit+0x110>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	2012      	movs	r0, #18
 8003224:	f004 fa99 	bl	800775a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003228:	2012      	movs	r0, #18
 800322a:	f004 fab0 	bl	800778e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800322e:	bf00      	nop
 8003230:	3770      	adds	r7, #112	; 0x70
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	50040000 	.word	0x50040000
 800323c:	48000800 	.word	0x48000800
 8003240:	2000043c 	.word	0x2000043c
 8003244:	40020008 	.word	0x40020008

08003248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b09c      	sub	sp, #112	; 0x70
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	2250      	movs	r2, #80	; 0x50
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f00d faa9 	bl	80107c0 <memset>
  if(hi2c->Instance==I2C1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_I2C_MspInit+0x88>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d126      	bne.n	80032c6 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003278:	2304      	movs	r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800327c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003282:	f107 030c 	add.w	r3, r7, #12
 8003286:	4618      	mov	r0, r3
 8003288:	f006 ffe7 	bl	800a25a <HAL_RCCEx_PeriphCLKConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003292:	f7ff fea7 	bl	8002fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	2002      	movs	r0, #2
 8003298:	f7ff febc 	bl	8003014 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800329c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032a2:	2312      	movs	r3, #18
 80032a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a6:	2301      	movs	r3, #1
 80032a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032aa:	2303      	movs	r3, #3
 80032ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032ae:	2304      	movs	r3, #4
 80032b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032b6:	4619      	mov	r1, r3
 80032b8:	4806      	ldr	r0, [pc, #24]	; (80032d4 <HAL_I2C_MspInit+0x8c>)
 80032ba:	f004 fe25 	bl	8007f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032c2:	f7ff fed9 	bl	8003078 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032c6:	bf00      	nop
 80032c8:	3770      	adds	r7, #112	; 0x70
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40005400 	.word	0x40005400
 80032d4:	48000400 	.word	0x48000400

080032d8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <HAL_IPCC_MspInit+0x44>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d113      	bne.n	8003312 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80032ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80032ee:	f7ff feaa 	bl	8003046 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	202c      	movs	r0, #44	; 0x2c
 80032f8:	f004 fa2f 	bl	800775a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80032fc:	202c      	movs	r0, #44	; 0x2c
 80032fe:	f004 fa46 	bl	800778e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	202d      	movs	r0, #45	; 0x2d
 8003308:	f004 fa27 	bl	800775a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800330c:	202d      	movs	r0, #45	; 0x2d
 800330e:	f004 fa3e 	bl	800778e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	58000c00 	.word	0x58000c00

08003320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b0a0      	sub	sp, #128	; 0x80
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	2250      	movs	r2, #80	; 0x50
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f00d fa3d 	bl	80107c0 <memset>
  if(huart->Instance==LPUART1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a68      	ldr	r2, [pc, #416]	; (80034ec <HAL_UART_MspInit+0x1cc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d16e      	bne.n	800342e <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003350:	2302      	movs	r3, #2
 8003352:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	4618      	mov	r0, r3
 800335e:	f006 ff7c 	bl	800a25a <HAL_RCCEx_PeriphCLKConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003368:	f7ff fe3c 	bl	8002fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800336c:	2001      	movs	r0, #1
 800336e:	f7ff fe9c 	bl	80030aa <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff fe4e 	bl	8003014 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003378:	230c      	movs	r3, #12
 800337a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003388:	2308      	movs	r3, #8
 800338a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003390:	4619      	mov	r1, r3
 8003392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003396:	f004 fdb7 	bl	8007f08 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800339a:	4b55      	ldr	r3, [pc, #340]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 800339c:	4a55      	ldr	r2, [pc, #340]	; (80034f4 <HAL_UART_MspInit+0x1d4>)
 800339e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033a2:	2211      	movs	r2, #17
 80033a4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033a6:	4b52      	ldr	r3, [pc, #328]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033a8:	2210      	movs	r2, #16
 80033aa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ac:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033b2:	4b4f      	ldr	r3, [pc, #316]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b8:	4b4d      	ldr	r3, [pc, #308]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80033c4:	4b4a      	ldr	r3, [pc, #296]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80033d0:	4847      	ldr	r0, [pc, #284]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 80033d2:	f004 fa27 	bl	8007824 <HAL_DMA_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80033dc:	f7ff fe02 	bl	8002fe4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80033e0:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80033e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80033e6:	2300      	movs	r3, #0
 80033e8:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80033fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80033fe:	4619      	mov	r1, r3
 8003400:	483b      	ldr	r0, [pc, #236]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 8003402:	f004 fd41 	bl	8007e88 <HAL_DMAEx_ConfigMuxSync>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800340c:	f7ff fdea 	bl	8002fe4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a37      	ldr	r2, [pc, #220]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 8003414:	679a      	str	r2, [r3, #120]	; 0x78
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <HAL_UART_MspInit+0x1d0>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800341c:	2200      	movs	r2, #0
 800341e:	2100      	movs	r1, #0
 8003420:	2025      	movs	r0, #37	; 0x25
 8003422:	f004 f99a 	bl	800775a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003426:	2025      	movs	r0, #37	; 0x25
 8003428:	f004 f9b1 	bl	800778e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800342c:	e05a      	b.n	80034e4 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <HAL_UART_MspInit+0x1d8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d155      	bne.n	80034e4 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003438:	2301      	movs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	4618      	mov	r0, r3
 8003446:	f006 ff08 	bl	800a25a <HAL_RCCEx_PeriphCLKConfig>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8003450:	f7ff fdc8 	bl	8002fe4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003454:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003458:	f7ff fe40 	bl	80030dc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345c:	2002      	movs	r0, #2
 800345e:	f7ff fdd9 	bl	8003014 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003462:	23c0      	movs	r3, #192	; 0xc0
 8003464:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346a:	2301      	movs	r3, #1
 800346c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003472:	2307      	movs	r3, #7
 8003474:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800347a:	4619      	mov	r1, r3
 800347c:	481f      	ldr	r0, [pc, #124]	; (80034fc <HAL_UART_MspInit+0x1dc>)
 800347e:	f004 fd43 	bl	8007f08 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 8003484:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_UART_MspInit+0x1e4>)
 8003486:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 800348a:	220f      	movs	r2, #15
 800348c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 8003490:	2210      	movs	r2, #16
 8003492:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034b8:	4811      	ldr	r0, [pc, #68]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 80034ba:	f004 f9b3 	bl	8007824 <HAL_DMA_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80034c4:	f7ff fd8e 	bl	8002fe4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 80034cc:	679a      	str	r2, [r3, #120]	; 0x78
 80034ce:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <HAL_UART_MspInit+0x1e0>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	2024      	movs	r0, #36	; 0x24
 80034da:	f004 f93e 	bl	800775a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034de:	2024      	movs	r0, #36	; 0x24
 80034e0:	f004 f955 	bl	800778e <HAL_NVIC_EnableIRQ>
}
 80034e4:	bf00      	nop
 80034e6:	3780      	adds	r7, #128	; 0x80
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40008000 	.word	0x40008000
 80034f0:	2000064c 	.word	0x2000064c
 80034f4:	40020044 	.word	0x40020044
 80034f8:	40013800 	.word	0x40013800
 80034fc:	48000400 	.word	0x48000400
 8003500:	200006ac 	.word	0x200006ac
 8003504:	40020444 	.word	0x40020444

08003508 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b096      	sub	sp, #88	; 0x58
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003510:	f107 0308 	add.w	r3, r7, #8
 8003514:	2250      	movs	r2, #80	; 0x50
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f00d f951 	bl	80107c0 <memset>
  if(hrng->Instance==RNG)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <HAL_RNG_MspInit+0x50>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d113      	bne.n	8003550 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800352e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003534:	f107 0308 	add.w	r3, r7, #8
 8003538:	4618      	mov	r0, r3
 800353a:	f006 fe8e 	bl	800a25a <HAL_RCCEx_PeriphCLKConfig>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003544:	f7ff fd4e 	bl	8002fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003548:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800354c:	f7ff fd7b 	bl	8003046 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003550:	bf00      	nop
 8003552:	3758      	adds	r7, #88	; 0x58
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	58001000 	.word	0x58001000

0800355c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b096      	sub	sp, #88	; 0x58
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003564:	f107 0308 	add.w	r3, r7, #8
 8003568:	2250      	movs	r2, #80	; 0x50
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f00d f927 	bl	80107c0 <memset>
  if(hrtc->Instance==RTC)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_RTC_MspInit+0x6c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d120      	bne.n	80035be <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800357c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003580:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4618      	mov	r0, r3
 800358e:	f006 fe64 	bl	800a25a <HAL_RCCEx_PeriphCLKConfig>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003598:	f7ff fd24 	bl	8002fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800359c:	f7ff fd29 	bl	8002ff2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80035a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035a4:	f7ff fd68 	bl	8003078 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2003      	movs	r0, #3
 80035ae:	f004 f8d4 	bl	800775a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80035b2:	2003      	movs	r0, #3
 80035b4:	f004 f8eb 	bl	800778e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f007 f9f8 	bl	800a9ae <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	3758      	adds	r7, #88	; 0x58
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40002800 	.word	0x40002800

080035cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <HAL_SPI_MspInit+0xa4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d13b      	bne.n	8003666 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035f2:	f7ff fd41 	bl	8003078 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f6:	2004      	movs	r0, #4
 80035f8:	f7ff fd0c 	bl	8003014 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7ff fd09 	bl	8003014 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003602:	2302      	movs	r3, #2
 8003604:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8003612:	2303      	movs	r3, #3
 8003614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	4619      	mov	r1, r3
 800361c:	4815      	ldr	r0, [pc, #84]	; (8003674 <HAL_SPI_MspInit+0xa8>)
 800361e:	f004 fc73 	bl	8007f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003622:	2304      	movs	r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003632:	2305      	movs	r3, #5
 8003634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	4619      	mov	r1, r3
 800363c:	480d      	ldr	r0, [pc, #52]	; (8003674 <HAL_SPI_MspInit+0xa8>)
 800363e:	f004 fc63 	bl	8007f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003654:	2305      	movs	r3, #5
 8003656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	4619      	mov	r1, r3
 800365e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003662:	f004 fc51 	bl	8007f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003666:	bf00      	nop
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40003800 	.word	0x40003800
 8003674:	48000800 	.word	0x48000800

08003678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <HardFault_Handler+0x4>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <MemManage_Handler+0x4>

08003692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003696:	e7fe      	b.n	8003696 <BusFault_Handler+0x4>

08003698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800369c:	e7fe      	b.n	800369c <UsageFault_Handler+0x4>

0800369e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f002 f9b2 	bl	8005a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80036d0:	f004 f8a1 	bl	8007816 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80036dc:	f7fe fd80 	bl	80021e0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	HAL_ADC_ConvCpltCallback(&hadc1);
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <DMA1_Channel1_IRQHandler+0x14>)
 80036ea:	f001 fd51 	bl	8005190 <HAL_ADC_ConvCpltCallback>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036ee:	4803      	ldr	r0, [pc, #12]	; (80036fc <DMA1_Channel1_IRQHandler+0x18>)
 80036f0:	f004 fa79 	bl	8007be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200003d8 	.word	0x200003d8
 80036fc:	2000043c 	.word	0x2000043c

08003700 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <DMA1_Channel4_IRQHandler+0x10>)
 8003706:	f004 fa6e 	bl	8007be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	2000064c 	.word	0x2000064c

08003714 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  HAL_ADC_ConvCpltCallback(&hadc1);
 8003718:	4803      	ldr	r0, [pc, #12]	; (8003728 <ADC1_IRQHandler+0x14>)
 800371a:	f001 fd39 	bl	8005190 <HAL_ADC_ConvCpltCallback>
  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800371e:	4802      	ldr	r0, [pc, #8]	; (8003728 <ADC1_IRQHandler+0x14>)
 8003720:	f002 fe5b 	bl	80063da <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200003d8 	.word	0x200003d8

0800372c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003730:	4802      	ldr	r0, [pc, #8]	; (800373c <USART1_IRQHandler+0x10>)
 8003732:	f007 fb17 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200005bc 	.word	0x200005bc

08003740 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <LPUART1_IRQHandler+0x10>)
 8003746:	f007 fb0d 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2000052c 	.word	0x2000052c

08003754 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003758:	f001 fe6e 	bl	8005438 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}

08003760 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003764:	f001 fe9e 	bl	80054a4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}

0800376c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003770:	f004 fd6a 	bl	8008248 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}

08003778 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <DMA2_Channel4_IRQHandler+0x10>)
 800377e:	f004 fa32 	bl	8007be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200006ac 	.word	0x200006ac

0800378c <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8003790:	2010      	movs	r0, #16
 8003792:	f004 fd41 	bl	8008218 <HAL_GPIO_EXTI_IRQHandler>
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}

0800379a <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800379e:	2001      	movs	r0, #1
 80037a0:	f004 fd3a 	bl	8008218 <HAL_GPIO_EXTI_IRQHandler>
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80037ac:	2002      	movs	r0, #2
 80037ae:	f004 fd33 	bl	8008218 <HAL_GPIO_EXTI_IRQHandler>
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
	return 1;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <_kill>:

int _kill(int pid, int sig)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037d0:	f00d f848 	bl	8010864 <__errno>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2216      	movs	r2, #22
 80037d8:	601a      	str	r2, [r3, #0]
	return -1;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <_exit>:

void _exit (int status)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037ee:	f04f 31ff 	mov.w	r1, #4294967295
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ffe7 	bl	80037c6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037f8:	e7fe      	b.n	80037f8 <_exit+0x12>

080037fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e00a      	b.n	8003822 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800380c:	f3af 8000 	nop.w
 8003810:	4601      	mov	r1, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	60ba      	str	r2, [r7, #8]
 8003818:	b2ca      	uxtb	r2, r1
 800381a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3301      	adds	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	dbf0      	blt.n	800380c <_read+0x12>
	}

return len;
 800382a:	687b      	ldr	r3, [r7, #4]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	return -1;
 800383c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800385c:	605a      	str	r2, [r3, #4]
	return 0;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <_isatty>:

int _isatty(int file)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	return 1;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
	return 0;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <_sbrk+0x5c>)
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <_sbrk+0x60>)
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <_sbrk+0x64>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <_sbrk+0x64>)
 80038ba:	4a12      	ldr	r2, [pc, #72]	; (8003904 <_sbrk+0x68>)
 80038bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <_sbrk+0x64>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d207      	bcs.n	80038dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038cc:	f00c ffca 	bl	8010864 <__errno>
 80038d0:	4603      	mov	r3, r0
 80038d2:	220c      	movs	r2, #12
 80038d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	e009      	b.n	80038f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <_sbrk+0x64>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038e2:	4b07      	ldr	r3, [pc, #28]	; (8003900 <_sbrk+0x64>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	4a05      	ldr	r2, [pc, #20]	; (8003900 <_sbrk+0x64>)
 80038ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20030000 	.word	0x20030000
 80038fc:	00001000 	.word	0x00001000
 8003900:	200007a8 	.word	0x200007a8
 8003904:	20001a78 	.word	0x20001a78

08003908 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <LL_FLASH_GetUDN+0x14>)
 800390e:	681b      	ldr	r3, [r3, #0]
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	1fff7580 	.word	0x1fff7580

08003920 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <LL_FLASH_GetDeviceID+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	b2db      	uxtb	r3, r3
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	1fff7584 	.word	0x1fff7584

08003938 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <LL_FLASH_GetSTCompanyID+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0a1b      	lsrs	r3, r3, #8
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	1fff7584 	.word	0x1fff7584

08003950 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	b090      	sub	sp, #64	; 0x40
 8003954:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003956:	2392      	movs	r3, #146	; 0x92
 8003958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800395c:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <APP_BLE_Init+0x10c>)
 800395e:	1d3c      	adds	r4, r7, #4
 8003960:	461d      	mov	r5, r3
 8003962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800396a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800396c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800396e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003972:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8003976:	f000 fb0f 	bl	8003f98 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800397a:	2101      	movs	r1, #1
 800397c:	2002      	movs	r0, #2
 800397e:	f00b fc0b 	bl	800f198 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8003982:	4a37      	ldr	r2, [pc, #220]	; (8003a60 <APP_BLE_Init+0x110>)
 8003984:	2100      	movs	r1, #0
 8003986:	2004      	movs	r0, #4
 8003988:	f00b fd32 	bl	800f3f0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	4618      	mov	r0, r3
 8003990:	f00a f9a6 	bl	800dce0 <SHCI_C2_BLE_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800399a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80039a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80039a6:	4619      	mov	r1, r3
 80039a8:	482e      	ldr	r0, [pc, #184]	; (8003a64 <APP_BLE_Init+0x114>)
 80039aa:	f00c fd9b 	bl	80104e4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80039ae:	f7ff fb19 	bl	8002fe4 <Error_Handler>
 80039b2:	e002      	b.n	80039ba <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80039b4:	482c      	ldr	r0, [pc, #176]	; (8003a68 <APP_BLE_Init+0x118>)
 80039b6:	f00c fd95 	bl	80104e4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80039ba:	f000 fb03 	bl	8003fc4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80039be:	f00b f8eb 	bl	800eb98 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80039c2:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <APP_BLE_Init+0x11c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80039ca:	4b28      	ldr	r3, [pc, #160]	; (8003a6c <APP_BLE_Init+0x11c>)
 80039cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80039d2:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <APP_BLE_Init+0x120>)
 80039d4:	2100      	movs	r1, #0
 80039d6:	2001      	movs	r0, #1
 80039d8:	f00b fd0a 	bl	800f3f0 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <APP_BLE_Init+0x124>)
 80039de:	2100      	movs	r1, #0
 80039e0:	2002      	movs	r0, #2
 80039e2:	f00b fd05 	bl	800f3f0 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80039e6:	2006      	movs	r0, #6
 80039e8:	f009 fba7 	bl	800d13a <aci_hal_set_radio_activity_mask>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80039f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80039fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039fe:	4619      	mov	r1, r3
 8003a00:	481d      	ldr	r0, [pc, #116]	; (8003a78 <APP_BLE_Init+0x128>)
 8003a02:	f00c fd6f 	bl	80104e4 <iprintf>
 8003a06:	e002      	b.n	8003a0e <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003a08:	481c      	ldr	r0, [pc, #112]	; (8003a7c <APP_BLE_Init+0x12c>)
 8003a0a:	f00c fd6b 	bl	80104e4 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <APP_BLE_Init+0x130>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <APP_BLE_Init+0x134>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8003a1a:	f000 ff29 	bl	8004870 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <APP_BLE_Init+0x138>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	491a      	ldr	r1, [pc, #104]	; (8003a8c <APP_BLE_Init+0x13c>)
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7fe fd95 	bl	8002554 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <APP_BLE_Init+0x140>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4919      	ldr	r1, [pc, #100]	; (8003a94 <APP_BLE_Init+0x144>)
 8003a30:	2000      	movs	r0, #0
 8003a32:	f7fe fd8f 	bl	8002554 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <APP_BLE_Init+0x11c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <APP_BLE_Init+0x11c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <APP_BLE_Init+0x148>)
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <APP_BLE_Init+0x14c>)
 8003a4a:	22a0      	movs	r2, #160	; 0xa0
 8003a4c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f000 fc68 	bl	8004324 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8003a54:	bf00      	nop
}
 8003a56:	3740      	adds	r7, #64	; 0x40
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5c:	08015720 	.word	0x08015720
 8003a60:	0800d705 	.word	0x0800d705
 8003a64:	08015644 	.word	0x08015644
 8003a68:	0801567c 	.word	0x0801567c
 8003a6c:	200002c4 	.word	0x200002c4
 8003a70:	08004505 	.word	0x08004505
 8003a74:	0800464d 	.word	0x0800464d
 8003a78:	080156a4 	.word	0x080156a4
 8003a7c:	080156e8 	.word	0x080156e8
 8003a80:	200007b8 	.word	0x200007b8
 8003a84:	200007b9 	.word	0x200007b9
 8003a88:	08004565 	.word	0x08004565
 8003a8c:	20000345 	.word	0x20000345
 8003a90:	08004575 	.word	0x08004575
 8003a94:	20000346 	.word	0x20000346
 8003a98:	20000348 	.word	0x20000348
 8003a9c:	2000034a 	.word	0x2000034a

08003aa0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b090      	sub	sp, #64	; 0x40
 8003aa4:	af04      	add	r7, sp, #16
 8003aa6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8003aa8:	2392      	movs	r3, #146	; 0x92
 8003aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2bff      	cmp	r3, #255	; 0xff
 8003aba:	f000 8126 	beq.w	8003d0a <SVCCTL_App_Notification+0x26a>
 8003abe:	2bff      	cmp	r3, #255	; 0xff
 8003ac0:	f300 8221 	bgt.w	8003f06 <SVCCTL_App_Notification+0x466>
 8003ac4:	2b05      	cmp	r3, #5
 8003ac6:	d002      	beq.n	8003ace <SVCCTL_App_Notification+0x2e>
 8003ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8003aca:	d034      	beq.n	8003b36 <SVCCTL_App_Notification+0x96>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8003acc:	e21b      	b.n	8003f06 <SVCCTL_App_Notification+0x466>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	4baa      	ldr	r3, [pc, #680]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003ade:	8adb      	ldrh	r3, [r3, #22]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d11a      	bne.n	8003b1a <SVCCTL_App_Notification+0x7a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8003ae4:	4ba8      	ldr	r3, [pc, #672]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003aea:	4ba7      	ldr	r3, [pc, #668]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2102      	movs	r1, #2
 8003af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afa:	f004 fb75 	bl	80081e8 <HAL_GPIO_WritePin>
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8003afe:	48a3      	ldr	r0, [pc, #652]	; (8003d8c <SVCCTL_App_Notification+0x2ec>)
 8003b00:	f00c fd5e 	bl	80105c0 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003b0a:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003b0c:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003b12:	461a      	mov	r2, r3
 8003b14:	489e      	ldr	r0, [pc, #632]	; (8003d90 <SVCCTL_App_Notification+0x2f0>)
 8003b16:	f00c fce5 	bl	80104e4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f000 fc02 	bl	8004324 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8003b20:	4b9c      	ldr	r3, [pc, #624]	; (8003d94 <SVCCTL_App_Notification+0x2f4>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003b26:	4b98      	ldr	r3, [pc, #608]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003b28:	8ada      	ldrh	r2, [r3, #22]
 8003b2a:	4b9a      	ldr	r3, [pc, #616]	; (8003d94 <SVCCTL_App_Notification+0x2f4>)
 8003b2c:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8003b2e:	4899      	ldr	r0, [pc, #612]	; (8003d94 <SVCCTL_App_Notification+0x2f4>)
 8003b30:	f000 fe8a 	bl	8004848 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003b34:	e1ea      	b.n	8003f0c <SVCCTL_App_Notification+0x46c>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	3302      	adds	r3, #2
 8003b3a:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d033      	beq.n	8003bac <SVCCTL_App_Notification+0x10c>
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	f300 80de 	bgt.w	8003d06 <SVCCTL_App_Notification+0x266>
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d06c      	beq.n	8003c28 <SVCCTL_App_Notification+0x188>
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	f040 80d9 	bne.w	8003d06 <SVCCTL_App_Notification+0x266>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8003b5a:	488f      	ldr	r0, [pc, #572]	; (8003d98 <SVCCTL_App_Notification+0x2f8>)
 8003b5c:	f00c fd30 	bl	80105c0 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003b66:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fc fcb3 	bl	80004d4 <__aeabi_i2d>
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	4b8a      	ldr	r3, [pc, #552]	; (8003d9c <SVCCTL_App_Notification+0x2fc>)
 8003b74:	f7fc fd18 	bl	80005a8 <__aeabi_dmul>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003b86:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003b88:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	9400      	str	r4, [sp, #0]
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	487e      	ldr	r0, [pc, #504]	; (8003da0 <SVCCTL_App_Notification+0x300>)
 8003ba6:	f00c fc9d 	bl	80104e4 <iprintf>
          break;
 8003baa:	e0ad      	b.n	8003d08 <SVCCTL_App_Notification+0x268>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8003bb2:	487c      	ldr	r0, [pc, #496]	; (8003da4 <SVCCTL_App_Notification+0x304>)
 8003bb4:	f00c fc96 	bl	80104e4 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <SVCCTL_App_Notification+0x128>
            APP_DBG_MSG("status ok \n");
 8003bc0:	4879      	ldr	r0, [pc, #484]	; (8003da8 <SVCCTL_App_Notification+0x308>)
 8003bc2:	f00c fcfd 	bl	80105c0 <puts>
 8003bc6:	e002      	b.n	8003bce <SVCCTL_App_Notification+0x12e>
            APP_DBG_MSG("status nok \n");
 8003bc8:	4878      	ldr	r0, [pc, #480]	; (8003dac <SVCCTL_App_Notification+0x30c>)
 8003bca:	f00c fcf9 	bl	80105c0 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8003bce:	4b6e      	ldr	r3, [pc, #440]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003bd0:	8adb      	ldrh	r3, [r3, #22]
 8003bd2:	f107 020a 	add.w	r2, r7, #10
 8003bd6:	f107 010b 	add.w	r1, r7, #11
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f009 fb25 	bl	800d22a <hci_le_read_phy>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <SVCCTL_App_Notification+0x156>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8003bee:	4870      	ldr	r0, [pc, #448]	; (8003db0 <SVCCTL_App_Notification+0x310>)
 8003bf0:	f00c fc78 	bl	80104e4 <iprintf>
          break;
 8003bf4:	e088      	b.n	8003d08 <SVCCTL_App_Notification+0x268>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8003bf6:	486f      	ldr	r0, [pc, #444]	; (8003db4 <SVCCTL_App_Notification+0x314>)
 8003bf8:	f00c fce2 	bl	80105c0 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d10a      	bne.n	8003c18 <SVCCTL_App_Notification+0x178>
 8003c02:	7abb      	ldrb	r3, [r7, #10]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d107      	bne.n	8003c18 <SVCCTL_App_Notification+0x178>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	7abb      	ldrb	r3, [r7, #10]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4869      	ldr	r0, [pc, #420]	; (8003db8 <SVCCTL_App_Notification+0x318>)
 8003c12:	f00c fc67 	bl	80104e4 <iprintf>
          break;
 8003c16:	e077      	b.n	8003d08 <SVCCTL_App_Notification+0x268>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8003c18:	7afb      	ldrb	r3, [r7, #11]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	7abb      	ldrb	r3, [r7, #10]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4865      	ldr	r0, [pc, #404]	; (8003db8 <SVCCTL_App_Notification+0x318>)
 8003c22:	f00c fc5f 	bl	80104e4 <iprintf>
          break;
 8003c26:	e06f      	b.n	8003d08 <SVCCTL_App_Notification+0x268>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8003c2e:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003c30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fd07 	bl	8002648 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4619      	mov	r1, r3
 8003c44:	485d      	ldr	r0, [pc, #372]	; (8003dbc <SVCCTL_App_Notification+0x31c>)
 8003c46:	f00c fc4d 	bl	80104e4 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003c4e:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003c54:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003c5a:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003c60:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003c66:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003c6c:	9302      	str	r3, [sp, #8]
 8003c6e:	9101      	str	r1, [sp, #4]
 8003c70:	9200      	str	r2, [sp, #0]
 8003c72:	462b      	mov	r3, r5
 8003c74:	4622      	mov	r2, r4
 8003c76:	4601      	mov	r1, r0
 8003c78:	4851      	ldr	r0, [pc, #324]	; (8003dc0 <SVCCTL_App_Notification+0x320>)
 8003c7a:	f00c fc33 	bl	80104e4 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8003c84:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc24 	bl	80004d4 <__aeabi_i2d>
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	4b42      	ldr	r3, [pc, #264]	; (8003d9c <SVCCTL_App_Notification+0x2fc>)
 8003c92:	f7fc fc89 	bl	80005a8 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8003ca4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003ca6:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	9400      	str	r4, [sp, #0]
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4837      	ldr	r0, [pc, #220]	; (8003da0 <SVCCTL_App_Notification+0x300>)
 8003cc4:	f00c fc0e 	bl	80104e4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003cca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d104      	bne.n	8003cdc <SVCCTL_App_Notification+0x23c>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003cd4:	2206      	movs	r2, #6
 8003cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003cda:	e003      	b.n	8003ce4 <SVCCTL_App_Notification+0x244>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003cde:	2205      	movs	r2, #5
 8003ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003cee:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <SVCCTL_App_Notification+0x2f4>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <SVCCTL_App_Notification+0x2e8>)
 8003cf8:	8ada      	ldrh	r2, [r3, #22]
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <SVCCTL_App_Notification+0x2f4>)
 8003cfc:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8003cfe:	4825      	ldr	r0, [pc, #148]	; (8003d94 <SVCCTL_App_Notification+0x2f4>)
 8003d00:	f000 fda2 	bl	8004848 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003d04:	e000      	b.n	8003d08 <SVCCTL_App_Notification+0x268>
          break;
 8003d06:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8003d08:	e100      	b.n	8003f0c <SVCCTL_App_Notification+0x46c>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1a:	f000 80e0 	beq.w	8003ede <SVCCTL_App_Notification+0x43e>
 8003d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d22:	f300 80f2 	bgt.w	8003f0a <SVCCTL_App_Notification+0x46a>
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	f000 80e1 	beq.w	8003eee <SVCCTL_App_Notification+0x44e>
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	f2c0 80ec 	blt.w	8003f0a <SVCCTL_App_Notification+0x46a>
 8003d32:	f240 420a 	movw	r2, #1034	; 0x40a
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f300 80e7 	bgt.w	8003f0a <SVCCTL_App_Notification+0x46a>
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	f2c0 80e3 	blt.w	8003f0a <SVCCTL_App_Notification+0x46a>
 8003d44:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003d48:	2b0a      	cmp	r3, #10
 8003d4a:	f200 80de 	bhi.w	8003f0a <SVCCTL_App_Notification+0x46a>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <SVCCTL_App_Notification+0x2b4>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003ea9 	.word	0x08003ea9
 8003d5c:	08003dc9 	.word	0x08003dc9
 8003d60:	08003dff 	.word	0x08003dff
 8003d64:	08003e07 	.word	0x08003e07
 8003d68:	08003e0f 	.word	0x08003e0f
 8003d6c:	08003f0b 	.word	0x08003f0b
 8003d70:	08003ee7 	.word	0x08003ee7
 8003d74:	08003e43 	.word	0x08003e43
 8003d78:	08003e53 	.word	0x08003e53
 8003d7c:	08003e4b 	.word	0x08003e4b
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8003d80:	4810      	ldr	r0, [pc, #64]	; (8003dc4 <SVCCTL_App_Notification+0x324>)
 8003d82:	f00c fc1d 	bl	80105c0 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8003d86:	e0bd      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
 8003d88:	200002c4 	.word	0x200002c4
 8003d8c:	08015758 	.word	0x08015758
 8003d90:	08015784 	.word	0x08015784
 8003d94:	200007b4 	.word	0x200007b4
 8003d98:	080157c0 	.word	0x080157c0
 8003d9c:	3ff40000 	.word	0x3ff40000
 8003da0:	080157f4 	.word	0x080157f4
 8003da4:	08015860 	.word	0x08015860
 8003da8:	08015890 	.word	0x08015890
 8003dac:	0801589c 	.word	0x0801589c
 8003db0:	080158a8 	.word	0x080158a8
 8003db4:	080158c8 	.word	0x080158c8
 8003db8:	080158e8 	.word	0x080158e8
 8003dbc:	0801590c 	.word	0x0801590c
 8003dc0:	08015954 	.word	0x08015954
 8003dc4:	080159a4 	.word	0x080159a4
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8003dc8:	4853      	ldr	r0, [pc, #332]	; (8003f18 <SVCCTL_App_Notification+0x478>)
 8003dca:	f00c fbf9 	bl	80105c0 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8003dce:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <SVCCTL_App_Notification+0x47c>)
 8003dd0:	8adb      	ldrh	r3, [r3, #22]
 8003dd2:	4953      	ldr	r1, [pc, #332]	; (8003f20 <SVCCTL_App_Notification+0x480>)
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f008 fbb3 	bl	800c540 <aci_gap_pass_key_resp>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <SVCCTL_App_Notification+0x356>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8003de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dec:	4619      	mov	r1, r3
 8003dee:	484d      	ldr	r0, [pc, #308]	; (8003f24 <SVCCTL_App_Notification+0x484>)
 8003df0:	f00c fb78 	bl	80104e4 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003df4:	e086      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8003df6:	484c      	ldr	r0, [pc, #304]	; (8003f28 <SVCCTL_App_Notification+0x488>)
 8003df8:	f00c fbe2 	bl	80105c0 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003dfc:	e082      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 8003dfe:	484b      	ldr	r0, [pc, #300]	; (8003f2c <SVCCTL_App_Notification+0x48c>)
 8003e00:	f00c fbde 	bl	80105c0 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 8003e04:	e07e      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          APP_DBG_MSG("==>> ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 8003e06:	484a      	ldr	r0, [pc, #296]	; (8003f30 <SVCCTL_App_Notification+0x490>)
 8003e08:	f00c fbda 	bl	80105c0 <puts>
          break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 8003e0c:	e07a      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8003e0e:	4849      	ldr	r0, [pc, #292]	; (8003f34 <SVCCTL_App_Notification+0x494>)
 8003e10:	f00c fbd6 	bl	80105c0 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003e14:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <SVCCTL_App_Notification+0x47c>)
 8003e16:	8adb      	ldrh	r3, [r3, #22]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f008 fd3b 	bl	800c894 <aci_gap_allow_rebond>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <SVCCTL_App_Notification+0x39a>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 8003e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e30:	4619      	mov	r1, r3
 8003e32:	4841      	ldr	r0, [pc, #260]	; (8003f38 <SVCCTL_App_Notification+0x498>)
 8003e34:	f00c fb56 	bl	80104e4 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003e38:	e064      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 8003e3a:	4840      	ldr	r0, [pc, #256]	; (8003f3c <SVCCTL_App_Notification+0x49c>)
 8003e3c:	f00c fbc0 	bl	80105c0 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003e40:	e060      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 8003e42:	483f      	ldr	r0, [pc, #252]	; (8003f40 <SVCCTL_App_Notification+0x4a0>)
 8003e44:	f00c fbbc 	bl	80105c0 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 8003e48:	e05c      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8003e4a:	483e      	ldr	r0, [pc, #248]	; (8003f44 <SVCCTL_App_Notification+0x4a4>)
 8003e4c:	f00c fbb8 	bl	80105c0 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 8003e50:	e058      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8003e52:	483c      	ldr	r0, [pc, #240]	; (8003f44 <SVCCTL_App_Notification+0x4a4>)
 8003e54:	f00c fbb4 	bl	80105c0 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8003e5c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003e60:	4619      	mov	r1, r3
 8003e62:	4839      	ldr	r0, [pc, #228]	; (8003f48 <SVCCTL_App_Notification+0x4a8>)
 8003e64:	f00c fb3e 	bl	80104e4 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8003e6c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003e70:	4619      	mov	r1, r3
 8003e72:	4836      	ldr	r0, [pc, #216]	; (8003f4c <SVCCTL_App_Notification+0x4ac>)
 8003e74:	f00c fb36 	bl	80104e4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <SVCCTL_App_Notification+0x47c>)
 8003e7a:	8adb      	ldrh	r3, [r3, #22]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f008 fd5c 	bl	800c93c <aci_gap_numeric_comparison_value_confirm_yesno>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <SVCCTL_App_Notification+0x400>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8003e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e96:	4619      	mov	r1, r3
 8003e98:	482d      	ldr	r0, [pc, #180]	; (8003f50 <SVCCTL_App_Notification+0x4b0>)
 8003e9a:	f00c fb23 	bl	80104e4 <iprintf>
          break;
 8003e9e:	e031      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8003ea0:	482c      	ldr	r0, [pc, #176]	; (8003f54 <SVCCTL_App_Notification+0x4b4>)
 8003ea2:	f00c fb8d 	bl	80105c0 <puts>
          break;
 8003ea6:	e02d      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	3302      	adds	r3, #2
 8003eac:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8003eae:	482a      	ldr	r0, [pc, #168]	; (8003f58 <SVCCTL_App_Notification+0x4b8>)
 8003eb0:	f00c fb86 	bl	80105c0 <puts>
          if (pairing_complete->Status == 0)
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	789b      	ldrb	r3, [r3, #2]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <SVCCTL_App_Notification+0x424>
            APP_DBG_MSG("     - Pairing Success\n");
 8003ebc:	4827      	ldr	r0, [pc, #156]	; (8003f5c <SVCCTL_App_Notification+0x4bc>)
 8003ebe:	f00c fb7f 	bl	80105c0 <puts>
 8003ec2:	e008      	b.n	8003ed6 <SVCCTL_App_Notification+0x436>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	789b      	ldrb	r3, [r3, #2]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	78db      	ldrb	r3, [r3, #3]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4823      	ldr	r0, [pc, #140]	; (8003f60 <SVCCTL_App_Notification+0x4c0>)
 8003ed2:	f00c fb07 	bl	80104e4 <iprintf>
          APP_DBG_MSG("\n");
 8003ed6:	200a      	movs	r0, #10
 8003ed8:	f00c fb16 	bl	8010508 <putchar>
          break;    
 8003edc:	e012      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          mutex = 1;
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <SVCCTL_App_Notification+0x4c4>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
          break;
 8003ee4:	e00e      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8003ee6:	4820      	ldr	r0, [pc, #128]	; (8003f68 <SVCCTL_App_Notification+0x4c8>)
 8003ee8:	f00c fafc 	bl	80104e4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003eec:	e00a      	b.n	8003f04 <SVCCTL_App_Notification+0x464>
          BSP_LED_On(LED_GREEN);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f001 fc30 	bl	8005754 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <SVCCTL_App_Notification+0x47c>)
 8003ef6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003efa:	210a      	movs	r1, #10
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fc2f 	bl	8002760 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8003f02:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003f04:	e001      	b.n	8003f0a <SVCCTL_App_Notification+0x46a>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <SVCCTL_App_Notification+0x46c>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003f0a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003f0c:	2301      	movs	r3, #1
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3730      	adds	r7, #48	; 0x30
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bdb0      	pop	{r4, r5, r7, pc}
 8003f16:	bf00      	nop
 8003f18:	080159d4 	.word	0x080159d4
 8003f1c:	200002c4 	.word	0x200002c4
 8003f20:	0001e240 	.word	0x0001e240
 8003f24:	080159fc 	.word	0x080159fc
 8003f28:	08015a30 	.word	0x08015a30
 8003f2c:	08015a58 	.word	0x08015a58
 8003f30:	08015a84 	.word	0x08015a84
 8003f34:	08015ab8 	.word	0x08015ab8
 8003f38:	08015adc 	.word	0x08015adc
 8003f3c:	08015b0c 	.word	0x08015b0c
 8003f40:	08015b34 	.word	0x08015b34
 8003f44:	08015b60 	.word	0x08015b60
 8003f48:	08015b90 	.word	0x08015b90
 8003f4c:	08015bac 	.word	0x08015bac
 8003f50:	08015bc4 	.word	0x08015bc4
 8003f54:	08015c14 	.word	0x08015c14
 8003f58:	08015c5c 	.word	0x08015c5c
 8003f5c:	08015c88 	.word	0x08015c88
 8003f60:	08015ca0 	.word	0x08015ca0
 8003f64:	200007b9 	.word	0x200007b9
 8003f68:	08015cdc 	.word	0x08015cdc

08003f6c <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8003f70:	f000 fca6 	bl	80048c0 <P2PS_APP_SW1_Button_Action>
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f00b fa58 	bl	800f434 <UTIL_SEQ_SetTask>
#endif
  
  return;
 8003f84:	bf00      	nop
}
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <Ble_Tl_Init+0x20>)
 8003fa0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <Ble_Tl_Init+0x24>)
 8003fa4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <Ble_Tl_Init+0x28>)
 8003fac:	f009 fb8e 	bl	800d6cc <hci_init>

  return;
 8003fb0:	bf00      	nop
}
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20030028 	.word	0x20030028
 8003fbc:	080046f5 	.word	0x080046f5
 8003fc0:	080046bd 	.word	0x080046bd

08003fc4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc6:	b08d      	sub	sp, #52	; 0x34
 8003fc8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8003fca:	2300      	movs	r3, #0
 8003fcc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003fce:	2392      	movs	r3, #146	; 0x92
 8003fd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8003fd2:	48a5      	ldr	r0, [pc, #660]	; (8004268 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003fd4:	f00c faf4 	bl	80105c0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003fd8:	f009 f903 	bl	800d1e2 <hci_reset>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	48a0      	ldr	r0, [pc, #640]	; (800426c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8003fec:	f00c fa7a 	bl	80104e4 <iprintf>
 8003ff0:	e002      	b.n	8003ff8 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003ff2:	489f      	ldr	r0, [pc, #636]	; (8004270 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003ff4:	f00c fae4 	bl	80105c0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003ff8:	f000 fa40 	bl	800447c <BleGetBdAddress>
 8003ffc:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	2106      	movs	r1, #6
 8004002:	2000      	movs	r0, #0
 8004004:	f008 ffad 	bl	800cf62 <aci_hal_write_config_data>
 8004008:	4603      	mov	r3, r0
 800400a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	4619      	mov	r1, r3
 8004016:	4897      	ldr	r0, [pc, #604]	; (8004274 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8004018:	f00c fa64 	bl	80104e4 <iprintf>
 800401c:	e021      	b.n	8004062 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800401e:	4896      	ldr	r0, [pc, #600]	; (8004278 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8004020:	f00c face 	bl	80105c0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	3305      	adds	r3, #5
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	3304      	adds	r3, #4
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	461c      	mov	r4, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3303      	adds	r3, #3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461d      	mov	r5, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3302      	adds	r3, #2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3301      	adds	r3, #1
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	9101      	str	r1, [sp, #4]
 8004054:	9200      	str	r2, [sp, #0]
 8004056:	462b      	mov	r3, r5
 8004058:	4622      	mov	r2, r4
 800405a:	4601      	mov	r1, r0
 800405c:	4887      	ldr	r0, [pc, #540]	; (800427c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800405e:	f00c fa41 	bl	80104e4 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3305      	adds	r3, #5
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	4b85      	ldr	r3, [pc, #532]	; (8004280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800406a:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	3304      	adds	r3, #4
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	4b83      	ldr	r3, [pc, #524]	; (8004280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8004074:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3303      	adds	r3, #3
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	4b80      	ldr	r3, [pc, #512]	; (8004280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800407e:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3302      	adds	r3, #2
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	4b7e      	ldr	r3, [pc, #504]	; (8004280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8004088:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3301      	adds	r3, #1
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	4b7b      	ldr	r3, [pc, #492]	; (8004280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8004092:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	4b79      	ldr	r3, [pc, #484]	; (8004280 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800409a:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800409c:	4a79      	ldr	r2, [pc, #484]	; (8004284 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800409e:	2110      	movs	r1, #16
 80040a0:	2018      	movs	r0, #24
 80040a2:	f008 ff5e 	bl	800cf62 <aci_hal_write_config_data>
 80040a6:	4603      	mov	r3, r0
 80040a8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4874      	ldr	r0, [pc, #464]	; (8004288 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 80040b6:	f00c fa15 	bl	80104e4 <iprintf>
 80040ba:	e002      	b.n	80040c2 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 80040bc:	4873      	ldr	r0, [pc, #460]	; (800428c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 80040be:	f00c fa7f 	bl	80105c0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80040c2:	4a73      	ldr	r2, [pc, #460]	; (8004290 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80040c4:	2110      	movs	r1, #16
 80040c6:	2008      	movs	r0, #8
 80040c8:	f008 ff4b 	bl	800cf62 <aci_hal_write_config_data>
 80040cc:	4603      	mov	r3, r0
 80040ce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	4619      	mov	r1, r3
 80040da:	486e      	ldr	r0, [pc, #440]	; (8004294 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 80040dc:	f00c fa02 	bl	80104e4 <iprintf>
 80040e0:	e002      	b.n	80040e8 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80040e2:	486d      	ldr	r0, [pc, #436]	; (8004298 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80040e4:	f00c fa6c 	bl	80105c0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80040e8:	2118      	movs	r1, #24
 80040ea:	2001      	movs	r0, #1
 80040ec:	f008 ffbe 	bl	800d06c <aci_hal_set_tx_power_level>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	4619      	mov	r1, r3
 80040fe:	4867      	ldr	r0, [pc, #412]	; (800429c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8004100:	f00c f9f0 	bl	80104e4 <iprintf>
 8004104:	e002      	b.n	800410c <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8004106:	4866      	ldr	r0, [pc, #408]	; (80042a0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8004108:	f00c fa5a 	bl	80105c0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800410c:	f008 fc7d 	bl	800ca0a <aci_gatt_init>
 8004110:	4603      	mov	r3, r0
 8004112:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	4619      	mov	r1, r3
 800411e:	4861      	ldr	r0, [pc, #388]	; (80042a4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8004120:	f00c f9e0 	bl	80104e4 <iprintf>
 8004124:	e002      	b.n	800412c <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8004126:	4860      	ldr	r0, [pc, #384]	; (80042a8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8004128:	f00c fa4a 	bl	80105c0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02b      	beq.n	8004196 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 800413e:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8004140:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8004142:	1dba      	adds	r2, r7, #6
 8004144:	7bf8      	ldrb	r0, [r7, #15]
 8004146:	1cbb      	adds	r3, r7, #2
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	2207      	movs	r2, #7
 8004152:	2100      	movs	r1, #0
 8004154:	f008 fa5b 	bl	800c60e <aci_gap_init>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	4619      	mov	r1, r3
 8004166:	4852      	ldr	r0, [pc, #328]	; (80042b0 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8004168:	f00c f9bc 	bl	80104e4 <iprintf>
 800416c:	e002      	b.n	8004174 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800416e:	4851      	ldr	r0, [pc, #324]	; (80042b4 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8004170:	f00c fa26 	bl	80105c0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8004174:	88fc      	ldrh	r4, [r7, #6]
 8004176:	88bd      	ldrh	r5, [r7, #4]
 8004178:	68b8      	ldr	r0, [r7, #8]
 800417a:	f7fc f851 	bl	8000220 <strlen>
 800417e:	4603      	mov	r3, r0
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	2200      	movs	r2, #0
 800418a:	4629      	mov	r1, r5
 800418c:	4620      	mov	r0, r4
 800418e:	f008 fe3f 	bl	800ce10 <aci_gatt_update_char_value>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8004196:	88f8      	ldrh	r0, [r7, #6]
 8004198:	8879      	ldrh	r1, [r7, #2]
 800419a:	463b      	mov	r3, r7
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2302      	movs	r3, #2
 80041a0:	2200      	movs	r2, #0
 80041a2:	f008 fe35 	bl	800ce10 <aci_gatt_update_char_value>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80041aa:	2202      	movs	r2, #2
 80041ac:	2102      	movs	r1, #2
 80041ae:	2000      	movs	r0, #0
 80041b0:	f009 f8b9 	bl	800d326 <hci_le_set_default_phy>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	4619      	mov	r1, r3
 80041c2:	483d      	ldr	r0, [pc, #244]	; (80042b8 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 80041c4:	f00c f98e 	bl	80104e4 <iprintf>
 80041c8:	e002      	b.n	80041d0 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 80041ca:	483c      	ldr	r0, [pc, #240]	; (80042bc <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80041cc:	f00c f9f8 	bl	80105c0 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80041d0:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80041d6:	4b3a      	ldr	r3, [pc, #232]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f008 f898 	bl	800c310 <aci_gap_set_io_capability>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	4619      	mov	r1, r3
 80041ee:	4835      	ldr	r0, [pc, #212]	; (80042c4 <Ble_Hci_Gap_Gatt_Init+0x300>)
 80041f0:	f00c f978 	bl	80104e4 <iprintf>
 80041f4:	e002      	b.n	80041fc <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80041f6:	4834      	ldr	r0, [pc, #208]	; (80042c8 <Ble_Hci_Gap_Gatt_Init+0x304>)
 80041f8:	f00c f9e2 	bl	80105c0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80041fe:	2201      	movs	r2, #1
 8004200:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8004202:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004204:	2208      	movs	r2, #8
 8004206:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8004208:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800420a:	2210      	movs	r2, #16
 800420c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800420e:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004210:	2200      	movs	r2, #0
 8004212:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8004214:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004216:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <Ble_Hci_Gap_Gatt_Init+0x308>)
 8004218:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800421c:	2201      	movs	r2, #1
 800421e:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8004220:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004222:	789c      	ldrb	r4, [r3, #2]
 8004224:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004226:	785d      	ldrb	r5, [r3, #1]
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800422a:	791b      	ldrb	r3, [r3, #4]
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800422e:	7952      	ldrb	r2, [r2, #5]
 8004230:	4923      	ldr	r1, [pc, #140]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004232:	78c9      	ldrb	r1, [r1, #3]
 8004234:	4822      	ldr	r0, [pc, #136]	; (80042c0 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004236:	6880      	ldr	r0, [r0, #8]
 8004238:	2600      	movs	r6, #0
 800423a:	9604      	str	r6, [sp, #16]
 800423c:	9003      	str	r0, [sp, #12]
 800423e:	9102      	str	r1, [sp, #8]
 8004240:	9201      	str	r2, [sp, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	2201      	movs	r2, #1
 8004248:	4629      	mov	r1, r5
 800424a:	4620      	mov	r0, r4
 800424c:	f008 f8b4 	bl	800c3b8 <aci_gap_set_authentication_requirement>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_BLE_ADDRESS_TYPE);
  if (ret != BLE_STATUS_SUCCESS)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d03c      	beq.n	80042d4 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	4619      	mov	r1, r3
 800425e:	481c      	ldr	r0, [pc, #112]	; (80042d0 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8004260:	f00c f940 	bl	80104e4 <iprintf>
 8004264:	e039      	b.n	80042da <Ble_Hci_Gap_Gatt_Init+0x316>
 8004266:	bf00      	nop
 8004268:	08015d04 	.word	0x08015d04
 800426c:	08015d30 	.word	0x08015d30
 8004270:	08015d60 	.word	0x08015d60
 8004274:	08015d80 	.word	0x08015d80
 8004278:	08015ddc 	.word	0x08015ddc
 800427c:	08015e28 	.word	0x08015e28
 8004280:	20000010 	.word	0x20000010
 8004284:	08016834 	.word	0x08016834
 8004288:	08015e64 	.word	0x08015e64
 800428c:	08015ebc 	.word	0x08015ebc
 8004290:	08016844 	.word	0x08016844
 8004294:	08015f04 	.word	0x08015f04
 8004298:	08015f5c 	.word	0x08015f5c
 800429c:	08015fa4 	.word	0x08015fa4
 80042a0:	08015fe4 	.word	0x08015fe4
 80042a4:	08016014 	.word	0x08016014
 80042a8:	08016048 	.word	0x08016048
 80042ac:	0801606c 	.word	0x0801606c
 80042b0:	08016074 	.word	0x08016074
 80042b4:	080160a4 	.word	0x080160a4
 80042b8:	080160c4 	.word	0x080160c4
 80042bc:	08016100 	.word	0x08016100
 80042c0:	200002c4 	.word	0x200002c4
 80042c4:	0801612c 	.word	0x0801612c
 80042c8:	0801616c 	.word	0x0801616c
 80042cc:	0001b207 	.word	0x0001b207
 80042d0:	0801619c 	.word	0x0801619c
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80042d4:	480e      	ldr	r0, [pc, #56]	; (8004310 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 80042d6:	f00c f973 	bl	80105c0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80042da:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <Ble_Hci_Gap_Gatt_Init+0x350>)
 80042dc:	789b      	ldrb	r3, [r3, #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00f      	beq.n	8004302 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 80042e2:	f008 fab3 	bl	800c84c <aci_gap_configure_whitelist>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
 80042f2:	4619      	mov	r1, r3
 80042f4:	4808      	ldr	r0, [pc, #32]	; (8004318 <Ble_Hci_Gap_Gatt_Init+0x354>)
 80042f6:	f00c f8f5 	bl	80104e4 <iprintf>
 80042fa:	e002      	b.n	8004302 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80042fc:	4807      	ldr	r0, [pc, #28]	; (800431c <Ble_Hci_Gap_Gatt_Init+0x358>)
 80042fe:	f00c f95f 	bl	80105c0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8004302:	4807      	ldr	r0, [pc, #28]	; (8004320 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 8004304:	f00c f8ee 	bl	80104e4 <iprintf>
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004310:	080161e8 	.word	0x080161e8
 8004314:	200002c4 	.word	0x200002c4
 8004318:	08016224 	.word	0x08016224
 800431c:	08016264 	.word	0x08016264
 8004320:	08016294 	.word	0x08016294

08004324 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af08      	add	r7, sp, #32
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800432e:	2392      	movs	r3, #146	; 0x92
 8004330:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <Adv_Request+0x11c>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <Adv_Request+0x120>)
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	81bb      	strh	r3, [r7, #12]
 8004344:	e005      	b.n	8004352 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8004346:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800434a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800434c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004350:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8004352:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <Adv_Request+0x124>)
 8004354:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004358:	4618      	mov	r0, r3
 800435a:	f7fe f975 	bl	8002648 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d119      	bne.n	8004398 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8004364:	4b38      	ldr	r3, [pc, #224]	; (8004448 <Adv_Request+0x124>)
 8004366:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800436a:	2b01      	cmp	r3, #1
 800436c:	d004      	beq.n	8004378 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800436e:	4b36      	ldr	r3, [pc, #216]	; (8004448 <Adv_Request+0x124>)
 8004370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004374:	2b02      	cmp	r3, #2
 8004376:	d10f      	bne.n	8004398 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8004378:	f007 feac 	bl	800c0d4 <aci_gap_set_non_discoverable>
 800437c:	4603      	mov	r3, r0
 800437e:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 8004380:	7afb      	ldrb	r3, [r7, #11]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	4619      	mov	r1, r3
 800438a:	4830      	ldr	r0, [pc, #192]	; (800444c <Adv_Request+0x128>)
 800438c:	f00c f8aa 	bl	80104e4 <iprintf>
 8004390:	e002      	b.n	8004398 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 8004392:	482f      	ldr	r0, [pc, #188]	; (8004450 <Adv_Request+0x12c>)
 8004394:	f00c f914 	bl	80105c0 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8004398:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <Adv_Request+0x124>)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 80043a0:	4b29      	ldr	r3, [pc, #164]	; (8004448 <Adv_Request+0x124>)
 80043a2:	7e1b      	ldrb	r3, [r3, #24]
 80043a4:	89ba      	ldrh	r2, [r7, #12]
 80043a6:	89f9      	ldrh	r1, [r7, #14]
 80043a8:	2000      	movs	r0, #0
 80043aa:	9006      	str	r0, [sp, #24]
 80043ac:	2000      	movs	r0, #0
 80043ae:	9005      	str	r0, [sp, #20]
 80043b0:	4828      	ldr	r0, [pc, #160]	; (8004454 <Adv_Request+0x130>)
 80043b2:	9004      	str	r0, [sp, #16]
 80043b4:	9303      	str	r3, [sp, #12]
 80043b6:	4b28      	ldr	r3, [pc, #160]	; (8004458 <Adv_Request+0x134>)
 80043b8:	9302      	str	r3, [sp, #8]
 80043ba:	2308      	movs	r3, #8
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2300      	movs	r3, #0
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	2000      	movs	r0, #0
 80043c6:	f007 fea9 	bl	800c11c <aci_gap_set_discoverable>
 80043ca:	4603      	mov	r3, r0
 80043cc:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 80043ce:	7afb      	ldrb	r3, [r7, #11]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4820      	ldr	r0, [pc, #128]	; (800445c <Adv_Request+0x138>)
 80043da:	f00c f883 	bl	80104e4 <iprintf>
 80043de:	e002      	b.n	80043e6 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80043e0:	481f      	ldr	r0, [pc, #124]	; (8004460 <Adv_Request+0x13c>)
 80043e2:	f00c f8ed 	bl	80105c0 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 80043e6:	491f      	ldr	r1, [pc, #124]	; (8004464 <Adv_Request+0x140>)
 80043e8:	200e      	movs	r0, #14
 80043ea:	f008 f9bd 	bl	800c768 <aci_gap_update_adv_data>
 80043ee:	4603      	mov	r3, r0
 80043f0:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 80043f2:	7afb      	ldrb	r3, [r7, #11]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00e      	beq.n	8004416 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	4619      	mov	r1, r3
 8004402:	4819      	ldr	r0, [pc, #100]	; (8004468 <Adv_Request+0x144>)
 8004404:	f00c f86e 	bl	80104e4 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8004408:	e017      	b.n	800443a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	4619      	mov	r1, r3
 800440e:	4817      	ldr	r0, [pc, #92]	; (800446c <Adv_Request+0x148>)
 8004410:	f00c f868 	bl	80104e4 <iprintf>
  return;
 8004414:	e011      	b.n	800443a <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10a      	bne.n	8004432 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800441c:	4814      	ldr	r0, [pc, #80]	; (8004470 <Adv_Request+0x14c>)
 800441e:	f00c f861 	bl	80104e4 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <Adv_Request+0x124>)
 8004424:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004428:	4912      	ldr	r1, [pc, #72]	; (8004474 <Adv_Request+0x150>)
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe f998 	bl	8002760 <HW_TS_Start>
  return;
 8004430:	e003      	b.n	800443a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 8004432:	4811      	ldr	r0, [pc, #68]	; (8004478 <Adv_Request+0x154>)
 8004434:	f00c f856 	bl	80104e4 <iprintf>
  return;
 8004438:	bf00      	nop
}
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000348 	.word	0x20000348
 8004444:	2000034a 	.word	0x2000034a
 8004448:	200002c4 	.word	0x200002c4
 800444c:	080162c0 	.word	0x080162c0
 8004450:	0801630c 	.word	0x0801630c
 8004454:	200002dd 	.word	0x200002dd
 8004458:	08016854 	.word	0x08016854
 800445c:	08016354 	.word	0x08016354
 8004460:	0801638c 	.word	0x0801638c
 8004464:	20000010 	.word	0x20000010
 8004468:	080163b4 	.word	0x080163b4
 800446c:	080163e8 	.word	0x080163e8
 8004470:	08016420 	.word	0x08016420
 8004474:	0001e046 	.word	0x0001e046
 8004478:	08016448 	.word	0x08016448

0800447c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8004482:	f7ff fa41 	bl	8003908 <LL_FLASH_GetUDN>
 8004486:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d023      	beq.n	80044d8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8004490:	f7ff fa52 	bl	8003938 <LL_FLASH_GetSTCompanyID>
 8004494:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8004496:	f7ff fa43 	bl	8003920 <LL_FLASH_GetDeviceID>
 800449a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	4b16      	ldr	r3, [pc, #88]	; (80044fc <BleGetBdAddress+0x80>)
 80044a2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <BleGetBdAddress+0x80>)
 80044ac:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <BleGetBdAddress+0x80>)
 80044b4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <BleGetBdAddress+0x80>)
 80044bc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <BleGetBdAddress+0x80>)
 80044c6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <BleGetBdAddress+0x80>)
 80044d0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <BleGetBdAddress+0x80>)
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e00b      	b.n	80044f0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80044d8:	2000      	movs	r0, #0
 80044da:	f009 faad 	bl	800da38 <OTP_Read>
 80044de:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e001      	b.n	80044f0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <BleGetBdAddress+0x84>)
 80044ee:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80044f0:	697b      	ldr	r3, [r7, #20]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200007ac 	.word	0x200007ac
 8004500:	0801682c 	.word	0x0801682c

08004504 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 800450a:	2001      	movs	r0, #1
 800450c:	f001 f93c 	bl	8005788 <BSP_LED_Off>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8004510:	4b10      	ldr	r3, [pc, #64]	; (8004554 <Adv_Cancel+0x50>)
 8004512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004516:	2b05      	cmp	r3, #5
 8004518:	d017      	beq.n	800454a <Adv_Cancel+0x46>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800451a:	2392      	movs	r3, #146	; 0x92
 800451c:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800451e:	f007 fdd9 	bl	800c0d4 <aci_gap_set_non_discoverable>
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <Adv_Cancel+0x50>)
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8004534:	4808      	ldr	r0, [pc, #32]	; (8004558 <Adv_Cancel+0x54>)
 8004536:	f00b ffd5 	bl	80104e4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800453a:	e006      	b.n	800454a <Adv_Cancel+0x46>
      APP_DBG_MSG("  \r\n\r");
 800453c:	4807      	ldr	r0, [pc, #28]	; (800455c <Adv_Cancel+0x58>)
 800453e:	f00b ffd1 	bl	80104e4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8004542:	4807      	ldr	r0, [pc, #28]	; (8004560 <Adv_Cancel+0x5c>)
 8004544:	f00b ffce 	bl	80104e4 <iprintf>
  return;
 8004548:	bf00      	nop
 800454a:	bf00      	nop
}
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200002c4 	.word	0x200002c4
 8004558:	08016478 	.word	0x08016478
 800455c:	0801649c 	.word	0x0801649c
 8004560:	080164a4 	.word	0x080164a4

08004564 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8004568:	2100      	movs	r1, #0
 800456a:	2001      	movs	r0, #1
 800456c:	f00a ff62 	bl	800f434 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8004570:	bf00      	nop
}
 8004572:	bd80      	pop	{r7, pc}

08004574 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8004578:	2001      	movs	r0, #1
 800457a:	f001 f905 	bl	8005788 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af02      	add	r7, sp, #8
 800458a:	4603      	mov	r3, r0
 800458c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800458e:	4b29      	ldr	r3, [pc, #164]	; (8004634 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d149      	bne.n	800462a <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 8004596:	4b27      	ldr	r3, [pc, #156]	; (8004634 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800459c:	4b26      	ldr	r3, [pc, #152]	; (8004638 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	bfb8      	it	lt
 80045aa:	425b      	neglt	r3, r3
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b22      	ldr	r3, [pc, #136]	; (8004638 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80045b0:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	4a21      	ldr	r2, [pc, #132]	; (800463c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	ed93 7a00 	vldr	s14, [r3]
 80045c0:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 80045c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045cc:	ee17 3a90 	vmov	r3, s15
 80045d0:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 80045d2:	4b19      	ldr	r3, [pc, #100]	; (8004638 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	4a19      	ldr	r2, [pc, #100]	; (800463c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	ed93 7a00 	vldr	s14, [r3]
 80045e0:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 80045e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045ec:	ee17 3a90 	vmov	r3, s15
 80045f0:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 80045f2:	2300      	movs	r3, #0
 80045f4:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80045f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80045fa:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 80045fe:	8ad8      	ldrh	r0, [r3, #22]
 8004600:	8a7c      	ldrh	r4, [r7, #18]
 8004602:	8aba      	ldrh	r2, [r7, #20]
 8004604:	8af9      	ldrh	r1, [r7, #22]
 8004606:	8a3b      	ldrh	r3, [r7, #16]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4623      	mov	r3, r4
 800460c:	f008 ff08 	bl	800d420 <aci_l2cap_connection_parameter_update_req>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    slave_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800461a:	480a      	ldr	r0, [pc, #40]	; (8004644 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800461c:	f00b ff62 	bl	80104e4 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8004620:	e003      	b.n	800462a <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8004622:	4809      	ldr	r0, [pc, #36]	; (8004648 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8004624:	f00b ff5e 	bl	80104e4 <iprintf>
  return;
 8004628:	bf00      	nop
 800462a:	bf00      	nop
}
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd90      	pop	{r4, r7, pc}
 8004632:	bf00      	nop
 8004634:	200007b9 	.word	0x200007b9
 8004638:	200007b8 	.word	0x200007b8
 800463c:	20000008 	.word	0x20000008
 8004640:	200002c4 	.word	0x200002c4
 8004644:	080164c0 	.word	0x080164c0
 8004648:	080164e8 	.word	0x080164e8

0800464c <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <Connection_Interval_Update_Req+0x28>)
 8004652:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004656:	2b01      	cmp	r3, #1
 8004658:	d00a      	beq.n	8004670 <Connection_Interval_Update_Req+0x24>
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <Connection_Interval_Update_Req+0x28>)
 800465c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <Connection_Interval_Update_Req+0x28>)
 8004666:	8adb      	ldrh	r3, [r3, #22]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff8b 	bl	8004584 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800466e:	bf00      	nop
 8004670:	bf00      	nop
}
 8004672:	bd80      	pop	{r7, pc}
 8004674:	200002c4 	.word	0x200002c4

08004678 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8004680:	2100      	movs	r1, #0
 8004682:	2004      	movs	r0, #4
 8004684:	f00a fed6 	bl	800f434 <UTIL_SEQ_SetTask>

  return;
 8004688:	bf00      	nop
}
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8004698:	2001      	movs	r0, #1
 800469a:	f00a ff37 	bl	800f50c <UTIL_SEQ_SetEvt>

  return;
 800469e:	bf00      	nop
}
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f00a ff4c 	bl	800f54c <UTIL_SEQ_WaitEvt>

  return;
 80046b4:	bf00      	nop
}
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	3308      	adds	r3, #8
 80046ce:	4618      	mov	r0, r3
 80046d0:	f00a fab4 	bl	800ec3c <SVCCTL_UserEvtRx>
 80046d4:	4603      	mov	r3, r0
 80046d6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80046d8:	7afb      	ldrb	r3, [r7, #11]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80046e4:	e003      	b.n	80046ee <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
  return;
 80046ec:	bf00      	nop
}
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <BLE_StatusNot+0x16>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d006      	beq.n	8004716 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8004708:	e00b      	b.n	8004722 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800470a:	233f      	movs	r3, #63	; 0x3f
 800470c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f00a febc 	bl	800f48c <UTIL_SEQ_PauseTask>
      break;
 8004714:	e005      	b.n	8004722 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8004716:	233f      	movs	r3, #63	; 0x3f
 8004718:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f00a fed6 	bl	800f4cc <UTIL_SEQ_ResumeTask>
      break;
 8004720:	bf00      	nop
  }

  return;
 8004722:	bf00      	nop
}
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <P2PS_STM_App_Notification>:
double ival_Calibration(double);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d01a      	beq.n	8004772 <P2PS_STM_App_Notification+0x46>
 800473c:	2b03      	cmp	r3, #3
 800473e:	dc6b      	bgt.n	8004818 <P2PS_STM_App_Notification+0xec>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <P2PS_STM_App_Notification+0x1e>
 8004744:	2b01      	cmp	r3, #1
 8004746:	d00a      	beq.n	800475e <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8004748:	e066      	b.n	8004818 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 800474a:	4b37      	ldr	r3, [pc, #220]	; (8004828 <P2PS_STM_App_Notification+0xfc>)
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8004750:	4836      	ldr	r0, [pc, #216]	; (800482c <P2PS_STM_App_Notification+0x100>)
 8004752:	f00b ff35 	bl	80105c0 <puts>
      APP_DBG_MSG(" \n\r");
 8004756:	4836      	ldr	r0, [pc, #216]	; (8004830 <P2PS_STM_App_Notification+0x104>)
 8004758:	f00b fec4 	bl	80104e4 <iprintf>
      break;
 800475c:	e05f      	b.n	800481e <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 800475e:	4b32      	ldr	r3, [pc, #200]	; (8004828 <P2PS_STM_App_Notification+0xfc>)
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8004764:	4833      	ldr	r0, [pc, #204]	; (8004834 <P2PS_STM_App_Notification+0x108>)
 8004766:	f00b ff2b 	bl	80105c0 <puts>
      APP_DBG_MSG(" \n\r");
 800476a:	4831      	ldr	r0, [pc, #196]	; (8004830 <P2PS_STM_App_Notification+0x104>)
 800476c:	f00b feba 	bl	80104e4 <iprintf>
      break;
 8004770:	e055      	b.n	800481e <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d123      	bne.n	80047c4 <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	3301      	adds	r3, #1
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d10b      	bne.n	80047a0 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 8004788:	2000      	movs	r0, #0
 800478a:	f000 ffe3 	bl	8005754 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 800478e:	482a      	ldr	r0, [pc, #168]	; (8004838 <P2PS_STM_App_Notification+0x10c>)
 8004790:	f00b ff16 	bl	80105c0 <puts>
          APP_DBG_MSG(" \n\r");
 8004794:	4826      	ldr	r0, [pc, #152]	; (8004830 <P2PS_STM_App_Notification+0x104>)
 8004796:	f00b fea5 	bl	80104e4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800479a:	4b23      	ldr	r3, [pc, #140]	; (8004828 <P2PS_STM_App_Notification+0xfc>)
 800479c:	2201      	movs	r2, #1
 800479e:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	3301      	adds	r3, #1
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 80047ac:	2000      	movs	r0, #0
 80047ae:	f000 ffeb 	bl	8005788 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 80047b2:	4822      	ldr	r0, [pc, #136]	; (800483c <P2PS_STM_App_Notification+0x110>)
 80047b4:	f00b ff04 	bl	80105c0 <puts>
          APP_DBG_MSG(" \n\r");
 80047b8:	481d      	ldr	r0, [pc, #116]	; (8004830 <P2PS_STM_App_Notification+0x104>)
 80047ba:	f00b fe93 	bl	80104e4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <P2PS_STM_App_Notification+0xfc>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d126      	bne.n	800481c <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	3301      	adds	r3, #1
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10b      	bne.n	80047f2 <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 80047da:	2000      	movs	r0, #0
 80047dc:	f000 ffba 	bl	8005754 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 80047e0:	4817      	ldr	r0, [pc, #92]	; (8004840 <P2PS_STM_App_Notification+0x114>)
 80047e2:	f00b feed 	bl	80105c0 <puts>
          APP_DBG_MSG(" \n\r");
 80047e6:	4812      	ldr	r0, [pc, #72]	; (8004830 <P2PS_STM_App_Notification+0x104>)
 80047e8:	f00b fe7c 	bl	80104e4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <P2PS_STM_App_Notification+0xfc>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	3301      	adds	r3, #1
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10e      	bne.n	800481c <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 80047fe:	2000      	movs	r0, #0
 8004800:	f000 ffc2 	bl	8005788 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8004804:	480f      	ldr	r0, [pc, #60]	; (8004844 <P2PS_STM_App_Notification+0x118>)
 8004806:	f00b fedb 	bl	80105c0 <puts>
          APP_DBG_MSG(" \n\r");
 800480a:	4809      	ldr	r0, [pc, #36]	; (8004830 <P2PS_STM_App_Notification+0x104>)
 800480c:	f00b fe6a 	bl	80104e4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <P2PS_STM_App_Notification+0xfc>)
 8004812:	2200      	movs	r2, #0
 8004814:	709a      	strb	r2, [r3, #2]
      break;
 8004816:	e001      	b.n	800481c <P2PS_STM_App_Notification+0xf0>
      break;
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <P2PS_STM_App_Notification+0xf2>
      break;
 800481c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800481e:	bf00      	nop
}
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	2000034c 	.word	0x2000034c
 800482c:	08016518 	.word	0x08016518
 8004830:	0801654c 	.word	0x0801654c
 8004834:	08016550 	.word	0x08016550
 8004838:	08016584 	.word	0x08016584
 800483c:	080165ac 	.word	0x080165ac
 8004840:	080165d4 	.word	0x080165d4
 8004844:	080165fc 	.word	0x080165fc

08004848 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <P2PS_APP_Notification+0x1c>
 8004858:	2b01      	cmp	r3, #1
 800485a:	d000      	beq.n	800485e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800485c:	e003      	b.n	8004866 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800485e:	f000 f819 	bl	8004894 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8004862:	e000      	b.n	8004866 <P2PS_APP_Notification+0x1e>
    break;
 8004864:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8004866:	bf00      	nop
}
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8004874:	4a05      	ldr	r2, [pc, #20]	; (800488c <P2PS_APP_Init+0x1c>)
 8004876:	2100      	movs	r1, #0
 8004878:	2008      	movs	r0, #8
 800487a:	f00a fdb9 	bl	800f3f0 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <P2PS_APP_Init+0x20>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8004884:	f000 f806 	bl	8004894 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8004888:	bf00      	nop
}
 800488a:	bd80      	pop	{r7, pc}
 800488c:	080051e1 	.word	0x080051e1
 8004890:	2000034c 	.word	0x2000034c

08004894 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8004898:	2000      	movs	r0, #0
 800489a:	f000 ff75 	bl	8005788 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80048b0:	4b02      	ldr	r3, [pc, #8]	; (80048bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	2000034c 	.word	0x2000034c

080048c0 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80048c4:	2100      	movs	r1, #0
 80048c6:	2008      	movs	r0, #8
 80048c8:	f00a fdb4 	bl	800f434 <UTIL_SEQ_SetTask>

  return;
 80048cc:	bf00      	nop
}
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <P2PS_APP_FETdata_Transmit>:

void P2PS_APP_FETdata_Transmit(double vValue, double iValue1, double iValue2)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80048da:	ed87 1b02 	vstr	d1, [r7, #8]
 80048de:	ed87 2b00 	vstr	d2, [r7]
		 uint8_t			iVal23;
		 uint8_t			iVal24;
		 uint8_t			iVale2;
		 uint8_t			eDelimiter;
	  */
  P2P_Server_App_Context.FETVal.sDelimiter=0x3C;
 80048e2:	4bd3      	ldr	r3, [pc, #844]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 80048e4:	223c      	movs	r2, #60	; 0x3c
 80048e6:	71da      	strb	r2, [r3, #7]
  P2P_Server_App_Context.FETVal.Code=0x52;
 80048e8:	4bd1      	ldr	r3, [pc, #836]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 80048ea:	2252      	movs	r2, #82	; 0x52
 80048ec:	721a      	strb	r2, [r3, #8]
  P2P_Server_App_Context.FETVal.vDelimiter=0x56;
 80048ee:	4bd0      	ldr	r3, [pc, #832]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 80048f0:	2256      	movs	r2, #86	; 0x56
 80048f2:	725a      	strb	r2, [r3, #9]
  P2P_Server_App_Context.FETVal.iDelimiter=0x49;
 80048f4:	4bce      	ldr	r3, [pc, #824]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 80048f6:	2249      	movs	r2, #73	; 0x49
 80048f8:	739a      	strb	r2, [r3, #14]
  P2P_Server_App_Context.FETVal.eDelimiter=0x3E;
 80048fa:	4bcd      	ldr	r3, [pc, #820]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 80048fc:	223e      	movs	r2, #62	; 0x3e
 80048fe:	765a      	strb	r2, [r3, #25]

  P2P_Server_App_Context.FETVal.vVal1=((int)(vValue)%10)+'0';
 8004900:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004904:	f7fc f900 	bl	8000b08 <__aeabi_d2iz>
 8004908:	4602      	mov	r2, r0
 800490a:	4bca      	ldr	r3, [pc, #808]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 800490c:	fb83 1302 	smull	r1, r3, r3, r2
 8004910:	1099      	asrs	r1, r3, #2
 8004912:	17d3      	asrs	r3, r2, #31
 8004914:	1ac9      	subs	r1, r1, r3
 8004916:	460b      	mov	r3, r1
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	1ad1      	subs	r1, r2, r3
 8004920:	b2cb      	uxtb	r3, r1
 8004922:	3330      	adds	r3, #48	; 0x30
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4bc2      	ldr	r3, [pc, #776]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004928:	729a      	strb	r2, [r3, #10]
  P2P_Server_App_Context.FETVal.vVal2=((int)((vValue)*pow(10,1))%10)+'0';
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	4bc2      	ldr	r3, [pc, #776]	; (8004c38 <P2PS_APP_FETdata_Transmit+0x368>)
 8004930:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004934:	f7fb fe38 	bl	80005a8 <__aeabi_dmul>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	f7fc f8e2 	bl	8000b08 <__aeabi_d2iz>
 8004944:	4602      	mov	r2, r0
 8004946:	4bbb      	ldr	r3, [pc, #748]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004948:	fb83 1302 	smull	r1, r3, r3, r2
 800494c:	1099      	asrs	r1, r3, #2
 800494e:	17d3      	asrs	r3, r2, #31
 8004950:	1ac9      	subs	r1, r1, r3
 8004952:	460b      	mov	r3, r1
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	1ad1      	subs	r1, r2, r3
 800495c:	b2cb      	uxtb	r3, r1
 800495e:	3330      	adds	r3, #48	; 0x30
 8004960:	b2da      	uxtb	r2, r3
 8004962:	4bb3      	ldr	r3, [pc, #716]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004964:	72da      	strb	r2, [r3, #11]
  P2P_Server_App_Context.FETVal.vVal3=((int)((vValue)*pow(10,2))%10)+'0';
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	4bb4      	ldr	r3, [pc, #720]	; (8004c3c <P2PS_APP_FETdata_Transmit+0x36c>)
 800496c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004970:	f7fb fe1a 	bl	80005a8 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f7fc f8c4 	bl	8000b08 <__aeabi_d2iz>
 8004980:	4602      	mov	r2, r0
 8004982:	4bac      	ldr	r3, [pc, #688]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004984:	fb83 1302 	smull	r1, r3, r3, r2
 8004988:	1099      	asrs	r1, r3, #2
 800498a:	17d3      	asrs	r3, r2, #31
 800498c:	1ac9      	subs	r1, r1, r3
 800498e:	460b      	mov	r3, r1
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	1ad1      	subs	r1, r2, r3
 8004998:	b2cb      	uxtb	r3, r1
 800499a:	3330      	adds	r3, #48	; 0x30
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4ba4      	ldr	r3, [pc, #656]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 80049a0:	731a      	strb	r2, [r3, #12]
  P2P_Server_App_Context.FETVal.vVal4=((int)((vValue)*pow(10,3))%10)+'0';
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	4ba6      	ldr	r3, [pc, #664]	; (8004c40 <P2PS_APP_FETdata_Transmit+0x370>)
 80049a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049ac:	f7fb fdfc 	bl	80005a8 <__aeabi_dmul>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	f7fc f8a6 	bl	8000b08 <__aeabi_d2iz>
 80049bc:	4602      	mov	r2, r0
 80049be:	4b9d      	ldr	r3, [pc, #628]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 80049c0:	fb83 1302 	smull	r1, r3, r3, r2
 80049c4:	1099      	asrs	r1, r3, #2
 80049c6:	17d3      	asrs	r3, r2, #31
 80049c8:	1ac9      	subs	r1, r1, r3
 80049ca:	460b      	mov	r3, r1
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	1ad1      	subs	r1, r2, r3
 80049d4:	b2cb      	uxtb	r3, r1
 80049d6:	3330      	adds	r3, #48	; 0x30
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	4b95      	ldr	r3, [pc, #596]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 80049dc:	735a      	strb	r2, [r3, #13]

  int indice = log10(iValue1);
 80049de:	ed97 0b02 	vldr	d0, [r7, #8]
 80049e2:	f00f fac5 	bl	8013f70 <log10>
 80049e6:	ec53 2b10 	vmov	r2, r3, d0
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f7fc f88b 	bl	8000b08 <__aeabi_d2iz>
 80049f2:	4603      	mov	r3, r0
 80049f4:	61fb      	str	r3, [r7, #28]
  P2P_Server_App_Context.FETVal.iVal11=((int)((iValue1)*pow(10,abs(indice)))%10)+'0';
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bfb8      	it	lt
 80049fc:	425b      	neglt	r3, r3
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fb fd68 	bl	80004d4 <__aeabi_i2d>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	ec43 2b11 	vmov	d1, r2, r3
 8004a0c:	ed9f 0b86 	vldr	d0, [pc, #536]	; 8004c28 <P2PS_APP_FETdata_Transmit+0x358>
 8004a10:	f00f faec 	bl	8013fec <pow>
 8004a14:	ec51 0b10 	vmov	r0, r1, d0
 8004a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a1c:	f7fb fdc4 	bl	80005a8 <__aeabi_dmul>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	f7fc f86e 	bl	8000b08 <__aeabi_d2iz>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b81      	ldr	r3, [pc, #516]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004a30:	fb83 1302 	smull	r1, r3, r3, r2
 8004a34:	1099      	asrs	r1, r3, #2
 8004a36:	17d3      	asrs	r3, r2, #31
 8004a38:	1ac9      	subs	r1, r1, r3
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	1ad1      	subs	r1, r2, r3
 8004a44:	b2cb      	uxtb	r3, r1
 8004a46:	3330      	adds	r3, #48	; 0x30
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b79      	ldr	r3, [pc, #484]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004a4c:	73da      	strb	r2, [r3, #15]
  P2P_Server_App_Context.FETVal.iVal12=((int)((iValue1)*pow(10,abs(indice)+1))%10)+'0';
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bfb8      	it	lt
 8004a54:	425b      	neglt	r3, r3
 8004a56:	3301      	adds	r3, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fb fd3b 	bl	80004d4 <__aeabi_i2d>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	ec43 2b11 	vmov	d1, r2, r3
 8004a66:	ed9f 0b70 	vldr	d0, [pc, #448]	; 8004c28 <P2PS_APP_FETdata_Transmit+0x358>
 8004a6a:	f00f fabf 	bl	8013fec <pow>
 8004a6e:	ec51 0b10 	vmov	r0, r1, d0
 8004a72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a76:	f7fb fd97 	bl	80005a8 <__aeabi_dmul>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	f7fc f841 	bl	8000b08 <__aeabi_d2iz>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4b6a      	ldr	r3, [pc, #424]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004a8a:	fb83 1302 	smull	r1, r3, r3, r2
 8004a8e:	1099      	asrs	r1, r3, #2
 8004a90:	17d3      	asrs	r3, r2, #31
 8004a92:	1ac9      	subs	r1, r1, r3
 8004a94:	460b      	mov	r3, r1
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	1ad1      	subs	r1, r2, r3
 8004a9e:	b2cb      	uxtb	r3, r1
 8004aa0:	3330      	adds	r3, #48	; 0x30
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b62      	ldr	r3, [pc, #392]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004aa6:	741a      	strb	r2, [r3, #16]
  P2P_Server_App_Context.FETVal.iVal13=((int)((iValue1)*pow(10,abs(indice)+2))%10)+'0';
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bfb8      	it	lt
 8004aae:	425b      	neglt	r3, r3
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fb fd0e 	bl	80004d4 <__aeabi_i2d>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	ec43 2b11 	vmov	d1, r2, r3
 8004ac0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8004c28 <P2PS_APP_FETdata_Transmit+0x358>
 8004ac4:	f00f fa92 	bl	8013fec <pow>
 8004ac8:	ec51 0b10 	vmov	r0, r1, d0
 8004acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad0:	f7fb fd6a 	bl	80005a8 <__aeabi_dmul>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7fc f814 	bl	8000b08 <__aeabi_d2iz>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b54      	ldr	r3, [pc, #336]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004ae4:	fb83 1302 	smull	r1, r3, r3, r2
 8004ae8:	1099      	asrs	r1, r3, #2
 8004aea:	17d3      	asrs	r3, r2, #31
 8004aec:	1ac9      	subs	r1, r1, r3
 8004aee:	460b      	mov	r3, r1
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	1ad1      	subs	r1, r2, r3
 8004af8:	b2cb      	uxtb	r3, r1
 8004afa:	3330      	adds	r3, #48	; 0x30
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	4b4c      	ldr	r3, [pc, #304]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004b00:	745a      	strb	r2, [r3, #17]
  P2P_Server_App_Context.FETVal.iVal14=((int)((iValue1)*pow(10,abs(indice)+3))%10)+'0';
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bfb8      	it	lt
 8004b08:	425b      	neglt	r3, r3
 8004b0a:	3303      	adds	r3, #3
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fb fce1 	bl	80004d4 <__aeabi_i2d>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	ec43 2b11 	vmov	d1, r2, r3
 8004b1a:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8004c28 <P2PS_APP_FETdata_Transmit+0x358>
 8004b1e:	f00f fa65 	bl	8013fec <pow>
 8004b22:	ec51 0b10 	vmov	r0, r1, d0
 8004b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b2a:	f7fb fd3d 	bl	80005a8 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	f7fb ffe7 	bl	8000b08 <__aeabi_d2iz>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004b3e:	fb83 1302 	smull	r1, r3, r3, r2
 8004b42:	1099      	asrs	r1, r3, #2
 8004b44:	17d3      	asrs	r3, r2, #31
 8004b46:	1ac9      	subs	r1, r1, r3
 8004b48:	460b      	mov	r3, r1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	1ad1      	subs	r1, r2, r3
 8004b52:	b2cb      	uxtb	r3, r1
 8004b54:	3330      	adds	r3, #48	; 0x30
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004b5a:	749a      	strb	r2, [r3, #18]
  P2P_Server_App_Context.FETVal.iVale1=(abs(indice)+1)+'0';
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bfb8      	it	lt
 8004b62:	425b      	neglt	r3, r3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3331      	adds	r3, #49	; 0x31
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004b6c:	74da      	strb	r2, [r3, #19]

  indice = log10(iValue2);
 8004b6e:	ed97 0b00 	vldr	d0, [r7]
 8004b72:	f00f f9fd 	bl	8013f70 <log10>
 8004b76:	ec53 2b10 	vmov	r2, r3, d0
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7fb ffc3 	bl	8000b08 <__aeabi_d2iz>
 8004b82:	4603      	mov	r3, r0
 8004b84:	61fb      	str	r3, [r7, #28]
  P2P_Server_App_Context.FETVal.iVal21=((int)((iValue2)*pow(10,abs(indice)))%10)+'0';
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bfb8      	it	lt
 8004b8c:	425b      	neglt	r3, r3
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fb fca0 	bl	80004d4 <__aeabi_i2d>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	ec43 2b11 	vmov	d1, r2, r3
 8004b9c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004c28 <P2PS_APP_FETdata_Transmit+0x358>
 8004ba0:	f00f fa24 	bl	8013fec <pow>
 8004ba4:	ec51 0b10 	vmov	r0, r1, d0
 8004ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bac:	f7fb fcfc 	bl	80005a8 <__aeabi_dmul>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f7fb ffa6 	bl	8000b08 <__aeabi_d2iz>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004bc0:	fb83 1302 	smull	r1, r3, r3, r2
 8004bc4:	1099      	asrs	r1, r3, #2
 8004bc6:	17d3      	asrs	r3, r2, #31
 8004bc8:	1ac9      	subs	r1, r1, r3
 8004bca:	460b      	mov	r3, r1
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	1ad1      	subs	r1, r2, r3
 8004bd4:	b2cb      	uxtb	r3, r1
 8004bd6:	3330      	adds	r3, #48	; 0x30
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <P2PS_APP_FETdata_Transmit+0x360>)
 8004bdc:	751a      	strb	r2, [r3, #20]
  P2P_Server_App_Context.FETVal.iVal22=((int)((iValue2)*pow(10,abs(indice)+1))%10)+'0';
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bfb8      	it	lt
 8004be4:	425b      	neglt	r3, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fb fc73 	bl	80004d4 <__aeabi_i2d>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	ec43 2b11 	vmov	d1, r2, r3
 8004bf6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004c28 <P2PS_APP_FETdata_Transmit+0x358>
 8004bfa:	f00f f9f7 	bl	8013fec <pow>
 8004bfe:	ec51 0b10 	vmov	r0, r1, d0
 8004c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c06:	f7fb fccf 	bl	80005a8 <__aeabi_dmul>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	f7fb ff79 	bl	8000b08 <__aeabi_d2iz>
 8004c16:	4602      	mov	r2, r0
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <P2PS_APP_FETdata_Transmit+0x364>)
 8004c1a:	fb83 1302 	smull	r1, r3, r3, r2
 8004c1e:	1099      	asrs	r1, r3, #2
 8004c20:	17d3      	asrs	r3, r2, #31
 8004c22:	1ac9      	subs	r1, r1, r3
 8004c24:	460b      	mov	r3, r1
 8004c26:	e00d      	b.n	8004c44 <P2PS_APP_FETdata_Transmit+0x374>
 8004c28:	00000000 	.word	0x00000000
 8004c2c:	40240000 	.word	0x40240000
 8004c30:	2000034c 	.word	0x2000034c
 8004c34:	66666667 	.word	0x66666667
 8004c38:	40240000 	.word	0x40240000
 8004c3c:	40590000 	.word	0x40590000
 8004c40:	408f4000 	.word	0x408f4000
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	1ad1      	subs	r1, r2, r3
 8004c4c:	b2cb      	uxtb	r3, r1
 8004c4e:	3330      	adds	r3, #48	; 0x30
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <P2PS_APP_FETdata_Transmit+0x468>)
 8004c54:	755a      	strb	r2, [r3, #21]
  P2P_Server_App_Context.FETVal.iVal23=((int)((iValue2)*pow(10,abs(indice)+2))%10)+'0';
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bfb8      	it	lt
 8004c5c:	425b      	neglt	r3, r3
 8004c5e:	3302      	adds	r3, #2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fb fc37 	bl	80004d4 <__aeabi_i2d>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	ec43 2b11 	vmov	d1, r2, r3
 8004c6e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8004d30 <P2PS_APP_FETdata_Transmit+0x460>
 8004c72:	f00f f9bb 	bl	8013fec <pow>
 8004c76:	ec51 0b10 	vmov	r0, r1, d0
 8004c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7e:	f7fb fc93 	bl	80005a8 <__aeabi_dmul>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4610      	mov	r0, r2
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f7fb ff3d 	bl	8000b08 <__aeabi_d2iz>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <P2PS_APP_FETdata_Transmit+0x46c>)
 8004c92:	fb83 1302 	smull	r1, r3, r3, r2
 8004c96:	1099      	asrs	r1, r3, #2
 8004c98:	17d3      	asrs	r3, r2, #31
 8004c9a:	1ac9      	subs	r1, r1, r3
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	1ad1      	subs	r1, r2, r3
 8004ca6:	b2cb      	uxtb	r3, r1
 8004ca8:	3330      	adds	r3, #48	; 0x30
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <P2PS_APP_FETdata_Transmit+0x468>)
 8004cae:	759a      	strb	r2, [r3, #22]
  P2P_Server_App_Context.FETVal.iVal24=((int)((iValue2)*pow(10,abs(indice)+3))%10)+'0';
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfb8      	it	lt
 8004cb6:	425b      	neglt	r3, r3
 8004cb8:	3303      	adds	r3, #3
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fc0a 	bl	80004d4 <__aeabi_i2d>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	ec43 2b11 	vmov	d1, r2, r3
 8004cc8:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8004d30 <P2PS_APP_FETdata_Transmit+0x460>
 8004ccc:	f00f f98e 	bl	8013fec <pow>
 8004cd0:	ec51 0b10 	vmov	r0, r1, d0
 8004cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd8:	f7fb fc66 	bl	80005a8 <__aeabi_dmul>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7fb ff10 	bl	8000b08 <__aeabi_d2iz>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <P2PS_APP_FETdata_Transmit+0x46c>)
 8004cec:	fb83 1302 	smull	r1, r3, r3, r2
 8004cf0:	1099      	asrs	r1, r3, #2
 8004cf2:	17d3      	asrs	r3, r2, #31
 8004cf4:	1ac9      	subs	r1, r1, r3
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	1ad1      	subs	r1, r2, r3
 8004d00:	b2cb      	uxtb	r3, r1
 8004d02:	3330      	adds	r3, #48	; 0x30
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <P2PS_APP_FETdata_Transmit+0x468>)
 8004d08:	75da      	strb	r2, [r3, #23]
  P2P_Server_App_Context.FETVal.iVale2=(abs(indice)+1)+'0';
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bfb8      	it	lt
 8004d10:	425b      	neglt	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	3331      	adds	r3, #49	; 0x31
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <P2PS_APP_FETdata_Transmit+0x468>)
 8004d1a:	761a      	strb	r2, [r3, #24]


  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2008      	movs	r0, #8
 8004d20:	f00a fb88 	bl	800f434 <UTIL_SEQ_SetTask>
  return;
 8004d24:	bf00      	nop
}
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	f3af 8000 	nop.w
 8004d30:	00000000 	.word	0x00000000
 8004d34:	40240000 	.word	0x40240000
 8004d38:	2000034c 	.word	0x2000034c
 8004d3c:	66666667 	.word	0x66666667

08004d40 <HAL_SYSTICK_Callback>:

void Response(void){
	P2PS_Send_Notification();
}

void HAL_SYSTICK_Callback(void){
 8004d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d42:	b09d      	sub	sp, #116	; 0x74
 8004d44:	af10      	add	r7, sp, #64	; 0x40

	if(sweepFlag == 0 && P2P_Server_App_Context.Notification_Status == 1){
 8004d46:	4ba4      	ldr	r3, [pc, #656]	; (8004fd8 <HAL_SYSTICK_Callback+0x298>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <HAL_SYSTICK_Callback+0x2a>
 8004d4e:	4ba3      	ldr	r3, [pc, #652]	; (8004fdc <HAL_SYSTICK_Callback+0x29c>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d109      	bne.n	8004d6a <HAL_SYSTICK_Callback+0x2a>
		sweepFlag = 1;
 8004d56:	4ba0      	ldr	r3, [pc, #640]	; (8004fd8 <HAL_SYSTICK_Callback+0x298>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
		dacV = 0.15;
 8004d5c:	49a0      	ldr	r1, [pc, #640]	; (8004fe0 <HAL_SYSTICK_Callback+0x2a0>)
 8004d5e:	a398      	add	r3, pc, #608	; (adr r3, 8004fc0 <HAL_SYSTICK_Callback+0x280>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	e9c1 2300 	strd	r2, r3, [r1]
 8004d68:	e1e1      	b.n	800512e <HAL_SYSTICK_Callback+0x3ee>
	}
	else if(sweepFlag == 1 && P2P_Server_App_Context.Notification_Status == 1 && dacV <= 2.0 && dacV >= 0){
 8004d6a:	4b9b      	ldr	r3, [pc, #620]	; (8004fd8 <HAL_SYSTICK_Callback+0x298>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	f040 816e 	bne.w	8005050 <HAL_SYSTICK_Callback+0x310>
 8004d74:	4b99      	ldr	r3, [pc, #612]	; (8004fdc <HAL_SYSTICK_Callback+0x29c>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 8169 	bne.w	8005050 <HAL_SYSTICK_Callback+0x310>
 8004d7e:	4b98      	ldr	r3, [pc, #608]	; (8004fe0 <HAL_SYSTICK_Callback+0x2a0>)
 8004d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d8c:	f7fb fe88 	bl	8000aa0 <__aeabi_dcmple>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 815c 	beq.w	8005050 <HAL_SYSTICK_Callback+0x310>
 8004d98:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <HAL_SYSTICK_Callback+0x2a0>)
 8004d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	f7fb fe85 	bl	8000ab4 <__aeabi_dcmpge>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 814f 	beq.w	8005050 <HAL_SYSTICK_Callback+0x310>

		if(adcFlag == 0 && samplingFlag == 0){
 8004db2:	4b8c      	ldr	r3, [pc, #560]	; (8004fe4 <HAL_SYSTICK_Callback+0x2a4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d132      	bne.n	8004e20 <HAL_SYSTICK_Callback+0xe0>
 8004dba:	4b8b      	ldr	r3, [pc, #556]	; (8004fe8 <HAL_SYSTICK_Callback+0x2a8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12e      	bne.n	8004e20 <HAL_SYSTICK_Callback+0xe0>
			AD5697R_setDAC(0,dacV);
 8004dc2:	4b87      	ldr	r3, [pc, #540]	; (8004fe0 <HAL_SYSTICK_Callback+0x2a0>)
 8004dc4:	ed93 7b00 	vldr	d7, [r3]
 8004dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8004dcc:	eef0 0a67 	vmov.f32	s1, s15
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f7fc f905 	bl	8000fe0 <AD5697R_setDAC>
			AD5697R_setDAC(1,dacV);
 8004dd6:	4b82      	ldr	r3, [pc, #520]	; (8004fe0 <HAL_SYSTICK_Callback+0x2a0>)
 8004dd8:	ed93 7b00 	vldr	d7, [r3]
 8004ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8004de0:	eef0 0a67 	vmov.f32	s1, s15
 8004de4:	2001      	movs	r0, #1
 8004de6:	f7fc f8fb 	bl	8000fe0 <AD5697R_setDAC>

			adcTick = 0;
 8004dea:	4b80      	ldr	r3, [pc, #512]	; (8004fec <HAL_SYSTICK_Callback+0x2ac>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
			samplingTick = 0;
 8004df0:	4b7f      	ldr	r3, [pc, #508]	; (8004ff0 <HAL_SYSTICK_Callback+0x2b0>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]

			adcCount = 0;
 8004df6:	4b7f      	ldr	r3, [pc, #508]	; (8004ff4 <HAL_SYSTICK_Callback+0x2b4>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
			adcSum0 = 0;
 8004dfc:	4b7e      	ldr	r3, [pc, #504]	; (8004ff8 <HAL_SYSTICK_Callback+0x2b8>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
			adcSum1 = 0;
 8004e02:	4b7e      	ldr	r3, [pc, #504]	; (8004ffc <HAL_SYSTICK_Callback+0x2bc>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

			samplingFlag = 1;
 8004e08:	4b77      	ldr	r3, [pc, #476]	; (8004fe8 <HAL_SYSTICK_Callback+0x2a8>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
			adcFlag = 1;
 8004e0e:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <HAL_SYSTICK_Callback+0x2a4>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

			HAL_ADC_Start_DMA(&hadc1, &adcBuffer, 2);
 8004e14:	2202      	movs	r2, #2
 8004e16:	497a      	ldr	r1, [pc, #488]	; (8005000 <HAL_SYSTICK_Callback+0x2c0>)
 8004e18:	487a      	ldr	r0, [pc, #488]	; (8005004 <HAL_SYSTICK_Callback+0x2c4>)
 8004e1a:	f001 f9f9 	bl	8006210 <HAL_ADC_Start_DMA>
 8004e1e:	e116      	b.n	800504e <HAL_SYSTICK_Callback+0x30e>
		}
		else if(adcTick > 90 && adcFlag == 1 && samplingFlag == 1 && P2P_Server_App_Context.Notification_Status == 1 ){
 8004e20:	4b72      	ldr	r3, [pc, #456]	; (8004fec <HAL_SYSTICK_Callback+0x2ac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b5a      	cmp	r3, #90	; 0x5a
 8004e26:	f340 80f3 	ble.w	8005010 <HAL_SYSTICK_Callback+0x2d0>
 8004e2a:	4b6e      	ldr	r3, [pc, #440]	; (8004fe4 <HAL_SYSTICK_Callback+0x2a4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	f040 80ee 	bne.w	8005010 <HAL_SYSTICK_Callback+0x2d0>
 8004e34:	4b6c      	ldr	r3, [pc, #432]	; (8004fe8 <HAL_SYSTICK_Callback+0x2a8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f040 80e9 	bne.w	8005010 <HAL_SYSTICK_Callback+0x2d0>
 8004e3e:	4b67      	ldr	r3, [pc, #412]	; (8004fdc <HAL_SYSTICK_Callback+0x29c>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	f040 80e4 	bne.w	8005010 <HAL_SYSTICK_Callback+0x2d0>
			HAL_ADC_Stop_DMA(&hadc1);
 8004e48:	486e      	ldr	r0, [pc, #440]	; (8005004 <HAL_SYSTICK_Callback+0x2c4>)
 8004e4a:	f001 fa65 	bl	8006318 <HAL_ADC_Stop_DMA>

			adcFlag = 0;
 8004e4e:	4b65      	ldr	r3, [pc, #404]	; (8004fe4 <HAL_SYSTICK_Callback+0x2a4>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]



			int adcAve0 = adcSum0 / adcCount;
 8004e54:	4b68      	ldr	r3, [pc, #416]	; (8004ff8 <HAL_SYSTICK_Callback+0x2b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a66      	ldr	r2, [pc, #408]	; (8004ff4 <HAL_SYSTICK_Callback+0x2b4>)
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
			int adcAve1 = adcSum1 / adcCount;
 8004e62:	4b66      	ldr	r3, [pc, #408]	; (8004ffc <HAL_SYSTICK_Callback+0x2bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a63      	ldr	r2, [pc, #396]	; (8004ff4 <HAL_SYSTICK_Callback+0x2b4>)
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28

			double vval0 = ((double)adcAve0) / ((double)4096.0)*3.3;
 8004e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e72:	f7fb fb2f 	bl	80004d4 <__aeabi_i2d>
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	4b63      	ldr	r3, [pc, #396]	; (8005008 <HAL_SYSTICK_Callback+0x2c8>)
 8004e7c:	f7fb fcbe 	bl	80007fc <__aeabi_ddiv>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	a34f      	add	r3, pc, #316	; (adr r3, 8004fc8 <HAL_SYSTICK_Callback+0x288>)
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f7fb fb8b 	bl	80005a8 <__aeabi_dmul>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	e9c7 2308 	strd	r2, r3, [r7, #32]
			double vval1 = ((double)adcAve1) / ((double)4096.0)*3.3;
 8004e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9c:	f7fb fb1a 	bl	80004d4 <__aeabi_i2d>
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	4b58      	ldr	r3, [pc, #352]	; (8005008 <HAL_SYSTICK_Callback+0x2c8>)
 8004ea6:	f7fb fca9 	bl	80007fc <__aeabi_ddiv>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	a345      	add	r3, pc, #276	; (adr r3, 8004fc8 <HAL_SYSTICK_Callback+0x288>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb fb76 	bl	80005a8 <__aeabi_dmul>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]

			double ival0 = ((double)adcAve0) / ((double)4096.0)*3.3 /1e5;
 8004ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ec6:	f7fb fb05 	bl	80004d4 <__aeabi_i2d>
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	4b4e      	ldr	r3, [pc, #312]	; (8005008 <HAL_SYSTICK_Callback+0x2c8>)
 8004ed0:	f7fb fc94 	bl	80007fc <__aeabi_ddiv>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	a33a      	add	r3, pc, #232	; (adr r3, 8004fc8 <HAL_SYSTICK_Callback+0x288>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f7fb fb61 	bl	80005a8 <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	a338      	add	r3, pc, #224	; (adr r3, 8004fd0 <HAL_SYSTICK_Callback+0x290>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fc82 	bl	80007fc <__aeabi_ddiv>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
			double ival1 = ((double)adcAve1) / ((double)4096.0)*3.3 /1e5;
 8004f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f02:	f7fb fae7 	bl	80004d4 <__aeabi_i2d>
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	4b3f      	ldr	r3, [pc, #252]	; (8005008 <HAL_SYSTICK_Callback+0x2c8>)
 8004f0c:	f7fb fc76 	bl	80007fc <__aeabi_ddiv>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	a32b      	add	r3, pc, #172	; (adr r3, 8004fc8 <HAL_SYSTICK_Callback+0x288>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fb43 	bl	80005a8 <__aeabi_dmul>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	a329      	add	r3, pc, #164	; (adr r3, 8004fd0 <HAL_SYSTICK_Callback+0x290>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f7fb fc64 	bl	80007fc <__aeabi_ddiv>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	e9c7 2302 	strd	r2, r3, [r7, #8]

			printf("%.3f, %d, %d, %d, %.3f, %.6e, %d, %d, %d, %.3f, %.6e\r\n",dacV, adcSum0, adcCount, adcAve0, vval0, ival0, adcSum1, adcCount, adcAve1, vval1, ival1);
 8004f3c:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <HAL_SYSTICK_Callback+0x2a0>)
 8004f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f42:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <HAL_SYSTICK_Callback+0x2b8>)
 8004f44:	681c      	ldr	r4, [r3, #0]
 8004f46:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <HAL_SYSTICK_Callback+0x2b4>)
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <HAL_SYSTICK_Callback+0x2bc>)
 8004f4c:	681e      	ldr	r6, [r3, #0]
 8004f4e:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <HAL_SYSTICK_Callback+0x2b4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	930a      	str	r3, [sp, #40]	; 0x28
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6c:	9608      	str	r6, [sp, #32]
 8004f6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	9302      	str	r3, [sp, #8]
 8004f82:	9501      	str	r5, [sp, #4]
 8004f84:	9400      	str	r4, [sp, #0]
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4820      	ldr	r0, [pc, #128]	; (800500c <HAL_SYSTICK_Callback+0x2cc>)
 8004f8c:	f00b faaa 	bl	80104e4 <iprintf>

			adcCount = 0;
 8004f90:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_SYSTICK_Callback+0x2b4>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
			adcSum0 = 0;
 8004f96:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <HAL_SYSTICK_Callback+0x2b8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
			adcSum1 = 0;
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <HAL_SYSTICK_Callback+0x2bc>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

			P2PS_APP_FETdata_Transmit(dacV, vval0, vval1);
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <HAL_SYSTICK_Callback+0x2a0>)
 8004fa4:	ed93 7b00 	vldr	d7, [r3]
 8004fa8:	ed97 2b06 	vldr	d2, [r7, #24]
 8004fac:	ed97 1b08 	vldr	d1, [r7, #32]
 8004fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8004fb4:	eef0 0a67 	vmov.f32	s1, s15
 8004fb8:	f7ff fc8a 	bl	80048d0 <P2PS_APP_FETdata_Transmit>
		else if(adcTick > 90 && adcFlag == 1 && samplingFlag == 1 && P2P_Server_App_Context.Notification_Status == 1 ){
 8004fbc:	e047      	b.n	800504e <HAL_SYSTICK_Callback+0x30e>
 8004fbe:	bf00      	nop
 8004fc0:	33333333 	.word	0x33333333
 8004fc4:	3fc33333 	.word	0x3fc33333
 8004fc8:	66666666 	.word	0x66666666
 8004fcc:	400a6666 	.word	0x400a6666
 8004fd0:	00000000 	.word	0x00000000
 8004fd4:	40f86a00 	.word	0x40f86a00
 8004fd8:	200007cc 	.word	0x200007cc
 8004fdc:	2000034c 	.word	0x2000034c
 8004fe0:	200007c0 	.word	0x200007c0
 8004fe4:	200007d4 	.word	0x200007d4
 8004fe8:	200007e8 	.word	0x200007e8
 8004fec:	200007d0 	.word	0x200007d0
 8004ff0:	200007e4 	.word	0x200007e4
 8004ff4:	200007d8 	.word	0x200007d8
 8004ff8:	200007dc 	.word	0x200007dc
 8004ffc:	200007e0 	.word	0x200007e0
 8005000:	200007ec 	.word	0x200007ec
 8005004:	200003d8 	.word	0x200003d8
 8005008:	40b00000 	.word	0x40b00000
 800500c:	08016624 	.word	0x08016624

		}
		else if(adcFlag == 0 && samplingTick > 100 && samplingFlag == 1){
 8005010:	4b55      	ldr	r3, [pc, #340]	; (8005168 <HAL_SYSTICK_Callback+0x428>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 8089 	bne.w	800512c <HAL_SYSTICK_Callback+0x3ec>
 800501a:	4b54      	ldr	r3, [pc, #336]	; (800516c <HAL_SYSTICK_Callback+0x42c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b64      	cmp	r3, #100	; 0x64
 8005020:	f340 8084 	ble.w	800512c <HAL_SYSTICK_Callback+0x3ec>
 8005024:	4b52      	ldr	r3, [pc, #328]	; (8005170 <HAL_SYSTICK_Callback+0x430>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d17f      	bne.n	800512c <HAL_SYSTICK_Callback+0x3ec>
			samplingFlag = 0;
 800502c:	4b50      	ldr	r3, [pc, #320]	; (8005170 <HAL_SYSTICK_Callback+0x430>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
			dacV = dacV + 0.01;
 8005032:	4b50      	ldr	r3, [pc, #320]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 8005034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005038:	a347      	add	r3, pc, #284	; (adr r3, 8005158 <HAL_SYSTICK_Callback+0x418>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb f8fd 	bl	800023c <__adddf3>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	494b      	ldr	r1, [pc, #300]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 8005048:	e9c1 2300 	strd	r2, r3, [r1]
		if(adcFlag == 0 && samplingFlag == 0){
 800504c:	e06e      	b.n	800512c <HAL_SYSTICK_Callback+0x3ec>
 800504e:	e06d      	b.n	800512c <HAL_SYSTICK_Callback+0x3ec>
		}
	}
	else if (sweepFlag == 1 && P2P_Server_App_Context.Notification_Status == 1 && dacV >2.0 && dacV != -1 	){
 8005050:	4b49      	ldr	r3, [pc, #292]	; (8005178 <HAL_SYSTICK_Callback+0x438>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d131      	bne.n	80050bc <HAL_SYSTICK_Callback+0x37c>
 8005058:	4b48      	ldr	r3, [pc, #288]	; (800517c <HAL_SYSTICK_Callback+0x43c>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d12d      	bne.n	80050bc <HAL_SYSTICK_Callback+0x37c>
 8005060:	4b44      	ldr	r3, [pc, #272]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 8005062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800506e:	f7fb fd2b 	bl	8000ac8 <__aeabi_dcmpgt>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d021      	beq.n	80050bc <HAL_SYSTICK_Callback+0x37c>
 8005078:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 800507a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <HAL_SYSTICK_Callback+0x440>)
 8005084:	f7fb fcf8 	bl	8000a78 <__aeabi_dcmpeq>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_SYSTICK_Callback+0x37c>
		dacV = -1;
 800508e:	4939      	ldr	r1, [pc, #228]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_SYSTICK_Callback+0x440>)
 8005096:	e9c1 2300 	strd	r2, r3, [r1]
		P2PS_APP_FETdata_Transmit(dacV, 0.0, 0.0);
 800509a:	4b36      	ldr	r3, [pc, #216]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 800509c:	ed93 7b00 	vldr	d7, [r3]
 80050a0:	ed9f 2b2f 	vldr	d2, [pc, #188]	; 8005160 <HAL_SYSTICK_Callback+0x420>
 80050a4:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8005160 <HAL_SYSTICK_Callback+0x420>
 80050a8:	eeb0 0a47 	vmov.f32	s0, s14
 80050ac:	eef0 0a67 	vmov.f32	s1, s15
 80050b0:	f7ff fc0e 	bl	80048d0 <P2PS_APP_FETdata_Transmit>
		globalTick = 0;
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_SYSTICK_Callback+0x444>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e038      	b.n	800512e <HAL_SYSTICK_Callback+0x3ee>
	}
	else if (globalTick > 10000 && sweepFlag == 1 && P2P_Server_App_Context.Notification_Status == 1 && dacV <= -0.5){
 80050bc:	4b31      	ldr	r3, [pc, #196]	; (8005184 <HAL_SYSTICK_Callback+0x444>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80050c4:	4293      	cmp	r3, r2
 80050c6:	dd32      	ble.n	800512e <HAL_SYSTICK_Callback+0x3ee>
 80050c8:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <HAL_SYSTICK_Callback+0x438>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d12e      	bne.n	800512e <HAL_SYSTICK_Callback+0x3ee>
 80050d0:	4b2a      	ldr	r3, [pc, #168]	; (800517c <HAL_SYSTICK_Callback+0x43c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d12a      	bne.n	800512e <HAL_SYSTICK_Callback+0x3ee>
 80050d8:	4b26      	ldr	r3, [pc, #152]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 80050da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <HAL_SYSTICK_Callback+0x448>)
 80050e4:	f7fb fcdc 	bl	8000aa0 <__aeabi_dcmple>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01f      	beq.n	800512e <HAL_SYSTICK_Callback+0x3ee>
		dacV = 0.0;
 80050ee:	4921      	ldr	r1, [pc, #132]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9c1 2300 	strd	r2, r3, [r1]
		AD5697R_setDAC(0,dacV);
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 80050fe:	ed93 7b00 	vldr	d7, [r3]
 8005102:	eeb0 0a47 	vmov.f32	s0, s14
 8005106:	eef0 0a67 	vmov.f32	s1, s15
 800510a:	2000      	movs	r0, #0
 800510c:	f7fb ff68 	bl	8000fe0 <AD5697R_setDAC>
		AD5697R_setDAC(1,dacV);
 8005110:	4b18      	ldr	r3, [pc, #96]	; (8005174 <HAL_SYSTICK_Callback+0x434>)
 8005112:	ed93 7b00 	vldr	d7, [r3]
 8005116:	eeb0 0a47 	vmov.f32	s0, s14
 800511a:	eef0 0a67 	vmov.f32	s1, s15
 800511e:	2001      	movs	r0, #1
 8005120:	f7fb ff5e 	bl	8000fe0 <AD5697R_setDAC>
		sweepFlag = 0;
 8005124:	4b14      	ldr	r3, [pc, #80]	; (8005178 <HAL_SYSTICK_Callback+0x438>)
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e000      	b.n	800512e <HAL_SYSTICK_Callback+0x3ee>
		if(adcFlag == 0 && samplingFlag == 0){
 800512c:	bf00      	nop
	}




	globalTick = globalTick + 1;
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_SYSTICK_Callback+0x444>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <HAL_SYSTICK_Callback+0x444>)
 8005136:	6013      	str	r3, [r2, #0]
	adcTick = adcTick + 1;
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <HAL_SYSTICK_Callback+0x44c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <HAL_SYSTICK_Callback+0x44c>)
 8005140:	6013      	str	r3, [r2, #0]
	samplingTick = samplingTick + 1;
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <HAL_SYSTICK_Callback+0x42c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3301      	adds	r3, #1
 8005148:	4a08      	ldr	r2, [pc, #32]	; (800516c <HAL_SYSTICK_Callback+0x42c>)
 800514a:	6013      	str	r3, [r2, #0]


}
 800514c:	bf00      	nop
 800514e:	3734      	adds	r7, #52	; 0x34
 8005150:	46bd      	mov	sp, r7
 8005152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005154:	f3af 8000 	nop.w
 8005158:	47ae147b 	.word	0x47ae147b
 800515c:	3f847ae1 	.word	0x3f847ae1
	...
 8005168:	200007d4 	.word	0x200007d4
 800516c:	200007e4 	.word	0x200007e4
 8005170:	200007e8 	.word	0x200007e8
 8005174:	200007c0 	.word	0x200007c0
 8005178:	200007cc 	.word	0x200007cc
 800517c:	2000034c 	.word	0x2000034c
 8005180:	bff00000 	.word	0xbff00000
 8005184:	200007c8 	.word	0x200007c8
 8005188:	bfe00000 	.word	0xbfe00000
 800518c:	200007d0 	.word	0x200007d0

08005190 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	//printf("DMA val: %d, %d\r\n", (uint16_t)adcBuffer[0], (uint16_t)adcBuffer[1]);
	adcSum0 = adcSum0 + (uint16_t)adcBuffer[0];
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <HAL_ADC_ConvCpltCallback+0x40>)
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	4a0b      	ldr	r2, [pc, #44]	; (80051d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80051a6:	6013      	str	r3, [r2, #0]
	adcSum1 = adcSum1 + (uint16_t)adcBuffer[1];
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_ADC_ConvCpltCallback+0x40>)
 80051aa:	885b      	ldrh	r3, [r3, #2]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4413      	add	r3, r2
 80051b4:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80051b6:	6013      	str	r3, [r2, #0]
	adcCount = adcCount + 1;
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_ADC_ConvCpltCallback+0x4c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	4a07      	ldr	r2, [pc, #28]	; (80051dc <HAL_ADC_ConvCpltCallback+0x4c>)
 80051c0:	6013      	str	r3, [r2, #0]
		adcChannel = 0;
		printf("ADC val 2: %d\r\n", retVal);
	}

*/
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	200007ec 	.word	0x200007ec
 80051d4:	200007dc 	.word	0x200007dc
 80051d8:	200007e0 	.word	0x200007e0
 80051dc:	200007d8 	.word	0x200007d8

080051e0 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <P2PS_Send_Notification+0x38>)
 80051e6:	791b      	ldrb	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <P2PS_Send_Notification+0x38>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	711a      	strb	r2, [r3, #4]
 80051f2:	e002      	b.n	80051fa <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80051f4:	4b08      	ldr	r3, [pc, #32]	; (8005218 <P2PS_Send_Notification+0x38>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	711a      	strb	r2, [r3, #4]
  }



  if(P2P_Server_App_Context.Notification_Status){
 80051fa:	4b07      	ldr	r3, [pc, #28]	; (8005218 <P2PS_Send_Notification+0x38>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <P2PS_Send_Notification+0x2e>
    //APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    //APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.FETVal);
 8005202:	4906      	ldr	r1, [pc, #24]	; (800521c <P2PS_Send_Notification+0x3c>)
 8005204:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8005208:	f008 fd48 	bl	800dc9c <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 800520c:	e003      	b.n	8005216 <P2PS_Send_Notification+0x36>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 800520e:	4804      	ldr	r0, [pc, #16]	; (8005220 <P2PS_Send_Notification+0x40>)
 8005210:	f00b f968 	bl	80104e4 <iprintf>
  return;
 8005214:	bf00      	nop
}
 8005216:	bd80      	pop	{r7, pc}
 8005218:	2000034c 	.word	0x2000034c
 800521c:	20000353 	.word	0x20000353
 8005220:	0801665c 	.word	0x0801665c

08005224 <LL_PWR_EnableBootC2>:
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <LL_PWR_EnableBootC2+0x1c>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <LL_PWR_EnableBootC2+0x1c>)
 800522e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005232:	60d3      	str	r3, [r2, #12]
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	58000400 	.word	0x58000400

08005244 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800524e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005252:	4905      	ldr	r1, [pc, #20]	; (8005268 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	58000800 	.word	0x58000800

0800526c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	4904      	ldr	r1, [pc, #16]	; (800528c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4313      	orrs	r3, r2
 800527e:	620b      	str	r3, [r1, #32]
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	58000800 	.word	0x58000800

08005290 <LL_AHB3_GRP1_EnableClock>:
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800529e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80052d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4013      	ands	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_C1_IPCC_EnableIT_TXF>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <LL_C1_IPCC_EnableIT_RXO>:
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	43db      	mvns	r3, r3
 800534e:	401a      	ands	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	605a      	str	r2, [r3, #4]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_C1_IPCC_SetFlag_CHx>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	041a      	lsls	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4013      	ands	r3, r2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d101      	bne.n	80053fe <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4013      	ands	r3, r2
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d101      	bne.n	8005428 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800543c:	2102      	movs	r1, #2
 800543e:	4818      	ldr	r0, [pc, #96]	; (80054a0 <HW_IPCC_Rx_Handler+0x68>)
 8005440:	f7ff ffe4 	bl	800540c <LL_C2_IPCC_IsActiveFlag_CHx>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HW_IPCC_Rx_Handler+0x24>
 800544a:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <HW_IPCC_Rx_Handler+0x68>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8005456:	f000 f8d5 	bl	8005604 <HW_IPCC_SYS_EvtHandler>
 800545a:	e01e      	b.n	800549a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800545c:	2101      	movs	r1, #1
 800545e:	4810      	ldr	r0, [pc, #64]	; (80054a0 <HW_IPCC_Rx_Handler+0x68>)
 8005460:	f7ff ffd4 	bl	800540c <LL_C2_IPCC_IsActiveFlag_CHx>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <HW_IPCC_Rx_Handler+0x44>
 800546a:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <HW_IPCC_Rx_Handler+0x68>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8005476:	f000 f889 	bl	800558c <HW_IPCC_BLE_EvtHandler>
 800547a:	e00e      	b.n	800549a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800547c:	2108      	movs	r1, #8
 800547e:	4808      	ldr	r0, [pc, #32]	; (80054a0 <HW_IPCC_Rx_Handler+0x68>)
 8005480:	f7ff ffc4 	bl	800540c <LL_C2_IPCC_IsActiveFlag_CHx>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d008      	beq.n	800549c <HW_IPCC_Rx_Handler+0x64>
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HW_IPCC_Rx_Handler+0x68>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8005496:	f000 f901 	bl	800569c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800549a:	bf00      	nop
 800549c:	bf00      	nop
}
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	58000c00 	.word	0x58000c00

080054a4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80054a8:	2102      	movs	r1, #2
 80054aa:	4818      	ldr	r0, [pc, #96]	; (800550c <HW_IPCC_Tx_Handler+0x68>)
 80054ac:	f7ff ff99 	bl	80053e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d108      	bne.n	80054c8 <HW_IPCC_Tx_Handler+0x24>
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <HW_IPCC_Tx_Handler+0x68>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80054c2:	f000 f893 	bl	80055ec <HW_IPCC_SYS_CmdEvtHandler>
 80054c6:	e01e      	b.n	8005506 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80054c8:	2108      	movs	r1, #8
 80054ca:	4810      	ldr	r0, [pc, #64]	; (800550c <HW_IPCC_Tx_Handler+0x68>)
 80054cc:	f7ff ff89 	bl	80053e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <HW_IPCC_Tx_Handler+0x44>
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <HW_IPCC_Tx_Handler+0x68>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80054e2:	f000 f8bd 	bl	8005660 <HW_IPCC_MM_FreeBufHandler>
 80054e6:	e00e      	b.n	8005506 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80054e8:	2120      	movs	r1, #32
 80054ea:	4808      	ldr	r0, [pc, #32]	; (800550c <HW_IPCC_Tx_Handler+0x68>)
 80054ec:	f7ff ff79 	bl	80053e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <HW_IPCC_Tx_Handler+0x64>
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HW_IPCC_Tx_Handler+0x68>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8005502:	f000 f84f 	bl	80055a4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8005506:	bf00      	nop
 8005508:	bf00      	nop
}
 800550a:	bd80      	pop	{r7, pc}
 800550c:	58000c00 	.word	0x58000c00

08005510 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8005514:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005518:	f7ff fed3 	bl	80052c2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800551c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005520:	f7ff fea4 	bl	800526c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8005524:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005528:	f7ff fe8c 	bl	8005244 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800552c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800552e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8005530:	f7ff fe78 	bl	8005224 <LL_PWR_EnableBootC2>

  return;
 8005534:	bf00      	nop
}
 8005536:	bd80      	pop	{r7, pc}

08005538 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800553c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005540:	f7ff fea6 	bl	8005290 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8005544:	4806      	ldr	r0, [pc, #24]	; (8005560 <HW_IPCC_Init+0x28>)
 8005546:	f7ff fee8 	bl	800531a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800554a:	4805      	ldr	r0, [pc, #20]	; (8005560 <HW_IPCC_Init+0x28>)
 800554c:	f7ff fed5 	bl	80052fa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005550:	202c      	movs	r0, #44	; 0x2c
 8005552:	f002 f91c 	bl	800778e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005556:	202d      	movs	r0, #45	; 0x2d
 8005558:	f002 f919 	bl	800778e <HAL_NVIC_EnableIRQ>

  return;
 800555c:	bf00      	nop
}
 800555e:	bd80      	pop	{r7, pc}
 8005560:	58000c00 	.word	0x58000c00

08005564 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8005568:	2101      	movs	r1, #1
 800556a:	4802      	ldr	r0, [pc, #8]	; (8005574 <HW_IPCC_BLE_Init+0x10>)
 800556c:	f7ff ff0a 	bl	8005384 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005570:	bf00      	nop
}
 8005572:	bd80      	pop	{r7, pc}
 8005574:	58000c00 	.word	0x58000c00

08005578 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800557c:	2101      	movs	r1, #1
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <HW_IPCC_BLE_SendCmd+0x10>)
 8005580:	f7ff ff20 	bl	80053c4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8005584:	bf00      	nop
}
 8005586:	bd80      	pop	{r7, pc}
 8005588:	58000c00 	.word	0x58000c00

0800558c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8005590:	f009 fc38 	bl	800ee04 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8005594:	2101      	movs	r1, #1
 8005596:	4802      	ldr	r0, [pc, #8]	; (80055a0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8005598:	f7ff ff06 	bl	80053a8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800559c:	bf00      	nop
}
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	58000c00 	.word	0x58000c00

080055a4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80055a8:	2120      	movs	r1, #32
 80055aa:	4803      	ldr	r0, [pc, #12]	; (80055b8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80055ac:	f7ff fed8 	bl	8005360 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80055b0:	f009 fc58 	bl	800ee64 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80055b4:	bf00      	nop
}
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	58000c00 	.word	0x58000c00

080055bc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80055c0:	2102      	movs	r1, #2
 80055c2:	4802      	ldr	r0, [pc, #8]	; (80055cc <HW_IPCC_SYS_Init+0x10>)
 80055c4:	f7ff fede 	bl	8005384 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80055c8:	bf00      	nop
}
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	58000c00 	.word	0x58000c00

080055d0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80055d4:	2102      	movs	r1, #2
 80055d6:	4804      	ldr	r0, [pc, #16]	; (80055e8 <HW_IPCC_SYS_SendCmd+0x18>)
 80055d8:	f7ff fef4 	bl	80053c4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80055dc:	2102      	movs	r1, #2
 80055de:	4802      	ldr	r0, [pc, #8]	; (80055e8 <HW_IPCC_SYS_SendCmd+0x18>)
 80055e0:	f7ff feab 	bl	800533a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80055e4:	bf00      	nop
}
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	58000c00 	.word	0x58000c00

080055ec <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80055f0:	2102      	movs	r1, #2
 80055f2:	4803      	ldr	r0, [pc, #12]	; (8005600 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80055f4:	f7ff feb4 	bl	8005360 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80055f8:	f009 fc84 	bl	800ef04 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80055fc:	bf00      	nop
}
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	58000c00 	.word	0x58000c00

08005604 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8005608:	f009 fc92 	bl	800ef30 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800560c:	2102      	movs	r1, #2
 800560e:	4802      	ldr	r0, [pc, #8]	; (8005618 <HW_IPCC_SYS_EvtHandler+0x14>)
 8005610:	f7ff feca 	bl	80053a8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8005614:	bf00      	nop
}
 8005616:	bd80      	pop	{r7, pc}
 8005618:	58000c00 	.word	0x58000c00

0800561c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8005624:	2108      	movs	r1, #8
 8005626:	480c      	ldr	r0, [pc, #48]	; (8005658 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8005628:	f7ff fedb 	bl	80053e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8005638:	2108      	movs	r1, #8
 800563a:	4807      	ldr	r0, [pc, #28]	; (8005658 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800563c:	f7ff fe7d 	bl	800533a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8005640:	e006      	b.n	8005650 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8005646:	2108      	movs	r1, #8
 8005648:	4803      	ldr	r0, [pc, #12]	; (8005658 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800564a:	f7ff febb 	bl	80053c4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800564e:	bf00      	nop
}
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	58000c00 	.word	0x58000c00
 800565c:	200007f0 	.word	0x200007f0

08005660 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8005664:	2108      	movs	r1, #8
 8005666:	4806      	ldr	r0, [pc, #24]	; (8005680 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8005668:	f7ff fe7a 	bl	8005360 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8005672:	2108      	movs	r1, #8
 8005674:	4802      	ldr	r0, [pc, #8]	; (8005680 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8005676:	f7ff fea5 	bl	80053c4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800567a:	bf00      	nop
}
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	58000c00 	.word	0x58000c00
 8005684:	200007f0 	.word	0x200007f0

08005688 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800568c:	2108      	movs	r1, #8
 800568e:	4802      	ldr	r0, [pc, #8]	; (8005698 <HW_IPCC_TRACES_Init+0x10>)
 8005690:	f7ff fe78 	bl	8005384 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005694:	bf00      	nop
}
 8005696:	bd80      	pop	{r7, pc}
 8005698:	58000c00 	.word	0x58000c00

0800569c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80056a0:	f009 fcee 	bl	800f080 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80056a4:	2108      	movs	r1, #8
 80056a6:	4802      	ldr	r0, [pc, #8]	; (80056b0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80056a8:	f7ff fe7e 	bl	80053a8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80056ac:	bf00      	nop
}
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	58000c00 	.word	0x58000c00

080056b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80056b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056b8:	3304      	adds	r3, #4

080056ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80056be:	d3f9      	bcc.n	80056b4 <CopyDataInit>
  bx lr
 80056c0:	4770      	bx	lr

080056c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80056c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80056c4:	3004      	adds	r0, #4

080056c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80056c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80056c8:	d3fb      	bcc.n	80056c2 <FillZerobss>
  bx lr
 80056ca:	4770      	bx	lr

080056cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056cc:	480c      	ldr	r0, [pc, #48]	; (8005700 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80056ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80056d0:	f000 f8e4 	bl	800589c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80056d4:	480b      	ldr	r0, [pc, #44]	; (8005704 <LoopForever+0x8>)
 80056d6:	490c      	ldr	r1, [pc, #48]	; (8005708 <LoopForever+0xc>)
 80056d8:	4a0c      	ldr	r2, [pc, #48]	; (800570c <LoopForever+0x10>)
 80056da:	2300      	movs	r3, #0
 80056dc:	f7ff ffed 	bl	80056ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80056e0:	480b      	ldr	r0, [pc, #44]	; (8005710 <LoopForever+0x14>)
 80056e2:	490c      	ldr	r1, [pc, #48]	; (8005714 <LoopForever+0x18>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	f7ff ffee 	bl	80056c6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80056ea:	480b      	ldr	r0, [pc, #44]	; (8005718 <LoopForever+0x1c>)
 80056ec:	490b      	ldr	r1, [pc, #44]	; (800571c <LoopForever+0x20>)
 80056ee:	2300      	movs	r3, #0
 80056f0:	f7ff ffe9 	bl	80056c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80056f4:	f00b f8bc 	bl	8010870 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80056f8:	f7fd f99e 	bl	8002a38 <main>

080056fc <LoopForever>:

LoopForever:
  b LoopForever
 80056fc:	e7fe      	b.n	80056fc <LoopForever>
 80056fe:	0000      	.short	0x0000
  ldr   r0, =_estack
 8005700:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005704:	20000008 	.word	0x20000008
 8005708:	20000228 	.word	0x20000228
 800570c:	08016db0 	.word	0x08016db0
  INIT_BSS _sbss, _ebss
 8005710:	200003a8 	.word	0x200003a8
 8005714:	20001a78 	.word	0x20001a78
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005718:	200301e4 	.word	0x200301e4
 800571c:	20030a67 	.word	0x20030a67

08005720 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005720:	e7fe      	b.n	8005720 <AES1_IRQHandler>

08005722 <LL_AHB2_GRP1_EnableClock>:
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4313      	orrs	r3, r2
 8005738:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800573a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4013      	ands	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	4a07      	ldr	r2, [pc, #28]	; (8005780 <BSP_LED_On+0x2c>)
 8005762:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	4a06      	ldr	r2, [pc, #24]	; (8005784 <BSP_LED_On+0x30>)
 800576a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800576e:	2201      	movs	r2, #1
 8005770:	4619      	mov	r1, r3
 8005772:	f002 fd39 	bl	80081e8 <HAL_GPIO_WritePin>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000020 	.word	0x20000020
 8005784:	0801685c 	.word	0x0801685c

08005788 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	4a07      	ldr	r2, [pc, #28]	; (80057b4 <BSP_LED_Off+0x2c>)
 8005796:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <BSP_LED_Off+0x30>)
 800579e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a2:	2200      	movs	r2, #0
 80057a4:	4619      	mov	r1, r3
 80057a6:	f002 fd1f 	bl	80081e8 <HAL_GPIO_WritePin>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000020 	.word	0x20000020
 80057b8:	0801685c 	.word	0x0801685c

080057bc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	460a      	mov	r2, r1
 80057c6:	71fb      	strb	r3, [r7, #7]
 80057c8:	4613      	mov	r3, r2
 80057ca:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80057cc:	f107 030c 	add.w	r3, r7, #12
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <BSP_PB_Init+0x2e>
 80057e2:	2004      	movs	r0, #4
 80057e4:	f7ff ff9d 	bl	8005722 <LL_AHB2_GRP1_EnableClock>
 80057e8:	e00c      	b.n	8005804 <BSP_PB_Init+0x48>
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d103      	bne.n	80057f8 <BSP_PB_Init+0x3c>
 80057f0:	2008      	movs	r0, #8
 80057f2:	f7ff ff96 	bl	8005722 <LL_AHB2_GRP1_EnableClock>
 80057f6:	e005      	b.n	8005804 <BSP_PB_Init+0x48>
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d102      	bne.n	8005804 <BSP_PB_Init+0x48>
 80057fe:	2008      	movs	r0, #8
 8005800:	f7ff ff8f 	bl	8005722 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8005804:	79bb      	ldrb	r3, [r7, #6]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d117      	bne.n	800583a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <BSP_PB_Init+0xd4>)
 800580e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005812:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8005818:	2301      	movs	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800581c:	2302      	movs	r3, #2
 800581e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <BSP_PB_Init+0xd8>)
 8005824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005828:	f107 020c 	add.w	r2, r7, #12
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f002 fb6a 	bl	8007f08 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8005834:	2001      	movs	r0, #1
 8005836:	f7fc f8fc 	bl	8001a32 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800583a:	79bb      	ldrb	r3, [r7, #6]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d123      	bne.n	8005888 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <BSP_PB_Init+0xd4>)
 8005844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005848:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800584a:	2301      	movs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800584e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005852:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <BSP_PB_Init+0xd8>)
 8005858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585c:	f107 020c 	add.w	r2, r7, #12
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f002 fb50 	bl	8007f08 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	4a0b      	ldr	r2, [pc, #44]	; (8005898 <BSP_PB_Init+0xdc>)
 800586c:	5cd3      	ldrb	r3, [r2, r3]
 800586e:	b25b      	sxtb	r3, r3
 8005870:	2200      	movs	r2, #0
 8005872:	210f      	movs	r1, #15
 8005874:	4618      	mov	r0, r3
 8005876:	f001 ff70 	bl	800775a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	4a06      	ldr	r2, [pc, #24]	; (8005898 <BSP_PB_Init+0xdc>)
 800587e:	5cd3      	ldrb	r3, [r2, r3]
 8005880:	b25b      	sxtb	r3, r3
 8005882:	4618      	mov	r0, r3
 8005884:	f001 ff83 	bl	800778e <HAL_NVIC_EnableIRQ>
  }
}
 8005888:	bf00      	nop
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	08016864 	.word	0x08016864
 8005894:	2000002c 	.word	0x2000002c
 8005898:	0801686c 	.word	0x0801686c

0800589c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
   * to the current application
   */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80058a0:	4b24      	ldr	r3, [pc, #144]	; (8005934 <SystemInit+0x98>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	4a23      	ldr	r2, [pc, #140]	; (8005934 <SystemInit+0x98>)
 80058a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80058c8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <SystemInit+0x9c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80058da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e6:	f023 0305 	bic.w	r3, r3, #5
 80058ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80058ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005906:	4a0d      	ldr	r2, [pc, #52]	; (800593c <SystemInit+0xa0>)
 8005908:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590e:	4a0b      	ldr	r2, [pc, #44]	; (800593c <SystemInit+0xa0>)
 8005910:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005920:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005926:	2200      	movs	r2, #0
 8005928:	619a      	str	r2, [r3, #24]
}
 800592a:	bf00      	nop
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	e000ed00 	.word	0xe000ed00
 8005938:	faf6fefb 	.word	0xfaf6fefb
 800593c:	22041000 	.word	0x22041000

08005940 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a04      	ldr	r2, [pc, #16]	; (800595c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	6053      	str	r3, [r2, #4]
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	e0042000 	.word	0xe0042000

08005960 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a04      	ldr	r2, [pc, #16]	; (800597c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800596a:	f043 0302 	orr.w	r3, r3, #2
 800596e:	6053      	str	r3, [r2, #4]
}
 8005970:	bf00      	nop
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e0042000 	.word	0xe0042000

08005980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_Init+0x3c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <HAL_Init+0x3c>)
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005996:	2003      	movs	r0, #3
 8005998:	f001 fed4 	bl	8007744 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800599c:	2000      	movs	r0, #0
 800599e:	f000 f80f 	bl	80059c0 <HAL_InitTick>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	71fb      	strb	r3, [r7, #7]
 80059ac:	e001      	b.n	80059b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059ae:	f7fd fbae 	bl	800310e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059b2:	79fb      	ldrb	r3, [r7, #7]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	58004000 	.word	0x58004000

080059c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80059cc:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <HAL_InitTick+0x6c>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d024      	beq.n	8005a1e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80059d4:	f004 f9b0 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 80059d8:	4602      	mov	r2, r0
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <HAL_InitTick+0x6c>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4619      	mov	r1, r3
 80059e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 feea 	bl	80077c6 <HAL_SYSTICK_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10f      	bne.n	8005a18 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b0f      	cmp	r3, #15
 80059fc:	d809      	bhi.n	8005a12 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059fe:	2200      	movs	r2, #0
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	f04f 30ff 	mov.w	r0, #4294967295
 8005a06:	f001 fea8 	bl	800775a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_InitTick+0x70>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	e007      	b.n	8005a22 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
 8005a16:	e004      	b.n	8005a22 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
 8005a1c:	e001      	b.n	8005a22 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000040 	.word	0x20000040
 8005a30:	2000003c 	.word	0x2000003c

08005a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_IncTick+0x20>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_IncTick+0x24>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4413      	add	r3, r2
 8005a44:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <HAL_IncTick+0x24>)
 8005a46:	6013      	str	r3, [r2, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000040 	.word	0x20000040
 8005a58:	200007f4 	.word	0x200007f4

08005a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <HAL_GetTick+0x14>)
 8005a62:	681b      	ldr	r3, [r3, #0]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	200007f4 	.word	0x200007f4

08005a74 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005a78:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <HAL_GetTickPrio+0x14>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	2000003c 	.word	0x2000003c

08005a8c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <HAL_SetTickFreq+0x48>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	79fa      	ldrb	r2, [r7, #7]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d012      	beq.n	8005aca <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_SetTickFreq+0x48>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <HAL_SetTickFreq+0x48>)
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_SetTickFreq+0x4c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff83 	bl	80059c0 <HAL_InitTick>
 8005aba:	4603      	mov	r3, r0
 8005abc:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8005ac4:	4a03      	ldr	r2, [pc, #12]	; (8005ad4 <HAL_SetTickFreq+0x48>)
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000040 	.word	0x20000040
 8005ad8:	2000003c 	.word	0x2000003c

08005adc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_GetTickFreq+0x14>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000040 	.word	0x20000040

08005af4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005af8:	f7ff ff22 	bl	8005940 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005afc:	bf00      	nop
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005b04:	f7ff ff2c 	bl	8005960 <LL_DBGMCU_EnableDBGStopMode>
}
 8005b08:	bf00      	nop
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3360      	adds	r3, #96	; 0x60
 8005b86:	461a      	mov	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <LL_ADC_SetOffset+0x44>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	03fff000 	.word	0x03fff000

08005bbc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3360      	adds	r3, #96	; 0x60
 8005bca:	461a      	mov	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3360      	adds	r3, #96	; 0x60
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c36:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3330      	adds	r3, #48	; 0x30
 8005c54:	461a      	mov	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	4413      	add	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	211f      	movs	r1, #31
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	401a      	ands	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0e9b      	lsrs	r3, r3, #26
 8005c7c:	f003 011f 	and.w	r1, r3, #31
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b087      	sub	sp, #28
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3314      	adds	r3, #20
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	0e5b      	lsrs	r3, r3, #25
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	4413      	add	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	0d1b      	lsrs	r3, r3, #20
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2107      	movs	r1, #7
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	401a      	ands	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	0d1b      	lsrs	r3, r3, #20
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d22:	431a      	orrs	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	401a      	ands	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f003 0318 	and.w	r3, r3, #24
 8005d56:	4908      	ldr	r1, [pc, #32]	; (8005d78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d58:	40d9      	lsrs	r1, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d62:	431a      	orrs	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	0007ffff 	.word	0x0007ffff

08005d7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6093      	str	r3, [r2, #8]
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db4:	d101      	bne.n	8005dba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e04:	d101      	bne.n	8005e0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e54:	f043 0202 	orr.w	r2, r3, #2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <LL_ADC_IsEnabled+0x18>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <LL_ADC_IsEnabled+0x1a>
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d101      	bne.n	8005ea6 <LL_ADC_IsDisableOngoing+0x18>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <LL_ADC_IsDisableOngoing+0x1a>
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ec8:	f043 0204 	orr.w	r2, r3, #4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ef0:	f043 0210 	orr.w	r2, r3, #16
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d101      	bne.n	8005f1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d101      	bne.n	8005f6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e12e      	b.n	80061f4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fd f8c3 	bl	8003130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff feef 	bl	8005da0 <LL_ADC_IsDeepPowerDownEnabled>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fed5 	bl	8005d7c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ff0a 	bl	8005df0 <LL_ADC_IsInternalRegulatorEnabled>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d115      	bne.n	800600e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff feee 	bl	8005dc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fec:	4b83      	ldr	r3, [pc, #524]	; (80061fc <HAL_ADC_Init+0x284>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	099b      	lsrs	r3, r3, #6
 8005ff2:	4a83      	ldr	r2, [pc, #524]	; (8006200 <HAL_ADC_Init+0x288>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	099b      	lsrs	r3, r3, #6
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006000:	e002      	b.n	8006008 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	3b01      	subs	r3, #1
 8006006:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f9      	bne.n	8006002 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff feec 	bl	8005df0 <LL_ADC_IsInternalRegulatorEnabled>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10d      	bne.n	800603a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f043 0210 	orr.w	r2, r3, #16
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	f043 0201 	orr.w	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff ff60 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 8006044:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 80c7 	bne.w	80061e2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 80c3 	bne.w	80061e2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006064:	f043 0202 	orr.w	r2, r3, #2
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fef9 	bl	8005e68 <LL_ADC_IsEnabled>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800607c:	4861      	ldr	r0, [pc, #388]	; (8006204 <HAL_ADC_Init+0x28c>)
 800607e:	f7ff fef3 	bl	8005e68 <LL_ADC_IsEnabled>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	4619      	mov	r1, r3
 800608e:	485e      	ldr	r0, [pc, #376]	; (8006208 <HAL_ADC_Init+0x290>)
 8006090:	f7ff fd3c 	bl	8005b0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	7e5b      	ldrb	r3, [r3, #25]
 8006098:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800609e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80060a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80060aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80060b4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d106      	bne.n	80060d4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	3b01      	subs	r3, #1
 80060cc:	045b      	lsls	r3, r3, #17
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	4b45      	ldr	r3, [pc, #276]	; (800620c <HAL_ADC_Init+0x294>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	69b9      	ldr	r1, [r7, #24]
 8006100:	430b      	orrs	r3, r1
 8006102:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fefb 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 800610e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff ff1c 	bl	8005f52 <LL_ADC_INJ_IsConversionOngoing>
 800611a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d13d      	bne.n	800619e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d13a      	bne.n	800619e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800612c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006134:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006136:	4313      	orrs	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006144:	f023 0302 	bic.w	r3, r3, #2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	430b      	orrs	r3, r1
 8006150:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006158:	2b01      	cmp	r3, #1
 800615a:	d118      	bne.n	800618e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006166:	f023 0304 	bic.w	r3, r3, #4
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006172:	4311      	orrs	r1, r2
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006178:	4311      	orrs	r1, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800617e:	430a      	orrs	r2, r1
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	611a      	str	r2, [r3, #16]
 800618c:	e007      	b.n	800619e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d10c      	bne.n	80061c0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	f023 010f 	bic.w	r1, r3, #15
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
 80061be:	e007      	b.n	80061d0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 020f 	bic.w	r2, r2, #15
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	f043 0201 	orr.w	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
 80061e0:	e007      	b.n	80061f2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f043 0210 	orr.w	r2, r3, #16
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000038 	.word	0x20000038
 8006200:	053e2d63 	.word	0x053e2d63
 8006204:	50040000 	.word	0x50040000
 8006208:	50040300 	.word	0x50040300
 800620c:	fff0c007 	.word	0xfff0c007

08006210 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fe6f 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d167      	bne.n	80062fc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_ADC_Start_DMA+0x2a>
 8006236:	2302      	movs	r3, #2
 8006238:	e063      	b.n	8006302 <HAL_ADC_Start_DMA+0xf2>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 ff20 	bl	8007088 <ADC_Enable>
 8006248:	4603      	mov	r3, r0
 800624a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d14f      	bne.n	80062f2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d006      	beq.n	8006280 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006276:	f023 0206 	bic.w	r2, r3, #6
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	659a      	str	r2, [r3, #88]	; 0x58
 800627e:	e002      	b.n	8006286 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628a:	4a20      	ldr	r2, [pc, #128]	; (800630c <HAL_ADC_Start_DMA+0xfc>)
 800628c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006292:	4a1f      	ldr	r2, [pc, #124]	; (8006310 <HAL_ADC_Start_DMA+0x100>)
 8006294:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629a:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_ADC_Start_DMA+0x104>)
 800629c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	221c      	movs	r2, #28
 80062a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0210 	orr.w	r2, r2, #16
 80062bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3340      	adds	r3, #64	; 0x40
 80062d8:	4619      	mov	r1, r3
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f001 fb49 	bl	8007974 <HAL_DMA_Start_IT>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fde2 	bl	8005eb4 <LL_ADC_REG_StartConversion>
 80062f0:	e006      	b.n	8006300 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80062fa:	e001      	b.n	8006300 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80062fc:	2302      	movs	r3, #2
 80062fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006300:	7dfb      	ldrb	r3, [r7, #23]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	0800723b 	.word	0x0800723b
 8006310:	08007313 	.word	0x08007313
 8006314:	0800732f 	.word	0x0800732f

08006318 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_ADC_Stop_DMA+0x16>
 800632a:	2302      	movs	r3, #2
 800632c:	e051      	b.n	80063d2 <HAL_ADC_Stop_DMA+0xba>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined (ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006336:	2103      	movs	r1, #3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fde9 	bl	8006f10 <ADC_ConversionStop>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d13f      	bne.n	80063c8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if defined (ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0201 	bic.w	r2, r2, #1
 8006356:	60da      	str	r2, [r3, #12]
#endif

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d10f      	bne.n	8006386 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636a:	4618      	mov	r0, r3
 800636c:	f001 fb7d 	bl	8007a6a <HAL_DMA_Abort>
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0210 	bic.w	r2, r2, #16
 8006394:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 feed 	bl	800717c <ADC_Disable>
 80063a2:	4603      	mov	r3, r0
 80063a4:	73fb      	strb	r3, [r7, #15]
 80063a6:	e002      	b.n	80063ae <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fee7 	bl	800717c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <HAL_ADC_Stop_DMA+0xb0>
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80063bc:	f023 0301 	bic.w	r3, r3, #1
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b088      	sub	sp, #32
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d017      	beq.n	8006430 <HAL_ADC_IRQHandler+0x56>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d012      	beq.n	8006430 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f854 	bl	80074d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2202      	movs	r2, #2
 800642e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <HAL_ADC_IRQHandler+0x6a>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800644a:	2b00      	cmp	r3, #0
 800644c:	d05d      	beq.n	800650a <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d058      	beq.n	800650a <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006468:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff fbd2 	bl	8005c1e <LL_ADC_REG_IsTriggerSourceSWStart>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d03d      	beq.n	80064fc <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648e:	d035      	beq.n	80064fc <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b08      	cmp	r3, #8
 800649c:	d12e      	bne.n	80064fc <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fd2e 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d11a      	bne.n	80064e4 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 020c 	bic.w	r2, r2, #12
 80064bc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d112      	bne.n	80064fc <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f043 0201 	orr.w	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
 80064e2:	e00b      	b.n	80064fc <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e8:	f043 0210 	orr.w	r2, r3, #16
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	f043 0201 	orr.w	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fe fe47 	bl	8005190 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	220c      	movs	r2, #12
 8006508:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <HAL_ADC_IRQHandler+0x144>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006524:	2b00      	cmp	r3, #0
 8006526:	d074      	beq.n	8006612 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	d06f      	beq.n	8006612 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fbb2 	bl	8005cb8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006554:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fb5f 	bl	8005c1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006560:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d049      	beq.n	8006604 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <HAL_ADC_IRQHandler+0x1b0>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d041      	beq.n	8006604 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006586:	2b00      	cmp	r3, #0
 8006588:	d13c      	bne.n	8006604 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d135      	bne.n	8006604 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d12e      	bne.n	8006604 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fcd1 	bl	8005f52 <LL_ADC_INJ_IsConversionOngoing>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11a      	bne.n	80065ec <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d112      	bne.n	8006604 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54
 80065ea:	e00b      	b.n	8006604 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f0:	f043 0210 	orr.w	r2, r3, #16
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fc:	f043 0201 	orr.w	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 ff3b 	bl	8007480 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2260      	movs	r2, #96	; 0x60
 8006610:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006618:	2b00      	cmp	r3, #0
 800661a:	d011      	beq.n	8006640 <HAL_ADC_IRQHandler+0x266>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f891 	bl	800675a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2280      	movs	r2, #128	; 0x80
 800663e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d012      	beq.n	8006670 <HAL_ADC_IRQHandler+0x296>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00d      	beq.n	8006670 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 ff21 	bl	80074a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800666e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006676:	2b00      	cmp	r3, #0
 8006678:	d012      	beq.n	80066a0 <HAL_ADC_IRQHandler+0x2c6>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 ff13 	bl	80074bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800669e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02b      	beq.n	8006702 <HAL_ADC_IRQHandler+0x328>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d026      	beq.n	8006702 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80066bc:	2301      	movs	r3, #1
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	e009      	b.n	80066d6 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff fae8 	bl	8005c9c <LL_ADC_REG_GetDMATransfer>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80066d2:	2301      	movs	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10e      	bne.n	80066fa <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ec:	f043 0202 	orr.w	r2, r3, #2
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f83a 	bl	800676e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2210      	movs	r2, #16
 8006700:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006708:	2b00      	cmp	r3, #0
 800670a:	d018      	beq.n	800673e <HAL_ADC_IRQHandler+0x364>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	f043 0208 	orr.w	r2, r3, #8
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006736:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 feab 	bl	8007494 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800673e:	bf00      	nop
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
	...

08006784 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b0b6      	sub	sp, #216	; 0xd8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_ADC_ConfigChannel+0x22>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e39f      	b.n	8006ee6 <HAL_ADC_ConfigChannel+0x762>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fba6 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 8384 	bne.w	8006ec8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	6859      	ldr	r1, [r3, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	f7ff fa39 	bl	8005c44 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fb94 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 80067dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fbb4 	bl	8005f52 <LL_ADC_INJ_IsConversionOngoing>
 80067ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80067ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 81a6 	bne.w	8006b44 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80067f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 81a1 	bne.w	8006b44 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6819      	ldr	r1, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	461a      	mov	r2, r3
 8006810:	f7ff fa65 	bl	8005cde <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	695a      	ldr	r2, [r3, #20]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	08db      	lsrs	r3, r3, #3
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b04      	cmp	r3, #4
 8006834:	d00a      	beq.n	800684c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6919      	ldr	r1, [r3, #16]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006846:	f7ff f995 	bl	8005b74 <LL_ADC_SetOffset>
 800684a:	e17b      	b.n	8006b44 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f9b2 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 8006858:	4603      	mov	r3, r0
 800685a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <HAL_ADC_ConfigChannel+0xf4>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff f9a7 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 800686e:	4603      	mov	r3, r0
 8006870:	0e9b      	lsrs	r3, r3, #26
 8006872:	f003 021f 	and.w	r2, r3, #31
 8006876:	e01e      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x132>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff f99c 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 8006884:	4603      	mov	r3, r0
 8006886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800688e:	fa93 f3a3 	rbit	r3, r3
 8006892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8006896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800689a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800689e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 80068a6:	2320      	movs	r3, #32
 80068a8:	e004      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80068aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068ae:	fab3 f383 	clz	r3, r3
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <HAL_ADC_ConfigChannel+0x14a>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	0e9b      	lsrs	r3, r3, #26
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	e018      	b.n	8006900 <HAL_ADC_ConfigChannel+0x17c>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068da:	fa93 f3a3 	rbit	r3, r3
 80068de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80068e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80068ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80068f2:	2320      	movs	r3, #32
 80068f4:	e004      	b.n	8006900 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80068f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068fa:	fab3 f383 	clz	r3, r3
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	429a      	cmp	r2, r3
 8006902:	d106      	bne.n	8006912 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff f96b 	bl	8005be8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2101      	movs	r1, #1
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff f94f 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 800691e:	4603      	mov	r3, r0
 8006920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <HAL_ADC_ConfigChannel+0x1ba>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff f944 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 8006934:	4603      	mov	r3, r0
 8006936:	0e9b      	lsrs	r3, r3, #26
 8006938:	f003 021f 	and.w	r2, r3, #31
 800693c:	e01e      	b.n	800697c <HAL_ADC_ConfigChannel+0x1f8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2101      	movs	r1, #1
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff f939 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 800694a:	4603      	mov	r3, r0
 800694c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006950:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006954:	fa93 f3a3 	rbit	r3, r3
 8006958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800695c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800696c:	2320      	movs	r3, #32
 800696e:	e004      	b.n	800697a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8006970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006974:	fab3 f383 	clz	r3, r3
 8006978:	b2db      	uxtb	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006984:	2b00      	cmp	r3, #0
 8006986:	d105      	bne.n	8006994 <HAL_ADC_ConfigChannel+0x210>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	0e9b      	lsrs	r3, r3, #26
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	e018      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x242>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800699c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a0:	fa93 f3a3 	rbit	r3, r3
 80069a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80069a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80069b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80069b8:	2320      	movs	r3, #32
 80069ba:	e004      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80069bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c0:	fab3 f383 	clz	r3, r3
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d106      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	2101      	movs	r1, #1
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f908 	bl	8005be8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2102      	movs	r1, #2
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff f8ec 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <HAL_ADC_ConfigChannel+0x280>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2102      	movs	r1, #2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff f8e1 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 80069fa:	4603      	mov	r3, r0
 80069fc:	0e9b      	lsrs	r3, r3, #26
 80069fe:	f003 021f 	and.w	r2, r3, #31
 8006a02:	e01e      	b.n	8006a42 <HAL_ADC_ConfigChannel+0x2be>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2102      	movs	r1, #2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff f8d6 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a1a:	fa93 f3a3 	rbit	r3, r3
 8006a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006a22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8006a32:	2320      	movs	r3, #32
 8006a34:	e004      	b.n	8006a40 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a3a:	fab3 f383 	clz	r3, r3
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <HAL_ADC_ConfigChannel+0x2d6>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	0e9b      	lsrs	r3, r3, #26
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	e016      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x304>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a66:	fa93 f3a3 	rbit	r3, r3
 8006a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8006a7a:	2320      	movs	r3, #32
 8006a7c:	e004      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8006a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a82:	fab3 f383 	clz	r3, r3
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d106      	bne.n	8006a9a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff f8a7 	bl	8005be8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2103      	movs	r1, #3
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff f88b 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <HAL_ADC_ConfigChannel+0x342>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2103      	movs	r1, #3
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff f880 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 8006abc:	4603      	mov	r3, r0
 8006abe:	0e9b      	lsrs	r3, r3, #26
 8006ac0:	f003 021f 	and.w	r2, r3, #31
 8006ac4:	e017      	b.n	8006af6 <HAL_ADC_ConfigChannel+0x372>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2103      	movs	r1, #3
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff f875 	bl	8005bbc <LL_ADC_GetOffsetChannel>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad8:	fa93 f3a3 	rbit	r3, r3
 8006adc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8006ae8:	2320      	movs	r3, #32
 8006aea:	e003      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8006aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aee:	fab3 f383 	clz	r3, r3
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x38a>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	0e9b      	lsrs	r3, r3, #26
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	e011      	b.n	8006b32 <HAL_ADC_ConfigChannel+0x3ae>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b16:	fa93 f3a3 	rbit	r3, r3
 8006b1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8006b26:	2320      	movs	r3, #32
 8006b28:	e003      	b.n	8006b32 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8006b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2c:	fab3 f383 	clz	r3, r3
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d106      	bne.n	8006b44 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2103      	movs	r1, #3
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff f852 	bl	8005be8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff f98d 	bl	8005e68 <LL_ADC_IsEnabled>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 81c2 	bne.w	8006eda <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6819      	ldr	r1, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f7ff f8e6 	bl	8005d34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	4a8e      	ldr	r2, [pc, #568]	; (8006da8 <HAL_ADC_ConfigChannel+0x624>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	f040 8130 	bne.w	8006dd4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10b      	bne.n	8006b9c <HAL_ADC_ConfigChannel+0x418>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	0e9b      	lsrs	r3, r3, #26
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	bf94      	ite	ls
 8006b94:	2301      	movls	r3, #1
 8006b96:	2300      	movhi	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	e019      	b.n	8006bd0 <HAL_ADC_ConfigChannel+0x44c>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba4:	fa93 f3a3 	rbit	r3, r3
 8006ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	e003      	b.n	8006bc0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bba:	fab3 f383 	clz	r3, r3
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	2b09      	cmp	r3, #9
 8006bc8:	bf94      	ite	ls
 8006bca:	2301      	movls	r3, #1
 8006bcc:	2300      	movhi	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d079      	beq.n	8006cc8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d107      	bne.n	8006bf0 <HAL_ADC_ConfigChannel+0x46c>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	0e9b      	lsrs	r3, r3, #26
 8006be6:	3301      	adds	r3, #1
 8006be8:	069b      	lsls	r3, r3, #26
 8006bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bee:	e015      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x498>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf8:	fa93 f3a3 	rbit	r3, r3
 8006bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c00:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006c08:	2320      	movs	r3, #32
 8006c0a:	e003      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0e:	fab3 f383 	clz	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	3301      	adds	r3, #1
 8006c16:	069b      	lsls	r3, r3, #26
 8006c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_ADC_ConfigChannel+0x4b8>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	0e9b      	lsrs	r3, r3, #26
 8006c2e:	3301      	adds	r3, #1
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3a:	e017      	b.n	8006c6c <HAL_ADC_ConfigChannel+0x4e8>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c44:	fa93 f3a3 	rbit	r3, r3
 8006c48:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8006c54:	2320      	movs	r3, #32
 8006c56:	e003      	b.n	8006c60 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8006c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c5a:	fab3 f383 	clz	r3, r3
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	3301      	adds	r3, #1
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2101      	movs	r1, #1
 8006c68:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6c:	ea42 0103 	orr.w	r1, r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <HAL_ADC_ConfigChannel+0x50e>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	0e9b      	lsrs	r3, r3, #26
 8006c82:	3301      	adds	r3, #1
 8006c84:	f003 021f 	and.w	r2, r3, #31
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	051b      	lsls	r3, r3, #20
 8006c90:	e018      	b.n	8006cc4 <HAL_ADC_ConfigChannel+0x540>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	fa93 f3a3 	rbit	r3, r3
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006caa:	2320      	movs	r3, #32
 8006cac:	e003      	b.n	8006cb6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb0:	fab3 f383 	clz	r3, r3
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	f003 021f 	and.w	r2, r3, #31
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	4413      	add	r3, r2
 8006cc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	e080      	b.n	8006dca <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d107      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x560>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	0e9b      	lsrs	r3, r3, #26
 8006cda:	3301      	adds	r3, #1
 8006cdc:	069b      	lsls	r3, r3, #26
 8006cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ce2:	e015      	b.n	8006d10 <HAL_ADC_ConfigChannel+0x58c>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	fa93 f3a3 	rbit	r3, r3
 8006cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	e003      	b.n	8006d08 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	fab3 f383 	clz	r3, r3
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	3301      	adds	r3, #1
 8006d0a:	069b      	lsls	r3, r3, #26
 8006d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <HAL_ADC_ConfigChannel+0x5ac>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	0e9b      	lsrs	r3, r3, #26
 8006d22:	3301      	adds	r3, #1
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	2101      	movs	r1, #1
 8006d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2e:	e017      	b.n	8006d60 <HAL_ADC_ConfigChannel+0x5dc>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	fa93 f3a3 	rbit	r3, r3
 8006d3c:	61fb      	str	r3, [r7, #28]
  return result;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8006d48:	2320      	movs	r3, #32
 8006d4a:	e003      	b.n	8006d54 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	fab3 f383 	clz	r3, r3
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	3301      	adds	r3, #1
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	ea42 0103 	orr.w	r1, r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10d      	bne.n	8006d8c <HAL_ADC_ConfigChannel+0x608>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	0e9b      	lsrs	r3, r3, #26
 8006d76:	3301      	adds	r3, #1
 8006d78:	f003 021f 	and.w	r2, r3, #31
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	3b1e      	subs	r3, #30
 8006d84:	051b      	lsls	r3, r3, #20
 8006d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d8a:	e01d      	b.n	8006dc8 <HAL_ADC_ConfigChannel+0x644>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	fa93 f3a3 	rbit	r3, r3
 8006d98:	613b      	str	r3, [r7, #16]
  return result;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8006da4:	2320      	movs	r3, #32
 8006da6:	e005      	b.n	8006db4 <HAL_ADC_ConfigChannel+0x630>
 8006da8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	3301      	adds	r3, #1
 8006db6:	f003 021f 	and.w	r2, r3, #31
 8006dba:	4613      	mov	r3, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	3b1e      	subs	r3, #30
 8006dc2:	051b      	lsls	r3, r3, #20
 8006dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	6892      	ldr	r2, [r2, #8]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	f7fe ff85 	bl	8005cde <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	4b45      	ldr	r3, [pc, #276]	; (8006ef0 <HAL_ADC_ConfigChannel+0x76c>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d07c      	beq.n	8006eda <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006de0:	4844      	ldr	r0, [pc, #272]	; (8006ef4 <HAL_ADC_ConfigChannel+0x770>)
 8006de2:	f7fe feb9 	bl	8005b58 <LL_ADC_GetCommonPathInternalCh>
 8006de6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dea:	4843      	ldr	r0, [pc, #268]	; (8006ef8 <HAL_ADC_ConfigChannel+0x774>)
 8006dec:	f7ff f83c 	bl	8005e68 <LL_ADC_IsEnabled>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d15e      	bne.n	8006eb4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a40      	ldr	r2, [pc, #256]	; (8006efc <HAL_ADC_ConfigChannel+0x778>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d127      	bne.n	8006e50 <HAL_ADC_ConfigChannel+0x6cc>
 8006e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d121      	bne.n	8006e50 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a39      	ldr	r2, [pc, #228]	; (8006ef8 <HAL_ADC_ConfigChannel+0x774>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d161      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4834      	ldr	r0, [pc, #208]	; (8006ef4 <HAL_ADC_ConfigChannel+0x770>)
 8006e22:	f7fe fe86 	bl	8005b32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e26:	4b36      	ldr	r3, [pc, #216]	; (8006f00 <HAL_ADC_ConfigChannel+0x77c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	099b      	lsrs	r3, r3, #6
 8006e2c:	4a35      	ldr	r2, [pc, #212]	; (8006f04 <HAL_ADC_ConfigChannel+0x780>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	099b      	lsrs	r3, r3, #6
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	4613      	mov	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006e40:	e002      	b.n	8006e48 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f9      	bne.n	8006e42 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e4e:	e044      	b.n	8006eda <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a2c      	ldr	r2, [pc, #176]	; (8006f08 <HAL_ADC_ConfigChannel+0x784>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d113      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x6fe>
 8006e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10d      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a23      	ldr	r2, [pc, #140]	; (8006ef8 <HAL_ADC_ConfigChannel+0x774>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d134      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e78:	4619      	mov	r1, r3
 8006e7a:	481e      	ldr	r0, [pc, #120]	; (8006ef4 <HAL_ADC_ConfigChannel+0x770>)
 8006e7c:	f7fe fe59 	bl	8005b32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e80:	e02b      	b.n	8006eda <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <HAL_ADC_ConfigChannel+0x788>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d126      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x756>
 8006e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d120      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <HAL_ADC_ConfigChannel+0x774>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d11b      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4811      	ldr	r0, [pc, #68]	; (8006ef4 <HAL_ADC_ConfigChannel+0x770>)
 8006eae:	f7fe fe40 	bl	8005b32 <LL_ADC_SetCommonPathInternalCh>
 8006eb2:	e012      	b.n	8006eda <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006ec6:	e008      	b.n	8006eda <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8006ee2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	37d8      	adds	r7, #216	; 0xd8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	80080000 	.word	0x80080000
 8006ef4:	50040300 	.word	0x50040300
 8006ef8:	50040000 	.word	0x50040000
 8006efc:	c7520000 	.word	0xc7520000
 8006f00:	20000038 	.word	0x20000038
 8006f04:	053e2d63 	.word	0x053e2d63
 8006f08:	cb840000 	.word	0xcb840000
 8006f0c:	80000001 	.word	0x80000001

08006f10 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe ffec 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 8006f2c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff f80d 	bl	8005f52 <LL_ADC_INJ_IsConversionOngoing>
 8006f38:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 8098 	beq.w	8007078 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d02a      	beq.n	8006fac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	7e5b      	ldrb	r3, [r3, #25]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d126      	bne.n	8006fac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7e1b      	ldrb	r3, [r3, #24]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d122      	bne.n	8006fac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006f66:	2301      	movs	r3, #1
 8006f68:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006f6a:	e014      	b.n	8006f96 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4a45      	ldr	r2, [pc, #276]	; (8007084 <ADC_ConversionStop+0x174>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d90d      	bls.n	8006f90 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f78:	f043 0210 	orr.w	r2, r3, #16
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	f043 0201 	orr.w	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e074      	b.n	800707a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	3301      	adds	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	d1e3      	bne.n	8006f6c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2240      	movs	r2, #64	; 0x40
 8006faa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d014      	beq.n	8006fdc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe ffa4 	bl	8005f04 <LL_ADC_REG_IsConversionOngoing>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00c      	beq.n	8006fdc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe ff61 	bl	8005e8e <LL_ADC_IsDisableOngoing>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe ff80 	bl	8005edc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d014      	beq.n	800700c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe ffb3 	bl	8005f52 <LL_ADC_INJ_IsConversionOngoing>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe ff49 	bl	8005e8e <LL_ADC_IsDisableOngoing>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe ff8f 	bl	8005f2a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d005      	beq.n	800701e <ADC_ConversionStop+0x10e>
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d105      	bne.n	8007024 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007018:	230c      	movs	r3, #12
 800701a:	617b      	str	r3, [r7, #20]
        break;
 800701c:	e005      	b.n	800702a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800701e:	2308      	movs	r3, #8
 8007020:	617b      	str	r3, [r7, #20]
        break;
 8007022:	e002      	b.n	800702a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007024:	2304      	movs	r3, #4
 8007026:	617b      	str	r3, [r7, #20]
        break;
 8007028:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800702a:	f7fe fd17 	bl	8005a5c <HAL_GetTick>
 800702e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007030:	e01b      	b.n	800706a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007032:	f7fe fd13 	bl	8005a5c <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b05      	cmp	r3, #5
 800703e:	d914      	bls.n	800706a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007052:	f043 0210 	orr.w	r2, r3, #16
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705e:	f043 0201 	orr.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e007      	b.n	800707a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1dc      	bne.n	8007032 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	a33fffff 	.word	0xa33fffff

08007088 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007090:	2300      	movs	r3, #0
 8007092:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fee5 	bl	8005e68 <LL_ADC_IsEnabled>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15e      	bne.n	8007162 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	4b30      	ldr	r3, [pc, #192]	; (800716c <ADC_Enable+0xe4>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f043 0210 	orr.w	r2, r3, #16
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c2:	f043 0201 	orr.w	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e04a      	b.n	8007164 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fea0 	bl	8005e18 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80070d8:	4825      	ldr	r0, [pc, #148]	; (8007170 <ADC_Enable+0xe8>)
 80070da:	f7fe fd3d 	bl	8005b58 <LL_ADC_GetCommonPathInternalCh>
 80070de:	4603      	mov	r3, r0
 80070e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00f      	beq.n	8007108 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070e8:	4b22      	ldr	r3, [pc, #136]	; (8007174 <ADC_Enable+0xec>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	099b      	lsrs	r3, r3, #6
 80070ee:	4a22      	ldr	r2, [pc, #136]	; (8007178 <ADC_Enable+0xf0>)
 80070f0:	fba2 2303 	umull	r2, r3, r2, r3
 80070f4:	099b      	lsrs	r3, r3, #6
 80070f6:	3301      	adds	r3, #1
 80070f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80070fa:	e002      	b.n	8007102 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3b01      	subs	r3, #1
 8007100:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1f9      	bne.n	80070fc <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007108:	f7fe fca8 	bl	8005a5c <HAL_GetTick>
 800710c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800710e:	e021      	b.n	8007154 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe fea7 	bl	8005e68 <LL_ADC_IsEnabled>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fe77 	bl	8005e18 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800712a:	f7fe fc97 	bl	8005a5c <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d90d      	bls.n	8007154 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713c:	f043 0210 	orr.w	r2, r3, #16
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007148:	f043 0201 	orr.w	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e007      	b.n	8007164 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d1d6      	bne.n	8007110 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	8000003f 	.word	0x8000003f
 8007170:	50040300 	.word	0x50040300
 8007174:	20000038 	.word	0x20000038
 8007178:	053e2d63 	.word	0x053e2d63

0800717c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fe80 	bl	8005e8e <LL_ADC_IsDisableOngoing>
 800718e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe fe67 	bl	8005e68 <LL_ADC_IsEnabled>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d047      	beq.n	8007230 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d144      	bne.n	8007230 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 030d 	and.w	r3, r3, #13
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d10c      	bne.n	80071ce <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fe41 	bl	8005e40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2203      	movs	r2, #3
 80071c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80071c6:	f7fe fc49 	bl	8005a5c <HAL_GetTick>
 80071ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071cc:	e029      	b.n	8007222 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	f043 0210 	orr.w	r2, r3, #16
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071de:	f043 0201 	orr.w	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e023      	b.n	8007232 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80071ea:	f7fe fc37 	bl	8005a5c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d914      	bls.n	8007222 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	f043 0210 	orr.w	r2, r3, #16
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	f043 0201 	orr.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e007      	b.n	8007232 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1dc      	bne.n	80071ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007250:	2b00      	cmp	r3, #0
 8007252:	d14b      	bne.n	80072ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d021      	beq.n	80072b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fcd3 	bl	8005c1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d032      	beq.n	80072e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d12b      	bne.n	80072e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11f      	bne.n	80072e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a8:	f043 0201 	orr.w	r2, r3, #1
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
 80072b0:	e018      	b.n	80072e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d111      	bne.n	80072e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d105      	bne.n	80072e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072dc:	f043 0201 	orr.w	r2, r3, #1
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7fd ff53 	bl	8005190 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80072ea:	e00e      	b.n	800730a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff fa38 	bl	800676e <HAL_ADC_ErrorCallback>
}
 80072fe:	e004      	b.n	800730a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff fa10 	bl	8006746 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734c:	f043 0204 	orr.w	r2, r3, #4
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fa0a 	bl	800676e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <LL_ADC_StartCalibration>:
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800737e:	4313      	orrs	r3, r2
 8007380:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	609a      	str	r2, [r3, #8]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <LL_ADC_IsCalibrationOnGoing>:
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a8:	d101      	bne.n	80073ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e04d      	b.n	8007474 <HAL_ADCEx_Calibration_Start+0xb8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fecb 	bl	800717c <ADC_Disable>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d136      	bne.n	800745e <HAL_ADCEx_Calibration_Start+0xa2>
#if defined (ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073f8:	f023 0302 	bic.w	r3, r3, #2
 80073fc:	f043 0202 	orr.w	r2, r3, #2
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff ffa9 	bl	8007362 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007410:	e014      	b.n	800743c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	3301      	adds	r3, #1
 8007416:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4a18      	ldr	r2, [pc, #96]	; (800747c <HAL_ADCEx_Calibration_Start+0xc0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d90d      	bls.n	800743c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007424:	f023 0312 	bic.w	r3, r3, #18
 8007428:	f043 0210 	orr.w	r2, r3, #16
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e01b      	b.n	8007474 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff ffa7 	bl	8007394 <LL_ADC_IsCalibrationOnGoing>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e2      	bne.n	8007412 <HAL_ADCEx_Calibration_Start+0x56>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
    LL_ADC_Disable(hadc->Instance);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	f023 0303 	bic.w	r3, r3, #3
 8007454:	f043 0201 	orr.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
 800745c:	e005      	b.n	800746a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007462:	f043 0210 	orr.w	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	00026aaa 	.word	0x00026aaa

08007480 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <__NVIC_SetPriorityGrouping+0x44>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007500:	4013      	ands	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800750c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007516:	4a04      	ldr	r2, [pc, #16]	; (8007528 <__NVIC_SetPriorityGrouping+0x44>)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	60d3      	str	r3, [r2, #12]
}
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	e000ed00 	.word	0xe000ed00

0800752c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <__NVIC_GetPriorityGrouping+0x18>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	f003 0307 	and.w	r3, r3, #7
}
 800753a:	4618      	mov	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	e000ed00 	.word	0xe000ed00

08007548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007556:	2b00      	cmp	r3, #0
 8007558:	db0b      	blt.n	8007572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	f003 021f 	and.w	r2, r3, #31
 8007560:	4907      	ldr	r1, [pc, #28]	; (8007580 <__NVIC_EnableIRQ+0x38>)
 8007562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2001      	movs	r0, #1
 800756a:	fa00 f202 	lsl.w	r2, r0, r2
 800756e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	e000e100 	.word	0xe000e100

08007584 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800758e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007592:	2b00      	cmp	r3, #0
 8007594:	db12      	blt.n	80075bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	f003 021f 	and.w	r2, r3, #31
 800759c:	490a      	ldr	r1, [pc, #40]	; (80075c8 <__NVIC_DisableIRQ+0x44>)
 800759e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2001      	movs	r0, #1
 80075a6:	fa00 f202 	lsl.w	r2, r0, r2
 80075aa:	3320      	adds	r3, #32
 80075ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80075b0:	f3bf 8f4f 	dsb	sy
}
 80075b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80075b6:	f3bf 8f6f 	isb	sy
}
 80075ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	e000e100 	.word	0xe000e100

080075cc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	db0c      	blt.n	80075f8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	f003 021f 	and.w	r2, r3, #31
 80075e4:	4907      	ldr	r1, [pc, #28]	; (8007604 <__NVIC_SetPendingIRQ+0x38>)
 80075e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	2001      	movs	r0, #1
 80075ee:	fa00 f202 	lsl.w	r2, r0, r2
 80075f2:	3340      	adds	r3, #64	; 0x40
 80075f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	e000e100 	.word	0xe000e100

08007608 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007616:	2b00      	cmp	r3, #0
 8007618:	db0c      	blt.n	8007634 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	f003 021f 	and.w	r2, r3, #31
 8007620:	4907      	ldr	r1, [pc, #28]	; (8007640 <__NVIC_ClearPendingIRQ+0x38>)
 8007622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	2001      	movs	r0, #1
 800762a:	fa00 f202 	lsl.w	r2, r0, r2
 800762e:	3360      	adds	r3, #96	; 0x60
 8007630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	e000e100 	.word	0xe000e100

08007644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007654:	2b00      	cmp	r3, #0
 8007656:	db0a      	blt.n	800766e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	b2da      	uxtb	r2, r3
 800765c:	490c      	ldr	r1, [pc, #48]	; (8007690 <__NVIC_SetPriority+0x4c>)
 800765e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007662:	0112      	lsls	r2, r2, #4
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	440b      	add	r3, r1
 8007668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800766c:	e00a      	b.n	8007684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	b2da      	uxtb	r2, r3
 8007672:	4908      	ldr	r1, [pc, #32]	; (8007694 <__NVIC_SetPriority+0x50>)
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	3b04      	subs	r3, #4
 800767c:	0112      	lsls	r2, r2, #4
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	440b      	add	r3, r1
 8007682:	761a      	strb	r2, [r3, #24]
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	e000e100 	.word	0xe000e100
 8007694:	e000ed00 	.word	0xe000ed00

08007698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007698:	b480      	push	{r7}
 800769a:	b089      	sub	sp, #36	; 0x24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f1c3 0307 	rsb	r3, r3, #7
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	bf28      	it	cs
 80076b6:	2304      	movcs	r3, #4
 80076b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	3304      	adds	r3, #4
 80076be:	2b06      	cmp	r3, #6
 80076c0:	d902      	bls.n	80076c8 <NVIC_EncodePriority+0x30>
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	3b03      	subs	r3, #3
 80076c6:	e000      	b.n	80076ca <NVIC_EncodePriority+0x32>
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	43da      	mvns	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	401a      	ands	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076e0:	f04f 31ff 	mov.w	r1, #4294967295
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ea:	43d9      	mvns	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076f0:	4313      	orrs	r3, r2
         );
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3724      	adds	r7, #36	; 0x24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3b01      	subs	r3, #1
 800770c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007710:	d301      	bcc.n	8007716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007712:	2301      	movs	r3, #1
 8007714:	e00f      	b.n	8007736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007716:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <SysTick_Config+0x40>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3b01      	subs	r3, #1
 800771c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800771e:	210f      	movs	r1, #15
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	f7ff ff8e 	bl	8007644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <SysTick_Config+0x40>)
 800772a:	2200      	movs	r2, #0
 800772c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800772e:	4b04      	ldr	r3, [pc, #16]	; (8007740 <SysTick_Config+0x40>)
 8007730:	2207      	movs	r2, #7
 8007732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	e000e010 	.word	0xe000e010

08007744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fec9 	bl	80074e4 <__NVIC_SetPriorityGrouping>
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	4603      	mov	r3, r0
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
 8007766:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007768:	f7ff fee0 	bl	800752c <__NVIC_GetPriorityGrouping>
 800776c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	68b9      	ldr	r1, [r7, #8]
 8007772:	6978      	ldr	r0, [r7, #20]
 8007774:	f7ff ff90 	bl	8007698 <NVIC_EncodePriority>
 8007778:	4602      	mov	r2, r0
 800777a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff ff5f 	bl	8007644 <__NVIC_SetPriority>
}
 8007786:	bf00      	nop
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	4603      	mov	r3, r0
 8007796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fed3 	bl	8007548 <__NVIC_EnableIRQ>
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	4603      	mov	r3, r0
 80077b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80077b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fee3 	bl	8007584 <__NVIC_DisableIRQ>
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff ff96 	bl	8007700 <SysTick_Config>
 80077d4:	4603      	mov	r3, r0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	4603      	mov	r3, r0
 80077e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80077e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff feed 	bl	80075cc <__NVIC_SetPendingIRQ>
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	4603      	mov	r3, r0
 8007802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007808:	4618      	mov	r0, r3
 800780a:	f7ff fefd 	bl	8007608 <__NVIC_ClearPendingIRQ>
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800781a:	f7fd fa91 	bl	8004d40 <HAL_SYSTICK_Callback>
}
 800781e:	bf00      	nop
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e08e      	b.n	8007954 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	4b47      	ldr	r3, [pc, #284]	; (800795c <HAL_DMA_Init+0x138>)
 800783e:	429a      	cmp	r2, r3
 8007840:	d80f      	bhi.n	8007862 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	4b45      	ldr	r3, [pc, #276]	; (8007960 <HAL_DMA_Init+0x13c>)
 800784a:	4413      	add	r3, r2
 800784c:	4a45      	ldr	r2, [pc, #276]	; (8007964 <HAL_DMA_Init+0x140>)
 800784e:	fba2 2303 	umull	r2, r3, r2, r3
 8007852:	091b      	lsrs	r3, r3, #4
 8007854:	009a      	lsls	r2, r3, #2
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a42      	ldr	r2, [pc, #264]	; (8007968 <HAL_DMA_Init+0x144>)
 800785e:	641a      	str	r2, [r3, #64]	; 0x40
 8007860:	e00e      	b.n	8007880 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	4b40      	ldr	r3, [pc, #256]	; (800796c <HAL_DMA_Init+0x148>)
 800786a:	4413      	add	r3, r2
 800786c:	4a3d      	ldr	r2, [pc, #244]	; (8007964 <HAL_DMA_Init+0x140>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	091b      	lsrs	r3, r3, #4
 8007874:	009a      	lsls	r2, r3, #2
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a3c      	ldr	r2, [pc, #240]	; (8007970 <HAL_DMA_Init+0x14c>)
 800787e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80078a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa74 	bl	8007dc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078e0:	d102      	bne.n	80078e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80078f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d010      	beq.n	800792a <HAL_DMA_Init+0x106>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b04      	cmp	r3, #4
 800790e:	d80c      	bhi.n	800792a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa93 	bl	8007e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007926:	605a      	str	r2, [r3, #4]
 8007928:	e008      	b.n	800793c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40020407 	.word	0x40020407
 8007960:	bffdfff8 	.word	0xbffdfff8
 8007964:	cccccccd 	.word	0xcccccccd
 8007968:	40020000 	.word	0x40020000
 800796c:	bffdfbf8 	.word	0xbffdfbf8
 8007970:	40020400 	.word	0x40020400

08007974 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_DMA_Start_IT+0x20>
 8007990:	2302      	movs	r3, #2
 8007992:	e066      	b.n	8007a62 <HAL_DMA_Start_IT+0xee>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d155      	bne.n	8007a54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0201 	bic.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f9b9 	bl	8007d44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f042 020e 	orr.w	r2, r2, #14
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e00f      	b.n	8007a0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0204 	bic.w	r2, r2, #4
 80079fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 020a 	orr.w	r2, r2, #10
 8007a0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d007      	beq.n	8007a2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e005      	b.n	8007a60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e04f      	b.n	8007b1c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d008      	beq.n	8007a9a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e040      	b.n	8007b1c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 020e 	bic.w	r2, r2, #14
 8007aa8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ab8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0201 	bic.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f003 021c 	and.w	r2, r3, #28
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8007adc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ae6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00c      	beq.n	8007b0a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007afe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b08:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d005      	beq.n	8007b4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2204      	movs	r2, #4
 8007b44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	73fb      	strb	r3, [r7, #15]
 8007b4a:	e047      	b.n	8007bdc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 020e 	bic.w	r2, r2, #14
 8007b5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0201 	bic.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b80:	f003 021c 	and.w	r2, r3, #28
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	2101      	movs	r1, #1
 8007b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00c      	beq.n	8007bbc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007bba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
    }
  }
  return status;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c02:	f003 031c 	and.w	r3, r3, #28
 8007c06:	2204      	movs	r2, #4
 8007c08:	409a      	lsls	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d026      	beq.n	8007c60 <HAL_DMA_IRQHandler+0x7a>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d021      	beq.n	8007c60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d107      	bne.n	8007c3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0204 	bic.w	r2, r2, #4
 8007c38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	f003 021c 	and.w	r2, r3, #28
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	2104      	movs	r1, #4
 8007c48:	fa01 f202 	lsl.w	r2, r1, r2
 8007c4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d071      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007c5e:	e06c      	b.n	8007d3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c64:	f003 031c 	and.w	r3, r3, #28
 8007c68:	2202      	movs	r2, #2
 8007c6a:	409a      	lsls	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d02e      	beq.n	8007cd2 <HAL_DMA_IRQHandler+0xec>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d029      	beq.n	8007cd2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 020a 	bic.w	r2, r2, #10
 8007c9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca8:	f003 021c 	and.w	r2, r3, #28
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8007cb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d038      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007cd0:	e033      	b.n	8007d3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd6:	f003 031c 	and.w	r3, r3, #28
 8007cda:	2208      	movs	r2, #8
 8007cdc:	409a      	lsls	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d02a      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x156>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f003 0308 	and.w	r3, r3, #8
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d025      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 020e 	bic.w	r2, r2, #14
 8007cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	f003 021c 	and.w	r2, r3, #28
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
}
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007d6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d72:	f003 021c 	and.w	r2, r3, #28
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d108      	bne.n	8007da4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007da2:	e007      	b.n	8007db4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	60da      	str	r2, [r3, #12]
}
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4b17      	ldr	r3, [pc, #92]	; (8007e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d80a      	bhi.n	8007dea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd8:	089b      	lsrs	r3, r3, #2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007de0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6493      	str	r3, [r2, #72]	; 0x48
 8007de8:	e007      	b.n	8007dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dee:	089b      	lsrs	r3, r3, #2
 8007df0:	009a      	lsls	r2, r3, #2
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007df4:	4413      	add	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	3b08      	subs	r3, #8
 8007e02:	4a0c      	ldr	r2, [pc, #48]	; (8007e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007e04:	fba2 2303 	umull	r2, r3, r2, r3
 8007e08:	091b      	lsrs	r3, r3, #4
 8007e0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a0a      	ldr	r2, [pc, #40]	; (8007e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007e10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 031f 	and.w	r3, r3, #31
 8007e18:	2201      	movs	r2, #1
 8007e1a:	409a      	lsls	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	40020407 	.word	0x40020407
 8007e30:	4002081c 	.word	0x4002081c
 8007e34:	cccccccd 	.word	0xcccccccd
 8007e38:	40020880 	.word	0x40020880

08007e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007e60:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	409a      	lsls	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	1000823f 	.word	0x1000823f
 8007e84:	40020940 	.word	0x40020940

08007e88 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d12b      	bne.n	8007ef6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_DMAEx_ConfigMuxSync+0x24>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e025      	b.n	8007ef8 <HAL_DMAEx_ConfigMuxSync+0x70>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b12      	ldr	r3, [pc, #72]	; (8007f04 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	6811      	ldr	r1, [r2, #0]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	68d2      	ldr	r2, [r2, #12]
 8007ec6:	3a01      	subs	r2, #1
 8007ec8:	04d2      	lsls	r2, r2, #19
 8007eca:	4311      	orrs	r1, r2
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	6852      	ldr	r2, [r2, #4]
 8007ed0:	4311      	orrs	r1, r2
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	7a12      	ldrb	r2, [r2, #8]
 8007ed6:	0412      	lsls	r2, r2, #16
 8007ed8:	4311      	orrs	r1, r2
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	7a52      	ldrb	r2, [r2, #9]
 8007ede:	0252      	lsls	r2, r2, #9
 8007ee0:	4311      	orrs	r1, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ee6:	430b      	orrs	r3, r1
 8007ee8:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e000      	b.n	8007ef8 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
  }
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	e000fdff 	.word	0xe000fdff

08007f08 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f16:	e14c      	b.n	80081b2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	fa01 f303 	lsl.w	r3, r1, r3
 8007f24:	4013      	ands	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 813e 	beq.w	80081ac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d005      	beq.n	8007f48 <HAL_GPIO_Init+0x40>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d130      	bne.n	8007faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	2203      	movs	r2, #3
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f7e:	2201      	movs	r2, #1
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43db      	mvns	r3, r3
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	091b      	lsrs	r3, r3, #4
 8007f94:	f003 0201 	and.w	r2, r3, #1
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d017      	beq.n	8007fe6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc6:	43db      	mvns	r3, r3
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d123      	bne.n	800803a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	08da      	lsrs	r2, r3, #3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3208      	adds	r2, #8
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	220f      	movs	r2, #15
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	43db      	mvns	r3, r3
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4013      	ands	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	08da      	lsrs	r2, r3, #3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3208      	adds	r2, #8
 8008034:	6939      	ldr	r1, [r7, #16]
 8008036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	2203      	movs	r2, #3
 8008046:	fa02 f303 	lsl.w	r3, r2, r3
 800804a:	43db      	mvns	r3, r3
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4013      	ands	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f003 0203 	and.w	r2, r3, #3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8098 	beq.w	80081ac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800807c:	4a54      	ldr	r2, [pc, #336]	; (80081d0 <HAL_GPIO_Init+0x2c8>)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	3302      	adds	r3, #2
 8008084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f003 0303 	and.w	r3, r3, #3
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	220f      	movs	r2, #15
 8008094:	fa02 f303 	lsl.w	r3, r2, r3
 8008098:	43db      	mvns	r3, r3
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4013      	ands	r3, r2
 800809e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080a6:	d019      	beq.n	80080dc <HAL_GPIO_Init+0x1d4>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a4a      	ldr	r2, [pc, #296]	; (80081d4 <HAL_GPIO_Init+0x2cc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d013      	beq.n	80080d8 <HAL_GPIO_Init+0x1d0>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a49      	ldr	r2, [pc, #292]	; (80081d8 <HAL_GPIO_Init+0x2d0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00d      	beq.n	80080d4 <HAL_GPIO_Init+0x1cc>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a48      	ldr	r2, [pc, #288]	; (80081dc <HAL_GPIO_Init+0x2d4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d007      	beq.n	80080d0 <HAL_GPIO_Init+0x1c8>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a47      	ldr	r2, [pc, #284]	; (80081e0 <HAL_GPIO_Init+0x2d8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d101      	bne.n	80080cc <HAL_GPIO_Init+0x1c4>
 80080c8:	2304      	movs	r3, #4
 80080ca:	e008      	b.n	80080de <HAL_GPIO_Init+0x1d6>
 80080cc:	2307      	movs	r3, #7
 80080ce:	e006      	b.n	80080de <HAL_GPIO_Init+0x1d6>
 80080d0:	2303      	movs	r3, #3
 80080d2:	e004      	b.n	80080de <HAL_GPIO_Init+0x1d6>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e002      	b.n	80080de <HAL_GPIO_Init+0x1d6>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <HAL_GPIO_Init+0x1d6>
 80080dc:	2300      	movs	r3, #0
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	f002 0203 	and.w	r2, r2, #3
 80080e4:	0092      	lsls	r2, r2, #2
 80080e6:	4093      	lsls	r3, r2
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80080ee:	4938      	ldr	r1, [pc, #224]	; (80081d0 <HAL_GPIO_Init+0x2c8>)
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	089b      	lsrs	r3, r3, #2
 80080f4:	3302      	adds	r3, #2
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080fc:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	43db      	mvns	r3, r3
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4013      	ands	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008120:	4a30      	ldr	r2, [pc, #192]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008126:	4b2f      	ldr	r3, [pc, #188]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	43db      	mvns	r3, r3
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4013      	ands	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800814a:	4a26      	ldr	r2, [pc, #152]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008150:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 8008152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	43db      	mvns	r3, r3
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4013      	ands	r3, r2
 8008160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008176:	4a1b      	ldr	r2, [pc, #108]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800817e:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 8008180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	43db      	mvns	r3, r3
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4013      	ands	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081a4:	4a0f      	ldr	r2, [pc, #60]	; (80081e4 <HAL_GPIO_Init+0x2dc>)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	3301      	adds	r3, #1
 80081b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f47f aeab 	bne.w	8007f18 <HAL_GPIO_Init+0x10>
  }
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	371c      	adds	r7, #28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	40010000 	.word	0x40010000
 80081d4:	48000400 	.word	0x48000400
 80081d8:	48000800 	.word	0x48000800
 80081dc:	48000c00 	.word	0x48000c00
 80081e0:	48001000 	.word	0x48001000
 80081e4:	58000800 	.word	0x58000800

080081e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	807b      	strh	r3, [r7, #2]
 80081f4:	4613      	mov	r3, r2
 80081f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081f8:	787b      	ldrb	r3, [r7, #1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008204:	e002      	b.n	800820c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008206:	887a      	ldrh	r2, [r7, #2]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	4013      	ands	r3, r2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d006      	beq.n	800823c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800822e:	4a05      	ldr	r2, [pc, #20]	; (8008244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	4618      	mov	r0, r3
 8008238:	f7f9 fc5e 	bl	8001af8 <HAL_GPIO_EXTI_Callback>
  }
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	58000800 	.word	0x58000800

08008248 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <HAL_HSEM_IRQHandler+0x30>)
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008254:	4b08      	ldr	r3, [pc, #32]	; (8008278 <HAL_HSEM_IRQHandler+0x30>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	43db      	mvns	r3, r3
 800825c:	4906      	ldr	r1, [pc, #24]	; (8008278 <HAL_HSEM_IRQHandler+0x30>)
 800825e:	4013      	ands	r3, r2
 8008260:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008262:	4a05      	ldr	r2, [pc, #20]	; (8008278 <HAL_HSEM_IRQHandler+0x30>)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f807 	bl	800827c <HAL_HSEM_FreeCallback>
}
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	58001500 	.word	0x58001500

0800827c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e081      	b.n	80083a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7fa ffc6 	bl	8003248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2224      	movs	r2, #36	; 0x24
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80082e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d107      	bne.n	800830a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008306:	609a      	str	r2, [r3, #8]
 8008308:	e006      	b.n	8008318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d104      	bne.n	800832a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800834c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	69d9      	ldr	r1, [r3, #28]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1a      	ldr	r2, [r3, #32]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	461a      	mov	r2, r3
 80083bc:	460b      	mov	r3, r1
 80083be:	817b      	strh	r3, [r7, #10]
 80083c0:	4613      	mov	r3, r2
 80083c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	f040 80da 	bne.w	8008586 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <HAL_I2C_Master_Transmit+0x30>
 80083dc:	2302      	movs	r3, #2
 80083de:	e0d3      	b.n	8008588 <HAL_I2C_Master_Transmit+0x1d8>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083e8:	f7fd fb38 	bl	8005a5c <HAL_GetTick>
 80083ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	2319      	movs	r3, #25
 80083f4:	2201      	movs	r2, #1
 80083f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f8f0 	bl	80085e0 <I2C_WaitOnFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e0be      	b.n	8008588 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2221      	movs	r2, #33	; 0x21
 800840e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2210      	movs	r2, #16
 8008416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	893a      	ldrh	r2, [r7, #8]
 800842a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008436:	b29b      	uxth	r3, r3
 8008438:	2bff      	cmp	r3, #255	; 0xff
 800843a:	d90e      	bls.n	800845a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	22ff      	movs	r2, #255	; 0xff
 8008440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008446:	b2da      	uxtb	r2, r3
 8008448:	8979      	ldrh	r1, [r7, #10]
 800844a:	4b51      	ldr	r3, [pc, #324]	; (8008590 <HAL_I2C_Master_Transmit+0x1e0>)
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fa6c 	bl	8008930 <I2C_TransferConfig>
 8008458:	e06c      	b.n	8008534 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29a      	uxth	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008468:	b2da      	uxtb	r2, r3
 800846a:	8979      	ldrh	r1, [r7, #10]
 800846c:	4b48      	ldr	r3, [pc, #288]	; (8008590 <HAL_I2C_Master_Transmit+0x1e0>)
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fa5b 	bl	8008930 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800847a:	e05b      	b.n	8008534 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	6a39      	ldr	r1, [r7, #32]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f8ed 	bl	8008660 <I2C_WaitOnTXISFlagUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e07b      	b.n	8008588 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	781a      	ldrb	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d034      	beq.n	8008534 <HAL_I2C_Master_Transmit+0x184>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d130      	bne.n	8008534 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	2200      	movs	r2, #0
 80084da:	2180      	movs	r1, #128	; 0x80
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f87f 	bl	80085e0 <I2C_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e04d      	b.n	8008588 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2bff      	cmp	r3, #255	; 0xff
 80084f4:	d90e      	bls.n	8008514 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	22ff      	movs	r2, #255	; 0xff
 80084fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008500:	b2da      	uxtb	r2, r3
 8008502:	8979      	ldrh	r1, [r7, #10]
 8008504:	2300      	movs	r3, #0
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 fa0f 	bl	8008930 <I2C_TransferConfig>
 8008512:	e00f      	b.n	8008534 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008518:	b29a      	uxth	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008522:	b2da      	uxtb	r2, r3
 8008524:	8979      	ldrh	r1, [r7, #10]
 8008526:	2300      	movs	r3, #0
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f9fe 	bl	8008930 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d19e      	bne.n	800847c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	6a39      	ldr	r1, [r7, #32]
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 f8cc 	bl	80086e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e01a      	b.n	8008588 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2220      	movs	r2, #32
 8008558:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6859      	ldr	r1, [r3, #4]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <HAL_I2C_Master_Transmit+0x1e4>)
 8008566:	400b      	ands	r3, r1
 8008568:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2220      	movs	r2, #32
 800856e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	e000      	b.n	8008588 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008586:	2302      	movs	r3, #2
  }
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	80002000 	.word	0x80002000
 8008594:	fe00e800 	.word	0xfe00e800

08008598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d103      	bne.n	80085b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d007      	beq.n	80085d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	619a      	str	r2, [r3, #24]
  }
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	4613      	mov	r3, r2
 80085ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085f0:	e022      	b.n	8008638 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f8:	d01e      	beq.n	8008638 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fa:	f7fd fa2f 	bl	8005a5c <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d302      	bcc.n	8008610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d113      	bne.n	8008638 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008614:	f043 0220 	orr.w	r2, r3, #32
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e00f      	b.n	8008658 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4013      	ands	r3, r2
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	429a      	cmp	r2, r3
 8008646:	bf0c      	ite	eq
 8008648:	2301      	moveq	r3, #1
 800864a:	2300      	movne	r3, #0
 800864c:	b2db      	uxtb	r3, r3
 800864e:	461a      	mov	r2, r3
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	429a      	cmp	r2, r3
 8008654:	d0cd      	beq.n	80085f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800866c:	e02c      	b.n	80086c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f870 	bl	8008758 <I2C_IsErrorOccurred>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e02a      	b.n	80086d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d01e      	beq.n	80086c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800868a:	f7fd f9e7 	bl	8005a5c <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	429a      	cmp	r2, r3
 8008698:	d302      	bcc.n	80086a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d113      	bne.n	80086c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a4:	f043 0220 	orr.w	r2, r3, #32
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e007      	b.n	80086d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d1cb      	bne.n	800866e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086ec:	e028      	b.n	8008740 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f830 	bl	8008758 <I2C_IsErrorOccurred>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e026      	b.n	8008750 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fd f9ab 	bl	8005a5c <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d113      	bne.n	8008740 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871c:	f043 0220 	orr.w	r2, r3, #32
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e007      	b.n	8008750 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b20      	cmp	r3, #32
 800874c:	d1cf      	bne.n	80086ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008772:	2300      	movs	r3, #0
 8008774:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	d075      	beq.n	8008870 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2210      	movs	r2, #16
 800878a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800878c:	e056      	b.n	800883c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008794:	d052      	beq.n	800883c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008796:	f7fd f961 	bl	8005a5c <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d302      	bcc.n	80087ac <I2C_IsErrorOccurred+0x54>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d147      	bne.n	800883c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ce:	d12e      	bne.n	800882e <I2C_IsErrorOccurred+0xd6>
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d6:	d02a      	beq.n	800882e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80087d8:	7cfb      	ldrb	r3, [r7, #19]
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d027      	beq.n	800882e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80087ee:	f7fd f935 	bl	8005a5c <HAL_GetTick>
 80087f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087f4:	e01b      	b.n	800882e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80087f6:	f7fd f931 	bl	8005a5c <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b19      	cmp	r3, #25
 8008802:	d914      	bls.n	800882e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008808:	f043 0220 	orr.w	r2, r3, #32
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f003 0320 	and.w	r3, r3, #32
 8008838:	2b20      	cmp	r3, #32
 800883a:	d1dc      	bne.n	80087f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b20      	cmp	r3, #32
 8008848:	d003      	beq.n	8008852 <I2C_IsErrorOccurred+0xfa>
 800884a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800884e:	2b00      	cmp	r3, #0
 8008850:	d09d      	beq.n	800878e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008856:	2b00      	cmp	r3, #0
 8008858:	d103      	bne.n	8008862 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2220      	movs	r2, #32
 8008860:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	f043 0304 	orr.w	r3, r3, #4
 8008868:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00b      	beq.n	800889a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00b      	beq.n	80088bc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	f043 0308 	orr.w	r3, r3, #8
 80088aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00b      	beq.n	80088de <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	f043 0302 	orr.w	r3, r3, #2
 80088cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80088de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d01c      	beq.n	8008920 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff fe56 	bl	8008598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6859      	ldr	r1, [r3, #4]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	4b0d      	ldr	r3, [pc, #52]	; (800892c <I2C_IsErrorOccurred+0x1d4>)
 80088f8:	400b      	ands	r3, r1
 80088fa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	431a      	orrs	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008924:	4618      	mov	r0, r3
 8008926:	3728      	adds	r7, #40	; 0x28
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	fe00e800 	.word	0xfe00e800

08008930 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	817b      	strh	r3, [r7, #10]
 800893e:	4613      	mov	r3, r2
 8008940:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008942:	897b      	ldrh	r3, [r7, #10]
 8008944:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008948:	7a7b      	ldrb	r3, [r7, #9]
 800894a:	041b      	lsls	r3, r3, #16
 800894c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008950:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	4313      	orrs	r3, r2
 800895a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800895e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	0d5b      	lsrs	r3, r3, #21
 800896a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800896e:	4b08      	ldr	r3, [pc, #32]	; (8008990 <I2C_TransferConfig+0x60>)
 8008970:	430b      	orrs	r3, r1
 8008972:	43db      	mvns	r3, r3
 8008974:	ea02 0103 	and.w	r1, r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	430a      	orrs	r2, r1
 8008980:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	03ff63ff 	.word	0x03ff63ff

08008994 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d138      	bne.n	8008a1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e032      	b.n	8008a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2224      	movs	r2, #36	; 0x24
 80089c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6819      	ldr	r1, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e000      	b.n	8008a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
  }
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d139      	bne.n	8008ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e033      	b.n	8008ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2224      	movs	r2, #36	; 0x24
 8008a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0201 	bic.w	r2, r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e000      	b.n	8008ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ab4:	2302      	movs	r3, #2
  }
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01e      	beq.n	8008b14 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8008ad6:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <HAL_IPCC_Init+0x60>)
 8008ad8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fa fbf6 	bl	80032d8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8008aec:	68b8      	ldr	r0, [r7, #8]
 8008aee:	f000 f85b 	bl	8008ba8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f82c 	bl	8008b5c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008b12:	e001      	b.n	8008b18 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	58000c00 	.word	0x58000c00

08008b28 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8008b36:	bf00      	nop
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b085      	sub	sp, #20
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e00f      	b.n	8008b8a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	4a0b      	ldr	r2, [pc, #44]	; (8008ba0 <IPCC_SetDefaultCallbacks+0x44>)
 8008b74:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3306      	adds	r3, #6
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <IPCC_SetDefaultCallbacks+0x48>)
 8008b82:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	d9ec      	bls.n	8008b6a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	08008b29 	.word	0x08008b29
 8008ba4:	08008b43 	.word	0x08008b43

08008ba8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8008bbc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	223f      	movs	r2, #63	; 0x3f
 8008bc2:	609a      	str	r2, [r3, #8]
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bd4:	4b05      	ldr	r3, [pc, #20]	; (8008bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a04      	ldr	r2, [pc, #16]	; (8008bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bde:	6013      	str	r3, [r2, #0]
}
 8008be0:	bf00      	nop
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	58000400 	.word	0x58000400

08008bf0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <HAL_PWREx_GetVoltageRange+0x18>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	58000400 	.word	0x58000400

08008c0c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1e:	d101      	bne.n	8008c24 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <LL_RCC_HSE_Enable>:
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c42:	6013      	str	r3, [r2, #0]
}
 8008c44:	bf00      	nop
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <LL_RCC_HSE_Disable>:
{
 8008c4e:	b480      	push	{r7}
 8008c50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c60:	6013      	str	r3, [r2, #0]
}
 8008c62:	bf00      	nop
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <LL_RCC_HSE_IsReady>:
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c7e:	d101      	bne.n	8008c84 <LL_RCC_HSE_IsReady+0x18>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <LL_RCC_HSE_IsReady+0x1a>
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <LL_RCC_HSI_Enable>:
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca2:	6013      	str	r3, [r2, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <LL_RCC_HSI_Disable>:
{
 8008cae:	b480      	push	{r7}
 8008cb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cc0:	6013      	str	r3, [r2, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <LL_RCC_HSI_IsReady>:
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cde:	d101      	bne.n	8008ce4 <LL_RCC_HSI_IsReady+0x18>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <LL_RCC_HSI_IsReady+0x1a>
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	061b      	lsls	r3, r3, #24
 8008d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	604b      	str	r3, [r1, #4]
}
 8008d0e:	bf00      	nop
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <LL_RCC_HSI48_Enable>:
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d2a:	f043 0301 	orr.w	r3, r3, #1
 8008d2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008d32:	bf00      	nop
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <LL_RCC_HSI48_Disable>:
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <LL_RCC_HSI48_IsReady>:
{
 8008d5e:	b480      	push	{r7}
 8008d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d101      	bne.n	8008d76 <LL_RCC_HSI48_IsReady+0x18>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <LL_RCC_HSI48_IsReady+0x1a>
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <LL_RCC_LSE_Enable>:
{
 8008d82:	b480      	push	{r7}
 8008d84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d92:	f043 0301 	orr.w	r3, r3, #1
 8008d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008d9a:	bf00      	nop
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <LL_RCC_LSE_Disable>:
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008db4:	f023 0301 	bic.w	r3, r3, #1
 8008db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <LL_RCC_LSE_EnableBypass>:
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dd6:	f043 0304 	orr.w	r3, r3, #4
 8008dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008dde:	bf00      	nop
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <LL_RCC_LSE_DisableBypass>:
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008df8:	f023 0304 	bic.w	r3, r3, #4
 8008dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008e00:	bf00      	nop
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <LL_RCC_LSE_IsReady>:
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d101      	bne.n	8008e22 <LL_RCC_LSE_IsReady+0x18>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e000      	b.n	8008e24 <LL_RCC_LSE_IsReady+0x1a>
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <LL_RCC_LSI1_Enable>:
{
 8008e2e:	b480      	push	{r7}
 8008e30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008e46:	bf00      	nop
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <LL_RCC_LSI1_Disable>:
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008e68:	bf00      	nop
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <LL_RCC_LSI1_IsReady>:
{
 8008e72:	b480      	push	{r7}
 8008e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d101      	bne.n	8008e8a <LL_RCC_LSI1_IsReady+0x18>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <LL_RCC_LSI1_IsReady+0x1a>
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <LL_RCC_LSI2_Enable>:
{
 8008e96:	b480      	push	{r7}
 8008e98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ea6:	f043 0304 	orr.w	r3, r3, #4
 8008eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008eae:	bf00      	nop
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <LL_RCC_LSI2_Disable>:
{
 8008eb8:	b480      	push	{r7}
 8008eba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ec8:	f023 0304 	bic.w	r3, r3, #4
 8008ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <LL_RCC_LSI2_IsReady>:
{
 8008eda:	b480      	push	{r7}
 8008edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b08      	cmp	r3, #8
 8008eec:	d101      	bne.n	8008ef2 <LL_RCC_LSI2_IsReady+0x18>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <LL_RCC_LSI2_IsReady+0x1a>
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <LL_RCC_LSI2_SetTrimming>:
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	021b      	lsls	r3, r3, #8
 8008f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <LL_RCC_MSI_Enable>:
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f3a:	f043 0301 	orr.w	r3, r3, #1
 8008f3e:	6013      	str	r3, [r2, #0]
}
 8008f40:	bf00      	nop
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <LL_RCC_MSI_Disable>:
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	6013      	str	r3, [r2, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <LL_RCC_MSI_IsReady>:
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d101      	bne.n	8008f7e <LL_RCC_MSI_IsReady+0x16>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <LL_RCC_MSI_IsReady+0x18>
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <LL_RCC_MSI_SetRange>:
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	600b      	str	r3, [r1, #0]
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <LL_RCC_MSI_GetRange>:
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fc2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2bb0      	cmp	r3, #176	; 0xb0
 8008fc8:	d901      	bls.n	8008fce <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8008fca:	23b0      	movs	r3, #176	; 0xb0
 8008fcc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8008fce:	687b      	ldr	r3, [r7, #4]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <LL_RCC_MSI_SetCalibTrimming>:
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	604b      	str	r3, [r1, #4]
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <LL_RCC_SetSysClkSource>:
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800900e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f023 0203 	bic.w	r2, r3, #3
 8009018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4313      	orrs	r3, r2
 8009020:	608b      	str	r3, [r1, #8]
}
 8009022:	bf00      	nop
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <LL_RCC_GetSysClkSource>:
{
 800902e:	b480      	push	{r7}
 8009030:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f003 030c 	and.w	r3, r3, #12
}
 800903c:	4618      	mov	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <LL_RCC_SetAHBPrescaler>:
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800904e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4313      	orrs	r3, r2
 8009060:	608b      	str	r3, [r1, #8]
}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <LL_C2_RCC_SetAHBPrescaler>:
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8009076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800907a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800907e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <LL_RCC_SetAHB4Prescaler>:
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80090a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80090aa:	f023 020f 	bic.w	r2, r3, #15
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	091b      	lsrs	r3, r3, #4
 80090b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <LL_RCC_SetAPB1Prescaler>:
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80090d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	608b      	str	r3, [r1, #8]
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <LL_RCC_SetAPB2Prescaler>:
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80090f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4313      	orrs	r3, r2
 800910a:	608b      	str	r3, [r1, #8]
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <LL_RCC_GetAHBPrescaler>:
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800911c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009126:	4618      	mov	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <LL_RCC_GetAHB4Prescaler>:
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009138:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009142:	4618      	mov	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <LL_RCC_GetAPB1Prescaler>:
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800915a:	4618      	mov	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <LL_RCC_GetAPB2Prescaler>:
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009172:	4618      	mov	r0, r3
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <LL_RCC_PLL_Enable>:
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800918a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800918e:	6013      	str	r3, [r2, #0]
}
 8009190:	bf00      	nop
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <LL_RCC_PLL_Disable>:
{
 800919a:	b480      	push	{r7}
 800919c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800919e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ac:	6013      	str	r3, [r2, #0]
}
 80091ae:	bf00      	nop
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <LL_RCC_PLL_IsReady>:
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80091bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091ca:	d101      	bne.n	80091d0 <LL_RCC_PLL_IsReady+0x18>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <LL_RCC_PLL_IsReady+0x1a>
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <LL_RCC_PLL_GetN>:
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80091e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <LL_RCC_PLL_GetR>:
{
 80091f6:	b480      	push	{r7}
 80091f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80091fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8009204:	4618      	mov	r0, r3
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <LL_RCC_PLL_GetDivider>:
{
 800920e:	b480      	push	{r7}
 8009210:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800921c:	4618      	mov	r0, r3
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <LL_RCC_PLL_GetMainSource>:
{
 8009226:	b480      	push	{r7}
 8009228:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800922a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0303 	and.w	r3, r3, #3
}
 8009234:	4618      	mov	r0, r3
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <LL_RCC_IsActiveFlag_HPRE>:
{
 800923e:	b480      	push	{r7}
 8009240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800924c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009250:	d101      	bne.n	8009256 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009252:	2301      	movs	r3, #1
 8009254:	e000      	b.n	8009258 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8009262:	b480      	push	{r7}
 8009264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8009266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800926a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800926e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009276:	d101      	bne.n	800927c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800928c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009290:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800929c:	d101      	bne.n	80092a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <LL_RCC_IsActiveFlag_PPRE1>:
{
 80092ae:	b480      	push	{r7}
 80092b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80092b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092c0:	d101      	bne.n	80092c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e000      	b.n	80092c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80092d2:	b480      	push	{r7}
 80092d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80092d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092e4:	d101      	bne.n	80092ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e000      	b.n	80092ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
	...

080092f8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092f8:	b590      	push	{r4, r7, lr}
 80092fa:	b08d      	sub	sp, #52	; 0x34
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e363      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 808d 	beq.w	8009432 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009318:	f7ff fe89 	bl	800902e <LL_RCC_GetSysClkSource>
 800931c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800931e:	f7ff ff82 	bl	8009226 <LL_RCC_PLL_GetMainSource>
 8009322:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d005      	beq.n	8009336 <HAL_RCC_OscConfig+0x3e>
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	2b0c      	cmp	r3, #12
 800932e:	d147      	bne.n	80093c0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	2b01      	cmp	r3, #1
 8009334:	d144      	bne.n	80093c0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e347      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009346:	f7ff fe34 	bl	8008fb2 <LL_RCC_MSI_GetRange>
 800934a:	4603      	mov	r3, r0
 800934c:	429c      	cmp	r4, r3
 800934e:	d914      	bls.n	800937a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fd2f 	bl	8009db8 <RCC_SetFlashLatencyFromMSIRange>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e336      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fe0e 	bl	8008f8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fe32 	bl	8008fdc <LL_RCC_MSI_SetCalibTrimming>
 8009378:	e013      	b.n	80093a2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff fe03 	bl	8008f8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	4618      	mov	r0, r3
 800938a:	f7ff fe27 	bl	8008fdc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fd10 	bl	8009db8 <RCC_SetFlashLatencyFromMSIRange>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e317      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80093a2:	f000 fcc9 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 80093a6:	4603      	mov	r3, r0
 80093a8:	4aa4      	ldr	r2, [pc, #656]	; (800963c <HAL_RCC_OscConfig+0x344>)
 80093aa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80093ac:	4ba4      	ldr	r3, [pc, #656]	; (8009640 <HAL_RCC_OscConfig+0x348>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fc fb05 	bl	80059c0 <HAL_InitTick>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d039      	beq.n	8009430 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e308      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	69db      	ldr	r3, [r3, #28]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01e      	beq.n	8009406 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80093c8:	f7ff fdb0 	bl	8008f2c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80093cc:	f7fc fb46 	bl	8005a5c <HAL_GetTick>
 80093d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80093d2:	e008      	b.n	80093e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80093d4:	f7fc fb42 	bl	8005a5c <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e2f5      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80093e6:	f7ff fdbf 	bl	8008f68 <LL_RCC_MSI_IsReady>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0f1      	beq.n	80093d4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff fdc8 	bl	8008f8a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff fdec 	bl	8008fdc <LL_RCC_MSI_SetCalibTrimming>
 8009404:	e015      	b.n	8009432 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009406:	f7ff fda0 	bl	8008f4a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800940a:	f7fc fb27 	bl	8005a5c <HAL_GetTick>
 800940e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009410:	e008      	b.n	8009424 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009412:	f7fc fb23 	bl	8005a5c <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e2d6      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009424:	f7ff fda0 	bl	8008f68 <LL_RCC_MSI_IsReady>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f1      	bne.n	8009412 <HAL_RCC_OscConfig+0x11a>
 800942e:	e000      	b.n	8009432 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009430:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d047      	beq.n	80094ce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800943e:	f7ff fdf6 	bl	800902e <LL_RCC_GetSysClkSource>
 8009442:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009444:	f7ff feef 	bl	8009226 <LL_RCC_PLL_GetMainSource>
 8009448:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d005      	beq.n	800945c <HAL_RCC_OscConfig+0x164>
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	2b0c      	cmp	r3, #12
 8009454:	d108      	bne.n	8009468 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	2b03      	cmp	r3, #3
 800945a:	d105      	bne.n	8009468 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d134      	bne.n	80094ce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e2b4      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009470:	d102      	bne.n	8009478 <HAL_RCC_OscConfig+0x180>
 8009472:	f7ff fbdd 	bl	8008c30 <LL_RCC_HSE_Enable>
 8009476:	e001      	b.n	800947c <HAL_RCC_OscConfig+0x184>
 8009478:	f7ff fbe9 	bl	8008c4e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d012      	beq.n	80094aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009484:	f7fc faea 	bl	8005a5c <HAL_GetTick>
 8009488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800948a:	e008      	b.n	800949e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800948c:	f7fc fae6 	bl	8005a5c <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	2b64      	cmp	r3, #100	; 0x64
 8009498:	d901      	bls.n	800949e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e299      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800949e:	f7ff fbe5 	bl	8008c6c <LL_RCC_HSE_IsReady>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0f1      	beq.n	800948c <HAL_RCC_OscConfig+0x194>
 80094a8:	e011      	b.n	80094ce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094aa:	f7fc fad7 	bl	8005a5c <HAL_GetTick>
 80094ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80094b0:	e008      	b.n	80094c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094b2:	f7fc fad3 	bl	8005a5c <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	2b64      	cmp	r3, #100	; 0x64
 80094be:	d901      	bls.n	80094c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e286      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80094c4:	f7ff fbd2 	bl	8008c6c <LL_RCC_HSE_IsReady>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1f1      	bne.n	80094b2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d04c      	beq.n	8009574 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094da:	f7ff fda8 	bl	800902e <LL_RCC_GetSysClkSource>
 80094de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094e0:	f7ff fea1 	bl	8009226 <LL_RCC_PLL_GetMainSource>
 80094e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d005      	beq.n	80094f8 <HAL_RCC_OscConfig+0x200>
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	2b0c      	cmp	r3, #12
 80094f0:	d10e      	bne.n	8009510 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d10b      	bne.n	8009510 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e266      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff fbf1 	bl	8008cf0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800950e:	e031      	b.n	8009574 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d019      	beq.n	800954c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009518:	f7ff fbba 	bl	8008c90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951c:	f7fc fa9e 	bl	8005a5c <HAL_GetTick>
 8009520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009522:	e008      	b.n	8009536 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009524:	f7fc fa9a 	bl	8005a5c <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e24d      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009536:	f7ff fbc9 	bl	8008ccc <LL_RCC_HSI_IsReady>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0f1      	beq.n	8009524 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff fbd3 	bl	8008cf0 <LL_RCC_HSI_SetCalibTrimming>
 800954a:	e013      	b.n	8009574 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800954c:	f7ff fbaf 	bl	8008cae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009550:	f7fc fa84 	bl	8005a5c <HAL_GetTick>
 8009554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009556:	e008      	b.n	800956a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009558:	f7fc fa80 	bl	8005a5c <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e233      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800956a:	f7ff fbaf 	bl	8008ccc <LL_RCC_HSI_IsReady>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1f1      	bne.n	8009558 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 80a3 	beq.w	80096d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d076      	beq.n	8009684 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0310 	and.w	r3, r3, #16
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d046      	beq.n	8009630 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80095a2:	f7ff fc66 	bl	8008e72 <LL_RCC_LSI1_IsReady>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d113      	bne.n	80095d4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80095ac:	f7ff fc3f 	bl	8008e2e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095b0:	f7fc fa54 	bl	8005a5c <HAL_GetTick>
 80095b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80095b8:	f7fc fa50 	bl	8005a5c <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e203      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80095ca:	f7ff fc52 	bl	8008e72 <LL_RCC_LSI1_IsReady>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0f1      	beq.n	80095b8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80095d4:	f7ff fc5f 	bl	8008e96 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d8:	f7fc fa40 	bl	8005a5c <HAL_GetTick>
 80095dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80095de:	e008      	b.n	80095f2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80095e0:	f7fc fa3c 	bl	8005a5c <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d901      	bls.n	80095f2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e1ef      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80095f2:	f7ff fc72 	bl	8008eda <LL_RCC_LSI2_IsReady>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0f1      	beq.n	80095e0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fc7c 	bl	8008efe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009606:	f7ff fc23 	bl	8008e50 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960a:	f7fc fa27 	bl	8005a5c <HAL_GetTick>
 800960e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009610:	e008      	b.n	8009624 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009612:	f7fc fa23 	bl	8005a5c <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e1d6      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009624:	f7ff fc25 	bl	8008e72 <LL_RCC_LSI1_IsReady>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1f1      	bne.n	8009612 <HAL_RCC_OscConfig+0x31a>
 800962e:	e051      	b.n	80096d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009630:	f7ff fbfd 	bl	8008e2e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009634:	f7fc fa12 	bl	8005a5c <HAL_GetTick>
 8009638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800963a:	e00c      	b.n	8009656 <HAL_RCC_OscConfig+0x35e>
 800963c:	20000038 	.word	0x20000038
 8009640:	2000003c 	.word	0x2000003c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009644:	f7fc fa0a 	bl	8005a5c <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b02      	cmp	r3, #2
 8009650:	d901      	bls.n	8009656 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e1bd      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009656:	f7ff fc0c 	bl	8008e72 <LL_RCC_LSI1_IsReady>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0f1      	beq.n	8009644 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009660:	f7ff fc2a 	bl	8008eb8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009664:	e008      	b.n	8009678 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009666:	f7fc f9f9 	bl	8005a5c <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b03      	cmp	r3, #3
 8009672:	d901      	bls.n	8009678 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e1ac      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009678:	f7ff fc2f 	bl	8008eda <LL_RCC_LSI2_IsReady>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1f1      	bne.n	8009666 <HAL_RCC_OscConfig+0x36e>
 8009682:	e027      	b.n	80096d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009684:	f7ff fc18 	bl	8008eb8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009688:	f7fc f9e8 	bl	8005a5c <HAL_GetTick>
 800968c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800968e:	e008      	b.n	80096a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009690:	f7fc f9e4 	bl	8005a5c <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d901      	bls.n	80096a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e197      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80096a2:	f7ff fc1a 	bl	8008eda <LL_RCC_LSI2_IsReady>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f1      	bne.n	8009690 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80096ac:	f7ff fbd0 	bl	8008e50 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096b0:	f7fc f9d4 	bl	8005a5c <HAL_GetTick>
 80096b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80096b6:	e008      	b.n	80096ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80096b8:	f7fc f9d0 	bl	8005a5c <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d901      	bls.n	80096ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e183      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80096ca:	f7ff fbd2 	bl	8008e72 <LL_RCC_LSI1_IsReady>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f1      	bne.n	80096b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d05b      	beq.n	8009798 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096e0:	4ba7      	ldr	r3, [pc, #668]	; (8009980 <HAL_RCC_OscConfig+0x688>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d114      	bne.n	8009716 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80096ec:	f7ff fa70 	bl	8008bd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096f0:	f7fc f9b4 	bl	8005a5c <HAL_GetTick>
 80096f4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096f6:	e008      	b.n	800970a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f8:	f7fc f9b0 	bl	8005a5c <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b02      	cmp	r3, #2
 8009704:	d901      	bls.n	800970a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e163      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800970a:	4b9d      	ldr	r3, [pc, #628]	; (8009980 <HAL_RCC_OscConfig+0x688>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0f0      	beq.n	80096f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d102      	bne.n	8009724 <HAL_RCC_OscConfig+0x42c>
 800971e:	f7ff fb30 	bl	8008d82 <LL_RCC_LSE_Enable>
 8009722:	e00c      	b.n	800973e <HAL_RCC_OscConfig+0x446>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	2b05      	cmp	r3, #5
 800972a:	d104      	bne.n	8009736 <HAL_RCC_OscConfig+0x43e>
 800972c:	f7ff fb4b 	bl	8008dc6 <LL_RCC_LSE_EnableBypass>
 8009730:	f7ff fb27 	bl	8008d82 <LL_RCC_LSE_Enable>
 8009734:	e003      	b.n	800973e <HAL_RCC_OscConfig+0x446>
 8009736:	f7ff fb35 	bl	8008da4 <LL_RCC_LSE_Disable>
 800973a:	f7ff fb55 	bl	8008de8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d014      	beq.n	8009770 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009746:	f7fc f989 	bl	8005a5c <HAL_GetTick>
 800974a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800974c:	e00a      	b.n	8009764 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800974e:	f7fc f985 	bl	8005a5c <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	f241 3288 	movw	r2, #5000	; 0x1388
 800975c:	4293      	cmp	r3, r2
 800975e:	d901      	bls.n	8009764 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e136      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009764:	f7ff fb51 	bl	8008e0a <LL_RCC_LSE_IsReady>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0ef      	beq.n	800974e <HAL_RCC_OscConfig+0x456>
 800976e:	e013      	b.n	8009798 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009770:	f7fc f974 	bl	8005a5c <HAL_GetTick>
 8009774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009776:	e00a      	b.n	800978e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009778:	f7fc f970 	bl	8005a5c <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	f241 3288 	movw	r2, #5000	; 0x1388
 8009786:	4293      	cmp	r3, r2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e121      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800978e:	f7ff fb3c 	bl	8008e0a <LL_RCC_LSE_IsReady>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1ef      	bne.n	8009778 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d02c      	beq.n	80097fe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d014      	beq.n	80097d6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80097ac:	f7ff fab5 	bl	8008d1a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b0:	f7fc f954 	bl	8005a5c <HAL_GetTick>
 80097b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80097b6:	e008      	b.n	80097ca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097b8:	f7fc f950 	bl	8005a5c <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d901      	bls.n	80097ca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e103      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80097ca:	f7ff fac8 	bl	8008d5e <LL_RCC_HSI48_IsReady>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0f1      	beq.n	80097b8 <HAL_RCC_OscConfig+0x4c0>
 80097d4:	e013      	b.n	80097fe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80097d6:	f7ff fab1 	bl	8008d3c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097da:	f7fc f93f 	bl	8005a5c <HAL_GetTick>
 80097de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80097e0:	e008      	b.n	80097f4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097e2:	f7fc f93b 	bl	8005a5c <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d901      	bls.n	80097f4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e0ee      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80097f4:	f7ff fab3 	bl	8008d5e <LL_RCC_HSI48_IsReady>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f1      	bne.n	80097e2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 80e4 	beq.w	80099d0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009808:	f7ff fc11 	bl	800902e <LL_RCC_GetSysClkSource>
 800980c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800980e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	2b02      	cmp	r3, #2
 800981c:	f040 80b4 	bne.w	8009988 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f003 0203 	and.w	r2, r3, #3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	429a      	cmp	r2, r3
 800982c:	d123      	bne.n	8009876 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009838:	429a      	cmp	r2, r3
 800983a:	d11c      	bne.n	8009876 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009848:	429a      	cmp	r2, r3
 800984a:	d114      	bne.n	8009876 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009856:	429a      	cmp	r2, r3
 8009858:	d10d      	bne.n	8009876 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009864:	429a      	cmp	r2, r3
 8009866:	d106      	bne.n	8009876 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009872:	429a      	cmp	r2, r3
 8009874:	d05d      	beq.n	8009932 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b0c      	cmp	r3, #12
 800987a:	d058      	beq.n	800992e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800987c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e0a1      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800988e:	f7ff fc84 	bl	800919a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009892:	f7fc f8e3 	bl	8005a5c <HAL_GetTick>
 8009896:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009898:	e008      	b.n	80098ac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800989a:	f7fc f8df 	bl	8005a5c <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e092      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1ef      	bne.n	800989a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	4b30      	ldr	r3, [pc, #192]	; (8009984 <HAL_RCC_OscConfig+0x68c>)
 80098c2:	4013      	ands	r3, r2
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098cc:	4311      	orrs	r1, r2
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098d2:	0212      	lsls	r2, r2, #8
 80098d4:	4311      	orrs	r1, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80098da:	4311      	orrs	r1, r2
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80098e0:	4311      	orrs	r1, r2
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80098e6:	430a      	orrs	r2, r1
 80098e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098ec:	4313      	orrs	r3, r2
 80098ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80098f0:	f7ff fc44 	bl	800917c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80098f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80098fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009902:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009904:	f7fc f8aa 	bl	8005a5c <HAL_GetTick>
 8009908:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800990a:	e008      	b.n	800991e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800990c:	f7fc f8a6 	bl	8005a5c <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	2b02      	cmp	r3, #2
 8009918:	d901      	bls.n	800991e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e059      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800991e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0ef      	beq.n	800990c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800992c:	e050      	b.n	80099d0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e04f      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d147      	bne.n	80099d0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009940:	f7ff fc1c 	bl	800917c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800994e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009952:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009954:	f7fc f882 	bl	8005a5c <HAL_GetTick>
 8009958:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800995a:	e008      	b.n	800996e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800995c:	f7fc f87e 	bl	8005a5c <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	2b02      	cmp	r3, #2
 8009968:	d901      	bls.n	800996e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e031      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800996e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0ef      	beq.n	800995c <HAL_RCC_OscConfig+0x664>
 800997c:	e028      	b.n	80099d0 <HAL_RCC_OscConfig+0x6d8>
 800997e:	bf00      	nop
 8009980:	58000400 	.word	0x58000400
 8009984:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	2b0c      	cmp	r3, #12
 800998c:	d01e      	beq.n	80099cc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800998e:	f7ff fc04 	bl	800919a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009992:	f7fc f863 	bl	8005a5c <HAL_GetTick>
 8009996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009998:	e008      	b.n	80099ac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800999a:	f7fc f85f 	bl	8005a5c <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d901      	bls.n	80099ac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e012      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1ef      	bne.n	800999a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80099ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <HAL_RCC_OscConfig+0x6e4>)
 80099c6:	4013      	ands	r3, r2
 80099c8:	60cb      	str	r3, [r1, #12]
 80099ca:	e001      	b.n	80099d0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3734      	adds	r7, #52	; 0x34
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd90      	pop	{r4, r7, pc}
 80099da:	bf00      	nop
 80099dc:	eefefffc 	.word	0xeefefffc

080099e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e12d      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099f4:	4b98      	ldr	r3, [pc, #608]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d91b      	bls.n	8009a3a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a02:	4b95      	ldr	r3, [pc, #596]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f023 0207 	bic.w	r2, r3, #7
 8009a0a:	4993      	ldr	r1, [pc, #588]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a12:	f7fc f823 	bl	8005a5c <HAL_GetTick>
 8009a16:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a18:	e008      	b.n	8009a2c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009a1a:	f7fc f81f 	bl	8005a5c <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d901      	bls.n	8009a2c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e111      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a2c:	4b8a      	ldr	r3, [pc, #552]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d1ef      	bne.n	8009a1a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0302 	and.w	r3, r3, #2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d016      	beq.n	8009a74 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fafb 	bl	8009046 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009a50:	f7fc f804 	bl	8005a5c <HAL_GetTick>
 8009a54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009a56:	e008      	b.n	8009a6a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009a58:	f7fc f800 	bl	8005a5c <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e0f2      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009a6a:	f7ff fbe8 	bl	800923e <LL_RCC_IsActiveFlag_HPRE>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0f1      	beq.n	8009a58 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d016      	beq.n	8009aae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff faf2 	bl	800906e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009a8a:	f7fb ffe7 	bl	8005a5c <HAL_GetTick>
 8009a8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009a92:	f7fb ffe3 	bl	8005a5c <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e0d5      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009aa4:	f7ff fbdd 	bl	8009262 <LL_RCC_IsActiveFlag_C2HPRE>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0f1      	beq.n	8009a92 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d016      	beq.n	8009ae8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff faeb 	bl	800909a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009ac4:	f7fb ffca 	bl	8005a5c <HAL_GetTick>
 8009ac8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009acc:	f7fb ffc6 	bl	8005a5c <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e0b8      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009ade:	f7ff fbd3 	bl	8009288 <LL_RCC_IsActiveFlag_SHDHPRE>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0f1      	beq.n	8009acc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0304 	and.w	r3, r3, #4
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d016      	beq.n	8009b22 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff fae5 	bl	80090c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009afe:	f7fb ffad 	bl	8005a5c <HAL_GetTick>
 8009b02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009b04:	e008      	b.n	8009b18 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009b06:	f7fb ffa9 	bl	8005a5c <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d901      	bls.n	8009b18 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e09b      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009b18:	f7ff fbc9 	bl	80092ae <LL_RCC_IsActiveFlag_PPRE1>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0f1      	beq.n	8009b06 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0308 	and.w	r3, r3, #8
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d017      	beq.n	8009b5e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fadb 	bl	80090f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009b3a:	f7fb ff8f 	bl	8005a5c <HAL_GetTick>
 8009b3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009b40:	e008      	b.n	8009b54 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009b42:	f7fb ff8b 	bl	8005a5c <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e07d      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009b54:	f7ff fbbd 	bl	80092d2 <LL_RCC_IsActiveFlag_PPRE2>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0f1      	beq.n	8009b42 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d043      	beq.n	8009bf2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d106      	bne.n	8009b80 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009b72:	f7ff f87b 	bl	8008c6c <LL_RCC_HSE_IsReady>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d11e      	bne.n	8009bba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e067      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d106      	bne.n	8009b96 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009b88:	f7ff fb16 	bl	80091b8 <LL_RCC_PLL_IsReady>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d113      	bne.n	8009bba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e05c      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009b9e:	f7ff f9e3 	bl	8008f68 <LL_RCC_MSI_IsReady>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d108      	bne.n	8009bba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e051      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009bac:	f7ff f88e 	bl	8008ccc <LL_RCC_HSI_IsReady>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e04a      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff fa21 	bl	8009006 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bc4:	f7fb ff4a 	bl	8005a5c <HAL_GetTick>
 8009bc8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bca:	e00a      	b.n	8009be2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bcc:	f7fb ff46 	bl	8005a5c <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e036      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009be2:	f7ff fa24 	bl	800902e <LL_RCC_GetSysClkSource>
 8009be6:	4602      	mov	r2, r0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d1ec      	bne.n	8009bcc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bf2:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d21b      	bcs.n	8009c38 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c00:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f023 0207 	bic.w	r2, r3, #7
 8009c08:	4913      	ldr	r1, [pc, #76]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c10:	f7fb ff24 	bl	8005a5c <HAL_GetTick>
 8009c14:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c16:	e008      	b.n	8009c2a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009c18:	f7fb ff20 	bl	8005a5c <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e012      	b.n	8009c50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2a:	4b0b      	ldr	r3, [pc, #44]	; (8009c58 <HAL_RCC_ClockConfig+0x278>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d1ef      	bne.n	8009c18 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009c38:	f000 f87e 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4a07      	ldr	r2, [pc, #28]	; (8009c5c <HAL_RCC_ClockConfig+0x27c>)
 8009c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009c42:	f7fb ff17 	bl	8005a74 <HAL_GetTickPrio>
 8009c46:	4603      	mov	r3, r0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fb feb9 	bl	80059c0 <HAL_InitTick>
 8009c4e:	4603      	mov	r3, r0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	58004000 	.word	0x58004000
 8009c5c:	20000038 	.word	0x20000038

08009c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c66:	f7ff f9e2 	bl	800902e <LL_RCC_GetSysClkSource>
 8009c6a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10a      	bne.n	8009c88 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009c72:	f7ff f99e 	bl	8008fb2 <LL_RCC_MSI_GetRange>
 8009c76:	4603      	mov	r3, r0
 8009c78:	091b      	lsrs	r3, r3, #4
 8009c7a:	f003 030f 	and.w	r3, r3, #15
 8009c7e:	4a2b      	ldr	r2, [pc, #172]	; (8009d2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8009c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	e04b      	b.n	8009d20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d102      	bne.n	8009c94 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c8e:	4b28      	ldr	r3, [pc, #160]	; (8009d30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	e045      	b.n	8009d20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d10a      	bne.n	8009cb0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009c9a:	f7fe ffb7 	bl	8008c0c <LL_RCC_HSE_IsEnabledDiv2>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d102      	bne.n	8009caa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009ca4:	4b22      	ldr	r3, [pc, #136]	; (8009d30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	e03a      	b.n	8009d20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009caa:	4b22      	ldr	r3, [pc, #136]	; (8009d34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	e037      	b.n	8009d20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009cb0:	f7ff fab9 	bl	8009226 <LL_RCC_PLL_GetMainSource>
 8009cb4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d003      	beq.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x64>
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d003      	beq.n	8009cca <HAL_RCC_GetSysClockFreq+0x6a>
 8009cc2:	e00d      	b.n	8009ce0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009cc4:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009cc6:	60bb      	str	r3, [r7, #8]
        break;
 8009cc8:	e015      	b.n	8009cf6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009cca:	f7fe ff9f 	bl	8008c0c <LL_RCC_HSE_IsEnabledDiv2>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d102      	bne.n	8009cda <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009cd4:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009cd6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009cd8:	e00d      	b.n	8009cf6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8009cda:	4b16      	ldr	r3, [pc, #88]	; (8009d34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009cdc:	60bb      	str	r3, [r7, #8]
        break;
 8009cde:	e00a      	b.n	8009cf6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009ce0:	f7ff f967 	bl	8008fb2 <LL_RCC_MSI_GetRange>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	091b      	lsrs	r3, r3, #4
 8009ce8:	f003 030f 	and.w	r3, r3, #15
 8009cec:	4a0f      	ldr	r2, [pc, #60]	; (8009d2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8009cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf2:	60bb      	str	r3, [r7, #8]
        break;
 8009cf4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8009cf6:	f7ff fa71 	bl	80091dc <LL_RCC_PLL_GetN>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	fb03 f402 	mul.w	r4, r3, r2
 8009d02:	f7ff fa84 	bl	800920e <LL_RCC_PLL_GetDivider>
 8009d06:	4603      	mov	r3, r0
 8009d08:	091b      	lsrs	r3, r3, #4
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	fbb4 f4f3 	udiv	r4, r4, r3
 8009d10:	f7ff fa71 	bl	80091f6 <LL_RCC_PLL_GetR>
 8009d14:	4603      	mov	r3, r0
 8009d16:	0f5b      	lsrs	r3, r3, #29
 8009d18:	3301      	adds	r3, #1
 8009d1a:	fbb4 f3f3 	udiv	r3, r4, r3
 8009d1e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009d20:	68fb      	ldr	r3, [r7, #12]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd90      	pop	{r4, r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	080168d0 	.word	0x080168d0
 8009d30:	00f42400 	.word	0x00f42400
 8009d34:	01e84800 	.word	0x01e84800

08009d38 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d38:	b598      	push	{r3, r4, r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009d3c:	f7ff ff90 	bl	8009c60 <HAL_RCC_GetSysClockFreq>
 8009d40:	4604      	mov	r4, r0
 8009d42:	f7ff f9e9 	bl	8009118 <LL_RCC_GetAHBPrescaler>
 8009d46:	4603      	mov	r3, r0
 8009d48:	091b      	lsrs	r3, r3, #4
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	4a03      	ldr	r2, [pc, #12]	; (8009d5c <HAL_RCC_GetHCLKFreq+0x24>)
 8009d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d54:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	bd98      	pop	{r3, r4, r7, pc}
 8009d5c:	08016870 	.word	0x08016870

08009d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d60:	b598      	push	{r3, r4, r7, lr}
 8009d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009d64:	f7ff ffe8 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 8009d68:	4604      	mov	r4, r0
 8009d6a:	f7ff f9ef 	bl	800914c <LL_RCC_GetAPB1Prescaler>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	0a1b      	lsrs	r3, r3, #8
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	4a04      	ldr	r2, [pc, #16]	; (8009d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d7c:	f003 031f 	and.w	r3, r3, #31
 8009d80:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	bd98      	pop	{r3, r4, r7, pc}
 8009d88:	080168b0 	.word	0x080168b0

08009d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d8c:	b598      	push	{r3, r4, r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009d90:	f7ff ffd2 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 8009d94:	4604      	mov	r4, r0
 8009d96:	f7ff f9e5 	bl	8009164 <LL_RCC_GetAPB2Prescaler>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	0adb      	lsrs	r3, r3, #11
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	4a04      	ldr	r2, [pc, #16]	; (8009db4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da8:	f003 031f 	and.w	r3, r3, #31
 8009dac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	bd98      	pop	{r3, r4, r7, pc}
 8009db4:	080168b0 	.word	0x080168b0

08009db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009db8:	b590      	push	{r4, r7, lr}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2bb0      	cmp	r3, #176	; 0xb0
 8009dc4:	d903      	bls.n	8009dce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8009dc6:	4b15      	ldr	r3, [pc, #84]	; (8009e1c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	e007      	b.n	8009dde <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	091b      	lsrs	r3, r3, #4
 8009dd2:	f003 030f 	and.w	r3, r3, #15
 8009dd6:	4a11      	ldr	r2, [pc, #68]	; (8009e1c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ddc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009dde:	f7ff f9a7 	bl	8009130 <LL_RCC_GetAHB4Prescaler>
 8009de2:	4603      	mov	r3, r0
 8009de4:	091b      	lsrs	r3, r3, #4
 8009de6:	f003 030f 	and.w	r3, r3, #15
 8009dea:	4a0d      	ldr	r2, [pc, #52]	; (8009e20 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4a0a      	ldr	r2, [pc, #40]	; (8009e24 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009e00:	0c9c      	lsrs	r4, r3, #18
 8009e02:	f7fe fef5 	bl	8008bf0 <HAL_PWREx_GetVoltageRange>
 8009e06:	4603      	mov	r3, r0
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 f80c 	bl	8009e28 <RCC_SetFlashLatency>
 8009e10:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd90      	pop	{r4, r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	080168d0 	.word	0x080168d0
 8009e20:	08016870 	.word	0x08016870
 8009e24:	431bde83 	.word	0x431bde83

08009e28 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009e28:	b590      	push	{r4, r7, lr}
 8009e2a:	b093      	sub	sp, #76	; 0x4c
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009e32:	4b37      	ldr	r3, [pc, #220]	; (8009f10 <RCC_SetFlashLatency+0xe8>)
 8009e34:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009e3e:	4a35      	ldr	r2, [pc, #212]	; (8009f14 <RCC_SetFlashLatency+0xec>)
 8009e40:	f107 031c 	add.w	r3, r7, #28
 8009e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009e4a:	4b33      	ldr	r3, [pc, #204]	; (8009f18 <RCC_SetFlashLatency+0xf0>)
 8009e4c:	f107 040c 	add.w	r4, r7, #12
 8009e50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009e56:	2300      	movs	r3, #0
 8009e58:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e60:	d11a      	bne.n	8009e98 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009e62:	2300      	movs	r3, #0
 8009e64:	643b      	str	r3, [r7, #64]	; 0x40
 8009e66:	e013      	b.n	8009e90 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	3348      	adds	r3, #72	; 0x48
 8009e6e:	443b      	add	r3, r7
 8009e70:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d807      	bhi.n	8009e8a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	3348      	adds	r3, #72	; 0x48
 8009e80:	443b      	add	r3, r7
 8009e82:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009e86:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009e88:	e020      	b.n	8009ecc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d9e8      	bls.n	8009e68 <RCC_SetFlashLatency+0x40>
 8009e96:	e019      	b.n	8009ecc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009e98:	2300      	movs	r3, #0
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e9c:	e013      	b.n	8009ec6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	3348      	adds	r3, #72	; 0x48
 8009ea4:	443b      	add	r3, r7
 8009ea6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d807      	bhi.n	8009ec0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	3348      	adds	r3, #72	; 0x48
 8009eb6:	443b      	add	r3, r7
 8009eb8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009ebc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009ebe:	e005      	b.n	8009ecc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d9e8      	bls.n	8009e9e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8009ecc:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <RCC_SetFlashLatency+0xf4>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f023 0207 	bic.w	r2, r3, #7
 8009ed4:	4911      	ldr	r1, [pc, #68]	; (8009f1c <RCC_SetFlashLatency+0xf4>)
 8009ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009edc:	f7fb fdbe 	bl	8005a5c <HAL_GetTick>
 8009ee0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009ee2:	e008      	b.n	8009ef6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009ee4:	f7fb fdba 	bl	8005a5c <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d901      	bls.n	8009ef6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e007      	b.n	8009f06 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <RCC_SetFlashLatency+0xf4>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d1ef      	bne.n	8009ee4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	374c      	adds	r7, #76	; 0x4c
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd90      	pop	{r4, r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	080166a8 	.word	0x080166a8
 8009f14:	080166b8 	.word	0x080166b8
 8009f18:	080166c4 	.word	0x080166c4
 8009f1c:	58004000 	.word	0x58004000

08009f20 <LL_RCC_LSE_IsEnabled>:
{
 8009f20:	b480      	push	{r7}
 8009f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d101      	bne.n	8009f38 <LL_RCC_LSE_IsEnabled+0x18>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e000      	b.n	8009f3a <LL_RCC_LSE_IsEnabled+0x1a>
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <LL_RCC_LSE_IsReady>:
{
 8009f44:	b480      	push	{r7}
 8009f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f50:	f003 0302 	and.w	r3, r3, #2
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d101      	bne.n	8009f5c <LL_RCC_LSE_IsReady+0x18>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <LL_RCC_LSE_IsReady+0x1a>
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <LL_RCC_SetRFWKPClockSource>:
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <LL_RCC_SetSMPSClockSource>:
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	f023 0203 	bic.w	r2, r3, #3
 8009fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <LL_RCC_SetSMPSPrescaler>:
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <LL_RCC_SetUSARTClockSource>:
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8009fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff4:	f023 0203 	bic.w	r2, r3, #3
 8009ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <LL_RCC_SetLPUARTClockSource>:
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a020:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <LL_RCC_SetI2CClockSource>:
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a048:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	091b      	lsrs	r3, r3, #4
 800a050:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a054:	43db      	mvns	r3, r3
 800a056:	401a      	ands	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a064:	4313      	orrs	r3, r2
 800a066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <LL_RCC_SetLPTIMClockSource>:
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a07e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a082:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	0c1b      	lsrs	r3, r3, #16
 800a08a:	041b      	lsls	r3, r3, #16
 800a08c:	43db      	mvns	r3, r3
 800a08e:	401a      	ands	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	041b      	lsls	r3, r3, #16
 800a094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a098:	4313      	orrs	r3, r2
 800a09a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a09e:	bf00      	nop
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <LL_RCC_SetSAIClockSource>:
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a0b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a0be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a0ca:	bf00      	nop
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <LL_RCC_SetRNGClockSource>:
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a0de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a0ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a0f6:	bf00      	nop
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <LL_RCC_SetCLK48ClockSource>:
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a10a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a112:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <LL_RCC_SetUSBClockSource>:
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff ffe3 	bl	800a102 <LL_RCC_SetCLK48ClockSource>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <LL_RCC_SetADCClockSource>:
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a14c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a154:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4313      	orrs	r3, r2
 800a160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <LL_RCC_SetRTCClockSource>:
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <LL_RCC_GetRTCClockSource>:
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a1a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <LL_RCC_ForceBackupDomainReset>:
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a1ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a1ce:	bf00      	nop
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a1dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a1f0:	bf00      	nop
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <LL_RCC_PLLSAI1_Enable>:
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a1fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a20c:	6013      	str	r3, [r2, #0]
}
 800a20e:	bf00      	nop
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <LL_RCC_PLLSAI1_Disable>:
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a22a:	6013      	str	r3, [r2, #0]
}
 800a22c:	bf00      	nop
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <LL_RCC_PLLSAI1_IsReady>:
{
 800a236:	b480      	push	{r7}
 800a238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a23a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a248:	d101      	bne.n	800a24e <LL_RCC_PLLSAI1_IsReady+0x18>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e000      	b.n	800a250 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b088      	sub	sp, #32
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a262:	2300      	movs	r3, #0
 800a264:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a266:	2300      	movs	r3, #0
 800a268:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a272:	2b00      	cmp	r3, #0
 800a274:	d034      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a27e:	d021      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a280:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a284:	d81b      	bhi.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a286:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a28a:	d01d      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a28c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a290:	d815      	bhi.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a29a:	d110      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a29c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2aa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a2ac:	e00d      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f947 	bl	800a546 <RCCEx_PLLSAI1_ConfigNP>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a2bc:	e005      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	77fb      	strb	r3, [r7, #31]
        break;
 800a2c2:	e002      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a2c4:	bf00      	nop
 800a2c6:	e000      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ca:	7ffb      	ldrb	r3, [r7, #31]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d105      	bne.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff fee8 	bl	800a0aa <LL_RCC_SetSAIClockSource>
 800a2da:	e001      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2dc:	7ffb      	ldrb	r3, [r7, #31]
 800a2de:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d046      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a2ec:	f7ff ff56 	bl	800a19c <LL_RCC_GetRTCClockSource>
 800a2f0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d03c      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a2fc:	f7fe fc68 	bl	8008bd0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff ff30 	bl	800a170 <LL_RCC_SetRTCClockSource>
 800a310:	e02e      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a31a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a31c:	f7ff ff4b 	bl	800a1b6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a320:	f7ff ff5a 	bl	800a1d8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a33c:	f7ff fdf0 	bl	8009f20 <LL_RCC_LSE_IsEnabled>
 800a340:	4603      	mov	r3, r0
 800a342:	2b01      	cmp	r3, #1
 800a344:	d114      	bne.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a346:	f7fb fb89 	bl	8005a5c <HAL_GetTick>
 800a34a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a34c:	e00b      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a34e:	f7fb fb85 	bl	8005a5c <HAL_GetTick>
 800a352:	4602      	mov	r2, r0
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	f241 3288 	movw	r2, #5000	; 0x1388
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d902      	bls.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	77fb      	strb	r3, [r7, #31]
              break;
 800a364:	e004      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a366:	f7ff fded 	bl	8009f44 <LL_RCC_LSE_IsReady>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d1ee      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a370:	7ffb      	ldrb	r3, [r7, #31]
 800a372:	77bb      	strb	r3, [r7, #30]
 800a374:	e001      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a376:	7ffb      	ldrb	r3, [r7, #31]
 800a378:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff fe2a 	bl	8009fe4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d004      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fe35 	bl	800a010 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0310 	and.w	r3, r3, #16
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d004      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fe5d 	bl	800a076 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0320 	and.w	r3, r3, #32
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d004      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fe52 	bl	800a076 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0304 	and.w	r3, r3, #4
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d004      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fe2a 	bl	800a03c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0308 	and.w	r3, r3, #8
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d004      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff fe1f 	bl	800a03c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a406:	2b00      	cmp	r3, #0
 800a408:	d022      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fe8d 	bl	800a12e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a41c:	d107      	bne.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a41e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a42c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a436:	d10b      	bne.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3304      	adds	r3, #4
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f8dd 	bl	800a5fc <RCCEx_PLLSAI1_ConfigNQ>
 800a442:	4603      	mov	r3, r0
 800a444:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a446:	7ffb      	ldrb	r3, [r7, #31]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800a44c:	7ffb      	ldrb	r3, [r7, #31]
 800a44e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d02b      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a464:	d008      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a46e:	d003      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d105      	bne.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff fe2a 	bl	800a0d6 <LL_RCC_SetRNGClockSource>
 800a482:	e00a      	b.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	2000      	movs	r0, #0
 800a490:	f7ff fe21 	bl	800a0d6 <LL_RCC_SetRNGClockSource>
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff fe34 	bl	800a102 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a4a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a4ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d022      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff fe3d 	bl	800a144 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a4d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a4de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4e2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4ec:	d10b      	bne.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 f8dd 	bl	800a6b2 <RCCEx_PLLSAI1_ConfigNR>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a4fc:	7ffb      	ldrb	r3, [r7, #31]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800a502:	7ffb      	ldrb	r3, [r7, #31]
 800a504:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fd26 	bl	8009f68 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d009      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7ff fd45 	bl	8009fbc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff fd2c 	bl	8009f94 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800a53c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3720      	adds	r7, #32
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a552:	f7ff fe61 	bl	800a218 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a556:	f7fb fa81 	bl	8005a5c <HAL_GetTick>
 800a55a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a55c:	e009      	b.n	800a572 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a55e:	f7fb fa7d 	bl	8005a5c <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d902      	bls.n	800a572 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	73fb      	strb	r3, [r7, #15]
      break;
 800a570:	e004      	b.n	800a57c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a572:	f7ff fe60 	bl	800a236 <LL_RCC_PLLSAI1_IsReady>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1f0      	bne.n	800a55e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d137      	bne.n	800a5f2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a596:	4313      	orrs	r3, r2
 800a598:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a59a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a5b0:	f7ff fe23 	bl	800a1fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5b4:	f7fb fa52 	bl	8005a5c <HAL_GetTick>
 800a5b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a5ba:	e009      	b.n	800a5d0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a5bc:	f7fb fa4e 	bl	8005a5c <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d902      	bls.n	800a5d0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	73fb      	strb	r3, [r7, #15]
        break;
 800a5ce:	e004      	b.n	800a5da <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a5d0:	f7ff fe31 	bl	800a236 <LL_RCC_PLLSAI1_IsReady>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d1f0      	bne.n	800a5bc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a5da:	7bfb      	ldrb	r3, [r7, #15]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d108      	bne.n	800a5f2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a5e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a608:	f7ff fe06 	bl	800a218 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a60c:	f7fb fa26 	bl	8005a5c <HAL_GetTick>
 800a610:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a612:	e009      	b.n	800a628 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a614:	f7fb fa22 	bl	8005a5c <HAL_GetTick>
 800a618:	4602      	mov	r2, r0
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d902      	bls.n	800a628 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	73fb      	strb	r3, [r7, #15]
      break;
 800a626:	e004      	b.n	800a632 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a628:	f7ff fe05 	bl	800a236 <LL_RCC_PLLSAI1_IsReady>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1f0      	bne.n	800a614 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d137      	bne.n	800a6a8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	021b      	lsls	r3, r3, #8
 800a648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a64c:	4313      	orrs	r3, r2
 800a64e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a662:	4313      	orrs	r3, r2
 800a664:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a666:	f7ff fdc8 	bl	800a1fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a66a:	f7fb f9f7 	bl	8005a5c <HAL_GetTick>
 800a66e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a670:	e009      	b.n	800a686 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a672:	f7fb f9f3 	bl	8005a5c <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d902      	bls.n	800a686 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	73fb      	strb	r3, [r7, #15]
        break;
 800a684:	e004      	b.n	800a690 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a686:	f7ff fdd6 	bl	800a236 <LL_RCC_PLLSAI1_IsReady>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d1f0      	bne.n	800a672 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d108      	bne.n	800a6a8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a69a:	691a      	ldr	r2, [r3, #16]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a6be:	f7ff fdab 	bl	800a218 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a6c2:	f7fb f9cb 	bl	8005a5c <HAL_GetTick>
 800a6c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a6c8:	e009      	b.n	800a6de <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a6ca:	f7fb f9c7 	bl	8005a5c <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d902      	bls.n	800a6de <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	73fb      	strb	r3, [r7, #15]
      break;
 800a6dc:	e004      	b.n	800a6e8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a6de:	f7ff fdaa 	bl	800a236 <LL_RCC_PLLSAI1_IsReady>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1f0      	bne.n	800a6ca <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d137      	bne.n	800a75e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a6ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a702:	4313      	orrs	r3, r2
 800a704:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800a706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a718:	4313      	orrs	r3, r2
 800a71a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a71c:	f7ff fd6d 	bl	800a1fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a720:	f7fb f99c 	bl	8005a5c <HAL_GetTick>
 800a724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a726:	e009      	b.n	800a73c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a728:	f7fb f998 	bl	8005a5c <HAL_GetTick>
 800a72c:	4602      	mov	r2, r0
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	2b02      	cmp	r3, #2
 800a734:	d902      	bls.n	800a73c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	73fb      	strb	r3, [r7, #15]
        break;
 800a73a:	e004      	b.n	800a746 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a73c:	f7ff fd7b 	bl	800a236 <LL_RCC_PLLSAI1_IsReady>
 800a740:	4603      	mov	r3, r0
 800a742:	2b01      	cmp	r3, #1
 800a744:	d1f0      	bne.n	800a728 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a746:	7bfb      	ldrb	r3, [r7, #15]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d108      	bne.n	800a75e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a74c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a750:	691a      	ldr	r2, [r3, #16]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a75a:	4313      	orrs	r3, r2
 800a75c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e027      	b.n	800a7ca <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	7a5b      	ldrb	r3, [r3, #9]
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7f8 febc 	bl	8003508 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f023 0120 	bic.w	r1, r3, #32
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f042 0204 	orr.w	r2, r2, #4
 800a7ba:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e090      	b.n	800a906 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7f8 feaf 	bl	800355c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2202      	movs	r2, #2
 800a802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	22ca      	movs	r2, #202	; 0xca
 800a80c:	625a      	str	r2, [r3, #36]	; 0x24
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2253      	movs	r2, #83	; 0x53
 800a814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f89f 	bl	800a95a <RTC_EnterInitMode>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d009      	beq.n	800a836 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	22ff      	movs	r2, #255	; 0xff
 800a828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2204      	movs	r2, #4
 800a82e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e067      	b.n	800a906 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	6812      	ldr	r2, [r2, #0]
 800a840:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a848:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6899      	ldr	r1, [r3, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	431a      	orrs	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	431a      	orrs	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	68d2      	ldr	r2, [r2, #12]
 800a870:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6919      	ldr	r1, [r3, #16]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	041a      	lsls	r2, r3, #16
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	430a      	orrs	r2, r1
 800a884:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68da      	ldr	r2, [r3, #12]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a894:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0203 	bic.w	r2, r2, #3
 800a8a4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	69da      	ldr	r2, [r3, #28]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f003 0320 	and.w	r3, r3, #32
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d113      	bne.n	800a8f4 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f81e 	bl	800a90e <HAL_RTC_WaitForSynchro>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00d      	beq.n	800a8f4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	22ff      	movs	r2, #255	; 0xff
 800a8de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e008      	b.n	800a906 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	22ff      	movs	r2, #255	; 0xff
 800a8fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800a904:	2300      	movs	r3, #0
  }
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68da      	ldr	r2, [r3, #12]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a924:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a926:	f7fb f899 	bl	8005a5c <HAL_GetTick>
 800a92a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a92c:	e009      	b.n	800a942 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a92e:	f7fb f895 	bl	8005a5c <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a93c:	d901      	bls.n	800a942 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e007      	b.n	800a952 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f003 0320 	and.w	r3, r3, #32
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0ee      	beq.n	800a92e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d119      	bne.n	800a9a4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f04f 32ff 	mov.w	r2, #4294967295
 800a978:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a97a:	f7fb f86f 	bl	8005a5c <HAL_GetTick>
 800a97e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a980:	e009      	b.n	800a996 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a982:	f7fb f86b 	bl	8005a5c <HAL_GetTick>
 800a986:	4602      	mov	r2, r0
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a990:	d901      	bls.n	800a996 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e007      	b.n	800a9a6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0ee      	beq.n	800a982 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d101      	bne.n	800a9c4 <HAL_RTCEx_EnableBypassShadow+0x16>
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e024      	b.n	800aa0e <HAL_RTCEx_EnableBypassShadow+0x60>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	22ca      	movs	r2, #202	; 0xca
 800a9da:	625a      	str	r2, [r3, #36]	; 0x24
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2253      	movs	r2, #83	; 0x53
 800a9e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	689a      	ldr	r2, [r3, #8]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f042 0220 	orr.w	r2, r2, #32
 800a9f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	22ff      	movs	r2, #255	; 0xff
 800a9fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e095      	b.n	800ab58 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d108      	bne.n	800aa46 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa3c:	d009      	beq.n	800aa52 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	61da      	str	r2, [r3, #28]
 800aa44:	e005      	b.n	800aa52 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d106      	bne.n	800aa72 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7f8 fdad 	bl	80035cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2202      	movs	r2, #2
 800aa76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa88:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa92:	d902      	bls.n	800aa9a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa94:	2300      	movs	r3, #0
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	e002      	b.n	800aaa0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aaa8:	d007      	beq.n	800aaba <HAL_SPI_Init+0xa0>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aab2:	d002      	beq.n	800aaba <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aaca:	431a      	orrs	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	431a      	orrs	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	f003 0301 	and.w	r3, r3, #1
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aae8:	431a      	orrs	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafc:	ea42 0103 	orr.w	r1, r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	0c1b      	lsrs	r3, r3, #16
 800ab16:	f003 0204 	and.w	r2, r3, #4
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	f003 0310 	and.w	r3, r3, #16
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab36:	ea42 0103 	orr.w	r1, r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	430a      	orrs	r2, r1
 800ab46:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <LL_RCC_GetUSARTClockSource>:
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800ab68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4013      	ands	r3, r2
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <LL_RCC_GetLPUARTClockSource>:
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ab88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4013      	ands	r3, r2
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e042      	b.n	800ac38 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d106      	bne.n	800abca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7f8 fbab 	bl	8003320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2224      	movs	r2, #36	; 0x24
 800abce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0201 	bic.w	r2, r2, #1
 800abe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fbf6 	bl	800b3d4 <UART_SetConfig>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b01      	cmp	r3, #1
 800abec:	d101      	bne.n	800abf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e022      	b.n	800ac38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fe10 	bl	800b820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0201 	orr.w	r2, r2, #1
 800ac2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fe97 	bl	800b964 <UART_CheckIdleState>
 800ac36:	4603      	mov	r3, r0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08a      	sub	sp, #40	; 0x28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d17a      	bne.n	800ad4e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <HAL_UART_Transmit_DMA+0x24>
 800ac5e:	88fb      	ldrh	r3, [r7, #6]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e073      	b.n	800ad50 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d101      	bne.n	800ac76 <HAL_UART_Transmit_DMA+0x36>
 800ac72:	2302      	movs	r3, #2
 800ac74:	e06c      	b.n	800ad50 <HAL_UART_Transmit_DMA+0x110>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	88fa      	ldrh	r2, [r7, #6]
 800ac88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	88fa      	ldrh	r2, [r7, #6]
 800ac90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2221      	movs	r2, #33	; 0x21
 800aca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d02c      	beq.n	800ad06 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acb0:	4a29      	ldr	r2, [pc, #164]	; (800ad58 <HAL_UART_Transmit_DMA+0x118>)
 800acb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acb8:	4a28      	ldr	r2, [pc, #160]	; (800ad5c <HAL_UART_Transmit_DMA+0x11c>)
 800acba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc0:	4a27      	ldr	r2, [pc, #156]	; (800ad60 <HAL_UART_Transmit_DMA+0x120>)
 800acc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc8:	2200      	movs	r2, #0
 800acca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd4:	4619      	mov	r1, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3328      	adds	r3, #40	; 0x28
 800acdc:	461a      	mov	r2, r3
 800acde:	88fb      	ldrh	r3, [r7, #6]
 800ace0:	f7fc fe48 	bl	8007974 <HAL_DMA_Start_IT>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00d      	beq.n	800ad06 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2210      	movs	r2, #16
 800acee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2220      	movs	r2, #32
 800acfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e024      	b.n	800ad50 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2240      	movs	r2, #64	; 0x40
 800ad0c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	e853 3f00 	ldrex	r3, [r3]
 800ad24:	613b      	str	r3, [r7, #16]
   return(result);
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3308      	adds	r3, #8
 800ad34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad36:	623a      	str	r2, [r7, #32]
 800ad38:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3a:	69f9      	ldr	r1, [r7, #28]
 800ad3c:	6a3a      	ldr	r2, [r7, #32]
 800ad3e:	e841 2300 	strex	r3, r2, [r1]
 800ad42:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1e5      	bne.n	800ad16 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e000      	b.n	800ad50 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ad4e:	2302      	movs	r3, #2
  }
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3728      	adds	r7, #40	; 0x28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	0800bcd9 	.word	0x0800bcd9
 800ad5c:	0800bd73 	.word	0x0800bd73
 800ad60:	0800bd8f 	.word	0x0800bd8f

0800ad64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b0ba      	sub	sp, #232	; 0xe8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad92:	4013      	ands	r3, r2
 800ad94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d11b      	bne.n	800add8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d015      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d105      	bne.n	800adc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 82d6 	beq.w	800b37a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
      }
      return;
 800add6:	e2d0      	b.n	800b37a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800add8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 811f 	beq.w	800b020 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ade2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ade6:	4b8b      	ldr	r3, [pc, #556]	; (800b014 <HAL_UART_IRQHandler+0x2b0>)
 800ade8:	4013      	ands	r3, r2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800adf2:	4b89      	ldr	r3, [pc, #548]	; (800b018 <HAL_UART_IRQHandler+0x2b4>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8112 	beq.w	800b020 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d011      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
 800ae08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae22:	f043 0201 	orr.w	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d011      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
 800ae38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae52:	f043 0204 	orr.w	r2, r3, #4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
 800ae68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2204      	movs	r2, #4
 800ae7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae82:	f043 0202 	orr.w	r2, r3, #2
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d017      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aea8:	4b5a      	ldr	r3, [pc, #360]	; (800b014 <HAL_UART_IRQHandler+0x2b0>)
 800aeaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2208      	movs	r2, #8
 800aeb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aebe:	f043 0208 	orr.w	r2, r3, #8
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d012      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00c      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aef0:	f043 0220 	orr.w	r2, r3, #32
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 823c 	beq.w	800b37e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d013      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d105      	bne.n	800af2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d005      	beq.n	800af5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d04f      	beq.n	800affe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fe54 	bl	800bc0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6e:	2b40      	cmp	r3, #64	; 0x40
 800af70:	d141      	bne.n	800aff6 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1d9      	bne.n	800af72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d013      	beq.n	800afee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afca:	4a14      	ldr	r2, [pc, #80]	; (800b01c <HAL_UART_IRQHandler+0x2b8>)
 800afcc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fc fda8 	bl	8007b28 <HAL_DMA_Abort_IT>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d017      	beq.n	800b00e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800afe8:	4610      	mov	r0, r2
 800afea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afec:	e00f      	b.n	800b00e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f9da 	bl	800b3a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff4:	e00b      	b.n	800b00e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f9d6 	bl	800b3a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affc:	e007      	b.n	800b00e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f9d2 	bl	800b3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b00c:	e1b7      	b.n	800b37e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00e:	bf00      	nop
    return;
 800b010:	e1b5      	b.n	800b37e <HAL_UART_IRQHandler+0x61a>
 800b012:	bf00      	nop
 800b014:	10000001 	.word	0x10000001
 800b018:	04000120 	.word	0x04000120
 800b01c:	0800be0f 	.word	0x0800be0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b024:	2b01      	cmp	r3, #1
 800b026:	f040 814a 	bne.w	800b2be <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02e:	f003 0310 	and.w	r3, r3, #16
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 8143 	beq.w	800b2be <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 813c 	beq.w	800b2be <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2210      	movs	r2, #16
 800b04c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b058:	2b40      	cmp	r3, #64	; 0x40
 800b05a:	f040 80b5 	bne.w	800b1c8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800b06a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 8187 	beq.w	800b382 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b07a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b07e:	429a      	cmp	r2, r3
 800b080:	f080 817f 	bcs.w	800b382 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b08a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0320 	and.w	r3, r3, #32
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f040 8086 	bne.w	800b1ac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1da      	bne.n	800b0a0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b0fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0fc:	f023 0301 	bic.w	r3, r3, #1
 800b100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3308      	adds	r3, #8
 800b10a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b10e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b112:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b116:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1e1      	bne.n	800b0ea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b13c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3308      	adds	r3, #8
 800b146:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b14a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b14c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b150:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e3      	bne.n	800b126 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b174:	e853 3f00 	ldrex	r3, [r3]
 800b178:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b17a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b17c:	f023 0310 	bic.w	r3, r3, #16
 800b180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b18e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b190:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b196:	e841 2300 	strex	r3, r2, [r1]
 800b19a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1e4      	bne.n	800b16c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fc fc5f 	bl	8007a6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f8fb 	bl	800b3bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b1c6:	e0dc      	b.n	800b382 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 80ce 	beq.w	800b386 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800b1ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 80c9 	beq.w	800b386 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	e853 3f00 	ldrex	r3, [r3]
 800b200:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	461a      	mov	r2, r3
 800b212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b216:	647b      	str	r3, [r7, #68]	; 0x44
 800b218:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b21c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b21e:	e841 2300 	strex	r3, r2, [r1]
 800b222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e4      	bne.n	800b1f4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3308      	adds	r3, #8
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b234:	e853 3f00 	ldrex	r3, [r3]
 800b238:	623b      	str	r3, [r7, #32]
   return(result);
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b240:	f023 0301 	bic.w	r3, r3, #1
 800b244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3308      	adds	r3, #8
 800b24e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b252:	633a      	str	r2, [r7, #48]	; 0x30
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e1      	bne.n	800b22a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2220      	movs	r2, #32
 800b26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	e853 3f00 	ldrex	r3, [r3]
 800b286:	60fb      	str	r3, [r7, #12]
   return(result);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f023 0310 	bic.w	r3, r3, #16
 800b28e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b29c:	61fb      	str	r3, [r7, #28]
 800b29e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	69b9      	ldr	r1, [r7, #24]
 800b2a2:	69fa      	ldr	r2, [r7, #28]
 800b2a4:	e841 2300 	strex	r3, r2, [r1]
 800b2a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e4      	bne.n	800b27a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f880 	bl	800b3bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b2bc:	e063      	b.n	800b386 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00e      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x584>
 800b2ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d008      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b2de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fdd5 	bl	800be90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2e6:	e051      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d014      	beq.n	800b31e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d105      	bne.n	800b30c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d008      	beq.n	800b31e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b310:	2b00      	cmp	r3, #0
 800b312:	d03a      	beq.n	800b38a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	4798      	blx	r3
    }
    return;
 800b31c:	e035      	b.n	800b38a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b326:	2b00      	cmp	r3, #0
 800b328:	d009      	beq.n	800b33e <HAL_UART_IRQHandler+0x5da>
 800b32a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fd7f 	bl	800be3a <UART_EndTransmit_IT>
    return;
 800b33c:	e026      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d009      	beq.n	800b35e <HAL_UART_IRQHandler+0x5fa>
 800b34a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b34e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fdae 	bl	800beb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b35c:	e016      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d010      	beq.n	800b38c <HAL_UART_IRQHandler+0x628>
 800b36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	da0c      	bge.n	800b38c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fd96 	bl	800bea4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b378:	e008      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
      return;
 800b37a:	bf00      	nop
 800b37c:	e006      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
    return;
 800b37e:	bf00      	nop
 800b380:	e004      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
      return;
 800b382:	bf00      	nop
 800b384:	e002      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
      return;
 800b386:	bf00      	nop
 800b388:	e000      	b.n	800b38c <HAL_UART_IRQHandler+0x628>
    return;
 800b38a:	bf00      	nop
  }
}
 800b38c:	37e8      	adds	r7, #232	; 0xe8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop

0800b394 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d8:	b08c      	sub	sp, #48	; 0x30
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	4baf      	ldr	r3, [pc, #700]	; (800b6c0 <UART_SetConfig+0x2ec>)
 800b404:	4013      	ands	r3, r2
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	6812      	ldr	r2, [r2, #0]
 800b40a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b40c:	430b      	orrs	r3, r1
 800b40e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	430a      	orrs	r2, r1
 800b424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4aa4      	ldr	r2, [pc, #656]	; (800b6c4 <UART_SetConfig+0x2f0>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d004      	beq.n	800b440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b43c:	4313      	orrs	r3, r2
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b44a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b454:	430b      	orrs	r3, r1
 800b456:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	f023 010f 	bic.w	r1, r3, #15
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a95      	ldr	r2, [pc, #596]	; (800b6c8 <UART_SetConfig+0x2f4>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d125      	bne.n	800b4c4 <UART_SetConfig+0xf0>
 800b478:	2003      	movs	r0, #3
 800b47a:	f7ff fb71 	bl	800ab60 <LL_RCC_GetUSARTClockSource>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b03      	cmp	r3, #3
 800b482:	d81b      	bhi.n	800b4bc <UART_SetConfig+0xe8>
 800b484:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <UART_SetConfig+0xb8>)
 800b486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48a:	bf00      	nop
 800b48c:	0800b49d 	.word	0x0800b49d
 800b490:	0800b4ad 	.word	0x0800b4ad
 800b494:	0800b4a5 	.word	0x0800b4a5
 800b498:	0800b4b5 	.word	0x0800b4b5
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4a2:	e042      	b.n	800b52a <UART_SetConfig+0x156>
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4aa:	e03e      	b.n	800b52a <UART_SetConfig+0x156>
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4b2:	e03a      	b.n	800b52a <UART_SetConfig+0x156>
 800b4b4:	2308      	movs	r3, #8
 800b4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ba:	e036      	b.n	800b52a <UART_SetConfig+0x156>
 800b4bc:	2310      	movs	r3, #16
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c2:	e032      	b.n	800b52a <UART_SetConfig+0x156>
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a7e      	ldr	r2, [pc, #504]	; (800b6c4 <UART_SetConfig+0x2f0>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d12a      	bne.n	800b524 <UART_SetConfig+0x150>
 800b4ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4d2:	f7ff fb55 	bl	800ab80 <LL_RCC_GetLPUARTClockSource>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4dc:	d01a      	beq.n	800b514 <UART_SetConfig+0x140>
 800b4de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4e2:	d81b      	bhi.n	800b51c <UART_SetConfig+0x148>
 800b4e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e8:	d00c      	beq.n	800b504 <UART_SetConfig+0x130>
 800b4ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4ee:	d815      	bhi.n	800b51c <UART_SetConfig+0x148>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d003      	beq.n	800b4fc <UART_SetConfig+0x128>
 800b4f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4f8:	d008      	beq.n	800b50c <UART_SetConfig+0x138>
 800b4fa:	e00f      	b.n	800b51c <UART_SetConfig+0x148>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b502:	e012      	b.n	800b52a <UART_SetConfig+0x156>
 800b504:	2302      	movs	r3, #2
 800b506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b50a:	e00e      	b.n	800b52a <UART_SetConfig+0x156>
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b512:	e00a      	b.n	800b52a <UART_SetConfig+0x156>
 800b514:	2308      	movs	r3, #8
 800b516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b51a:	e006      	b.n	800b52a <UART_SetConfig+0x156>
 800b51c:	2310      	movs	r3, #16
 800b51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b522:	e002      	b.n	800b52a <UART_SetConfig+0x156>
 800b524:	2310      	movs	r3, #16
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a65      	ldr	r2, [pc, #404]	; (800b6c4 <UART_SetConfig+0x2f0>)
 800b530:	4293      	cmp	r3, r2
 800b532:	f040 8097 	bne.w	800b664 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b53a:	2b08      	cmp	r3, #8
 800b53c:	d823      	bhi.n	800b586 <UART_SetConfig+0x1b2>
 800b53e:	a201      	add	r2, pc, #4	; (adr r2, 800b544 <UART_SetConfig+0x170>)
 800b540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b544:	0800b569 	.word	0x0800b569
 800b548:	0800b587 	.word	0x0800b587
 800b54c:	0800b571 	.word	0x0800b571
 800b550:	0800b587 	.word	0x0800b587
 800b554:	0800b577 	.word	0x0800b577
 800b558:	0800b587 	.word	0x0800b587
 800b55c:	0800b587 	.word	0x0800b587
 800b560:	0800b587 	.word	0x0800b587
 800b564:	0800b57f 	.word	0x0800b57f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b568:	f7fe fbfa 	bl	8009d60 <HAL_RCC_GetPCLK1Freq>
 800b56c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b56e:	e010      	b.n	800b592 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b570:	4b56      	ldr	r3, [pc, #344]	; (800b6cc <UART_SetConfig+0x2f8>)
 800b572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b574:	e00d      	b.n	800b592 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b576:	f7fe fb73 	bl	8009c60 <HAL_RCC_GetSysClockFreq>
 800b57a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b57c:	e009      	b.n	800b592 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b57e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b584:	e005      	b.n	800b592 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b590:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 812a 	beq.w	800b7ee <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59e:	4a4c      	ldr	r2, [pc, #304]	; (800b6d0 <UART_SetConfig+0x2fc>)
 800b5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	4413      	add	r3, r2
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d305      	bcc.n	800b5ca <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d903      	bls.n	800b5d2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b5d0:	e10d      	b.n	800b7ee <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	60bb      	str	r3, [r7, #8]
 800b5d8:	60fa      	str	r2, [r7, #12]
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	4a3c      	ldr	r2, [pc, #240]	; (800b6d0 <UART_SetConfig+0x2fc>)
 800b5e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	603b      	str	r3, [r7, #0]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b5f4:	f7f5 fb20 	bl	8000c38 <__aeabi_uldivmod>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4619      	mov	r1, r3
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	020b      	lsls	r3, r1, #8
 800b60a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b60e:	0202      	lsls	r2, r0, #8
 800b610:	6979      	ldr	r1, [r7, #20]
 800b612:	6849      	ldr	r1, [r1, #4]
 800b614:	0849      	lsrs	r1, r1, #1
 800b616:	2000      	movs	r0, #0
 800b618:	460c      	mov	r4, r1
 800b61a:	4605      	mov	r5, r0
 800b61c:	eb12 0804 	adds.w	r8, r2, r4
 800b620:	eb43 0905 	adc.w	r9, r3, r5
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	469a      	mov	sl, r3
 800b62c:	4693      	mov	fp, r2
 800b62e:	4652      	mov	r2, sl
 800b630:	465b      	mov	r3, fp
 800b632:	4640      	mov	r0, r8
 800b634:	4649      	mov	r1, r9
 800b636:	f7f5 faff 	bl	8000c38 <__aeabi_uldivmod>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4613      	mov	r3, r2
 800b640:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b648:	d308      	bcc.n	800b65c <UART_SetConfig+0x288>
 800b64a:	6a3b      	ldr	r3, [r7, #32]
 800b64c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b650:	d204      	bcs.n	800b65c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	6a3a      	ldr	r2, [r7, #32]
 800b658:	60da      	str	r2, [r3, #12]
 800b65a:	e0c8      	b.n	800b7ee <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b662:	e0c4      	b.n	800b7ee <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	69db      	ldr	r3, [r3, #28]
 800b668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b66c:	d16d      	bne.n	800b74a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800b66e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b672:	3b01      	subs	r3, #1
 800b674:	2b07      	cmp	r3, #7
 800b676:	d82d      	bhi.n	800b6d4 <UART_SetConfig+0x300>
 800b678:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <UART_SetConfig+0x2ac>)
 800b67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67e:	bf00      	nop
 800b680:	0800b6a1 	.word	0x0800b6a1
 800b684:	0800b6a9 	.word	0x0800b6a9
 800b688:	0800b6d5 	.word	0x0800b6d5
 800b68c:	0800b6af 	.word	0x0800b6af
 800b690:	0800b6d5 	.word	0x0800b6d5
 800b694:	0800b6d5 	.word	0x0800b6d5
 800b698:	0800b6d5 	.word	0x0800b6d5
 800b69c:	0800b6b7 	.word	0x0800b6b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6a0:	f7fe fb74 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800b6a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6a6:	e01b      	b.n	800b6e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6a8:	4b08      	ldr	r3, [pc, #32]	; (800b6cc <UART_SetConfig+0x2f8>)
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6ac:	e018      	b.n	800b6e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6ae:	f7fe fad7 	bl	8009c60 <HAL_RCC_GetSysClockFreq>
 800b6b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6b4:	e014      	b.n	800b6e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6bc:	e010      	b.n	800b6e0 <UART_SetConfig+0x30c>
 800b6be:	bf00      	nop
 800b6c0:	cfff69f3 	.word	0xcfff69f3
 800b6c4:	40008000 	.word	0x40008000
 800b6c8:	40013800 	.word	0x40013800
 800b6cc:	00f42400 	.word	0x00f42400
 800b6d0:	08016910 	.word	0x08016910
      default:
        pclk = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b6de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 8083 	beq.w	800b7ee <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	4a4a      	ldr	r2, [pc, #296]	; (800b818 <UART_SetConfig+0x444>)
 800b6ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fa:	005a      	lsls	r2, r3, #1
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	085b      	lsrs	r3, r3, #1
 800b702:	441a      	add	r2, r3
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	2b0f      	cmp	r3, #15
 800b712:	d916      	bls.n	800b742 <UART_SetConfig+0x36e>
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b71a:	d212      	bcs.n	800b742 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	f023 030f 	bic.w	r3, r3, #15
 800b724:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	085b      	lsrs	r3, r3, #1
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	f003 0307 	and.w	r3, r3, #7
 800b730:	b29a      	uxth	r2, r3
 800b732:	8bfb      	ldrh	r3, [r7, #30]
 800b734:	4313      	orrs	r3, r2
 800b736:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	8bfa      	ldrh	r2, [r7, #30]
 800b73e:	60da      	str	r2, [r3, #12]
 800b740:	e055      	b.n	800b7ee <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b748:	e051      	b.n	800b7ee <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b74a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b74e:	3b01      	subs	r3, #1
 800b750:	2b07      	cmp	r3, #7
 800b752:	d822      	bhi.n	800b79a <UART_SetConfig+0x3c6>
 800b754:	a201      	add	r2, pc, #4	; (adr r2, 800b75c <UART_SetConfig+0x388>)
 800b756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75a:	bf00      	nop
 800b75c:	0800b77d 	.word	0x0800b77d
 800b760:	0800b785 	.word	0x0800b785
 800b764:	0800b79b 	.word	0x0800b79b
 800b768:	0800b78b 	.word	0x0800b78b
 800b76c:	0800b79b 	.word	0x0800b79b
 800b770:	0800b79b 	.word	0x0800b79b
 800b774:	0800b79b 	.word	0x0800b79b
 800b778:	0800b793 	.word	0x0800b793
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b77c:	f7fe fb06 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800b780:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b782:	e010      	b.n	800b7a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b784:	4b25      	ldr	r3, [pc, #148]	; (800b81c <UART_SetConfig+0x448>)
 800b786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b788:	e00d      	b.n	800b7a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b78a:	f7fe fa69 	bl	8009c60 <HAL_RCC_GetSysClockFreq>
 800b78e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b790:	e009      	b.n	800b7a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b798:	e005      	b.n	800b7a6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b7a4:	bf00      	nop
    }

    if (pclk != 0U)
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d020      	beq.n	800b7ee <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	4a19      	ldr	r2, [pc, #100]	; (800b818 <UART_SetConfig+0x444>)
 800b7b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	085b      	lsrs	r3, r3, #1
 800b7c4:	441a      	add	r2, r3
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	2b0f      	cmp	r3, #15
 800b7d4:	d908      	bls.n	800b7e8 <UART_SetConfig+0x414>
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7dc:	d204      	bcs.n	800b7e8 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6a3a      	ldr	r2, [r7, #32]
 800b7e4:	60da      	str	r2, [r3, #12]
 800b7e6:	e002      	b.n	800b7ee <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2200      	movs	r2, #0
 800b802:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	2200      	movs	r2, #0
 800b808:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b80a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3730      	adds	r7, #48	; 0x30
 800b812:	46bd      	mov	sp, r7
 800b814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b818:	08016910 	.word	0x08016910
 800b81c:	00f42400 	.word	0x00f42400

0800b820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00a      	beq.n	800b84a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	430a      	orrs	r2, r1
 800b848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84e:	f003 0302 	and.w	r3, r3, #2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	430a      	orrs	r2, r1
 800b86a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b870:	f003 0304 	and.w	r3, r3, #4
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00a      	beq.n	800b88e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b892:	f003 0308 	and.w	r3, r3, #8
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b4:	f003 0310 	and.w	r3, r3, #16
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d6:	f003 0320 	and.w	r3, r3, #32
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01a      	beq.n	800b936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b91e:	d10a      	bne.n	800b936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00a      	beq.n	800b958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	605a      	str	r2, [r3, #4]
  }
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af02      	add	r7, sp, #8
 800b96a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b974:	f7fa f872 	bl	8005a5c <HAL_GetTick>
 800b978:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b08      	cmp	r3, #8
 800b986:	d10e      	bne.n	800b9a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f82f 	bl	800b9fa <UART_WaitOnFlagUntilTimeout>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e025      	b.n	800b9f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d10e      	bne.n	800b9d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f819 	bl	800b9fa <UART_WaitOnFlagUntilTimeout>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e00f      	b.n	800b9f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b09c      	sub	sp, #112	; 0x70
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	603b      	str	r3, [r7, #0]
 800ba06:	4613      	mov	r3, r2
 800ba08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba0a:	e0a9      	b.n	800bb60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba12:	f000 80a5 	beq.w	800bb60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba16:	f7fa f821 	bl	8005a5c <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d302      	bcc.n	800ba2c <UART_WaitOnFlagUntilTimeout+0x32>
 800ba26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d140      	bne.n	800baae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba40:	667b      	str	r3, [r7, #100]	; 0x64
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba4c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ba58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e6      	bne.n	800ba2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba68:	e853 3f00 	ldrex	r3, [r3]
 800ba6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	f023 0301 	bic.w	r3, r3, #1
 800ba74:	663b      	str	r3, [r7, #96]	; 0x60
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba7e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ba80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ba8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e5      	bne.n	800ba5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	e069      	b.n	800bb82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d051      	beq.n	800bb60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baca:	d149      	bne.n	800bb60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bad4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	e853 3f00 	ldrex	r3, [r3]
 800bae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800baea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	461a      	mov	r2, r3
 800baf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baf4:	637b      	str	r3, [r7, #52]	; 0x34
 800baf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bafc:	e841 2300 	strex	r3, r2, [r1]
 800bb00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e6      	bne.n	800bad6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	613b      	str	r3, [r7, #16]
   return(result);
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	f023 0301 	bic.w	r3, r3, #1
 800bb1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3308      	adds	r3, #8
 800bb26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb28:	623a      	str	r2, [r7, #32]
 800bb2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	69f9      	ldr	r1, [r7, #28]
 800bb2e:	6a3a      	ldr	r2, [r7, #32]
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e5      	bne.n	800bb08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2220      	movs	r2, #32
 800bb40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2220      	movs	r2, #32
 800bb48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e010      	b.n	800bb82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	69da      	ldr	r2, [r3, #28]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	bf0c      	ite	eq
 800bb70:	2301      	moveq	r3, #1
 800bb72:	2300      	movne	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	461a      	mov	r2, r3
 800bb78:	79fb      	ldrb	r3, [r7, #7]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	f43f af46 	beq.w	800ba0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3770      	adds	r7, #112	; 0x70
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b08f      	sub	sp, #60	; 0x3c
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bba6:	637b      	str	r3, [r7, #52]	; 0x34
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbb2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb8:	e841 2300 	strex	r3, r2, [r1]
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1e6      	bne.n	800bb92 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3308      	adds	r3, #8
 800bbca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	e853 3f00 	ldrex	r3, [r3]
 800bbd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bbda:	633b      	str	r3, [r7, #48]	; 0x30
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	3308      	adds	r3, #8
 800bbe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbe4:	61ba      	str	r2, [r7, #24]
 800bbe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe8:	6979      	ldr	r1, [r7, #20]
 800bbea:	69ba      	ldr	r2, [r7, #24]
 800bbec:	e841 2300 	strex	r3, r2, [r1]
 800bbf0:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d1e5      	bne.n	800bbc4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800bc00:	bf00      	nop
 800bc02:	373c      	adds	r7, #60	; 0x3c
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b095      	sub	sp, #84	; 0x54
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc32:	643b      	str	r3, [r7, #64]	; 0x40
 800bc34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc3a:	e841 2300 	strex	r3, r2, [r1]
 800bc3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1e6      	bne.n	800bc14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	e853 3f00 	ldrex	r3, [r3]
 800bc54:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc5c:	f023 0301 	bic.w	r3, r3, #1
 800bc60:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3308      	adds	r3, #8
 800bc68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc72:	e841 2300 	strex	r3, r2, [r1]
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1e3      	bne.n	800bc46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d118      	bne.n	800bcb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	e853 3f00 	ldrex	r3, [r3]
 800bc92:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f023 0310 	bic.w	r3, r3, #16
 800bc9a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	461a      	mov	r2, r3
 800bca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca4:	61bb      	str	r3, [r7, #24]
 800bca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca8:	6979      	ldr	r1, [r7, #20]
 800bcaa:	69ba      	ldr	r2, [r7, #24]
 800bcac:	e841 2300 	strex	r3, r2, [r1]
 800bcb0:	613b      	str	r3, [r7, #16]
   return(result);
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1e6      	bne.n	800bc86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bccc:	bf00      	nop
 800bcce:	3754      	adds	r7, #84	; 0x54
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b090      	sub	sp, #64	; 0x40
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0320 	and.w	r3, r3, #32
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d137      	bne.n	800bd64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3308      	adds	r3, #8
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	623b      	str	r3, [r7, #32]
   return(result);
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd12:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3308      	adds	r3, #8
 800bd1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd1c:	633a      	str	r2, [r7, #48]	; 0x30
 800bd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e5      	bne.n	800bcfc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	e853 3f00 	ldrex	r3, [r3]
 800bd3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd44:	637b      	str	r3, [r7, #52]	; 0x34
 800bd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4e:	61fb      	str	r3, [r7, #28]
 800bd50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd52:	69b9      	ldr	r1, [r7, #24]
 800bd54:	69fa      	ldr	r2, [r7, #28]
 800bd56:	e841 2300 	strex	r3, r2, [r1]
 800bd5a:	617b      	str	r3, [r7, #20]
   return(result);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1e6      	bne.n	800bd30 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd62:	e002      	b.n	800bd6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bd64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd66:	f7f6 fdef 	bl	8002948 <HAL_UART_TxCpltCallback>
}
 800bd6a:	bf00      	nop
 800bd6c:	3740      	adds	r7, #64	; 0x40
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7ff fb07 	bl	800b394 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd86:	bf00      	nop
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b086      	sub	sp, #24
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bda2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdb6:	2b80      	cmp	r3, #128	; 0x80
 800bdb8:	d109      	bne.n	800bdce <UART_DMAError+0x40>
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b21      	cmp	r3, #33	; 0x21
 800bdbe:	d106      	bne.n	800bdce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bdc8:	6978      	ldr	r0, [r7, #20]
 800bdca:	f7ff fede 	bl	800bb8a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdd8:	2b40      	cmp	r3, #64	; 0x40
 800bdda:	d109      	bne.n	800bdf0 <UART_DMAError+0x62>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b22      	cmp	r3, #34	; 0x22
 800bde0:	d106      	bne.n	800bdf0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bdea:	6978      	ldr	r0, [r7, #20]
 800bdec:	f7ff ff0e 	bl	800bc0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdf6:	f043 0210 	orr.w	r2, r3, #16
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be00:	6978      	ldr	r0, [r7, #20]
 800be02:	f7ff fad1 	bl	800b3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be06:	bf00      	nop
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f7ff fabb 	bl	800b3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be32:	bf00      	nop
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b088      	sub	sp, #32
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	e853 3f00 	ldrex	r3, [r3]
 800be4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be56:	61fb      	str	r3, [r7, #28]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	461a      	mov	r2, r3
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	61bb      	str	r3, [r7, #24]
 800be62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	6979      	ldr	r1, [r7, #20]
 800be66:	69ba      	ldr	r2, [r7, #24]
 800be68:	e841 2300 	strex	r3, r2, [r1]
 800be6c:	613b      	str	r3, [r7, #16]
   return(result);
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e6      	bne.n	800be42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7f6 fd60 	bl	8002948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be88:	bf00      	nop
 800be8a:	3720      	adds	r7, #32
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d101      	bne.n	800bee2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bede:	2302      	movs	r3, #2
 800bee0:	e027      	b.n	800bf32 <HAL_UARTEx_DisableFifoMode+0x66>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2224      	movs	r2, #36	; 0x24
 800beee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0201 	bic.w	r2, r2, #1
 800bf08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2220      	movs	r2, #32
 800bf24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d101      	bne.n	800bf56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf52:	2302      	movs	r3, #2
 800bf54:	e02d      	b.n	800bfb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2224      	movs	r2, #36	; 0x24
 800bf62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f022 0201 	bic.w	r2, r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	683a      	ldr	r2, [r7, #0]
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f850 	bl	800c038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d101      	bne.n	800bfd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfce:	2302      	movs	r3, #2
 800bfd0:	e02d      	b.n	800c02e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2224      	movs	r2, #36	; 0x24
 800bfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f022 0201 	bic.w	r2, r2, #1
 800bff8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f812 	bl	800c038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2220      	movs	r2, #32
 800c020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
	...

0800c038 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c044:	2b00      	cmp	r3, #0
 800c046:	d108      	bne.n	800c05a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c058:	e031      	b.n	800c0be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c05a:	2308      	movs	r3, #8
 800c05c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c05e:	2308      	movs	r3, #8
 800c060:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	0e5b      	lsrs	r3, r3, #25
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 0307 	and.w	r3, r3, #7
 800c070:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	0f5b      	lsrs	r3, r3, #29
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	7b3a      	ldrb	r2, [r7, #12]
 800c086:	4911      	ldr	r1, [pc, #68]	; (800c0cc <UARTEx_SetNbDataToProcess+0x94>)
 800c088:	5c8a      	ldrb	r2, [r1, r2]
 800c08a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c08e:	7b3a      	ldrb	r2, [r7, #12]
 800c090:	490f      	ldr	r1, [pc, #60]	; (800c0d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c092:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c094:	fb93 f3f2 	sdiv	r3, r3, r2
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	7b7a      	ldrb	r2, [r7, #13]
 800c0a4:	4909      	ldr	r1, [pc, #36]	; (800c0cc <UARTEx_SetNbDataToProcess+0x94>)
 800c0a6:	5c8a      	ldrb	r2, [r1, r2]
 800c0a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0ac:	7b7a      	ldrb	r2, [r7, #13]
 800c0ae:	4908      	ldr	r1, [pc, #32]	; (800c0d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c0b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0be:	bf00      	nop
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	08016928 	.word	0x08016928
 800c0d0:	08016930 	.word	0x08016930

0800c0d4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c0de:	f107 0308 	add.w	r3, r7, #8
 800c0e2:	2218      	movs	r2, #24
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f001 fc96 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c0ec:	233f      	movs	r3, #63	; 0x3f
 800c0ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c0f0:	2381      	movs	r3, #129	; 0x81
 800c0f2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c0f4:	1dfb      	adds	r3, r7, #7
 800c0f6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c0fc:	f107 0308 	add.w	r3, r7, #8
 800c100:	2100      	movs	r1, #0
 800c102:	4618      	mov	r0, r3
 800c104:	f001 fb4c 	bl	800d7a0 <hci_send_req>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	da01      	bge.n	800c112 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c10e:	23ff      	movs	r3, #255	; 0xff
 800c110:	e000      	b.n	800c114 <aci_gap_set_non_discoverable+0x40>
  return status;
 800c112:	79fb      	ldrb	r3, [r7, #7]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3720      	adds	r7, #32
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800c11c:	b5b0      	push	{r4, r5, r7, lr}
 800c11e:	b0ce      	sub	sp, #312	; 0x138
 800c120:	af00      	add	r7, sp, #0
 800c122:	4605      	mov	r5, r0
 800c124:	460c      	mov	r4, r1
 800c126:	4610      	mov	r0, r2
 800c128:	4619      	mov	r1, r3
 800c12a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c12e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c132:	462a      	mov	r2, r5
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c13a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c13e:	4622      	mov	r2, r4
 800c140:	801a      	strh	r2, [r3, #0]
 800c142:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c146:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800c14a:	4602      	mov	r2, r0
 800c14c:	801a      	strh	r2, [r3, #0]
 800c14e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c152:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c156:	460a      	mov	r2, r1
 800c158:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c15a:	f107 0310 	add.w	r3, r7, #16
 800c15e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c162:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c166:	3308      	adds	r3, #8
 800c168:	f107 0210 	add.w	r2, r7, #16
 800c16c:	4413      	add	r3, r2
 800c16e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c172:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c176:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c17a:	4413      	add	r3, r2
 800c17c:	3309      	adds	r3, #9
 800c17e:	f107 0210 	add.w	r2, r7, #16
 800c182:	4413      	add	r3, r2
 800c184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c188:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c18c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c190:	2200      	movs	r2, #0
 800c192:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c19a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c19e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c1a2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800c1a6:	7812      	ldrb	r2, [r2, #0]
 800c1a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c1aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c1b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c1b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c1bc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800c1c0:	8812      	ldrh	r2, [r2, #0]
 800c1c2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c1c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1ca:	3302      	adds	r3, #2
 800c1cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c1d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c1d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c1d8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800c1dc:	8812      	ldrh	r2, [r2, #0]
 800c1de:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c1e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1e6:	3302      	adds	r3, #2
 800c1e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c1ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c1f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c1f4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800c1f8:	7812      	ldrb	r2, [r2, #0]
 800c1fa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c1fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c200:	3301      	adds	r3, #1
 800c202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c206:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c20a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c20e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c214:	3301      	adds	r3, #1
 800c216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c21a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c21e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c222:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c228:	3301      	adds	r3, #1
 800c22a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c22e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c232:	3308      	adds	r3, #8
 800c234:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c238:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c23c:	4618      	mov	r0, r3
 800c23e:	f001 fbdb 	bl	800d9f8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c242:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c246:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c24a:	4413      	add	r3, r2
 800c24c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c250:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c254:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c258:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c25a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c25e:	3301      	adds	r3, #1
 800c260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c264:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c268:	3301      	adds	r3, #1
 800c26a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c26e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c272:	4618      	mov	r0, r3
 800c274:	f001 fbc0 	bl	800d9f8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c278:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c27c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c280:	4413      	add	r3, r2
 800c282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800c286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c28a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800c28e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c290:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c294:	3302      	adds	r3, #2
 800c296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800c29a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c29e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800c2a2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c2a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2a8:	3302      	adds	r3, #2
 800c2aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c2ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c2b2:	2218      	movs	r2, #24
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f001 fbae 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c2bc:	233f      	movs	r3, #63	; 0x3f
 800c2be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800c2c2:	2383      	movs	r3, #131	; 0x83
 800c2c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c2c8:	f107 0310 	add.w	r3, r7, #16
 800c2cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c2d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c2d8:	f107 030f 	add.w	r3, r7, #15
 800c2dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c2e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f001 fa57 	bl	800d7a0 <hci_send_req>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da01      	bge.n	800c2fc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c2f8:	23ff      	movs	r3, #255	; 0xff
 800c2fa:	e004      	b.n	800c306 <aci_gap_set_discoverable+0x1ea>
  return status;
 800c2fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c300:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c304:	781b      	ldrb	r3, [r3, #0]
}
 800c306:	4618      	mov	r0, r3
 800c308:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bdb0      	pop	{r4, r5, r7, pc}

0800c310 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b0cc      	sub	sp, #304	; 0x130
 800c314:	af00      	add	r7, sp, #0
 800c316:	4602      	mov	r2, r0
 800c318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c31c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c320:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c322:	f107 0310 	add.w	r3, r7, #16
 800c326:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c32a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c32e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c332:	2200      	movs	r2, #0
 800c334:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c336:	2300      	movs	r3, #0
 800c338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800c33c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c340:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c344:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c348:	7812      	ldrb	r2, [r2, #0]
 800c34a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c34c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c350:	3301      	adds	r3, #1
 800c352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c35a:	2218      	movs	r2, #24
 800c35c:	2100      	movs	r1, #0
 800c35e:	4618      	mov	r0, r3
 800c360:	f001 fb5a 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c364:	233f      	movs	r3, #63	; 0x3f
 800c366:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800c36a:	2385      	movs	r3, #133	; 0x85
 800c36c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c370:	f107 0310 	add.w	r3, r7, #16
 800c374:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c37c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c380:	f107 030f 	add.w	r3, r7, #15
 800c384:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c388:	2301      	movs	r3, #1
 800c38a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c38e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c392:	2100      	movs	r1, #0
 800c394:	4618      	mov	r0, r3
 800c396:	f001 fa03 	bl	800d7a0 <hci_send_req>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	da01      	bge.n	800c3a4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800c3a0:	23ff      	movs	r3, #255	; 0xff
 800c3a2:	e004      	b.n	800c3ae <aci_gap_set_io_capability+0x9e>
  return status;
 800c3a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c3ac:	781b      	ldrb	r3, [r3, #0]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c3b8:	b5b0      	push	{r4, r5, r7, lr}
 800c3ba:	b0cc      	sub	sp, #304	; 0x130
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4605      	mov	r5, r0
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	701a      	strb	r2, [r3, #0]
 800c3d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c3da:	4622      	mov	r2, r4
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	701a      	strb	r2, [r3, #0]
 800c3ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c3ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c3f2:	460a      	mov	r2, r1
 800c3f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c3f6:	f107 0310 	add.w	r3, r7, #16
 800c3fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c3fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c402:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800c410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c414:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c418:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c41c:	7812      	ldrb	r2, [r2, #0]
 800c41e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c424:	3301      	adds	r3, #1
 800c426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800c42a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c42e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c432:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c436:	7812      	ldrb	r2, [r2, #0]
 800c438:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c43a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c43e:	3301      	adds	r3, #1
 800c440:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800c444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c448:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c44c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800c450:	7812      	ldrb	r2, [r2, #0]
 800c452:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c458:	3301      	adds	r3, #1
 800c45a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c45e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c462:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c466:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800c46a:	7812      	ldrb	r2, [r2, #0]
 800c46c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c46e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c472:	3301      	adds	r3, #1
 800c474:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c47c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800c480:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c486:	3301      	adds	r3, #1
 800c488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c48c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c490:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800c494:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c49a:	3301      	adds	r3, #1
 800c49c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c4a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c4a4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c4a8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c4aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c4b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c4b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c4bc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c4c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c4ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c4ce:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c4d2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c4d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c4d8:	3301      	adds	r3, #1
 800c4da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c4de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c4e2:	2218      	movs	r2, #24
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f001 fa96 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c4ec:	233f      	movs	r3, #63	; 0x3f
 800c4ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800c4f2:	2386      	movs	r3, #134	; 0x86
 800c4f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c4f8:	f107 0310 	add.w	r3, r7, #16
 800c4fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c508:	f107 030f 	add.w	r3, r7, #15
 800c50c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c510:	2301      	movs	r3, #1
 800c512:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f001 f93f 	bl	800d7a0 <hci_send_req>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	da01      	bge.n	800c52c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800c528:	23ff      	movs	r3, #255	; 0xff
 800c52a:	e004      	b.n	800c536 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800c52c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c530:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c534:	781b      	ldrb	r3, [r3, #0]
}
 800c536:	4618      	mov	r0, r3
 800c538:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bdb0      	pop	{r4, r5, r7, pc}

0800c540 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b0cc      	sub	sp, #304	; 0x130
 800c544:	af00      	add	r7, sp, #0
 800c546:	4602      	mov	r2, r0
 800c548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c54c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c550:	6019      	str	r1, [r3, #0]
 800c552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c556:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c55a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800c55c:	f107 0310 	add.w	r3, r7, #16
 800c560:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c568:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c56c:	2200      	movs	r2, #0
 800c56e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c57a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c57e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c582:	8812      	ldrh	r2, [r2, #0]
 800c584:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c58a:	3302      	adds	r3, #2
 800c58c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800c590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c594:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c598:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800c59c:	6812      	ldr	r2, [r2, #0]
 800c59e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800c5a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c5ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c5b0:	2218      	movs	r2, #24
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f001 fa2f 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c5ba:	233f      	movs	r3, #63	; 0x3f
 800c5bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800c5c0:	2388      	movs	r3, #136	; 0x88
 800c5c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c5c6:	f107 0310 	add.w	r3, r7, #16
 800c5ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c5ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c5d6:	f107 030f 	add.w	r3, r7, #15
 800c5da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c5e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f001 f8d8 	bl	800d7a0 <hci_send_req>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	da01      	bge.n	800c5fa <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800c5f6:	23ff      	movs	r3, #255	; 0xff
 800c5f8:	e004      	b.n	800c604 <aci_gap_pass_key_resp+0xc4>
  return status;
 800c5fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c602:	781b      	ldrb	r3, [r3, #0]
}
 800c604:	4618      	mov	r0, r3
 800c606:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c60e:	b590      	push	{r4, r7, lr}
 800c610:	b0cd      	sub	sp, #308	; 0x134
 800c612:	af00      	add	r7, sp, #0
 800c614:	4604      	mov	r4, r0
 800c616:	4608      	mov	r0, r1
 800c618:	4611      	mov	r1, r2
 800c61a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c61e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800c622:	6013      	str	r3, [r2, #0]
 800c624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c628:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c62c:	4622      	mov	r2, r4
 800c62e:	701a      	strb	r2, [r3, #0]
 800c630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c634:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c638:	4602      	mov	r2, r0
 800c63a:	701a      	strb	r2, [r3, #0]
 800c63c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c640:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800c644:	460a      	mov	r2, r1
 800c646:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c648:	f107 0310 	add.w	r3, r7, #16
 800c64c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c650:	f107 0308 	add.w	r3, r7, #8
 800c654:	2207      	movs	r2, #7
 800c656:	2100      	movs	r1, #0
 800c658:	4618      	mov	r0, r3
 800c65a:	f001 f9dd 	bl	800da18 <Osal_MemSet>
  int index_input = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800c664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c668:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c66c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c670:	7812      	ldrb	r2, [r2, #0]
 800c672:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c678:	3301      	adds	r3, #1
 800c67a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c67e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c682:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c686:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c68a:	7812      	ldrb	r2, [r2, #0]
 800c68c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c68e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c692:	3301      	adds	r3, #1
 800c694:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800c698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c69c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c6a0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800c6a4:	7812      	ldrb	r2, [r2, #0]
 800c6a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c6a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c6b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6b6:	2218      	movs	r2, #24
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f001 f9ac 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c6c0:	233f      	movs	r3, #63	; 0x3f
 800c6c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800c6c6:	238a      	movs	r3, #138	; 0x8a
 800c6c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c6cc:	f107 0310 	add.w	r3, r7, #16
 800c6d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c6d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c6dc:	f107 0308 	add.w	r3, r7, #8
 800c6e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c6e4:	2307      	movs	r3, #7
 800c6e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c6ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f001 f855 	bl	800d7a0 <hci_send_req>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	da01      	bge.n	800c700 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	e02e      	b.n	800c75e <aci_gap_init+0x150>
  if ( resp.Status )
 800c700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c704:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d005      	beq.n	800c71a <aci_gap_init+0x10c>
    return resp.Status;
 800c70e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c712:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	e021      	b.n	800c75e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800c71a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c71e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c722:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c726:	b29a      	uxth	r2, r3
 800c728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c72c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800c734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c738:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c73c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c740:	b29a      	uxth	r2, r3
 800c742:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c746:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800c748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c74c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c750:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c754:	b29a      	uxth	r2, r3
 800c756:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c75a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c764:	46bd      	mov	sp, r7
 800c766:	bd90      	pop	{r4, r7, pc}

0800c768 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b0cc      	sub	sp, #304	; 0x130
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4602      	mov	r2, r0
 800c770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c778:	6019      	str	r1, [r3, #0]
 800c77a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c77e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c782:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800c784:	f107 0310 	add.w	r3, r7, #16
 800c788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c78c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c790:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c794:	2200      	movs	r2, #0
 800c796:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800c79e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c7a6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c7aa:	7812      	ldrb	r2, [r2, #0]
 800c7ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c7ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800c7b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7bc:	1c58      	adds	r0, r3, #1
 800c7be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7c2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c7c6:	781a      	ldrb	r2, [r3, #0]
 800c7c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c7d0:	6819      	ldr	r1, [r3, #0]
 800c7d2:	f001 f911 	bl	800d9f8 <Osal_MemCpy>
  index_input += AdvDataLen;
 800c7d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7da:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c7ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7ee:	2218      	movs	r2, #24
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f001 f910 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c7f8:	233f      	movs	r3, #63	; 0x3f
 800c7fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800c7fe:	238e      	movs	r3, #142	; 0x8e
 800c800:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c804:	f107 0310 	add.w	r3, r7, #16
 800c808:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c80c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c810:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c814:	f107 030f 	add.w	r3, r7, #15
 800c818:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c81c:	2301      	movs	r3, #1
 800c81e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c826:	2100      	movs	r1, #0
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 ffb9 	bl	800d7a0 <hci_send_req>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	da01      	bge.n	800c838 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800c834:	23ff      	movs	r3, #255	; 0xff
 800c836:	e004      	b.n	800c842 <aci_gap_update_adv_data+0xda>
  return status;
 800c838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c83c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c840:	781b      	ldrb	r3, [r3, #0]
}
 800c842:	4618      	mov	r0, r3
 800c844:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b088      	sub	sp, #32
 800c850:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c856:	f107 0308 	add.w	r3, r7, #8
 800c85a:	2218      	movs	r2, #24
 800c85c:	2100      	movs	r1, #0
 800c85e:	4618      	mov	r0, r3
 800c860:	f001 f8da 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c864:	233f      	movs	r3, #63	; 0x3f
 800c866:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800c868:	2392      	movs	r3, #146	; 0x92
 800c86a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c86c:	1dfb      	adds	r3, r7, #7
 800c86e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c870:	2301      	movs	r3, #1
 800c872:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c874:	f107 0308 	add.w	r3, r7, #8
 800c878:	2100      	movs	r1, #0
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 ff90 	bl	800d7a0 <hci_send_req>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	da01      	bge.n	800c88a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c886:	23ff      	movs	r3, #255	; 0xff
 800c888:	e000      	b.n	800c88c <aci_gap_configure_whitelist+0x40>
  return status;
 800c88a:	79fb      	ldrb	r3, [r7, #7]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3720      	adds	r7, #32
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b0cc      	sub	sp, #304	; 0x130
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4602      	mov	r2, r0
 800c89c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8a0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c8a4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800c8a6:	f107 0310 	add.w	r3, r7, #16
 800c8aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c8ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c8b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c8c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c8c8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c8cc:	8812      	ldrh	r2, [r2, #0]
 800c8ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c8d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c8da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8de:	2218      	movs	r2, #24
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f001 f898 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c8e8:	233f      	movs	r3, #63	; 0x3f
 800c8ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800c8ee:	2395      	movs	r3, #149	; 0x95
 800c8f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c8f4:	f107 0310 	add.w	r3, r7, #16
 800c8f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c8fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c900:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c904:	f107 030f 	add.w	r3, r7, #15
 800c908:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c90c:	2301      	movs	r3, #1
 800c90e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c912:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c916:	2100      	movs	r1, #0
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 ff41 	bl	800d7a0 <hci_send_req>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	da01      	bge.n	800c928 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 800c924:	23ff      	movs	r3, #255	; 0xff
 800c926:	e004      	b.n	800c932 <aci_gap_allow_rebond+0x9e>
  return status;
 800c928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c92c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c930:	781b      	ldrb	r3, [r3, #0]
}
 800c932:	4618      	mov	r0, r3
 800c934:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b0cc      	sub	sp, #304	; 0x130
 800c940:	af00      	add	r7, sp, #0
 800c942:	4602      	mov	r2, r0
 800c944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c948:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c94c:	801a      	strh	r2, [r3, #0]
 800c94e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c952:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800c956:	460a      	mov	r2, r1
 800c958:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800c95a:	f107 0310 	add.w	r3, r7, #16
 800c95e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c966:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c96a:	2200      	movs	r2, #0
 800c96c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c978:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c97c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c980:	8812      	ldrh	r2, [r2, #0]
 800c982:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c988:	3302      	adds	r3, #2
 800c98a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800c98e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c992:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c996:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800c99a:	7812      	ldrb	r2, [r2, #0]
 800c99c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c99e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c9a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9ac:	2218      	movs	r2, #24
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f001 f831 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c9b6:	233f      	movs	r3, #63	; 0x3f
 800c9b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800c9bc:	23a5      	movs	r3, #165	; 0xa5
 800c9be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c9c2:	f107 0310 	add.w	r3, r7, #16
 800c9c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c9ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c9d2:	f107 030f 	add.w	r3, r7, #15
 800c9d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c9e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 feda 	bl	800d7a0 <hci_send_req>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	da01      	bge.n	800c9f6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800c9f2:	23ff      	movs	r3, #255	; 0xff
 800c9f4:	e004      	b.n	800ca00 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800c9f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c9fe:	781b      	ldrb	r3, [r3, #0]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b088      	sub	sp, #32
 800ca0e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca14:	f107 0308 	add.w	r3, r7, #8
 800ca18:	2218      	movs	r2, #24
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fffb 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca22:	233f      	movs	r3, #63	; 0x3f
 800ca24:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ca26:	f240 1301 	movw	r3, #257	; 0x101
 800ca2a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ca2c:	1dfb      	adds	r3, r7, #7
 800ca2e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ca30:	2301      	movs	r3, #1
 800ca32:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca34:	f107 0308 	add.w	r3, r7, #8
 800ca38:	2100      	movs	r1, #0
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 feb0 	bl	800d7a0 <hci_send_req>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	da01      	bge.n	800ca4a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ca46:	23ff      	movs	r3, #255	; 0xff
 800ca48:	e000      	b.n	800ca4c <aci_gatt_init+0x42>
  return status;
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800ca54:	b590      	push	{r4, r7, lr}
 800ca56:	b0cf      	sub	sp, #316	; 0x13c
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800ca60:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ca64:	6001      	str	r1, [r0, #0]
 800ca66:	4610      	mov	r0, r2
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca6e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ca72:	4622      	mov	r2, r4
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca7a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ca7e:	4602      	mov	r2, r0
 800ca80:	701a      	strb	r2, [r3, #0]
 800ca82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca86:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ca8a:	460a      	mov	r2, r1
 800ca8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ca8e:	f107 0310 	add.w	r3, r7, #16
 800ca92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ca96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca9a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d00a      	beq.n	800caba <aci_gatt_add_service+0x66>
 800caa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800caa8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d101      	bne.n	800cab6 <aci_gatt_add_service+0x62>
 800cab2:	2311      	movs	r3, #17
 800cab4:	e002      	b.n	800cabc <aci_gatt_add_service+0x68>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e000      	b.n	800cabc <aci_gatt_add_service+0x68>
 800caba:	2303      	movs	r3, #3
 800cabc:	f107 0210 	add.w	r2, r7, #16
 800cac0:	4413      	add	r3, r2
 800cac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cac6:	f107 030c 	add.w	r3, r7, #12
 800caca:	2203      	movs	r2, #3
 800cacc:	2100      	movs	r1, #0
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 ffa2 	bl	800da18 <Osal_MemSet>
  int index_input = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800cada:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cade:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cae2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800cae6:	7812      	ldrb	r2, [r2, #0]
 800cae8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800caea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800caee:	3301      	adds	r3, #1
 800caf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800caf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800caf8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d002      	beq.n	800cb08 <aci_gatt_add_service+0xb4>
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	d004      	beq.n	800cb10 <aci_gatt_add_service+0xbc>
 800cb06:	e007      	b.n	800cb18 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800cb08:	2302      	movs	r3, #2
 800cb0a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cb0e:	e005      	b.n	800cb1c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800cb10:	2310      	movs	r3, #16
 800cb12:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cb16:	e001      	b.n	800cb1c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800cb18:	2397      	movs	r3, #151	; 0x97
 800cb1a:	e06c      	b.n	800cbf6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800cb1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cb20:	1c58      	adds	r0, r3, #1
 800cb22:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800cb26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cb2e:	6819      	ldr	r1, [r3, #0]
 800cb30:	f000 ff62 	bl	800d9f8 <Osal_MemCpy>
    index_input += size;
 800cb34:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800cb38:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800cb42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb46:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cb4a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800cb4e:	7812      	ldrb	r2, [r2, #0]
 800cb50:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cb52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb56:	3301      	adds	r3, #1
 800cb58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800cb5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb60:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cb64:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800cb68:	7812      	ldrb	r2, [r2, #0]
 800cb6a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800cb6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb70:	3301      	adds	r3, #1
 800cb72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb7a:	2218      	movs	r2, #24
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 ff4a 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb84:	233f      	movs	r3, #63	; 0x3f
 800cb86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800cb8a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800cb8e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cb92:	f107 0310 	add.w	r3, r7, #16
 800cb96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cb9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800cba2:	f107 030c 	add.w	r3, r7, #12
 800cba6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800cbaa:	2303      	movs	r3, #3
 800cbac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 fdf2 	bl	800d7a0 <hci_send_req>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	da01      	bge.n	800cbc6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800cbc2:	23ff      	movs	r3, #255	; 0xff
 800cbc4:	e017      	b.n	800cbf6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800cbc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cbca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800cbd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cbd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	e00a      	b.n	800cbf6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800cbe0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cbe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cbe8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cbf2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd90      	pop	{r4, r7, pc}

0800cc00 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800cc00:	b590      	push	{r4, r7, lr}
 800cc02:	b0d1      	sub	sp, #324	; 0x144
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4604      	mov	r4, r0
 800cc08:	4608      	mov	r0, r1
 800cc0a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800cc0e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800cc12:	600a      	str	r2, [r1, #0]
 800cc14:	4619      	mov	r1, r3
 800cc16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc1a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800cc1e:	4622      	mov	r2, r4
 800cc20:	801a      	strh	r2, [r3, #0]
 800cc22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc26:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	701a      	strb	r2, [r3, #0]
 800cc2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc32:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800cc36:	460a      	mov	r2, r1
 800cc38:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800cc3a:	f107 0318 	add.w	r3, r7, #24
 800cc3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800cc42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc46:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d00a      	beq.n	800cc66 <aci_gatt_add_char+0x66>
 800cc50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cc54:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d101      	bne.n	800cc62 <aci_gatt_add_char+0x62>
 800cc5e:	2313      	movs	r3, #19
 800cc60:	e002      	b.n	800cc68 <aci_gatt_add_char+0x68>
 800cc62:	2303      	movs	r3, #3
 800cc64:	e000      	b.n	800cc68 <aci_gatt_add_char+0x68>
 800cc66:	2305      	movs	r3, #5
 800cc68:	f107 0218 	add.w	r2, r7, #24
 800cc6c:	4413      	add	r3, r2
 800cc6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cc72:	f107 0314 	add.w	r3, r7, #20
 800cc76:	2203      	movs	r2, #3
 800cc78:	2100      	movs	r1, #0
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 fecc 	bl	800da18 <Osal_MemSet>
  int index_input = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800cc86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cc8a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800cc8e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800cc92:	8812      	ldrh	r2, [r2, #0]
 800cc94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cc96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cc9a:	3302      	adds	r3, #2
 800cc9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800cca0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cca4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800cca8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800ccac:	7812      	ldrb	r2, [r2, #0]
 800ccae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ccb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800ccba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ccbe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d002      	beq.n	800ccce <aci_gatt_add_char+0xce>
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d004      	beq.n	800ccd6 <aci_gatt_add_char+0xd6>
 800cccc:	e007      	b.n	800ccde <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ccd4:	e005      	b.n	800cce2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800ccd6:	2310      	movs	r3, #16
 800ccd8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ccdc:	e001      	b.n	800cce2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800ccde:	2397      	movs	r3, #151	; 0x97
 800cce0:	e091      	b.n	800ce06 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800cce2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cce6:	1cd8      	adds	r0, r3, #3
 800cce8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800ccec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ccf0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ccf4:	6819      	ldr	r1, [r3, #0]
 800ccf6:	f000 fe7f 	bl	800d9f8 <Osal_MemCpy>
    index_input += size;
 800ccfa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ccfe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800cd02:	4413      	add	r3, r2
 800cd04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800cd08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd0c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800cd10:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800cd14:	8812      	ldrh	r2, [r2, #0]
 800cd16:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cd18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd1c:	3302      	adds	r3, #2
 800cd1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800cd22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd26:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800cd2a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800cd2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd30:	3301      	adds	r3, #1
 800cd32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800cd36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd3a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800cd3e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800cd40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd44:	3301      	adds	r3, #1
 800cd46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800cd4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd4e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800cd52:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800cd54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd58:	3301      	adds	r3, #1
 800cd5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800cd5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd62:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800cd66:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800cd68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800cd72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cd76:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800cd7a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800cd7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cd80:	3301      	adds	r3, #1
 800cd82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cd8a:	2218      	movs	r2, #24
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f000 fe42 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd94:	233f      	movs	r3, #63	; 0x3f
 800cd96:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800cd9a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800cd9e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800cda2:	f107 0318 	add.w	r3, r7, #24
 800cda6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800cdaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cdae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800cdb2:	f107 0314 	add.w	r3, r7, #20
 800cdb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800cdba:	2303      	movs	r3, #3
 800cdbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cdc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 fcea 	bl	800d7a0 <hci_send_req>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	da01      	bge.n	800cdd6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800cdd2:	23ff      	movs	r3, #255	; 0xff
 800cdd4:	e017      	b.n	800ce06 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800cdd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cdda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d005      	beq.n	800cdf0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800cde4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cde8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	e00a      	b.n	800ce06 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800cdf0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cdf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cdf8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ce02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd90      	pop	{r4, r7, pc}

0800ce10 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800ce10:	b5b0      	push	{r4, r5, r7, lr}
 800ce12:	b0cc      	sub	sp, #304	; 0x130
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	4605      	mov	r5, r0
 800ce18:	460c      	mov	r4, r1
 800ce1a:	4610      	mov	r0, r2
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce22:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ce26:	462a      	mov	r2, r5
 800ce28:	801a      	strh	r2, [r3, #0]
 800ce2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce32:	4622      	mov	r2, r4
 800ce34:	801a      	strh	r2, [r3, #0]
 800ce36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce3a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800ce3e:	4602      	mov	r2, r0
 800ce40:	701a      	strb	r2, [r3, #0]
 800ce42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce46:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ce4a:	460a      	mov	r2, r1
 800ce4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ce4e:	f107 0310 	add.w	r3, r7, #16
 800ce52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ce56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ce5a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800ce68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ce70:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ce74:	8812      	ldrh	r2, [r2, #0]
 800ce76:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ce78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce7c:	3302      	adds	r3, #2
 800ce7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800ce82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ce8a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ce8e:	8812      	ldrh	r2, [r2, #0]
 800ce90:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ce92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce96:	3302      	adds	r3, #2
 800ce98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800ce9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cea0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cea4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800cea8:	7812      	ldrb	r2, [r2, #0]
 800ceaa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ceac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800ceb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ceba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cebe:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800cec2:	7812      	ldrb	r2, [r2, #0]
 800cec4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ceca:	3301      	adds	r3, #1
 800cecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800ced0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ced4:	1d98      	adds	r0, r3, #6
 800ced6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ceda:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	461a      	mov	r2, r3
 800cee2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800cee6:	f000 fd87 	bl	800d9f8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800ceea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ceee:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cef8:	4413      	add	r3, r2
 800cefa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cefe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf02:	2218      	movs	r2, #24
 800cf04:	2100      	movs	r1, #0
 800cf06:	4618      	mov	r0, r3
 800cf08:	f000 fd86 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf0c:	233f      	movs	r3, #63	; 0x3f
 800cf0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800cf12:	f44f 7383 	mov.w	r3, #262	; 0x106
 800cf16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cf1a:	f107 0310 	add.w	r3, r7, #16
 800cf1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cf22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cf2a:	f107 030f 	add.w	r3, r7, #15
 800cf2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cf32:	2301      	movs	r3, #1
 800cf34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 fc2e 	bl	800d7a0 <hci_send_req>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da01      	bge.n	800cf4e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800cf4a:	23ff      	movs	r3, #255	; 0xff
 800cf4c:	e004      	b.n	800cf58 <aci_gatt_update_char_value+0x148>
  return status;
 800cf4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf52:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cf56:	781b      	ldrb	r3, [r3, #0]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bdb0      	pop	{r4, r5, r7, pc}

0800cf62 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b0cc      	sub	sp, #304	; 0x130
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cf70:	601a      	str	r2, [r3, #0]
 800cf72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf76:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	701a      	strb	r2, [r3, #0]
 800cf7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf82:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cf86:	460a      	mov	r2, r1
 800cf88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800cf8a:	f107 0310 	add.w	r3, r7, #16
 800cf8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cf92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cf96:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800cfa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cfa8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cfac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cfb0:	7812      	ldrb	r2, [r2, #0]
 800cfb2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cfb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cfb8:	3301      	adds	r3, #1
 800cfba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800cfbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cfc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cfc6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800cfca:	7812      	ldrb	r2, [r2, #0]
 800cfcc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cfce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800cfd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cfdc:	1c98      	adds	r0, r3, #2
 800cfde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfe2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cfe6:	781a      	ldrb	r2, [r3, #0]
 800cfe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cfec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cff0:	6819      	ldr	r1, [r3, #0]
 800cff2:	f000 fd01 	bl	800d9f8 <Osal_MemCpy>
  index_input += Length;
 800cff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cffa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d004:	4413      	add	r3, r2
 800d006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d00a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d00e:	2218      	movs	r2, #24
 800d010:	2100      	movs	r1, #0
 800d012:	4618      	mov	r0, r3
 800d014:	f000 fd00 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d018:	233f      	movs	r3, #63	; 0x3f
 800d01a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d01e:	230c      	movs	r3, #12
 800d020:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d024:	f107 0310 	add.w	r3, r7, #16
 800d028:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d02c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d030:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d034:	f107 030f 	add.w	r3, r7, #15
 800d038:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d03c:	2301      	movs	r3, #1
 800d03e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d042:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d046:	2100      	movs	r1, #0
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 fba9 	bl	800d7a0 <hci_send_req>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	da01      	bge.n	800d058 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d054:	23ff      	movs	r3, #255	; 0xff
 800d056:	e004      	b.n	800d062 <aci_hal_write_config_data+0x100>
  return status;
 800d058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d05c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d060:	781b      	ldrb	r3, [r3, #0]
}
 800d062:	4618      	mov	r0, r3
 800d064:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b0cc      	sub	sp, #304	; 0x130
 800d070:	af00      	add	r7, sp, #0
 800d072:	4602      	mov	r2, r0
 800d074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d078:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d07c:	701a      	strb	r2, [r3, #0]
 800d07e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d082:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d086:	460a      	mov	r2, r1
 800d088:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d08a:	f107 0310 	add.w	r3, r7, #16
 800d08e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d096:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d09a:	2200      	movs	r2, #0
 800d09c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d0a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d0ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d0b0:	7812      	ldrb	r2, [r2, #0]
 800d0b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d0b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d0be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d0c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d0ca:	7812      	ldrb	r2, [r2, #0]
 800d0cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d0ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d0d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d0dc:	2218      	movs	r2, #24
 800d0de:	2100      	movs	r1, #0
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fc99 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0e6:	233f      	movs	r3, #63	; 0x3f
 800d0e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d0ec:	230f      	movs	r3, #15
 800d0ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d0f2:	f107 0310 	add.w	r3, r7, #16
 800d0f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d0fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d102:	f107 030f 	add.w	r3, r7, #15
 800d106:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d10a:	2301      	movs	r3, #1
 800d10c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d114:	2100      	movs	r1, #0
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fb42 	bl	800d7a0 <hci_send_req>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	da01      	bge.n	800d126 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d122:	23ff      	movs	r3, #255	; 0xff
 800d124:	e004      	b.n	800d130 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d12a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d12e:	781b      	ldrb	r3, [r3, #0]
}
 800d130:	4618      	mov	r0, r3
 800d132:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b0cc      	sub	sp, #304	; 0x130
 800d13e:	af00      	add	r7, sp, #0
 800d140:	4602      	mov	r2, r0
 800d142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d146:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d14a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d14c:	f107 0310 	add.w	r3, r7, #16
 800d150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d158:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d15c:	2200      	movs	r2, #0
 800d15e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d160:	2300      	movs	r3, #0
 800d162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d16a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d16e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d172:	8812      	ldrh	r2, [r2, #0]
 800d174:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d17a:	3302      	adds	r3, #2
 800d17c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d180:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d184:	2218      	movs	r2, #24
 800d186:	2100      	movs	r1, #0
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 fc45 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d18e:	233f      	movs	r3, #63	; 0x3f
 800d190:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800d194:	2318      	movs	r3, #24
 800d196:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d19a:	f107 0310 	add.w	r3, r7, #16
 800d19e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d1a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d1aa:	f107 030f 	add.w	r3, r7, #15
 800d1ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1bc:	2100      	movs	r1, #0
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 faee 	bl	800d7a0 <hci_send_req>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	da01      	bge.n	800d1ce <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d1ca:	23ff      	movs	r3, #255	; 0xff
 800d1cc:	e004      	b.n	800d1d8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d1ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d1d6:	781b      	ldrb	r3, [r3, #0]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b088      	sub	sp, #32
 800d1e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1ec:	f107 0308 	add.w	r3, r7, #8
 800d1f0:	2218      	movs	r2, #24
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 fc0f 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x03;
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d1fe:	2303      	movs	r3, #3
 800d200:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d202:	1dfb      	adds	r3, r7, #7
 800d204:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d206:	2301      	movs	r3, #1
 800d208:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d20a:	f107 0308 	add.w	r3, r7, #8
 800d20e:	2100      	movs	r1, #0
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fac5 	bl	800d7a0 <hci_send_req>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	da01      	bge.n	800d220 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d21c:	23ff      	movs	r3, #255	; 0xff
 800d21e:	e000      	b.n	800d222 <hci_reset+0x40>
  return status;
 800d220:	79fb      	ldrb	r3, [r7, #7]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3720      	adds	r7, #32
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b0ce      	sub	sp, #312	; 0x138
 800d22e:	af00      	add	r7, sp, #0
 800d230:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d238:	6019      	str	r1, [r3, #0]
 800d23a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d23e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d248:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d24c:	4602      	mov	r2, r0
 800d24e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800d250:	f107 0318 	add.w	r3, r7, #24
 800d254:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d258:	f107 0310 	add.w	r3, r7, #16
 800d25c:	2205      	movs	r2, #5
 800d25e:	2100      	movs	r1, #0
 800d260:	4618      	mov	r0, r3
 800d262:	f000 fbd9 	bl	800da18 <Osal_MemSet>
  int index_input = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800d26c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d270:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d274:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d278:	8812      	ldrh	r2, [r2, #0]
 800d27a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d27c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d280:	3302      	adds	r3, #2
 800d282:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d286:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d28a:	2218      	movs	r2, #24
 800d28c:	2100      	movs	r1, #0
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fbc2 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x08;
 800d294:	2308      	movs	r3, #8
 800d296:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800d29a:	2330      	movs	r3, #48	; 0x30
 800d29c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d2a0:	f107 0318 	add.w	r3, r7, #24
 800d2a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d2a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d2b0:	f107 0310 	add.w	r3, r7, #16
 800d2b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d2b8:	2305      	movs	r3, #5
 800d2ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 fa6b 	bl	800d7a0 <hci_send_req>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	da01      	bge.n	800d2d4 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800d2d0:	23ff      	movs	r3, #255	; 0xff
 800d2d2:	e023      	b.n	800d31c <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800d2d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d2d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d005      	beq.n	800d2ee <hci_le_read_phy+0xc4>
    return resp.Status;
 800d2e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d2e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	e016      	b.n	800d31c <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800d2ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d2f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d2f6:	78da      	ldrb	r2, [r3, #3]
 800d2f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d2fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800d304:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d308:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d30c:	791a      	ldrb	r2, [r3, #4]
 800d30e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d312:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d326:	b590      	push	{r4, r7, lr}
 800d328:	b0cd      	sub	sp, #308	; 0x134
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	4604      	mov	r4, r0
 800d32e:	4608      	mov	r0, r1
 800d330:	4611      	mov	r1, r2
 800d332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d336:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d33a:	4622      	mov	r2, r4
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d342:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d346:	4602      	mov	r2, r0
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d34e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800d352:	460a      	mov	r2, r1
 800d354:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d356:	f107 0310 	add.w	r3, r7, #16
 800d35a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d35e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d362:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d374:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d378:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d37c:	7812      	ldrb	r2, [r2, #0]
 800d37e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d380:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d384:	3301      	adds	r3, #1
 800d386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d38a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d38e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d392:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d396:	7812      	ldrb	r2, [r2, #0]
 800d398:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d39a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d39e:	3301      	adds	r3, #1
 800d3a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d3a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d3a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d3ac:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800d3b0:	7812      	ldrb	r2, [r2, #0]
 800d3b2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3c2:	2218      	movs	r2, #24
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 fb26 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x08;
 800d3cc:	2308      	movs	r3, #8
 800d3ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800d3d2:	2331      	movs	r3, #49	; 0x31
 800d3d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d3d8:	f107 0310 	add.w	r3, r7, #16
 800d3dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d3e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d3e8:	f107 030f 	add.w	r3, r7, #15
 800d3ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 f9cf 	bl	800d7a0 <hci_send_req>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	da01      	bge.n	800d40c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800d408:	23ff      	movs	r3, #255	; 0xff
 800d40a:	e004      	b.n	800d416 <hci_le_set_default_phy+0xf0>
  return status;
 800d40c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d410:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d414:	781b      	ldrb	r3, [r3, #0]
}
 800d416:	4618      	mov	r0, r3
 800d418:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd90      	pop	{r4, r7, pc}

0800d420 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 800d420:	b5b0      	push	{r4, r5, r7, lr}
 800d422:	b0cc      	sub	sp, #304	; 0x130
 800d424:	af00      	add	r7, sp, #0
 800d426:	4605      	mov	r5, r0
 800d428:	460c      	mov	r4, r1
 800d42a:	4610      	mov	r0, r2
 800d42c:	4619      	mov	r1, r3
 800d42e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d432:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d436:	462a      	mov	r2, r5
 800d438:	801a      	strh	r2, [r3, #0]
 800d43a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d43e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d442:	4622      	mov	r2, r4
 800d444:	801a      	strh	r2, [r3, #0]
 800d446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d44a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d44e:	4602      	mov	r2, r0
 800d450:	801a      	strh	r2, [r3, #0]
 800d452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d45a:	460a      	mov	r2, r1
 800d45c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800d45e:	f107 0310 	add.w	r3, r7, #16
 800d462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d46a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d47c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d480:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d484:	8812      	ldrh	r2, [r2, #0]
 800d486:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d488:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d48c:	3302      	adds	r3, #2
 800d48e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800d492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d496:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d49a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d49e:	8812      	ldrh	r2, [r2, #0]
 800d4a0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d4a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4a6:	3302      	adds	r3, #2
 800d4a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800d4ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4b4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d4b8:	8812      	ldrh	r2, [r2, #0]
 800d4ba:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800d4bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4c0:	3302      	adds	r3, #2
 800d4c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 800d4c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4ce:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800d4d2:	8812      	ldrh	r2, [r2, #0]
 800d4d4:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800d4d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4da:	3302      	adds	r3, #2
 800d4dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800d4e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4e4:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800d4e8:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800d4ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4ee:	3302      	adds	r3, #2
 800d4f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d4f8:	2218      	movs	r2, #24
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 fa8b 	bl	800da18 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d502:	233f      	movs	r3, #63	; 0x3f
 800d504:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800d508:	f240 1381 	movw	r3, #385	; 0x181
 800d50c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800d510:	230f      	movs	r3, #15
 800d512:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800d516:	f107 0310 	add.w	r3, r7, #16
 800d51a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d51e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d522:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d526:	f107 030f 	add.w	r3, r7, #15
 800d52a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d52e:	2301      	movs	r3, #1
 800d530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d538:	2100      	movs	r1, #0
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 f930 	bl	800d7a0 <hci_send_req>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	da01      	bge.n	800d54a <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800d546:	23ff      	movs	r3, #255	; 0xff
 800d548:	e004      	b.n	800d554 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800d54a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d54e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d552:	781b      	ldrb	r3, [r3, #0]
}
 800d554:	4618      	mov	r0, r3
 800d556:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d560 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d566:	f3ef 8310 	mrs	r3, PRIMASK
 800d56a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d56c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800d56e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d570:	b672      	cpsid	i
}
 800d572:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800d574:	1cbb      	adds	r3, r7, #2
 800d576:	4619      	mov	r1, r3
 800d578:	4812      	ldr	r0, [pc, #72]	; (800d5c4 <DbgTrace_TxCpltCallback+0x64>)
 800d57a:	f001 f8ee 	bl	800e75a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800d57e:	1cbb      	adds	r3, r7, #2
 800d580:	4619      	mov	r1, r3
 800d582:	4810      	ldr	r0, [pc, #64]	; (800d5c4 <DbgTrace_TxCpltCallback+0x64>)
 800d584:	f001 f9da 	bl	800e93c <CircularQueue_Sense>
 800d588:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00c      	beq.n	800d5aa <DbgTrace_TxCpltCallback+0x4a>
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	f383 8810 	msr	PRIMASK, r3
}
 800d59a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800d59c:	887b      	ldrh	r3, [r7, #2]
 800d59e:	4a0a      	ldr	r2, [pc, #40]	; (800d5c8 <DbgTrace_TxCpltCallback+0x68>)
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	6938      	ldr	r0, [r7, #16]
 800d5a4:	f7f3 feb5 	bl	8001312 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800d5a8:	e008      	b.n	800d5bc <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800d5aa:	4b08      	ldr	r3, [pc, #32]	; (800d5cc <DbgTrace_TxCpltCallback+0x6c>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	701a      	strb	r2, [r3, #0]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f383 8810 	msr	PRIMASK, r3
}
 800d5ba:	bf00      	nop
}
 800d5bc:	bf00      	nop
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	200007f8 	.word	0x200007f8
 800d5c8:	0800d561 	.word	0x0800d561
 800d5cc:	20000041 	.word	0x20000041

0800d5d0 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800d5d6:	f7f3 fe96 	bl	8001306 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800d5da:	2302      	movs	r3, #2
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d5e4:	4903      	ldr	r1, [pc, #12]	; (800d5f4 <DbgTraceInit+0x24>)
 800d5e6:	4804      	ldr	r0, [pc, #16]	; (800d5f8 <DbgTraceInit+0x28>)
 800d5e8:	f000 fe5e 	bl	800e2a8 <CircularQueue_Init>
#endif 
#endif
  return;
 800d5ec:	bf00      	nop
}
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20000818 	.word	0x20000818
 800d5f8:	200007f8 	.word	0x200007f8

0800d5fc <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	68b9      	ldr	r1, [r7, #8]
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f000 f805 	bl	800d61c <DbgTraceWrite>
 800d612:	4603      	mov	r3, r0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08a      	sub	sp, #40	; 0x28
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d62c:	f3ef 8310 	mrs	r3, PRIMASK
 800d630:	61bb      	str	r3, [r7, #24]
  return(result);
 800d632:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800d634:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63c:	d102      	bne.n	800d644 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	627b      	str	r3, [r7, #36]	; 0x24
 800d642:	e037      	b.n	800d6b4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2b01      	cmp	r3, #1
 800d648:	d006      	beq.n	800d658 <DbgTraceWrite+0x3c>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d003      	beq.n	800d658 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800d650:	f04f 33ff 	mov.w	r3, #4294967295
 800d654:	627b      	str	r3, [r7, #36]	; 0x24
 800d656:	e02d      	b.n	800d6b4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d02a      	beq.n	800d6b4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800d662:	b672      	cpsid	i
}
 800d664:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	b29a      	uxth	r2, r3
 800d66a:	2301      	movs	r3, #1
 800d66c:	68b9      	ldr	r1, [r7, #8]
 800d66e:	4814      	ldr	r0, [pc, #80]	; (800d6c0 <DbgTraceWrite+0xa4>)
 800d670:	f000 fe4c 	bl	800e30c <CircularQueue_Add>
 800d674:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d015      	beq.n	800d6a8 <DbgTraceWrite+0x8c>
 800d67c:	4b11      	ldr	r3, [pc, #68]	; (800d6c4 <DbgTraceWrite+0xa8>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	b2db      	uxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d010      	beq.n	800d6a8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800d686:	4b0f      	ldr	r3, [pc, #60]	; (800d6c4 <DbgTraceWrite+0xa8>)
 800d688:	2200      	movs	r2, #0
 800d68a:	701a      	strb	r2, [r3, #0]
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f383 8810 	msr	PRIMASK, r3
}
 800d696:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4a0a      	ldr	r2, [pc, #40]	; (800d6c8 <DbgTraceWrite+0xac>)
 800d69e:	4619      	mov	r1, r3
 800d6a0:	69f8      	ldr	r0, [r7, #28]
 800d6a2:	f7f3 fe36 	bl	8001312 <DbgOutputTraces>
 800d6a6:	e005      	b.n	800d6b4 <DbgTraceWrite+0x98>
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	f383 8810 	msr	PRIMASK, r3
}
 800d6b2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3728      	adds	r7, #40	; 0x28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	200007f8 	.word	0x200007f8
 800d6c4:	20000041 	.word	0x20000041
 800d6c8:	0800d561 	.word	0x0800d561

0800d6cc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	4a08      	ldr	r2, [pc, #32]	; (800d6fc <hci_init+0x30>)
 800d6dc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d6de:	4a08      	ldr	r2, [pc, #32]	; (800d700 <hci_init+0x34>)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d6e4:	4806      	ldr	r0, [pc, #24]	; (800d700 <hci_init+0x34>)
 800d6e6:	f000 f973 	bl	800d9d0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 f8d4 	bl	800d89c <TlInit>

  return;
 800d6f4:	bf00      	nop
}
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	20001840 	.word	0x20001840
 800d700:	20001818 	.word	0x20001818

0800d704 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d70a:	4822      	ldr	r0, [pc, #136]	; (800d794 <hci_user_evt_proc+0x90>)
 800d70c:	f000 fd1e 	bl	800e14c <LST_is_empty>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d12b      	bne.n	800d76e <hci_user_evt_proc+0x6a>
 800d716:	4b20      	ldr	r3, [pc, #128]	; (800d798 <hci_user_evt_proc+0x94>)
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d027      	beq.n	800d76e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d71e:	f107 030c 	add.w	r3, r7, #12
 800d722:	4619      	mov	r1, r3
 800d724:	481b      	ldr	r0, [pc, #108]	; (800d794 <hci_user_evt_proc+0x90>)
 800d726:	f000 fda0 	bl	800e26a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d72a:	4b1c      	ldr	r3, [pc, #112]	; (800d79c <hci_user_evt_proc+0x98>)
 800d72c:	69db      	ldr	r3, [r3, #28]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00c      	beq.n	800d74c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d736:	2301      	movs	r3, #1
 800d738:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d73a:	4b18      	ldr	r3, [pc, #96]	; (800d79c <hci_user_evt_proc+0x98>)
 800d73c:	69db      	ldr	r3, [r3, #28]
 800d73e:	1d3a      	adds	r2, r7, #4
 800d740:	4610      	mov	r0, r2
 800d742:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d744:	793a      	ldrb	r2, [r7, #4]
 800d746:	4b14      	ldr	r3, [pc, #80]	; (800d798 <hci_user_evt_proc+0x94>)
 800d748:	701a      	strb	r2, [r3, #0]
 800d74a:	e002      	b.n	800d752 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d74c:	4b12      	ldr	r3, [pc, #72]	; (800d798 <hci_user_evt_proc+0x94>)
 800d74e:	2201      	movs	r2, #1
 800d750:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d752:	4b11      	ldr	r3, [pc, #68]	; (800d798 <hci_user_evt_proc+0x94>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d004      	beq.n	800d764 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f001 fc45 	bl	800efec <TL_MM_EvtDone>
 800d762:	e004      	b.n	800d76e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	4619      	mov	r1, r3
 800d768:	480a      	ldr	r0, [pc, #40]	; (800d794 <hci_user_evt_proc+0x90>)
 800d76a:	f000 fd11 	bl	800e190 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d76e:	4809      	ldr	r0, [pc, #36]	; (800d794 <hci_user_evt_proc+0x90>)
 800d770:	f000 fcec 	bl	800e14c <LST_is_empty>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d107      	bne.n	800d78a <hci_user_evt_proc+0x86>
 800d77a:	4b07      	ldr	r3, [pc, #28]	; (800d798 <hci_user_evt_proc+0x94>)
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d782:	4804      	ldr	r0, [pc, #16]	; (800d794 <hci_user_evt_proc+0x90>)
 800d784:	f7f6 ff78 	bl	8004678 <hci_notify_asynch_evt>
  }


  return;
 800d788:	bf00      	nop
 800d78a:	bf00      	nop
}
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	2000036c 	.word	0x2000036c
 800d798:	20000378 	.word	0x20000378
 800d79c:	20001818 	.word	0x20001818

0800d7a0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f000 f8cb 	bl	800d948 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	885b      	ldrh	r3, [r3, #2]
 800d7ba:	b21b      	sxth	r3, r3
 800d7bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7c0:	b21a      	sxth	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	881b      	ldrh	r3, [r3, #0]
 800d7c6:	029b      	lsls	r3, r3, #10
 800d7c8:	b21b      	sxth	r3, r3
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	b21b      	sxth	r3, r3
 800d7ce:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	b2d9      	uxtb	r1, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	689a      	ldr	r2, [r3, #8]
 800d7da:	8bbb      	ldrh	r3, [r7, #28]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f88d 	bl	800d8fc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d7e2:	e04e      	b.n	800d882 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d7e4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d7e8:	f7f6 ff5d 	bl	80046a6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d7ec:	e043      	b.n	800d876 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d7ee:	f107 030c 	add.w	r3, r7, #12
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4828      	ldr	r0, [pc, #160]	; (800d898 <hci_send_req+0xf8>)
 800d7f6:	f000 fd38 	bl	800e26a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	7a5b      	ldrb	r3, [r3, #9]
 800d7fe:	2b0f      	cmp	r3, #15
 800d800:	d114      	bne.n	800d82c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	330b      	adds	r3, #11
 800d806:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	885b      	ldrh	r3, [r3, #2]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	8bba      	ldrh	r2, [r7, #28]
 800d810:	429a      	cmp	r2, r3
 800d812:	d104      	bne.n	800d81e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	691b      	ldr	r3, [r3, #16]
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	7812      	ldrb	r2, [r2, #0]
 800d81c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	785b      	ldrb	r3, [r3, #1]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d027      	beq.n	800d876 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d826:	2301      	movs	r3, #1
 800d828:	77fb      	strb	r3, [r7, #31]
 800d82a:	e024      	b.n	800d876 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	330b      	adds	r3, #11
 800d830:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	8bba      	ldrh	r2, [r7, #28]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d114      	bne.n	800d86a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	7a9b      	ldrb	r3, [r3, #10]
 800d844:	3b03      	subs	r3, #3
 800d846:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	695a      	ldr	r2, [r3, #20]
 800d84c:	7dfb      	ldrb	r3, [r7, #23]
 800d84e:	429a      	cmp	r2, r3
 800d850:	bfa8      	it	ge
 800d852:	461a      	movge	r2, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6918      	ldr	r0, [r3, #16]
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	1cd9      	adds	r1, r3, #3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	695b      	ldr	r3, [r3, #20]
 800d864:	461a      	mov	r2, r3
 800d866:	f003 f82a 	bl	80108be <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d872:	2301      	movs	r3, #1
 800d874:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d876:	4808      	ldr	r0, [pc, #32]	; (800d898 <hci_send_req+0xf8>)
 800d878:	f000 fc68 	bl	800e14c <LST_is_empty>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0b5      	beq.n	800d7ee <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d882:	7ffb      	ldrb	r3, [r7, #31]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d0ad      	beq.n	800d7e4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d888:	2001      	movs	r0, #1
 800d88a:	f000 f85d 	bl	800d948 <NotifyCmdStatus>

  return 0;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3720      	adds	r7, #32
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20001838 	.word	0x20001838

0800d89c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800d8a4:	480f      	ldr	r0, [pc, #60]	; (800d8e4 <TlInit+0x48>)
 800d8a6:	f000 fc41 	bl	800e12c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800d8aa:	4a0f      	ldr	r2, [pc, #60]	; (800d8e8 <TlInit+0x4c>)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800d8b0:	480e      	ldr	r0, [pc, #56]	; (800d8ec <TlInit+0x50>)
 800d8b2:	f000 fc3b 	bl	800e12c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d8b6:	4b0e      	ldr	r3, [pc, #56]	; (800d8f0 <TlInit+0x54>)
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800d8bc:	4b0d      	ldr	r3, [pc, #52]	; (800d8f4 <TlInit+0x58>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00a      	beq.n	800d8da <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800d8c8:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <TlInit+0x5c>)
 800d8ca:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800d8cc:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <TlInit+0x58>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f107 0208 	add.w	r2, r7, #8
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	4798      	blx	r3
  }

  return;
 800d8d8:	bf00      	nop
 800d8da:	bf00      	nop
}
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20001838 	.word	0x20001838
 800d8e8:	20000374 	.word	0x20000374
 800d8ec:	2000036c 	.word	0x2000036c
 800d8f0:	20000378 	.word	0x20000378
 800d8f4:	20001818 	.word	0x20001818
 800d8f8:	0800d989 	.word	0x0800d989

0800d8fc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	603a      	str	r2, [r7, #0]
 800d906:	80fb      	strh	r3, [r7, #6]
 800d908:	460b      	mov	r3, r1
 800d90a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800d90c:	4b0c      	ldr	r3, [pc, #48]	; (800d940 <SendCmd+0x44>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	88fa      	ldrh	r2, [r7, #6]
 800d912:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800d916:	4b0a      	ldr	r3, [pc, #40]	; (800d940 <SendCmd+0x44>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	797a      	ldrb	r2, [r7, #5]
 800d91c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800d91e:	4b08      	ldr	r3, [pc, #32]	; (800d940 <SendCmd+0x44>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	330c      	adds	r3, #12
 800d924:	797a      	ldrb	r2, [r7, #5]
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	4618      	mov	r0, r3
 800d92a:	f002 ffc8 	bl	80108be <memcpy>

  hciContext.io.Send(0,0);
 800d92e:	4b05      	ldr	r3, [pc, #20]	; (800d944 <SendCmd+0x48>)
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	2100      	movs	r1, #0
 800d934:	2000      	movs	r0, #0
 800d936:	4798      	blx	r3

  return;
 800d938:	bf00      	nop
}
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20000374 	.word	0x20000374
 800d944:	20001818 	.word	0x20001818

0800d948 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	4603      	mov	r3, r0
 800d950:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d108      	bne.n	800d96a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d958:	4b0a      	ldr	r3, [pc, #40]	; (800d984 <NotifyCmdStatus+0x3c>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00d      	beq.n	800d97c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d960:	4b08      	ldr	r3, [pc, #32]	; (800d984 <NotifyCmdStatus+0x3c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2000      	movs	r0, #0
 800d966:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d968:	e008      	b.n	800d97c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d96a:	4b06      	ldr	r3, [pc, #24]	; (800d984 <NotifyCmdStatus+0x3c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d004      	beq.n	800d97c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d972:	4b04      	ldr	r3, [pc, #16]	; (800d984 <NotifyCmdStatus+0x3c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2001      	movs	r0, #1
 800d978:	4798      	blx	r3
  return;
 800d97a:	bf00      	nop
 800d97c:	bf00      	nop
}
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20001840 	.word	0x20001840

0800d988 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	7a5b      	ldrb	r3, [r3, #9]
 800d994:	2b0f      	cmp	r3, #15
 800d996:	d003      	beq.n	800d9a0 <TlEvtReceived+0x18>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	7a5b      	ldrb	r3, [r3, #9]
 800d99c:	2b0e      	cmp	r3, #14
 800d99e:	d107      	bne.n	800d9b0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800d9a0:	6879      	ldr	r1, [r7, #4]
 800d9a2:	4809      	ldr	r0, [pc, #36]	; (800d9c8 <TlEvtReceived+0x40>)
 800d9a4:	f000 fc1a 	bl	800e1dc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	f7f6 fe71 	bl	8004690 <hci_cmd_resp_release>
 800d9ae:	e006      	b.n	800d9be <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800d9b0:	6879      	ldr	r1, [r7, #4]
 800d9b2:	4806      	ldr	r0, [pc, #24]	; (800d9cc <TlEvtReceived+0x44>)
 800d9b4:	f000 fc12 	bl	800e1dc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d9b8:	4804      	ldr	r0, [pc, #16]	; (800d9cc <TlEvtReceived+0x44>)
 800d9ba:	f7f6 fe5d 	bl	8004678 <hci_notify_asynch_evt>
  }

  return;
 800d9be:	bf00      	nop
}
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20001838 	.word	0x20001838
 800d9cc:	2000036c 	.word	0x2000036c

0800d9d0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a05      	ldr	r2, [pc, #20]	; (800d9f0 <hci_register_io_bus+0x20>)
 800d9dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4a04      	ldr	r2, [pc, #16]	; (800d9f4 <hci_register_io_bus+0x24>)
 800d9e2:	611a      	str	r2, [r3, #16]

  return;
 800d9e4:	bf00      	nop
}
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	0800ed65 	.word	0x0800ed65
 800d9f4:	0800edcd 	.word	0x0800edcd

0800d9f8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	68b9      	ldr	r1, [r7, #8]
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f002 ff58 	bl	80108be <memcpy>
 800da0e:	4603      	mov	r3, r0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	68b9      	ldr	r1, [r7, #8]
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f002 fec9 	bl	80107c0 <memset>
 800da2e:	4603      	mov	r3, r0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800da42:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <OTP_Read+0x48>)
 800da44:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800da46:	e002      	b.n	800da4e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	3b08      	subs	r3, #8
 800da4c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3307      	adds	r3, #7
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	79fa      	ldrb	r2, [r7, #7]
 800da56:	429a      	cmp	r2, r3
 800da58:	d003      	beq.n	800da62 <OTP_Read+0x2a>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	4a09      	ldr	r2, [pc, #36]	; (800da84 <OTP_Read+0x4c>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d1f2      	bne.n	800da48 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	3307      	adds	r3, #7
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	79fa      	ldrb	r2, [r7, #7]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d001      	beq.n	800da72 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800da6e:	2300      	movs	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800da72:	68fb      	ldr	r3, [r7, #12]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3714      	adds	r7, #20
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	1fff73f8 	.word	0x1fff73f8
 800da84:	1fff7000 	.word	0x1fff7000

0800da88 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08a      	sub	sp, #40	; 0x28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800da90:	2300      	movs	r3, #0
 800da92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3301      	adds	r3, #1
 800da9a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2bff      	cmp	r3, #255	; 0xff
 800daa2:	d14f      	bne.n	800db44 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	3302      	adds	r3, #2
 800daa8:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	881b      	ldrh	r3, [r3, #0]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	461a      	mov	r2, r3
 800dab2:	f640 4301 	movw	r3, #3073	; 0xc01
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d140      	bne.n	800db3c <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	3302      	adds	r3, #2
 800dabe:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	885b      	ldrh	r3, [r3, #2]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	461a      	mov	r2, r3
 800dac8:	4b22      	ldr	r3, [pc, #136]	; (800db54 <PeerToPeer_Event_Handler+0xcc>)
 800daca:	889b      	ldrh	r3, [r3, #4]
 800dacc:	3302      	adds	r3, #2
 800dace:	429a      	cmp	r2, r3
 800dad0:	d118      	bne.n	800db04 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800dad2:	2301      	movs	r3, #1
 800dad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	7a1b      	ldrb	r3, [r3, #8]
 800dadc:	f003 0301 	and.w	r3, r3, #1
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d007      	beq.n	800daf4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800dae4:	2300      	movs	r3, #0
 800dae6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800dae8:	f107 0308 	add.w	r3, r7, #8
 800daec:	4618      	mov	r0, r3
 800daee:	f7f6 fe1d 	bl	800472c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800daf2:	e025      	b.n	800db40 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800daf4:	2301      	movs	r3, #1
 800daf6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800daf8:	f107 0308 	add.w	r3, r7, #8
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7f6 fe15 	bl	800472c <P2PS_STM_App_Notification>
        break;
 800db02:	e01d      	b.n	800db40 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	885b      	ldrh	r3, [r3, #2]
 800db08:	b29b      	uxth	r3, r3
 800db0a:	461a      	mov	r2, r3
 800db0c:	4b11      	ldr	r3, [pc, #68]	; (800db54 <PeerToPeer_Event_Handler+0xcc>)
 800db0e:	885b      	ldrh	r3, [r3, #2]
 800db10:	3301      	adds	r3, #1
 800db12:	429a      	cmp	r2, r3
 800db14:	d114      	bne.n	800db40 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800db16:	4810      	ldr	r0, [pc, #64]	; (800db58 <PeerToPeer_Event_Handler+0xd0>)
 800db18:	f002 fd52 	bl	80105c0 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800db1c:	2303      	movs	r3, #3
 800db1e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	88db      	ldrh	r3, [r3, #6]
 800db24:	b29b      	uxth	r3, r3
 800db26:	b2db      	uxtb	r3, r3
 800db28:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	3308      	adds	r3, #8
 800db2e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800db30:	f107 0308 	add.w	r3, r7, #8
 800db34:	4618      	mov	r0, r3
 800db36:	f7f6 fdf9 	bl	800472c <P2PS_STM_App_Notification>
        break;
 800db3a:	e001      	b.n	800db40 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800db3c:	bf00      	nop
 800db3e:	e002      	b.n	800db46 <PeerToPeer_Event_Handler+0xbe>
        break;
 800db40:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800db42:	e000      	b.n	800db46 <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800db44:	bf00      	nop
  }

  return(return_value);
 800db46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800db4a:	4618      	mov	r0, r3
 800db4c:	3728      	adds	r7, #40	; 0x28
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	2000037c 	.word	0x2000037c
 800db58:	080166d4 	.word	0x080166d4

0800db5c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b08a      	sub	sp, #40	; 0x28
 800db60:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800db62:	484a      	ldr	r0, [pc, #296]	; (800dc8c <P2PS_STM_Init+0x130>)
 800db64:	f001 f850 	bl	800ec08 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800db68:	238f      	movs	r3, #143	; 0x8f
 800db6a:	703b      	strb	r3, [r7, #0]
 800db6c:	23e5      	movs	r3, #229	; 0xe5
 800db6e:	707b      	strb	r3, [r7, #1]
 800db70:	23b3      	movs	r3, #179	; 0xb3
 800db72:	70bb      	strb	r3, [r7, #2]
 800db74:	23d5      	movs	r3, #213	; 0xd5
 800db76:	70fb      	strb	r3, [r7, #3]
 800db78:	232e      	movs	r3, #46	; 0x2e
 800db7a:	713b      	strb	r3, [r7, #4]
 800db7c:	237f      	movs	r3, #127	; 0x7f
 800db7e:	717b      	strb	r3, [r7, #5]
 800db80:	234a      	movs	r3, #74	; 0x4a
 800db82:	71bb      	strb	r3, [r7, #6]
 800db84:	2398      	movs	r3, #152	; 0x98
 800db86:	71fb      	strb	r3, [r7, #7]
 800db88:	232a      	movs	r3, #42	; 0x2a
 800db8a:	723b      	strb	r3, [r7, #8]
 800db8c:	2348      	movs	r3, #72	; 0x48
 800db8e:	727b      	strb	r3, [r7, #9]
 800db90:	237a      	movs	r3, #122	; 0x7a
 800db92:	72bb      	strb	r3, [r7, #10]
 800db94:	23cc      	movs	r3, #204	; 0xcc
 800db96:	72fb      	strb	r3, [r7, #11]
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	733b      	strb	r3, [r7, #12]
 800db9c:	23fe      	movs	r3, #254	; 0xfe
 800db9e:	737b      	strb	r3, [r7, #13]
 800dba0:	2300      	movs	r3, #0
 800dba2:	73bb      	strb	r3, [r7, #14]
 800dba4:	2300      	movs	r3, #0
 800dba6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800dba8:	4639      	mov	r1, r7
 800dbaa:	4b39      	ldr	r3, [pc, #228]	; (800dc90 <P2PS_STM_Init+0x134>)
 800dbac:	9300      	str	r3, [sp, #0]
 800dbae:	2308      	movs	r3, #8
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	2002      	movs	r0, #2
 800dbb4:	f7fe ff4e 	bl	800ca54 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800dbb8:	2319      	movs	r3, #25
 800dbba:	703b      	strb	r3, [r7, #0]
 800dbbc:	23ed      	movs	r3, #237	; 0xed
 800dbbe:	707b      	strb	r3, [r7, #1]
 800dbc0:	2382      	movs	r3, #130	; 0x82
 800dbc2:	70bb      	strb	r3, [r7, #2]
 800dbc4:	23ae      	movs	r3, #174	; 0xae
 800dbc6:	70fb      	strb	r3, [r7, #3]
 800dbc8:	23ed      	movs	r3, #237	; 0xed
 800dbca:	713b      	strb	r3, [r7, #4]
 800dbcc:	2321      	movs	r3, #33	; 0x21
 800dbce:	717b      	strb	r3, [r7, #5]
 800dbd0:	234c      	movs	r3, #76	; 0x4c
 800dbd2:	71bb      	strb	r3, [r7, #6]
 800dbd4:	239d      	movs	r3, #157	; 0x9d
 800dbd6:	71fb      	strb	r3, [r7, #7]
 800dbd8:	2341      	movs	r3, #65	; 0x41
 800dbda:	723b      	strb	r3, [r7, #8]
 800dbdc:	2345      	movs	r3, #69	; 0x45
 800dbde:	727b      	strb	r3, [r7, #9]
 800dbe0:	2322      	movs	r3, #34	; 0x22
 800dbe2:	72bb      	strb	r3, [r7, #10]
 800dbe4:	238e      	movs	r3, #142	; 0x8e
 800dbe6:	72fb      	strb	r3, [r7, #11]
 800dbe8:	2341      	movs	r3, #65	; 0x41
 800dbea:	733b      	strb	r3, [r7, #12]
 800dbec:	23fe      	movs	r3, #254	; 0xfe
 800dbee:	737b      	strb	r3, [r7, #13]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73bb      	strb	r3, [r7, #14]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800dbf8:	4b25      	ldr	r3, [pc, #148]	; (800dc90 <P2PS_STM_Init+0x134>)
 800dbfa:	8818      	ldrh	r0, [r3, #0]
 800dbfc:	463a      	mov	r2, r7
 800dbfe:	4b25      	ldr	r3, [pc, #148]	; (800dc94 <P2PS_STM_Init+0x138>)
 800dc00:	9305      	str	r3, [sp, #20]
 800dc02:	2301      	movs	r3, #1
 800dc04:	9304      	str	r3, [sp, #16]
 800dc06:	230a      	movs	r3, #10
 800dc08:	9303      	str	r3, [sp, #12]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	9302      	str	r3, [sp, #8]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	2306      	movs	r3, #6
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	2380      	movs	r3, #128	; 0x80
 800dc18:	2102      	movs	r1, #2
 800dc1a:	f7fe fff1 	bl	800cc00 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800dc1e:	2319      	movs	r3, #25
 800dc20:	703b      	strb	r3, [r7, #0]
 800dc22:	23ed      	movs	r3, #237	; 0xed
 800dc24:	707b      	strb	r3, [r7, #1]
 800dc26:	2382      	movs	r3, #130	; 0x82
 800dc28:	70bb      	strb	r3, [r7, #2]
 800dc2a:	23ae      	movs	r3, #174	; 0xae
 800dc2c:	70fb      	strb	r3, [r7, #3]
 800dc2e:	23ed      	movs	r3, #237	; 0xed
 800dc30:	713b      	strb	r3, [r7, #4]
 800dc32:	2321      	movs	r3, #33	; 0x21
 800dc34:	717b      	strb	r3, [r7, #5]
 800dc36:	234c      	movs	r3, #76	; 0x4c
 800dc38:	71bb      	strb	r3, [r7, #6]
 800dc3a:	239d      	movs	r3, #157	; 0x9d
 800dc3c:	71fb      	strb	r3, [r7, #7]
 800dc3e:	2341      	movs	r3, #65	; 0x41
 800dc40:	723b      	strb	r3, [r7, #8]
 800dc42:	2345      	movs	r3, #69	; 0x45
 800dc44:	727b      	strb	r3, [r7, #9]
 800dc46:	2322      	movs	r3, #34	; 0x22
 800dc48:	72bb      	strb	r3, [r7, #10]
 800dc4a:	238e      	movs	r3, #142	; 0x8e
 800dc4c:	72fb      	strb	r3, [r7, #11]
 800dc4e:	2342      	movs	r3, #66	; 0x42
 800dc50:	733b      	strb	r3, [r7, #12]
 800dc52:	23fe      	movs	r3, #254	; 0xfe
 800dc54:	737b      	strb	r3, [r7, #13]
 800dc56:	2300      	movs	r3, #0
 800dc58:	73bb      	strb	r3, [r7, #14]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800dc5e:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <P2PS_STM_Init+0x134>)
 800dc60:	8818      	ldrh	r0, [r3, #0]
 800dc62:	463a      	mov	r2, r7
 800dc64:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <P2PS_STM_Init+0x13c>)
 800dc66:	9305      	str	r3, [sp, #20]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	9304      	str	r3, [sp, #16]
 800dc6c:	230a      	movs	r3, #10
 800dc6e:	9303      	str	r3, [sp, #12]
 800dc70:	2301      	movs	r3, #1
 800dc72:	9302      	str	r3, [sp, #8]
 800dc74:	2300      	movs	r3, #0
 800dc76:	9301      	str	r3, [sp, #4]
 800dc78:	2310      	movs	r3, #16
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	2380      	movs	r3, #128	; 0x80
 800dc7e:	2102      	movs	r1, #2
 800dc80:	f7fe ffbe 	bl	800cc00 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800dc84:	bf00      	nop
}
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	0800da89 	.word	0x0800da89
 800dc90:	2000037c 	.word	0x2000037c
 800dc94:	2000037e 	.word	0x2000037e
 800dc98:	20000380 	.word	0x20000380

0800dc9c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af02      	add	r7, sp, #8
 800dca2:	4603      	mov	r3, r0
 800dca4:	6039      	str	r1, [r7, #0]
 800dca6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800dca8:	2392      	movs	r3, #146	; 0x92
 800dcaa:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800dcac:	88fb      	ldrh	r3, [r7, #6]
 800dcae:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d10c      	bne.n	800dcd0 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800dcb6:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <P2PS_STM_App_Update_Char+0x40>)
 800dcb8:	8818      	ldrh	r0, [r3, #0]
 800dcba:	4b08      	ldr	r3, [pc, #32]	; (800dcdc <P2PS_STM_App_Update_Char+0x40>)
 800dcbc:	8899      	ldrh	r1, [r3, #4]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	2313      	movs	r3, #19
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f7ff f8a3 	bl	800ce10 <aci_gatt_update_char_value>
 800dcca:	4603      	mov	r3, r0
 800dccc:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             19, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800dcce:	e000      	b.n	800dcd2 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 800dcd0:	bf00      	nop
  }

  return result;
 800dcd2:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	2000037c 	.word	0x2000037c

0800dce0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dce8:	f107 030c 	add.w	r3, r7, #12
 800dcec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	212c      	movs	r1, #44	; 0x2c
 800dcf8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800dcfc:	f000 f94c 	bl	800df98 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	330b      	adds	r3, #11
 800dd04:	78db      	ldrb	r3, [r3, #3]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3720      	adds	r7, #32
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b088      	sub	sp, #32
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dd16:	f107 030c 	add.w	r3, r7, #12
 800dd1a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	210f      	movs	r1, #15
 800dd26:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800dd2a:	f000 f935 	bl	800df98 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	330b      	adds	r3, #11
 800dd32:	78db      	ldrb	r3, [r3, #3]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3720      	adds	r7, #32
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b088      	sub	sp, #32
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dd44:	f107 030c 	add.w	r3, r7, #12
 800dd48:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	210e      	movs	r1, #14
 800dd50:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800dd54:	f000 f920 	bl	800df98 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	330b      	adds	r3, #11
 800dd5c:	78db      	ldrb	r3, [r3, #3]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3720      	adds	r7, #32
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b08b      	sub	sp, #44	; 0x2c
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800dd74:	2300      	movs	r3, #0
 800dd76:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800dd84:	2300      	movs	r3, #0
 800dd86:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800dd90:	4b4a      	ldr	r3, [pc, #296]	; (800debc <SHCI_GetWirelessFwInfo+0x154>)
 800dd92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dd98:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dda2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a44      	ldr	r2, [pc, #272]	; (800dec0 <SHCI_GetWirelessFwInfo+0x158>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d10f      	bne.n	800ddd4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	695b      	ldr	r3, [r3, #20]
 800ddb8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	69db      	ldr	r3, [r3, #28]
 800ddc4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	617b      	str	r3, [r7, #20]
 800ddd2:	e01a      	b.n	800de0a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dddc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800dde0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	699b      	ldr	r3, [r3, #24]
 800ddf8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	0e1b      	lsrs	r3, r3, #24
 800de0e:	b2da      	uxtb	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de16:	0c1b      	lsrs	r3, r3, #16
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	0a1b      	lsrs	r3, r3, #8
 800de22:	b2da      	uxtb	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	091b      	lsrs	r3, r3, #4
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 030f 	and.w	r3, r3, #15
 800de32:	b2da      	uxtb	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	f003 030f 	and.w	r3, r3, #15
 800de40:	b2da      	uxtb	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	0e1b      	lsrs	r3, r3, #24
 800de4a:	b2da      	uxtb	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	0c1b      	lsrs	r3, r3, #16
 800de54:	b2da      	uxtb	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	0a1b      	lsrs	r3, r3, #8
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	b2da      	uxtb	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	0e1b      	lsrs	r3, r3, #24
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	0c1b      	lsrs	r3, r3, #16
 800de82:	b2da      	uxtb	r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	0a1b      	lsrs	r3, r3, #8
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	0e1b      	lsrs	r3, r3, #24
 800de96:	b2da      	uxtb	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	0c1b      	lsrs	r3, r3, #16
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	372c      	adds	r7, #44	; 0x2c
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	58004000 	.word	0x58004000
 800dec0:	a94656b9 	.word	0xa94656b9

0800dec4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	4a08      	ldr	r2, [pc, #32]	; (800def4 <shci_init+0x30>)
 800ded4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800ded6:	4a08      	ldr	r2, [pc, #32]	; (800def8 <shci_init+0x34>)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800dedc:	4806      	ldr	r0, [pc, #24]	; (800def8 <shci_init+0x34>)
 800dede:	f000 f911 	bl	800e104 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 f894 	bl	800e014 <TlInit>

  return;
 800deec:	bf00      	nop
}
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	20001864 	.word	0x20001864
 800def8:	20001844 	.word	0x20001844

0800defc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800df02:	4822      	ldr	r0, [pc, #136]	; (800df8c <shci_user_evt_proc+0x90>)
 800df04:	f000 f922 	bl	800e14c <LST_is_empty>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d12b      	bne.n	800df66 <shci_user_evt_proc+0x6a>
 800df0e:	4b20      	ldr	r3, [pc, #128]	; (800df90 <shci_user_evt_proc+0x94>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d027      	beq.n	800df66 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800df16:	f107 030c 	add.w	r3, r7, #12
 800df1a:	4619      	mov	r1, r3
 800df1c:	481b      	ldr	r0, [pc, #108]	; (800df8c <shci_user_evt_proc+0x90>)
 800df1e:	f000 f9a4 	bl	800e26a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800df22:	4b1c      	ldr	r3, [pc, #112]	; (800df94 <shci_user_evt_proc+0x98>)
 800df24:	69db      	ldr	r3, [r3, #28]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00c      	beq.n	800df44 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800df2e:	2301      	movs	r3, #1
 800df30:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800df32:	4b18      	ldr	r3, [pc, #96]	; (800df94 <shci_user_evt_proc+0x98>)
 800df34:	69db      	ldr	r3, [r3, #28]
 800df36:	1d3a      	adds	r2, r7, #4
 800df38:	4610      	mov	r0, r2
 800df3a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800df3c:	793a      	ldrb	r2, [r7, #4]
 800df3e:	4b14      	ldr	r3, [pc, #80]	; (800df90 <shci_user_evt_proc+0x94>)
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	e002      	b.n	800df4a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800df44:	4b12      	ldr	r3, [pc, #72]	; (800df90 <shci_user_evt_proc+0x94>)
 800df46:	2201      	movs	r2, #1
 800df48:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800df4a:	4b11      	ldr	r3, [pc, #68]	; (800df90 <shci_user_evt_proc+0x94>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d004      	beq.n	800df5c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	4618      	mov	r0, r3
 800df56:	f001 f849 	bl	800efec <TL_MM_EvtDone>
 800df5a:	e004      	b.n	800df66 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4619      	mov	r1, r3
 800df60:	480a      	ldr	r0, [pc, #40]	; (800df8c <shci_user_evt_proc+0x90>)
 800df62:	f000 f915 	bl	800e190 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800df66:	4809      	ldr	r0, [pc, #36]	; (800df8c <shci_user_evt_proc+0x90>)
 800df68:	f000 f8f0 	bl	800e14c <LST_is_empty>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d107      	bne.n	800df82 <shci_user_evt_proc+0x86>
 800df72:	4b07      	ldr	r3, [pc, #28]	; (800df90 <shci_user_evt_proc+0x94>)
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d003      	beq.n	800df82 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800df7a:	4804      	ldr	r0, [pc, #16]	; (800df8c <shci_user_evt_proc+0x90>)
 800df7c:	f7f3 fd9a 	bl	8001ab4 <shci_notify_asynch_evt>
  }


  return;
 800df80:	bf00      	nop
 800df82:	bf00      	nop
}
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20000390 	.word	0x20000390
 800df90:	200003a0 	.word	0x200003a0
 800df94:	20001844 	.word	0x20001844

0800df98 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60ba      	str	r2, [r7, #8]
 800dfa0:	607b      	str	r3, [r7, #4]
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	81fb      	strh	r3, [r7, #14]
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800dfaa:	2000      	movs	r0, #0
 800dfac:	f000 f864 	bl	800e078 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800dfb0:	4b16      	ldr	r3, [pc, #88]	; (800e00c <shci_send+0x74>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	89fa      	ldrh	r2, [r7, #14]
 800dfb6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800dfba:	4b14      	ldr	r3, [pc, #80]	; (800e00c <shci_send+0x74>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	7b7a      	ldrb	r2, [r7, #13]
 800dfc0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800dfc2:	4b12      	ldr	r3, [pc, #72]	; (800e00c <shci_send+0x74>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	330c      	adds	r3, #12
 800dfc8:	7b7a      	ldrb	r2, [r7, #13]
 800dfca:	68b9      	ldr	r1, [r7, #8]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f002 fc76 	bl	80108be <memcpy>

  shciContext.io.Send(0,0);
 800dfd2:	4b0f      	ldr	r3, [pc, #60]	; (800e010 <shci_send+0x78>)
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	2000      	movs	r0, #0
 800dfda:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800dfdc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800dfe0:	f7f3 fd7f 	bl	8001ae2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f103 0008 	add.w	r0, r3, #8
 800dfea:	4b08      	ldr	r3, [pc, #32]	; (800e00c <shci_send+0x74>)
 800dfec:	6819      	ldr	r1, [r3, #0]
 800dfee:	4b07      	ldr	r3, [pc, #28]	; (800e00c <shci_send+0x74>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	789b      	ldrb	r3, [r3, #2]
 800dff4:	3303      	adds	r3, #3
 800dff6:	461a      	mov	r2, r3
 800dff8:	f002 fc61 	bl	80108be <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800dffc:	2001      	movs	r0, #1
 800dffe:	f000 f83b 	bl	800e078 <Cmd_SetStatus>

  return;
 800e002:	bf00      	nop
}
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	2000039c 	.word	0x2000039c
 800e010:	20001844 	.word	0x20001844

0800e014 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b086      	sub	sp, #24
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e01c:	4a10      	ldr	r2, [pc, #64]	; (800e060 <TlInit+0x4c>)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e022:	4810      	ldr	r0, [pc, #64]	; (800e064 <TlInit+0x50>)
 800e024:	f000 f882 	bl	800e12c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e028:	2001      	movs	r0, #1
 800e02a:	f000 f825 	bl	800e078 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e02e:	4b0e      	ldr	r3, [pc, #56]	; (800e068 <TlInit+0x54>)
 800e030:	2201      	movs	r2, #1
 800e032:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e034:	4b0d      	ldr	r3, [pc, #52]	; (800e06c <TlInit+0x58>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00c      	beq.n	800e056 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <TlInit+0x5c>)
 800e042:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e044:	4b0b      	ldr	r3, [pc, #44]	; (800e074 <TlInit+0x60>)
 800e046:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e048:	4b08      	ldr	r3, [pc, #32]	; (800e06c <TlInit+0x58>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f107 020c 	add.w	r2, r7, #12
 800e050:	4610      	mov	r0, r2
 800e052:	4798      	blx	r3
  }

  return;
 800e054:	bf00      	nop
 800e056:	bf00      	nop
}
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	2000039c 	.word	0x2000039c
 800e064:	20000390 	.word	0x20000390
 800e068:	200003a0 	.word	0x200003a0
 800e06c:	20001844 	.word	0x20001844
 800e070:	0800e0c9 	.word	0x0800e0c9
 800e074:	0800e0e1 	.word	0x0800e0e1

0800e078 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e082:	79fb      	ldrb	r3, [r7, #7]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10b      	bne.n	800e0a0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e088:	4b0d      	ldr	r3, [pc, #52]	; (800e0c0 <Cmd_SetStatus+0x48>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d003      	beq.n	800e098 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e090:	4b0b      	ldr	r3, [pc, #44]	; (800e0c0 <Cmd_SetStatus+0x48>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2000      	movs	r0, #0
 800e096:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e098:	4b0a      	ldr	r3, [pc, #40]	; (800e0c4 <Cmd_SetStatus+0x4c>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e09e:	e00b      	b.n	800e0b8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e0a0:	4b08      	ldr	r3, [pc, #32]	; (800e0c4 <Cmd_SetStatus+0x4c>)
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e0a6:	4b06      	ldr	r3, [pc, #24]	; (800e0c0 <Cmd_SetStatus+0x48>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d004      	beq.n	800e0b8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e0ae:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <Cmd_SetStatus+0x48>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	4798      	blx	r3
  return;
 800e0b6:	bf00      	nop
 800e0b8:	bf00      	nop
}
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	20001864 	.word	0x20001864
 800e0c4:	20000398 	.word	0x20000398

0800e0c8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	f7f3 fcfb 	bl	8001acc <shci_cmd_resp_release>

  return;
 800e0d6:	bf00      	nop
}
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e0e8:	6879      	ldr	r1, [r7, #4]
 800e0ea:	4805      	ldr	r0, [pc, #20]	; (800e100 <TlUserEvtReceived+0x20>)
 800e0ec:	f000 f876 	bl	800e1dc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e0f0:	4803      	ldr	r0, [pc, #12]	; (800e100 <TlUserEvtReceived+0x20>)
 800e0f2:	f7f3 fcdf 	bl	8001ab4 <shci_notify_asynch_evt>

  return;
 800e0f6:	bf00      	nop
}
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	20000390 	.word	0x20000390

0800e104 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a05      	ldr	r2, [pc, #20]	; (800e124 <shci_register_io_bus+0x20>)
 800e110:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4a04      	ldr	r2, [pc, #16]	; (800e128 <shci_register_io_bus+0x24>)
 800e116:	611a      	str	r2, [r3, #16]

  return;
 800e118:	bf00      	nop
}
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	0800ee79 	.word	0x0800ee79
 800e128:	0800eecd 	.word	0x0800eecd

0800e12c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	605a      	str	r2, [r3, #4]
}
 800e140:	bf00      	nop
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b087      	sub	sp, #28
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e154:	f3ef 8310 	mrs	r3, PRIMASK
 800e158:	60fb      	str	r3, [r7, #12]
  return(result);
 800e15a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e15c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e15e:	b672      	cpsid	i
}
 800e160:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d102      	bne.n	800e172 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	75fb      	strb	r3, [r7, #23]
 800e170:	e001      	b.n	800e176 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800e172:	2300      	movs	r3, #0
 800e174:	75fb      	strb	r3, [r7, #23]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	f383 8810 	msr	PRIMASK, r3
}
 800e180:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e182:	7dfb      	ldrb	r3, [r7, #23]
}
 800e184:	4618      	mov	r0, r3
 800e186:	371c      	adds	r7, #28
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e190:	b480      	push	{r7}
 800e192:	b087      	sub	sp, #28
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e19a:	f3ef 8310 	mrs	r3, PRIMASK
 800e19e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e1a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e1a4:	b672      	cpsid	i
}
 800e1a6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	605a      	str	r2, [r3, #4]
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	f383 8810 	msr	PRIMASK, r3
}
 800e1ce:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e1d0:	bf00      	nop
 800e1d2:	371c      	adds	r7, #28
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b087      	sub	sp, #28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e1ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e1ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e1f0:	b672      	cpsid	i
}
 800e1f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	f383 8810 	msr	PRIMASK, r3
}
 800e21a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e21c:	bf00      	nop
 800e21e:	371c      	adds	r7, #28
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e228:	b480      	push	{r7}
 800e22a:	b087      	sub	sp, #28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e230:	f3ef 8310 	mrs	r3, PRIMASK
 800e234:	60fb      	str	r3, [r7, #12]
  return(result);
 800e236:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e23a:	b672      	cpsid	i
}
 800e23c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	6812      	ldr	r2, [r2, #0]
 800e246:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	6852      	ldr	r2, [r2, #4]
 800e250:	605a      	str	r2, [r3, #4]
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	f383 8810 	msr	PRIMASK, r3
}
 800e25c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e25e:	bf00      	nop
 800e260:	371c      	adds	r7, #28
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr

0800e26a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b086      	sub	sp, #24
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e274:	f3ef 8310 	mrs	r3, PRIMASK
 800e278:	60fb      	str	r3, [r7, #12]
  return(result);
 800e27a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e27c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e27e:	b672      	cpsid	i
}
 800e280:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff ffca 	bl	800e228 <LST_remove_node>
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	f383 8810 	msr	PRIMASK, r3
}
 800e29e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e2a0:	bf00      	nop
 800e2a2:	3718      	adds	r7, #24
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
 800e2b4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	887a      	ldrh	r2, [r7, #2]
 800e2de:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	7e3a      	ldrb	r2, [r7, #24]
 800e2e4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800e2e6:	7e3b      	ldrb	r3, [r7, #24]
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d006      	beq.n	800e2fe <CircularQueue_Init+0x56>
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	891b      	ldrh	r3, [r3, #8]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d002      	beq.n	800e2fe <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800e2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2fc:	e000      	b.n	800e300 <CircularQueue_Init+0x58>
  }
  return 0;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3714      	adds	r7, #20
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b08e      	sub	sp, #56	; 0x38
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	603b      	str	r3, [r7, #0]
 800e318:	4613      	mov	r3, r2
 800e31a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800e31c:	2300      	movs	r3, #0
 800e31e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800e320:	2300      	movs	r3, #0
 800e322:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800e324:	2300      	movs	r3, #0
 800e326:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800e328:	2300      	movs	r3, #0
 800e32a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e32c:	2300      	movs	r3, #0
 800e32e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800e330:	2300      	movs	r3, #0
 800e332:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800e334:	2300      	movs	r3, #0
 800e336:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	891b      	ldrh	r3, [r3, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <CircularQueue_Add+0x38>
 800e340:	2302      	movs	r3, #2
 800e342:	e000      	b.n	800e346 <CircularQueue_Add+0x3a>
 800e344:	2300      	movs	r3, #0
 800e346:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d02a      	beq.n	800e3a6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	891b      	ldrh	r3, [r3, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d123      	bne.n	800e3a0 <CircularQueue_Add+0x94>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	4413      	add	r3, r2
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	b29a      	uxth	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6819      	ldr	r1, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	1c58      	adds	r0, r3, #1
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	4298      	cmp	r0, r3
 800e376:	d306      	bcc.n	800e386 <CircularQueue_Add+0x7a>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6918      	ldr	r0, [r3, #16]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	1ac3      	subs	r3, r0, r3
 800e382:	3301      	adds	r3, #1
 800e384:	e002      	b.n	800e38c <CircularQueue_Add+0x80>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	3301      	adds	r3, #1
 800e38c:	440b      	add	r3, r1
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	b29b      	uxth	r3, r3
 800e392:	021b      	lsls	r3, r3, #8
 800e394:	b29b      	uxth	r3, r3
 800e396:	4413      	add	r3, r2
 800e398:	b29b      	uxth	r3, r3
 800e39a:	3302      	adds	r3, #2
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	e001      	b.n	800e3a4 <CircularQueue_Add+0x98>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	891b      	ldrh	r3, [r3, #8]
 800e3a4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	891b      	ldrh	r3, [r3, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d002      	beq.n	800e3b4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	891b      	ldrh	r3, [r3, #8]
 800e3b2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	691a      	ldr	r2, [r3, #16]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d307      	bcc.n	800e3d0 <CircularQueue_Add+0xc4>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	685a      	ldr	r2, [r3, #4]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	6919      	ldr	r1, [r3, #16]
 800e3c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e3ca:	440b      	add	r3, r1
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	e000      	b.n	800e3d2 <CircularQueue_Add+0xc6>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800e3d4:	88fa      	ldrh	r2, [r7, #6]
 800e3d6:	7ffb      	ldrb	r3, [r7, #31]
 800e3d8:	4413      	add	r3, r2
 800e3da:	461a      	mov	r2, r3
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	fb02 f303 	mul.w	r3, r2, r3
 800e3e2:	69ba      	ldr	r2, [r7, #24]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d80b      	bhi.n	800e400 <CircularQueue_Add+0xf4>
 800e3e8:	88fa      	ldrh	r2, [r7, #6]
 800e3ea:	7ffb      	ldrb	r3, [r7, #31]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3f6:	fb01 f202 	mul.w	r2, r1, r2
 800e3fa:	1a9b      	subs	r3, r3, r2
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	e000      	b.n	800e402 <CircularQueue_Add+0xf6>
 800e400:	2300      	movs	r3, #0
 800e402:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800e404:	7dfa      	ldrb	r2, [r7, #23]
 800e406:	7ffb      	ldrb	r3, [r7, #31]
 800e408:	429a      	cmp	r2, r3
 800e40a:	bf8c      	ite	hi
 800e40c:	2301      	movhi	r3, #1
 800e40e:	2300      	movls	r3, #0
 800e410:	b2db      	uxtb	r3, r3
 800e412:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800e414:	7fbb      	ldrb	r3, [r7, #30]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d008      	beq.n	800e42c <CircularQueue_Add+0x120>
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	7f1b      	ldrb	r3, [r3, #28]
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <CircularQueue_Add+0x120>
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	e000      	b.n	800e42e <CircularQueue_Add+0x122>
 800e42c:	8bbb      	ldrh	r3, [r7, #28]
 800e42e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800e430:	7fbb      	ldrb	r3, [r7, #30]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d008      	beq.n	800e448 <CircularQueue_Add+0x13c>
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	7f1b      	ldrb	r3, [r3, #28]
 800e43a:	f003 0302 	and.w	r3, r3, #2
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d002      	beq.n	800e448 <CircularQueue_Add+0x13c>
 800e442:	7ffb      	ldrb	r3, [r7, #31]
 800e444:	b29b      	uxth	r3, r3
 800e446:	e000      	b.n	800e44a <CircularQueue_Add+0x13e>
 800e448:	8bbb      	ldrh	r3, [r7, #28]
 800e44a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800e44c:	88fb      	ldrh	r3, [r7, #6]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 817e 	beq.w	800e750 <CircularQueue_Add+0x444>
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	695a      	ldr	r2, [r3, #20]
 800e458:	88f9      	ldrh	r1, [r7, #6]
 800e45a:	7ffb      	ldrb	r3, [r7, #31]
 800e45c:	440b      	add	r3, r1
 800e45e:	4619      	mov	r1, r3
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	fb01 f303 	mul.w	r3, r1, r3
 800e466:	441a      	add	r2, r3
 800e468:	8bbb      	ldrh	r3, [r7, #28]
 800e46a:	441a      	add	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	f200 816d 	bhi.w	800e750 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800e476:	2300      	movs	r3, #0
 800e478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e47a:	e14a      	b.n	800e712 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	691a      	ldr	r2, [r3, #16]
 800e480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e482:	441a      	add	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d307      	bcc.n	800e49c <CircularQueue_Add+0x190>
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	691a      	ldr	r2, [r3, #16]
 800e490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e492:	441a      	add	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	e003      	b.n	800e4a4 <CircularQueue_Add+0x198>
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	691a      	ldr	r2, [r3, #16]
 800e4a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e4a2:	4413      	add	r3, r2
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	891b      	ldrh	r3, [r3, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d130      	bne.n	800e518 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4bc:	1c59      	adds	r1, r3, #1
 800e4be:	6339      	str	r1, [r7, #48]	; 0x30
 800e4c0:	4413      	add	r3, r2
 800e4c2:	88fa      	ldrh	r2, [r7, #6]
 800e4c4:	b2d2      	uxtb	r2, r2
 800e4c6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d304      	bcc.n	800e4dc <CircularQueue_Add+0x1d0>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	e000      	b.n	800e4de <CircularQueue_Add+0x1d2>
 800e4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4de:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800e4e0:	88fb      	ldrh	r3, [r7, #6]
 800e4e2:	0a1b      	lsrs	r3, r3, #8
 800e4e4:	b298      	uxth	r0, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ec:	1c59      	adds	r1, r3, #1
 800e4ee:	6339      	str	r1, [r7, #48]	; 0x30
 800e4f0:	4413      	add	r3, r2
 800e4f2:	b2c2      	uxtb	r2, r0
 800e4f4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d304      	bcc.n	800e50a <CircularQueue_Add+0x1fe>
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e506:	1ad3      	subs	r3, r2, r3
 800e508:	e000      	b.n	800e50c <CircularQueue_Add+0x200>
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	1c9a      	adds	r2, r3, #2
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800e518:	88fa      	ldrh	r2, [r7, #6]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	6859      	ldr	r1, [r3, #4]
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	1acb      	subs	r3, r1, r3
 800e522:	4293      	cmp	r3, r2
 800e524:	bf28      	it	cs
 800e526:	4613      	movcs	r3, r2
 800e528:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800e52a:	88fb      	ldrh	r3, [r7, #6]
 800e52c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e52e:	429a      	cmp	r2, r3
 800e530:	d007      	beq.n	800e542 <CircularQueue_Add+0x236>
 800e532:	88fb      	ldrh	r3, [r7, #6]
 800e534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e536:	429a      	cmp	r2, r3
 800e538:	d225      	bcs.n	800e586 <CircularQueue_Add+0x27a>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	7f1b      	ldrb	r3, [r3, #28]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d121      	bne.n	800e586 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e548:	18d0      	adds	r0, r2, r3
 800e54a:	88fb      	ldrh	r3, [r7, #6]
 800e54c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e54e:	fb02 f303 	mul.w	r3, r2, r3
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	4413      	add	r3, r2
 800e556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e558:	4619      	mov	r1, r3
 800e55a:	f002 f9b0 	bl	80108be <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	695a      	ldr	r2, [r3, #20]
 800e562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e564:	441a      	add	r2, r3
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800e56a:	2300      	movs	r3, #0
 800e56c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800e572:	88fa      	ldrh	r2, [r7, #6]
 800e574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800e57a:	7ffb      	ldrb	r3, [r7, #31]
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	88fb      	ldrh	r3, [r7, #6]
 800e580:	4413      	add	r3, r2
 800e582:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e584:	e0a4      	b.n	800e6d0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f000 80a1 	beq.w	800e6d0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	7f1b      	ldrb	r3, [r3, #28]
 800e592:	f003 0301 	and.w	r3, r3, #1
 800e596:	2b00      	cmp	r3, #0
 800e598:	d03a      	beq.n	800e610 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	891b      	ldrh	r3, [r3, #8]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10d      	bne.n	800e5be <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a8:	3b02      	subs	r3, #2
 800e5aa:	4413      	add	r3, r2
 800e5ac:	22ff      	movs	r2, #255	; 0xff
 800e5ae:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	4413      	add	r3, r2
 800e5ba:	22ff      	movs	r2, #255	; 0xff
 800e5bc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	695a      	ldr	r2, [r3, #20]
 800e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c4:	441a      	add	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800e5ce:	88fb      	ldrh	r3, [r7, #6]
 800e5d0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	891b      	ldrh	r3, [r3, #8]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d16f      	bne.n	800e6be <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	1c59      	adds	r1, r3, #1
 800e5e6:	6339      	str	r1, [r7, #48]	; 0x30
 800e5e8:	4413      	add	r3, r2
 800e5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5ec:	b2d2      	uxtb	r2, r2
 800e5ee:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	0a18      	lsrs	r0, r3, #8
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fa:	1c59      	adds	r1, r3, #1
 800e5fc:	6339      	str	r1, [r7, #48]	; 0x30
 800e5fe:	4413      	add	r3, r2
 800e600:	b2c2      	uxtb	r2, r0
 800e602:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	1c9a      	adds	r2, r3, #2
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	615a      	str	r2, [r3, #20]
 800e60e:	e056      	b.n	800e6be <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	7f1b      	ldrb	r3, [r3, #28]
 800e614:	f003 0302 	and.w	r3, r3, #2
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d050      	beq.n	800e6be <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	891b      	ldrh	r3, [r3, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d14a      	bne.n	800e6ba <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	3b02      	subs	r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e630:	b2d2      	uxtb	r2, r2
 800e632:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e636:	0a19      	lsrs	r1, r3, #8
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63e:	3b01      	subs	r3, #1
 800e640:	4413      	add	r3, r2
 800e642:	b2ca      	uxtb	r2, r1
 800e644:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64c:	18d0      	adds	r0, r2, r3
 800e64e:	88fb      	ldrh	r3, [r7, #6]
 800e650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e652:	fb02 f303 	mul.w	r3, r2, r3
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	4413      	add	r3, r2
 800e65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e65c:	4619      	mov	r1, r3
 800e65e:	f002 f92e 	bl	80108be <memcpy>
             q->byteCount += NbBytesToCopy; 
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	695a      	ldr	r2, [r3, #20]
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	441a      	add	r2, r3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e670:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800e672:	88fa      	ldrh	r2, [r7, #6]
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800e684:	2300      	movs	r3, #0
 800e686:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68e:	1c59      	adds	r1, r3, #1
 800e690:	6339      	str	r1, [r7, #48]	; 0x30
 800e692:	4413      	add	r3, r2
 800e694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e696:	b2d2      	uxtb	r2, r2
 800e698:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	0a18      	lsrs	r0, r3, #8
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a4:	1c59      	adds	r1, r3, #1
 800e6a6:	6339      	str	r1, [r7, #48]	; 0x30
 800e6a8:	4413      	add	r3, r2
 800e6aa:	b2c2      	uxtb	r2, r0
 800e6ac:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	1c9a      	adds	r2, r3, #2
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	615a      	str	r2, [r3, #20]
 800e6b8:	e001      	b.n	800e6be <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e049      	b.n	800e752 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800e6be:	7ffb      	ldrb	r3, [r7, #31]
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	4413      	add	r3, r2
 800e6c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d015      	beq.n	800e702 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6dc:	18d0      	adds	r0, r2, r3
 800e6de:	88fb      	ldrh	r3, [r7, #6]
 800e6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e2:	fb03 f202 	mul.w	r2, r3, r2
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e8:	4413      	add	r3, r2
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	f002 f8e4 	bl	80108be <memcpy>
        q->byteCount += NbBytesToCopy;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	695a      	ldr	r2, [r3, #20]
 800e6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fc:	441a      	add	r2, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	699b      	ldr	r3, [r3, #24]
 800e706:	1c5a      	adds	r2, r3, #1
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	3301      	adds	r3, #1
 800e710:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	429a      	cmp	r2, r3
 800e718:	f4ff aeb0 	bcc.w	800e47c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6919      	ldr	r1, [r3, #16]
 800e724:	7ffb      	ldrb	r3, [r7, #31]
 800e726:	4419      	add	r1, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	4299      	cmp	r1, r3
 800e72e:	d307      	bcc.n	800e740 <CircularQueue_Add+0x434>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6919      	ldr	r1, [r3, #16]
 800e734:	7ffb      	ldrb	r3, [r7, #31]
 800e736:	4419      	add	r1, r3
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	1acb      	subs	r3, r1, r3
 800e73e:	e003      	b.n	800e748 <CircularQueue_Add+0x43c>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6919      	ldr	r1, [r3, #16]
 800e744:	7ffb      	ldrb	r3, [r7, #31]
 800e746:	440b      	add	r3, r1
 800e748:	4413      	add	r3, r2
 800e74a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	e000      	b.n	800e752 <CircularQueue_Add+0x446>
    return NULL;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3738      	adds	r7, #56	; 0x38
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b085      	sub	sp, #20
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800e764:	2300      	movs	r3, #0
 800e766:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800e768:	2300      	movs	r3, #0
 800e76a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	891b      	ldrh	r3, [r3, #8]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d101      	bne.n	800e778 <CircularQueue_Remove+0x1e>
 800e774:	2302      	movs	r3, #2
 800e776:	e000      	b.n	800e77a <CircularQueue_Remove+0x20>
 800e778:	2300      	movs	r3, #0
 800e77a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	695b      	ldr	r3, [r3, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	f000 80cc 	beq.w	800e922 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	891b      	ldrh	r3, [r3, #8]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d121      	bne.n	800e7d6 <CircularQueue_Remove+0x7c>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	4413      	add	r3, r2
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6819      	ldr	r1, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	1c58      	adds	r0, r3, #1
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	4298      	cmp	r0, r3
 800e7b0:	d306      	bcc.n	800e7c0 <CircularQueue_Remove+0x66>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	68d8      	ldr	r0, [r3, #12]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	1ac3      	subs	r3, r0, r3
 800e7bc:	3301      	adds	r3, #1
 800e7be:	e002      	b.n	800e7c6 <CircularQueue_Remove+0x6c>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	440b      	add	r3, r1
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	021b      	lsls	r3, r3, #8
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	4413      	add	r3, r2
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	e001      	b.n	800e7da <CircularQueue_Remove+0x80>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	891b      	ldrh	r3, [r3, #8]
 800e7da:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	7f1b      	ldrb	r3, [r3, #28]
 800e7e0:	f003 0301 	and.w	r3, r3, #1
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d057      	beq.n	800e898 <CircularQueue_Remove+0x13e>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	7f1b      	ldrb	r3, [r3, #28]
 800e7ec:	f003 0302 	and.w	r3, r3, #2
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d151      	bne.n	800e898 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800e7f4:	897b      	ldrh	r3, [r7, #10]
 800e7f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d103      	bne.n	800e806 <CircularQueue_Remove+0xac>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	891b      	ldrh	r3, [r3, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d012      	beq.n	800e82c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68da      	ldr	r2, [r3, #12]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800e80e:	429a      	cmp	r2, r3
 800e810:	d942      	bls.n	800e898 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	891b      	ldrh	r3, [r3, #8]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d03e      	beq.n	800e898 <CircularQueue_Remove+0x13e>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	685a      	ldr	r2, [r3, #4]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	1ad3      	subs	r3, r2, r3
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	8912      	ldrh	r2, [r2, #8]
 800e828:	4293      	cmp	r3, r2
 800e82a:	d235      	bcs.n	800e898 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	695a      	ldr	r2, [r3, #20]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	68d9      	ldr	r1, [r3, #12]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	1acb      	subs	r3, r1, r3
 800e83a:	441a      	add	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	891b      	ldrh	r3, [r3, #8]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d121      	bne.n	800e892 <CircularQueue_Remove+0x138>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	4413      	add	r3, r2
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	b29a      	uxth	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6819      	ldr	r1, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	1c58      	adds	r0, r3, #1
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	4298      	cmp	r0, r3
 800e86c:	d306      	bcc.n	800e87c <CircularQueue_Remove+0x122>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	68d8      	ldr	r0, [r3, #12]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	1ac3      	subs	r3, r0, r3
 800e878:	3301      	adds	r3, #1
 800e87a:	e002      	b.n	800e882 <CircularQueue_Remove+0x128>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	3301      	adds	r3, #1
 800e882:	440b      	add	r3, r1
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	b29b      	uxth	r3, r3
 800e888:	021b      	lsls	r3, r3, #8
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	4413      	add	r3, r2
 800e88e:	b29b      	uxth	r3, r3
 800e890:	e001      	b.n	800e896 <CircularQueue_Remove+0x13c>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	891b      	ldrh	r3, [r3, #8]
 800e896:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68d9      	ldr	r1, [r3, #12]
 800e8a0:	7a7b      	ldrb	r3, [r7, #9]
 800e8a2:	4419      	add	r1, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4299      	cmp	r1, r3
 800e8aa:	d307      	bcc.n	800e8bc <CircularQueue_Remove+0x162>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68d9      	ldr	r1, [r3, #12]
 800e8b0:	7a7b      	ldrb	r3, [r7, #9]
 800e8b2:	4419      	add	r1, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	1acb      	subs	r3, r1, r3
 800e8ba:	e003      	b.n	800e8c4 <CircularQueue_Remove+0x16a>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	68d9      	ldr	r1, [r3, #12]
 800e8c0:	7a7b      	ldrb	r3, [r7, #9]
 800e8c2:	440b      	add	r3, r1
 800e8c4:	4413      	add	r3, r2
 800e8c6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	695b      	ldr	r3, [r3, #20]
 800e8cc:	8979      	ldrh	r1, [r7, #10]
 800e8ce:	7a7a      	ldrb	r2, [r7, #9]
 800e8d0:	440a      	add	r2, r1
 800e8d2:	1a9a      	subs	r2, r3, r2
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	695b      	ldr	r3, [r3, #20]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d01b      	beq.n	800e918 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	897b      	ldrh	r3, [r7, #10]
 800e8e6:	441a      	add	r2, r3
 800e8e8:	7a7b      	ldrb	r3, [r7, #9]
 800e8ea:	441a      	add	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d309      	bcc.n	800e908 <CircularQueue_Remove+0x1ae>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68da      	ldr	r2, [r3, #12]
 800e8f8:	897b      	ldrh	r3, [r7, #10]
 800e8fa:	441a      	add	r2, r3
 800e8fc:	7a7b      	ldrb	r3, [r7, #9]
 800e8fe:	441a      	add	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	e005      	b.n	800e914 <CircularQueue_Remove+0x1ba>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68da      	ldr	r2, [r3, #12]
 800e90c:	897b      	ldrh	r3, [r7, #10]
 800e90e:	441a      	add	r2, r3
 800e910:	7a7b      	ldrb	r3, [r7, #9]
 800e912:	4413      	add	r3, r2
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	699b      	ldr	r3, [r3, #24]
 800e91c:	1e5a      	subs	r2, r3, #1
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	897a      	ldrh	r2, [r7, #10]
 800e92c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800e92e:	68fb      	ldr	r3, [r7, #12]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3714      	adds	r7, #20
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b087      	sub	sp, #28
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800e94a:	2300      	movs	r3, #0
 800e94c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	891b      	ldrh	r3, [r3, #8]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <CircularQueue_Sense+0x1e>
 800e956:	2302      	movs	r3, #2
 800e958:	e000      	b.n	800e95c <CircularQueue_Sense+0x20>
 800e95a:	2300      	movs	r3, #0
 800e95c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800e95e:	2300      	movs	r3, #0
 800e960:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800e962:	2300      	movs	r3, #0
 800e964:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	695b      	ldr	r3, [r3, #20]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f000 8090 	beq.w	800ea90 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	891b      	ldrh	r3, [r3, #8]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d121      	bne.n	800e9c2 <CircularQueue_Sense+0x86>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	4413      	add	r3, r2
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	b29a      	uxth	r2, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6819      	ldr	r1, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	1c58      	adds	r0, r3, #1
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	4298      	cmp	r0, r3
 800e99c:	d306      	bcc.n	800e9ac <CircularQueue_Sense+0x70>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	68d8      	ldr	r0, [r3, #12]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	1ac3      	subs	r3, r0, r3
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	e002      	b.n	800e9b2 <CircularQueue_Sense+0x76>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	440b      	add	r3, r1
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	021b      	lsls	r3, r3, #8
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	4413      	add	r3, r2
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	e001      	b.n	800e9c6 <CircularQueue_Sense+0x8a>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	891b      	ldrh	r3, [r3, #8]
 800e9c6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	7f1b      	ldrb	r3, [r3, #28]
 800e9cc:	f003 0301 	and.w	r3, r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d048      	beq.n	800ea66 <CircularQueue_Sense+0x12a>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	7f1b      	ldrb	r3, [r3, #28]
 800e9d8:	f003 0302 	and.w	r3, r3, #2
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d142      	bne.n	800ea66 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800e9e0:	8a7b      	ldrh	r3, [r7, #18]
 800e9e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d103      	bne.n	800e9f2 <CircularQueue_Sense+0xb6>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	891b      	ldrh	r3, [r3, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d012      	beq.n	800ea18 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68da      	ldr	r2, [r3, #12]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d933      	bls.n	800ea66 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	891b      	ldrh	r3, [r3, #8]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d02f      	beq.n	800ea66 <CircularQueue_Sense+0x12a>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	685a      	ldr	r2, [r3, #4]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	1ad3      	subs	r3, r2, r3
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	8912      	ldrh	r2, [r2, #8]
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d226      	bcs.n	800ea66 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	891b      	ldrh	r3, [r3, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d11d      	bne.n	800ea60 <CircularQueue_Sense+0x124>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6819      	ldr	r1, [r3, #0]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	1c58      	adds	r0, r3, #1
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	4298      	cmp	r0, r3
 800ea3e:	d305      	bcc.n	800ea4c <CircularQueue_Sense+0x110>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	1ac3      	subs	r3, r0, r3
 800ea48:	3301      	adds	r3, #1
 800ea4a:	e001      	b.n	800ea50 <CircularQueue_Sense+0x114>
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	440b      	add	r3, r1
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	021b      	lsls	r3, r3, #8
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	4413      	add	r3, r2
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	e001      	b.n	800ea64 <CircularQueue_Sense+0x128>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	891b      	ldrh	r3, [r3, #8]
 800ea64:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	7af9      	ldrb	r1, [r7, #11]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	4419      	add	r1, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	4299      	cmp	r1, r3
 800ea76:	d306      	bcc.n	800ea86 <CircularQueue_Sense+0x14a>
 800ea78:	7af9      	ldrb	r1, [r7, #11]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	4419      	add	r1, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	1acb      	subs	r3, r1, r3
 800ea84:	e002      	b.n	800ea8c <CircularQueue_Sense+0x150>
 800ea86:	7af9      	ldrb	r1, [r7, #11]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	440b      	add	r3, r1
 800ea8c:	4413      	add	r3, r2
 800ea8e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	8a7a      	ldrh	r2, [r7, #18]
 800ea9a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800ea9c:	697b      	ldr	r3, [r7, #20]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800eaaa:	b480      	push	{r7}
 800eaac:	af00      	add	r7, sp, #0
  return;
 800eaae:	bf00      	nop
}
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800eab8:	b480      	push	{r7}
 800eaba:	af00      	add	r7, sp, #0
  return;
 800eabc:	bf00      	nop
}
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800eac6:	b480      	push	{r7}
 800eac8:	af00      	add	r7, sp, #0
  return;
 800eaca:	bf00      	nop
}
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ead4:	b480      	push	{r7}
 800ead6:	af00      	add	r7, sp, #0
  return;
 800ead8:	bf00      	nop
}
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800eae2:	b480      	push	{r7}
 800eae4:	af00      	add	r7, sp, #0
  return;
 800eae6:	bf00      	nop
}
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	af00      	add	r7, sp, #0
  return;
 800eaf4:	bf00      	nop
}
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800eafe:	b480      	push	{r7}
 800eb00:	af00      	add	r7, sp, #0
  return;
 800eb02:	bf00      	nop
}
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	af00      	add	r7, sp, #0
  return;
 800eb10:	bf00      	nop
}
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800eb1a:	b480      	push	{r7}
 800eb1c:	af00      	add	r7, sp, #0
  return;
 800eb1e:	bf00      	nop
}
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	af00      	add	r7, sp, #0
  return;
 800eb2c:	bf00      	nop
}
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800eb36:	b480      	push	{r7}
 800eb38:	af00      	add	r7, sp, #0
  return;
 800eb3a:	bf00      	nop
}
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800eb44:	b480      	push	{r7}
 800eb46:	af00      	add	r7, sp, #0
  return;
 800eb48:	bf00      	nop
}
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800eb52:	b480      	push	{r7}
 800eb54:	af00      	add	r7, sp, #0
  return;
 800eb56:	bf00      	nop
}
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800eb60:	b480      	push	{r7}
 800eb62:	af00      	add	r7, sp, #0
  return;
 800eb64:	bf00      	nop
}
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800eb6e:	b480      	push	{r7}
 800eb70:	af00      	add	r7, sp, #0
  return;
 800eb72:	bf00      	nop
}
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	af00      	add	r7, sp, #0
  return;
 800eb80:	bf00      	nop
}
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	af00      	add	r7, sp, #0
  return;
 800eb8e:	bf00      	nop
}
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800eb9c:	4b04      	ldr	r3, [pc, #16]	; (800ebb0 <SVCCTL_Init+0x18>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800eba2:	4b04      	ldr	r3, [pc, #16]	; (800ebb4 <SVCCTL_Init+0x1c>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800eba8:	f000 f806 	bl	800ebb8 <SVCCTL_SvcInit>

  return;
 800ebac:	bf00      	nop
}
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20000384 	.word	0x20000384
 800ebb4:	2000038c 	.word	0x2000038c

0800ebb8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	af00      	add	r7, sp, #0
  BAS_Init();
 800ebbc:	f7ff ff75 	bl	800eaaa <BAS_Init>

  BLS_Init();
 800ebc0:	f7ff ff7a 	bl	800eab8 <BLS_Init>

  CRS_STM_Init();
 800ebc4:	f7ff ff7f 	bl	800eac6 <CRS_STM_Init>

  DIS_Init();
 800ebc8:	f7ff ff84 	bl	800ead4 <DIS_Init>

  EDS_STM_Init();
 800ebcc:	f7ff ff89 	bl	800eae2 <EDS_STM_Init>

  HIDS_Init();
 800ebd0:	f7ff ff8e 	bl	800eaf0 <HIDS_Init>

  HRS_Init();
 800ebd4:	f7ff ff93 	bl	800eafe <HRS_Init>

  HTS_Init();
 800ebd8:	f7ff ff98 	bl	800eb0c <HTS_Init>

  IAS_Init();
 800ebdc:	f7ff ff9d 	bl	800eb1a <IAS_Init>

  LLS_Init();
 800ebe0:	f7ff ffa2 	bl	800eb28 <LLS_Init>

  TPS_Init();
 800ebe4:	f7ff ffa7 	bl	800eb36 <TPS_Init>

  MOTENV_STM_Init();
 800ebe8:	f7ff ffac 	bl	800eb44 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ebec:	f7fe ffb6 	bl	800db5c <P2PS_STM_Init>

  ZDD_STM_Init();
 800ebf0:	f7ff ffaf 	bl	800eb52 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ebf4:	f7ff ffb4 	bl	800eb60 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ebf8:	f7ff ffc0 	bl	800eb7c <BVOPUS_STM_Init>

  MESH_Init();
 800ebfc:	f7ff ffb7 	bl	800eb6e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ec00:	f7ff ffc3 	bl	800eb8a <SVCCTL_InitCustomSvc>
  
  return;
 800ec04:	bf00      	nop
}
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ec10:	4b09      	ldr	r3, [pc, #36]	; (800ec38 <SVCCTL_RegisterSvcHandler+0x30>)
 800ec12:	791b      	ldrb	r3, [r3, #4]
 800ec14:	4619      	mov	r1, r3
 800ec16:	4a08      	ldr	r2, [pc, #32]	; (800ec38 <SVCCTL_RegisterSvcHandler+0x30>)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ec1e:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <SVCCTL_RegisterSvcHandler+0x30>)
 800ec20:	791b      	ldrb	r3, [r3, #4]
 800ec22:	3301      	adds	r3, #1
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	4b04      	ldr	r3, [pc, #16]	; (800ec38 <SVCCTL_RegisterSvcHandler+0x30>)
 800ec28:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800ec2a:	bf00      	nop
}
 800ec2c:	370c      	adds	r7, #12
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	20000384 	.word	0x20000384

0800ec3c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3301      	adds	r3, #1
 800ec48:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2bff      	cmp	r3, #255	; 0xff
 800ec54:	d125      	bne.n	800eca2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	3302      	adds	r3, #2
 800ec5a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec6a:	d118      	bne.n	800ec9e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	757b      	strb	r3, [r7, #21]
 800ec70:	e00d      	b.n	800ec8e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ec72:	7d7b      	ldrb	r3, [r7, #21]
 800ec74:	4a1a      	ldr	r2, [pc, #104]	; (800ece0 <SVCCTL_UserEvtRx+0xa4>)
 800ec76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	4798      	blx	r3
 800ec7e:	4603      	mov	r3, r0
 800ec80:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ec82:	7dfb      	ldrb	r3, [r7, #23]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d108      	bne.n	800ec9a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ec88:	7d7b      	ldrb	r3, [r7, #21]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	757b      	strb	r3, [r7, #21]
 800ec8e:	4b14      	ldr	r3, [pc, #80]	; (800ece0 <SVCCTL_UserEvtRx+0xa4>)
 800ec90:	791b      	ldrb	r3, [r3, #4]
 800ec92:	7d7a      	ldrb	r2, [r7, #21]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d3ec      	bcc.n	800ec72 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ec98:	e002      	b.n	800eca0 <SVCCTL_UserEvtRx+0x64>
              break;
 800ec9a:	bf00      	nop
          break;
 800ec9c:	e000      	b.n	800eca0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ec9e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800eca0:	e000      	b.n	800eca4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800eca2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800eca4:	7dfb      	ldrb	r3, [r7, #23]
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d00f      	beq.n	800ecca <SVCCTL_UserEvtRx+0x8e>
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	dc10      	bgt.n	800ecd0 <SVCCTL_UserEvtRx+0x94>
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d002      	beq.n	800ecb8 <SVCCTL_UserEvtRx+0x7c>
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d006      	beq.n	800ecc4 <SVCCTL_UserEvtRx+0x88>
 800ecb6:	e00b      	b.n	800ecd0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7f4 fef1 	bl	8003aa0 <SVCCTL_App_Notification>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	75bb      	strb	r3, [r7, #22]
      break;
 800ecc2:	e008      	b.n	800ecd6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	75bb      	strb	r3, [r7, #22]
      break;
 800ecc8:	e005      	b.n	800ecd6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ecca:	2300      	movs	r3, #0
 800eccc:	75bb      	strb	r3, [r7, #22]
      break;
 800ecce:	e002      	b.n	800ecd6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	75bb      	strb	r3, [r7, #22]
      break;
 800ecd4:	bf00      	nop
  }

  return (return_status);
 800ecd6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	20000384 	.word	0x20000384

0800ece4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ece8:	f7f6 fc12 	bl	8005510 <HW_IPCC_Enable>

  return;
 800ecec:	bf00      	nop
}
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <TL_Init>:


void TL_Init( void )
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ecf4:	4b10      	ldr	r3, [pc, #64]	; (800ed38 <TL_Init+0x48>)
 800ecf6:	4a11      	ldr	r2, [pc, #68]	; (800ed3c <TL_Init+0x4c>)
 800ecf8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ecfa:	4b0f      	ldr	r3, [pc, #60]	; (800ed38 <TL_Init+0x48>)
 800ecfc:	4a10      	ldr	r2, [pc, #64]	; (800ed40 <TL_Init+0x50>)
 800ecfe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ed00:	4b0d      	ldr	r3, [pc, #52]	; (800ed38 <TL_Init+0x48>)
 800ed02:	4a10      	ldr	r2, [pc, #64]	; (800ed44 <TL_Init+0x54>)
 800ed04:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ed06:	4b0c      	ldr	r3, [pc, #48]	; (800ed38 <TL_Init+0x48>)
 800ed08:	4a0f      	ldr	r2, [pc, #60]	; (800ed48 <TL_Init+0x58>)
 800ed0a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <TL_Init+0x48>)
 800ed0e:	4a0f      	ldr	r2, [pc, #60]	; (800ed4c <TL_Init+0x5c>)
 800ed10:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ed12:	4b09      	ldr	r3, [pc, #36]	; (800ed38 <TL_Init+0x48>)
 800ed14:	4a0e      	ldr	r2, [pc, #56]	; (800ed50 <TL_Init+0x60>)
 800ed16:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ed18:	4b07      	ldr	r3, [pc, #28]	; (800ed38 <TL_Init+0x48>)
 800ed1a:	4a0e      	ldr	r2, [pc, #56]	; (800ed54 <TL_Init+0x64>)
 800ed1c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ed1e:	4b06      	ldr	r3, [pc, #24]	; (800ed38 <TL_Init+0x48>)
 800ed20:	4a0d      	ldr	r2, [pc, #52]	; (800ed58 <TL_Init+0x68>)
 800ed22:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ed24:	4b04      	ldr	r3, [pc, #16]	; (800ed38 <TL_Init+0x48>)
 800ed26:	4a0d      	ldr	r2, [pc, #52]	; (800ed5c <TL_Init+0x6c>)
 800ed28:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ed2a:	4b03      	ldr	r3, [pc, #12]	; (800ed38 <TL_Init+0x48>)
 800ed2c:	4a0c      	ldr	r2, [pc, #48]	; (800ed60 <TL_Init+0x70>)
 800ed2e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ed30:	f7f6 fc02 	bl	8005538 <HW_IPCC_Init>

  return;
 800ed34:	bf00      	nop
}
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	20030000 	.word	0x20030000
 800ed3c:	20030134 	.word	0x20030134
 800ed40:	20030154 	.word	0x20030154
 800ed44:	20030164 	.word	0x20030164
 800ed48:	20030174 	.word	0x20030174
 800ed4c:	2003017c 	.word	0x2003017c
 800ed50:	20030184 	.word	0x20030184
 800ed54:	2003018c 	.word	0x2003018c
 800ed58:	200301a8 	.word	0x200301a8
 800ed5c:	200301ac 	.word	0x200301ac
 800ed60:	200301b8 	.word	0x200301b8

0800ed64 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ed70:	4811      	ldr	r0, [pc, #68]	; (800edb8 <TL_BLE_Init+0x54>)
 800ed72:	f7ff f9db 	bl	800e12c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ed76:	4b11      	ldr	r3, [pc, #68]	; (800edbc <TL_BLE_Init+0x58>)
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	689a      	ldr	r2, [r3, #8]
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	68da      	ldr	r2, [r3, #12]
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	4a0c      	ldr	r2, [pc, #48]	; (800edc0 <TL_BLE_Init+0x5c>)
 800ed90:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	4a08      	ldr	r2, [pc, #32]	; (800edb8 <TL_BLE_Init+0x54>)
 800ed96:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ed98:	f7f6 fbe4 	bl	8005564 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a08      	ldr	r2, [pc, #32]	; (800edc4 <TL_BLE_Init+0x60>)
 800eda2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	4a07      	ldr	r2, [pc, #28]	; (800edc8 <TL_BLE_Init+0x64>)
 800edaa:	6013      	str	r3, [r2, #0]

  return 0;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	200301d4 	.word	0x200301d4
 800edbc:	20030000 	.word	0x20030000
 800edc0:	20030a58 	.word	0x20030a58
 800edc4:	20001870 	.word	0x20001870
 800edc8:	20001874 	.word	0x20001874

0800edcc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800edd8:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <TL_BLE_SendCmd+0x34>)
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2201      	movs	r2, #1
 800ede0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ede2:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <TL_BLE_SendCmd+0x34>)
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4619      	mov	r1, r3
 800edea:	2001      	movs	r0, #1
 800edec:	f000 f96c 	bl	800f0c8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800edf0:	f7f6 fbc2 	bl	8005578 <HW_IPCC_BLE_SendCmd>

  return 0;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20030000 	.word	0x20030000

0800ee04 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ee0a:	e01c      	b.n	800ee46 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ee0c:	1d3b      	adds	r3, r7, #4
 800ee0e:	4619      	mov	r1, r3
 800ee10:	4812      	ldr	r0, [pc, #72]	; (800ee5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ee12:	f7ff fa2a 	bl	800e26a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	7a5b      	ldrb	r3, [r3, #9]
 800ee1a:	2b0f      	cmp	r3, #15
 800ee1c:	d003      	beq.n	800ee26 <HW_IPCC_BLE_RxEvtNot+0x22>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	7a5b      	ldrb	r3, [r3, #9]
 800ee22:	2b0e      	cmp	r3, #14
 800ee24:	d105      	bne.n	800ee32 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	2002      	movs	r0, #2
 800ee2c:	f000 f94c 	bl	800f0c8 <OutputDbgTrace>
 800ee30:	e004      	b.n	800ee3c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4619      	mov	r1, r3
 800ee36:	2003      	movs	r0, #3
 800ee38:	f000 f946 	bl	800f0c8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ee3c:	4b08      	ldr	r3, [pc, #32]	; (800ee60 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	4610      	mov	r0, r2
 800ee44:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ee46:	4805      	ldr	r0, [pc, #20]	; (800ee5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ee48:	f7ff f980 	bl	800e14c <LST_is_empty>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d0dc      	beq.n	800ee0c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ee52:	bf00      	nop
}
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	200301d4 	.word	0x200301d4
 800ee60:	20001870 	.word	0x20001870

0800ee64 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ee68:	4b02      	ldr	r3, [pc, #8]	; (800ee74 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4798      	blx	r3

  return;
 800ee6e:	bf00      	nop
}
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	20001874 	.word	0x20001874

0800ee78 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ee84:	480d      	ldr	r0, [pc, #52]	; (800eebc <TL_SYS_Init+0x44>)
 800ee86:	f7ff f951 	bl	800e12c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ee8a:	4b0d      	ldr	r3, [pc, #52]	; (800eec0 <TL_SYS_Init+0x48>)
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	689a      	ldr	r2, [r3, #8]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	4a08      	ldr	r2, [pc, #32]	; (800eebc <TL_SYS_Init+0x44>)
 800ee9c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ee9e:	f7f6 fb8d 	bl	80055bc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4a07      	ldr	r2, [pc, #28]	; (800eec4 <TL_SYS_Init+0x4c>)
 800eea8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	4a06      	ldr	r2, [pc, #24]	; (800eec8 <TL_SYS_Init+0x50>)
 800eeb0:	6013      	str	r3, [r2, #0]

  return 0;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	200301dc 	.word	0x200301dc
 800eec0:	20030000 	.word	0x20030000
 800eec4:	20001878 	.word	0x20001878
 800eec8:	2000187c 	.word	0x2000187c

0800eecc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800eed8:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <TL_SYS_SendCmd+0x34>)
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2210      	movs	r2, #16
 800eee0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800eee2:	4b07      	ldr	r3, [pc, #28]	; (800ef00 <TL_SYS_SendCmd+0x34>)
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4619      	mov	r1, r3
 800eeea:	2004      	movs	r0, #4
 800eeec:	f000 f8ec 	bl	800f0c8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800eef0:	f7f6 fb6e 	bl	80055d0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20030000 	.word	0x20030000

0800ef04 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ef08:	4b07      	ldr	r3, [pc, #28]	; (800ef28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	2005      	movs	r0, #5
 800ef12:	f000 f8d9 	bl	800f0c8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ef16:	4b05      	ldr	r3, [pc, #20]	; (800ef2c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a03      	ldr	r2, [pc, #12]	; (800ef28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ef1c:	68d2      	ldr	r2, [r2, #12]
 800ef1e:	6812      	ldr	r2, [r2, #0]
 800ef20:	4610      	mov	r0, r2
 800ef22:	4798      	blx	r3

  return;
 800ef24:	bf00      	nop
}
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	20030000 	.word	0x20030000
 800ef2c:	20001878 	.word	0x20001878

0800ef30 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ef36:	e00e      	b.n	800ef56 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ef38:	1d3b      	adds	r3, r7, #4
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	480b      	ldr	r0, [pc, #44]	; (800ef6c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ef3e:	f7ff f994 	bl	800e26a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4619      	mov	r1, r3
 800ef46:	2006      	movs	r0, #6
 800ef48:	f000 f8be 	bl	800f0c8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ef4c:	4b08      	ldr	r3, [pc, #32]	; (800ef70 <HW_IPCC_SYS_EvtNot+0x40>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	4610      	mov	r0, r2
 800ef54:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ef56:	4805      	ldr	r0, [pc, #20]	; (800ef6c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ef58:	f7ff f8f8 	bl	800e14c <LST_is_empty>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d0ea      	beq.n	800ef38 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ef62:	bf00      	nop
}
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	200301dc 	.word	0x200301dc
 800ef70:	2000187c 	.word	0x2000187c

0800ef74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ef7c:	4817      	ldr	r0, [pc, #92]	; (800efdc <TL_MM_Init+0x68>)
 800ef7e:	f7ff f8d5 	bl	800e12c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ef82:	4817      	ldr	r0, [pc, #92]	; (800efe0 <TL_MM_Init+0x6c>)
 800ef84:	f7ff f8d2 	bl	800e12c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ef88:	4b16      	ldr	r3, [pc, #88]	; (800efe4 <TL_MM_Init+0x70>)
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	4a16      	ldr	r2, [pc, #88]	; (800efe8 <TL_MM_Init+0x74>)
 800ef8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ef90:	4b15      	ldr	r3, [pc, #84]	; (800efe8 <TL_MM_Init+0x74>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	6892      	ldr	r2, [r2, #8]
 800ef98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ef9a:	4b13      	ldr	r3, [pc, #76]	; (800efe8 <TL_MM_Init+0x74>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	68d2      	ldr	r2, [r2, #12]
 800efa2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800efa4:	4b10      	ldr	r3, [pc, #64]	; (800efe8 <TL_MM_Init+0x74>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4a0c      	ldr	r2, [pc, #48]	; (800efdc <TL_MM_Init+0x68>)
 800efaa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800efac:	4b0e      	ldr	r3, [pc, #56]	; (800efe8 <TL_MM_Init+0x74>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	6812      	ldr	r2, [r2, #0]
 800efb4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800efb6:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <TL_MM_Init+0x74>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	6852      	ldr	r2, [r2, #4]
 800efbe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800efc0:	4b09      	ldr	r3, [pc, #36]	; (800efe8 <TL_MM_Init+0x74>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	6912      	ldr	r2, [r2, #16]
 800efc8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800efca:	4b07      	ldr	r3, [pc, #28]	; (800efe8 <TL_MM_Init+0x74>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	6952      	ldr	r2, [r2, #20]
 800efd2:	619a      	str	r2, [r3, #24]

  return;
 800efd4:	bf00      	nop
}
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	200301c4 	.word	0x200301c4
 800efe0:	20001868 	.word	0x20001868
 800efe4:	20030000 	.word	0x20030000
 800efe8:	20001880 	.word	0x20001880

0800efec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	4807      	ldr	r0, [pc, #28]	; (800f014 <TL_MM_EvtDone+0x28>)
 800eff8:	f7ff f8f0 	bl	800e1dc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800effc:	6879      	ldr	r1, [r7, #4]
 800effe:	2000      	movs	r0, #0
 800f000:	f000 f862 	bl	800f0c8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800f004:	4804      	ldr	r0, [pc, #16]	; (800f018 <TL_MM_EvtDone+0x2c>)
 800f006:	f7f6 fb09 	bl	800561c <HW_IPCC_MM_SendFreeBuf>

  return;
 800f00a:	bf00      	nop
}
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	20001868 	.word	0x20001868
 800f018:	0800f01d 	.word	0x0800f01d

0800f01c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f022:	e00c      	b.n	800f03e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800f024:	1d3b      	adds	r3, r7, #4
 800f026:	4619      	mov	r1, r3
 800f028:	480a      	ldr	r0, [pc, #40]	; (800f054 <SendFreeBuf+0x38>)
 800f02a:	f7ff f91e 	bl	800e26a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800f02e:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <SendFreeBuf+0x3c>)
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff f8cf 	bl	800e1dc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f03e:	4805      	ldr	r0, [pc, #20]	; (800f054 <SendFreeBuf+0x38>)
 800f040:	f7ff f884 	bl	800e14c <LST_is_empty>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d0ec      	beq.n	800f024 <SendFreeBuf+0x8>
  }

  return;
 800f04a:	bf00      	nop
}
 800f04c:	3708      	adds	r7, #8
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	20001868 	.word	0x20001868
 800f058:	20030000 	.word	0x20030000

0800f05c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800f060:	4805      	ldr	r0, [pc, #20]	; (800f078 <TL_TRACES_Init+0x1c>)
 800f062:	f7ff f863 	bl	800e12c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800f066:	4b05      	ldr	r3, [pc, #20]	; (800f07c <TL_TRACES_Init+0x20>)
 800f068:	695b      	ldr	r3, [r3, #20]
 800f06a:	4a03      	ldr	r2, [pc, #12]	; (800f078 <TL_TRACES_Init+0x1c>)
 800f06c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800f06e:	f7f6 fb0b 	bl	8005688 <HW_IPCC_TRACES_Init>

  return;
 800f072:	bf00      	nop
}
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	200301cc 	.word	0x200301cc
 800f07c:	20030000 	.word	0x20030000

0800f080 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f086:	e008      	b.n	800f09a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800f088:	1d3b      	adds	r3, r7, #4
 800f08a:	4619      	mov	r1, r3
 800f08c:	4808      	ldr	r0, [pc, #32]	; (800f0b0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800f08e:	f7ff f8ec 	bl	800e26a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4618      	mov	r0, r3
 800f096:	f000 f80d 	bl	800f0b4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f09a:	4805      	ldr	r0, [pc, #20]	; (800f0b0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800f09c:	f7ff f856 	bl	800e14c <LST_is_empty>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0f0      	beq.n	800f088 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800f0a6:	bf00      	nop
}
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	200301cc 	.word	0x200301cc

0800f0b4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800f0bc:	bf00      	nop
 800f0be:	370c      	adds	r7, #12
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b085      	sub	sp, #20
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	6039      	str	r1, [r7, #0]
 800f0d2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800f0d4:	79fb      	ldrb	r3, [r7, #7]
 800f0d6:	2b06      	cmp	r3, #6
 800f0d8:	d845      	bhi.n	800f166 <OutputDbgTrace+0x9e>
 800f0da:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <OutputDbgTrace+0x18>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f0fd 	.word	0x0800f0fd
 800f0e4:	0800f121 	.word	0x0800f121
 800f0e8:	0800f127 	.word	0x0800f127
 800f0ec:	0800f13b 	.word	0x0800f13b
 800f0f0:	0800f147 	.word	0x0800f147
 800f0f4:	0800f14d 	.word	0x0800f14d
 800f0f8:	0800f15b 	.word	0x0800f15b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	7a5b      	ldrb	r3, [r3, #9]
 800f104:	2bff      	cmp	r3, #255	; 0xff
 800f106:	d005      	beq.n	800f114 <OutputDbgTrace+0x4c>
 800f108:	2bff      	cmp	r3, #255	; 0xff
 800f10a:	dc05      	bgt.n	800f118 <OutputDbgTrace+0x50>
 800f10c:	2b0e      	cmp	r3, #14
 800f10e:	d005      	beq.n	800f11c <OutputDbgTrace+0x54>
 800f110:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800f112:	e001      	b.n	800f118 <OutputDbgTrace+0x50>
          break;
 800f114:	bf00      	nop
 800f116:	e027      	b.n	800f168 <OutputDbgTrace+0xa0>
          break;
 800f118:	bf00      	nop
 800f11a:	e025      	b.n	800f168 <OutputDbgTrace+0xa0>
          break;
 800f11c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800f11e:	e023      	b.n	800f168 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800f124:	e020      	b.n	800f168 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	7a5b      	ldrb	r3, [r3, #9]
 800f12e:	2b0e      	cmp	r3, #14
 800f130:	d001      	beq.n	800f136 <OutputDbgTrace+0x6e>
 800f132:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800f134:	e000      	b.n	800f138 <OutputDbgTrace+0x70>
          break;
 800f136:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f138:	e016      	b.n	800f168 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	7a5b      	ldrb	r3, [r3, #9]
 800f142:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f144:	e010      	b.n	800f168 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800f14a:	e00d      	b.n	800f168 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	7a5b      	ldrb	r3, [r3, #9]
 800f154:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800f156:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f158:	e006      	b.n	800f168 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	7a5b      	ldrb	r3, [r3, #9]
 800f162:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f164:	e000      	b.n	800f168 <OutputDbgTrace+0xa0>

    default:
      break;
 800f166:	bf00      	nop
  }

  return;
 800f168:	bf00      	nop
}
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800f174:	b480      	push	{r7}
 800f176:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f178:	4b05      	ldr	r3, [pc, #20]	; (800f190 <UTIL_LPM_Init+0x1c>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f17e:	4b05      	ldr	r3, [pc, #20]	; (800f194 <UTIL_LPM_Init+0x20>)
 800f180:	2200      	movs	r2, #0
 800f182:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f184:	bf00      	nop
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	20001884 	.word	0x20001884
 800f194:	20001888 	.word	0x20001888

0800f198 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f198:	b480      	push	{r7}
 800f19a:	b087      	sub	sp, #28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1a4:	f3ef 8310 	mrs	r3, PRIMASK
 800f1a8:	613b      	str	r3, [r7, #16]
  return(result);
 800f1aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f1ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1ae:	b672      	cpsid	i
}
 800f1b0:	bf00      	nop
  
  switch(state)
 800f1b2:	78fb      	ldrb	r3, [r7, #3]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d008      	beq.n	800f1ca <UTIL_LPM_SetOffMode+0x32>
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d10e      	bne.n	800f1da <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f1bc:	4b0d      	ldr	r3, [pc, #52]	; (800f1f4 <UTIL_LPM_SetOffMode+0x5c>)
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	4a0b      	ldr	r2, [pc, #44]	; (800f1f4 <UTIL_LPM_SetOffMode+0x5c>)
 800f1c6:	6013      	str	r3, [r2, #0]
      break;
 800f1c8:	e008      	b.n	800f1dc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	43da      	mvns	r2, r3
 800f1ce:	4b09      	ldr	r3, [pc, #36]	; (800f1f4 <UTIL_LPM_SetOffMode+0x5c>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	4a07      	ldr	r2, [pc, #28]	; (800f1f4 <UTIL_LPM_SetOffMode+0x5c>)
 800f1d6:	6013      	str	r3, [r2, #0]
      break;
 800f1d8:	e000      	b.n	800f1dc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800f1da:	bf00      	nop
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f383 8810 	msr	PRIMASK, r3
}
 800f1e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f1e8:	bf00      	nop
 800f1ea:	371c      	adds	r7, #28
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	20001888 	.word	0x20001888

0800f1f8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b090      	sub	sp, #64	; 0x40
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800f200:	4b73      	ldr	r3, [pc, #460]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800f206:	4b72      	ldr	r3, [pc, #456]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4013      	ands	r3, r2
 800f20e:	4a70      	ldr	r2, [pc, #448]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f210:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800f212:	4b70      	ldr	r3, [pc, #448]	; (800f3d4 <UTIL_SEQ_Run+0x1dc>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f218:	4b6f      	ldr	r3, [pc, #444]	; (800f3d8 <UTIL_SEQ_Run+0x1e0>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f21e:	4b6f      	ldr	r3, [pc, #444]	; (800f3dc <UTIL_SEQ_Run+0x1e4>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800f224:	4b6e      	ldr	r3, [pc, #440]	; (800f3e0 <UTIL_SEQ_Run+0x1e8>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f22a:	e08d      	b.n	800f348 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800f22c:	2300      	movs	r3, #0
 800f22e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f230:	e002      	b.n	800f238 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800f232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f234:	3301      	adds	r3, #1
 800f236:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f238:	4a6a      	ldr	r2, [pc, #424]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f23c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f242:	401a      	ands	r2, r3
 800f244:	4b62      	ldr	r3, [pc, #392]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4013      	ands	r3, r2
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d0f1      	beq.n	800f232 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800f24e:	4a65      	ldr	r2, [pc, #404]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f252:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	401a      	ands	r2, r3
 800f25a:	4b5d      	ldr	r3, [pc, #372]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4013      	ands	r3, r2
 800f260:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f262:	4a60      	ldr	r2, [pc, #384]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f266:	00db      	lsls	r3, r3, #3
 800f268:	4413      	add	r3, r2
 800f26a:	685a      	ldr	r2, [r3, #4]
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	4013      	ands	r3, r2
 800f270:	2b00      	cmp	r3, #0
 800f272:	d106      	bne.n	800f282 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f274:	4a5b      	ldr	r2, [pc, #364]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f278:	00db      	lsls	r3, r3, #3
 800f27a:	4413      	add	r3, r2
 800f27c:	f04f 32ff 	mov.w	r2, #4294967295
 800f280:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f282:	4a58      	ldr	r2, [pc, #352]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f286:	00db      	lsls	r3, r3, #3
 800f288:	4413      	add	r3, r2
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	4013      	ands	r3, r2
 800f290:	4618      	mov	r0, r3
 800f292:	f000 f9b3 	bl	800f5fc <SEQ_BitPosition>
 800f296:	4603      	mov	r3, r0
 800f298:	461a      	mov	r2, r3
 800f29a:	4b53      	ldr	r3, [pc, #332]	; (800f3e8 <UTIL_SEQ_Run+0x1f0>)
 800f29c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f29e:	4a51      	ldr	r2, [pc, #324]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a2:	00db      	lsls	r3, r3, #3
 800f2a4:	4413      	add	r3, r2
 800f2a6:	685a      	ldr	r2, [r3, #4]
 800f2a8:	4b4f      	ldr	r3, [pc, #316]	; (800f3e8 <UTIL_SEQ_Run+0x1f0>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2101      	movs	r1, #1
 800f2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b2:	43db      	mvns	r3, r3
 800f2b4:	401a      	ands	r2, r3
 800f2b6:	494b      	ldr	r1, [pc, #300]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ba:	00db      	lsls	r3, r3, #3
 800f2bc:	440b      	add	r3, r1
 800f2be:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2c0:	f3ef 8310 	mrs	r3, PRIMASK
 800f2c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800f2c6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f2c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2ca:	b672      	cpsid	i
}
 800f2cc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f2ce:	4b46      	ldr	r3, [pc, #280]	; (800f3e8 <UTIL_SEQ_Run+0x1f0>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d8:	43da      	mvns	r2, r3
 800f2da:	4b3e      	ldr	r3, [pc, #248]	; (800f3d4 <UTIL_SEQ_Run+0x1dc>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4013      	ands	r3, r2
 800f2e0:	4a3c      	ldr	r2, [pc, #240]	; (800f3d4 <UTIL_SEQ_Run+0x1dc>)
 800f2e2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2e8:	e013      	b.n	800f312 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	4a3d      	ldr	r2, [pc, #244]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f2f0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f2f4:	4b3c      	ldr	r3, [pc, #240]	; (800f3e8 <UTIL_SEQ_Run+0x1f0>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f2fe:	43da      	mvns	r2, r3
 800f300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f302:	3b01      	subs	r3, #1
 800f304:	400a      	ands	r2, r1
 800f306:	4937      	ldr	r1, [pc, #220]	; (800f3e4 <UTIL_SEQ_Run+0x1ec>)
 800f308:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30e:	3b01      	subs	r3, #1
 800f310:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1e8      	bne.n	800f2ea <UTIL_SEQ_Run+0xf2>
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	f383 8810 	msr	PRIMASK, r3
}
 800f322:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f324:	4b30      	ldr	r3, [pc, #192]	; (800f3e8 <UTIL_SEQ_Run+0x1f0>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a30      	ldr	r2, [pc, #192]	; (800f3ec <UTIL_SEQ_Run+0x1f4>)
 800f32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32e:	4798      	blx	r3
    local_taskset = TaskSet;
 800f330:	4b28      	ldr	r3, [pc, #160]	; (800f3d4 <UTIL_SEQ_Run+0x1dc>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800f336:	4b28      	ldr	r3, [pc, #160]	; (800f3d8 <UTIL_SEQ_Run+0x1e0>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800f33c:	4b27      	ldr	r3, [pc, #156]	; (800f3dc <UTIL_SEQ_Run+0x1e4>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800f342:	4b27      	ldr	r3, [pc, #156]	; (800f3e0 <UTIL_SEQ_Run+0x1e8>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34c:	401a      	ands	r2, r3
 800f34e:	4b20      	ldr	r3, [pc, #128]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	4013      	ands	r3, r2
 800f354:	2b00      	cmp	r3, #0
 800f356:	d005      	beq.n	800f364 <UTIL_SEQ_Run+0x16c>
 800f358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35c:	4013      	ands	r3, r2
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f43f af64 	beq.w	800f22c <UTIL_SEQ_Run+0x34>
  }
  //HAL_Delay(200);
  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f364:	4b20      	ldr	r3, [pc, #128]	; (800f3e8 <UTIL_SEQ_Run+0x1f0>)
 800f366:	f04f 32ff 	mov.w	r2, #4294967295
 800f36a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f36c:	f000 f938 	bl	800f5e0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f370:	f3ef 8310 	mrs	r3, PRIMASK
 800f374:	613b      	str	r3, [r7, #16]
  return(result);
 800f376:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f378:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f37a:	b672      	cpsid	i
}
 800f37c:	bf00      	nop
  local_taskset = TaskSet;
 800f37e:	4b15      	ldr	r3, [pc, #84]	; (800f3d4 <UTIL_SEQ_Run+0x1dc>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f384:	4b14      	ldr	r3, [pc, #80]	; (800f3d8 <UTIL_SEQ_Run+0x1e0>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f38a:	4b14      	ldr	r3, [pc, #80]	; (800f3dc <UTIL_SEQ_Run+0x1e4>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	401a      	ands	r2, r3
 800f396:	4b0e      	ldr	r3, [pc, #56]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4013      	ands	r3, r2
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d107      	bne.n	800f3b0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f3a0:	4b0f      	ldr	r3, [pc, #60]	; (800f3e0 <UTIL_SEQ_Run+0x1e8>)
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a6:	4013      	ands	r3, r2
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d101      	bne.n	800f3b0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f3ac:	f7f2 fb6e 	bl	8001a8c <UTIL_SEQ_Idle>
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f383 8810 	msr	PRIMASK, r3
}
 800f3ba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f3bc:	f000 f917 	bl	800f5ee <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f3c0:	4a03      	ldr	r2, [pc, #12]	; (800f3d0 <UTIL_SEQ_Run+0x1d8>)
 800f3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c4:	6013      	str	r3, [r2, #0]

  return;
 800f3c6:	bf00      	nop
}
 800f3c8:	3740      	adds	r7, #64	; 0x40
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	20000048 	.word	0x20000048
 800f3d4:	2000188c 	.word	0x2000188c
 800f3d8:	20001890 	.word	0x20001890
 800f3dc:	20000044 	.word	0x20000044
 800f3e0:	20001894 	.word	0x20001894
 800f3e4:	2000191c 	.word	0x2000191c
 800f3e8:	20001898 	.word	0x20001898
 800f3ec:	2000189c 	.word	0x2000189c

0800f3f0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b088      	sub	sp, #32
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f400:	617b      	str	r3, [r7, #20]
  return(result);
 800f402:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800f404:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f406:	b672      	cpsid	i
}
 800f408:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f000 f8f6 	bl	800f5fc <SEQ_BitPosition>
 800f410:	4603      	mov	r3, r0
 800f412:	4619      	mov	r1, r3
 800f414:	4a06      	ldr	r2, [pc, #24]	; (800f430 <UTIL_SEQ_RegTask+0x40>)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	f383 8810 	msr	PRIMASK, r3
}
 800f426:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800f428:	bf00      	nop
}
 800f42a:	3720      	adds	r7, #32
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	2000189c 	.word	0x2000189c

0800f434 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f434:	b480      	push	{r7}
 800f436:	b087      	sub	sp, #28
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f43e:	f3ef 8310 	mrs	r3, PRIMASK
 800f442:	60fb      	str	r3, [r7, #12]
  return(result);
 800f444:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f446:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f448:	b672      	cpsid	i
}
 800f44a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800f44c:	4b0d      	ldr	r3, [pc, #52]	; (800f484 <UTIL_SEQ_SetTask+0x50>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4313      	orrs	r3, r2
 800f454:	4a0b      	ldr	r2, [pc, #44]	; (800f484 <UTIL_SEQ_SetTask+0x50>)
 800f456:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f458:	4a0b      	ldr	r2, [pc, #44]	; (800f488 <UTIL_SEQ_SetTask+0x54>)
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	431a      	orrs	r2, r3
 800f464:	4908      	ldr	r1, [pc, #32]	; (800f488 <UTIL_SEQ_SetTask+0x54>)
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	f383 8810 	msr	PRIMASK, r3
}
 800f476:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f478:	bf00      	nop
}
 800f47a:	371c      	adds	r7, #28
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr
 800f484:	2000188c 	.word	0x2000188c
 800f488:	2000191c 	.word	0x2000191c

0800f48c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f48c:	b480      	push	{r7}
 800f48e:	b087      	sub	sp, #28
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f494:	f3ef 8310 	mrs	r3, PRIMASK
 800f498:	60fb      	str	r3, [r7, #12]
  return(result);
 800f49a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f49c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f49e:	b672      	cpsid	i
}
 800f4a0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	43da      	mvns	r2, r3
 800f4a6:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <UTIL_SEQ_PauseTask+0x3c>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	4013      	ands	r3, r2
 800f4ac:	4a06      	ldr	r2, [pc, #24]	; (800f4c8 <UTIL_SEQ_PauseTask+0x3c>)
 800f4ae:	6013      	str	r3, [r2, #0]
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	f383 8810 	msr	PRIMASK, r3
}
 800f4ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f4bc:	bf00      	nop
}
 800f4be:	371c      	adds	r7, #28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	20000044 	.word	0x20000044

0800f4cc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f4d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f4dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4de:	b672      	cpsid	i
}
 800f4e0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800f4e2:	4b09      	ldr	r3, [pc, #36]	; (800f508 <UTIL_SEQ_ResumeTask+0x3c>)
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	4a07      	ldr	r2, [pc, #28]	; (800f508 <UTIL_SEQ_ResumeTask+0x3c>)
 800f4ec:	6013      	str	r3, [r2, #0]
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	f383 8810 	msr	PRIMASK, r3
}
 800f4f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f4fa:	bf00      	nop
}
 800f4fc:	371c      	adds	r7, #28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr
 800f506:	bf00      	nop
 800f508:	20000044 	.word	0x20000044

0800f50c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f50c:	b480      	push	{r7}
 800f50e:	b087      	sub	sp, #28
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f514:	f3ef 8310 	mrs	r3, PRIMASK
 800f518:	60fb      	str	r3, [r7, #12]
  return(result);
 800f51a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f51c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f51e:	b672      	cpsid	i
}
 800f520:	bf00      	nop

  EvtSet |= EvtId_bm;
 800f522:	4b09      	ldr	r3, [pc, #36]	; (800f548 <UTIL_SEQ_SetEvt+0x3c>)
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4313      	orrs	r3, r2
 800f52a:	4a07      	ldr	r2, [pc, #28]	; (800f548 <UTIL_SEQ_SetEvt+0x3c>)
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	f383 8810 	msr	PRIMASK, r3
}
 800f538:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f53a:	bf00      	nop
}
 800f53c:	371c      	adds	r7, #28
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	20001890 	.word	0x20001890

0800f54c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f554:	4b1f      	ldr	r3, [pc, #124]	; (800f5d4 <UTIL_SEQ_WaitEvt+0x88>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f55a:	4b1e      	ldr	r3, [pc, #120]	; (800f5d4 <UTIL_SEQ_WaitEvt+0x88>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f562:	d102      	bne.n	800f56a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800f564:	2300      	movs	r3, #0
 800f566:	61fb      	str	r3, [r7, #28]
 800f568:	e005      	b.n	800f576 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f56a:	4b1a      	ldr	r3, [pc, #104]	; (800f5d4 <UTIL_SEQ_WaitEvt+0x88>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2201      	movs	r2, #1
 800f570:	fa02 f303 	lsl.w	r3, r2, r3
 800f574:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f576:	4b18      	ldr	r3, [pc, #96]	; (800f5d8 <UTIL_SEQ_WaitEvt+0x8c>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f57c:	4a16      	ldr	r2, [pc, #88]	; (800f5d8 <UTIL_SEQ_WaitEvt+0x8c>)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f582:	e003      	b.n	800f58c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f584:	6879      	ldr	r1, [r7, #4]
 800f586:	69f8      	ldr	r0, [r7, #28]
 800f588:	f7f2 fa87 	bl	8001a9a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f58c:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <UTIL_SEQ_WaitEvt+0x90>)
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4013      	ands	r3, r2
 800f594:	2b00      	cmp	r3, #0
 800f596:	d0f5      	beq.n	800f584 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f598:	4a0e      	ldr	r2, [pc, #56]	; (800f5d4 <UTIL_SEQ_WaitEvt+0x88>)
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f59e:	f3ef 8310 	mrs	r3, PRIMASK
 800f5a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5a4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f5a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f5a8:	b672      	cpsid	i
}
 800f5aa:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	43da      	mvns	r2, r3
 800f5b0:	4b0a      	ldr	r3, [pc, #40]	; (800f5dc <UTIL_SEQ_WaitEvt+0x90>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4013      	ands	r3, r2
 800f5b6:	4a09      	ldr	r2, [pc, #36]	; (800f5dc <UTIL_SEQ_WaitEvt+0x90>)
 800f5b8:	6013      	str	r3, [r2, #0]
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f383 8810 	msr	PRIMASK, r3
}
 800f5c4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f5c6:	4a04      	ldr	r2, [pc, #16]	; (800f5d8 <UTIL_SEQ_WaitEvt+0x8c>)
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	6013      	str	r3, [r2, #0]
  return;
 800f5cc:	bf00      	nop
}
 800f5ce:	3720      	adds	r7, #32
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	20001898 	.word	0x20001898
 800f5d8:	20001894 	.word	0x20001894
 800f5dc:	20001890 	.word	0x20001890

0800f5e0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f5e4:	bf00      	nop
}
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f5f2:	bf00      	nop
}
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800f604:	2300      	movs	r3, #0
 800f606:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	0c1b      	lsrs	r3, r3, #16
 800f610:	041b      	lsls	r3, r3, #16
 800f612:	2b00      	cmp	r3, #0
 800f614:	d104      	bne.n	800f620 <SEQ_BitPosition+0x24>
 800f616:	2310      	movs	r3, #16
 800f618:	73fb      	strb	r3, [r7, #15]
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	041b      	lsls	r3, r3, #16
 800f61e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f626:	2b00      	cmp	r3, #0
 800f628:	d105      	bne.n	800f636 <SEQ_BitPosition+0x3a>
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
 800f62c:	3308      	adds	r3, #8
 800f62e:	73fb      	strb	r3, [r7, #15]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	021b      	lsls	r3, r3, #8
 800f634:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d105      	bne.n	800f64c <SEQ_BitPosition+0x50>
 800f640:	7bfb      	ldrb	r3, [r7, #15]
 800f642:	3304      	adds	r3, #4
 800f644:	73fb      	strb	r3, [r7, #15]
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	011b      	lsls	r3, r3, #4
 800f64a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	0f1b      	lsrs	r3, r3, #28
 800f650:	4a07      	ldr	r2, [pc, #28]	; (800f670 <SEQ_BitPosition+0x74>)
 800f652:	5cd2      	ldrb	r2, [r2, r3]
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	4413      	add	r3, r2
 800f658:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800f65a:	7bfb      	ldrb	r3, [r7, #15]
 800f65c:	f1c3 031f 	rsb	r3, r3, #31
 800f660:	b2db      	uxtb	r3, r3
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	08016938 	.word	0x08016938

0800f674 <__cvt>:
 800f674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f678:	ec55 4b10 	vmov	r4, r5, d0
 800f67c:	2d00      	cmp	r5, #0
 800f67e:	460e      	mov	r6, r1
 800f680:	4619      	mov	r1, r3
 800f682:	462b      	mov	r3, r5
 800f684:	bfbb      	ittet	lt
 800f686:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f68a:	461d      	movlt	r5, r3
 800f68c:	2300      	movge	r3, #0
 800f68e:	232d      	movlt	r3, #45	; 0x2d
 800f690:	700b      	strb	r3, [r1, #0]
 800f692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f694:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f698:	4691      	mov	r9, r2
 800f69a:	f023 0820 	bic.w	r8, r3, #32
 800f69e:	bfbc      	itt	lt
 800f6a0:	4622      	movlt	r2, r4
 800f6a2:	4614      	movlt	r4, r2
 800f6a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f6a8:	d005      	beq.n	800f6b6 <__cvt+0x42>
 800f6aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f6ae:	d100      	bne.n	800f6b2 <__cvt+0x3e>
 800f6b0:	3601      	adds	r6, #1
 800f6b2:	2102      	movs	r1, #2
 800f6b4:	e000      	b.n	800f6b8 <__cvt+0x44>
 800f6b6:	2103      	movs	r1, #3
 800f6b8:	ab03      	add	r3, sp, #12
 800f6ba:	9301      	str	r3, [sp, #4]
 800f6bc:	ab02      	add	r3, sp, #8
 800f6be:	9300      	str	r3, [sp, #0]
 800f6c0:	ec45 4b10 	vmov	d0, r4, r5
 800f6c4:	4653      	mov	r3, sl
 800f6c6:	4632      	mov	r2, r6
 800f6c8:	f001 f996 	bl	80109f8 <_dtoa_r>
 800f6cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f6d0:	4607      	mov	r7, r0
 800f6d2:	d102      	bne.n	800f6da <__cvt+0x66>
 800f6d4:	f019 0f01 	tst.w	r9, #1
 800f6d8:	d022      	beq.n	800f720 <__cvt+0xac>
 800f6da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f6de:	eb07 0906 	add.w	r9, r7, r6
 800f6e2:	d110      	bne.n	800f706 <__cvt+0x92>
 800f6e4:	783b      	ldrb	r3, [r7, #0]
 800f6e6:	2b30      	cmp	r3, #48	; 0x30
 800f6e8:	d10a      	bne.n	800f700 <__cvt+0x8c>
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	4629      	mov	r1, r5
 800f6f2:	f7f1 f9c1 	bl	8000a78 <__aeabi_dcmpeq>
 800f6f6:	b918      	cbnz	r0, 800f700 <__cvt+0x8c>
 800f6f8:	f1c6 0601 	rsb	r6, r6, #1
 800f6fc:	f8ca 6000 	str.w	r6, [sl]
 800f700:	f8da 3000 	ldr.w	r3, [sl]
 800f704:	4499      	add	r9, r3
 800f706:	2200      	movs	r2, #0
 800f708:	2300      	movs	r3, #0
 800f70a:	4620      	mov	r0, r4
 800f70c:	4629      	mov	r1, r5
 800f70e:	f7f1 f9b3 	bl	8000a78 <__aeabi_dcmpeq>
 800f712:	b108      	cbz	r0, 800f718 <__cvt+0xa4>
 800f714:	f8cd 900c 	str.w	r9, [sp, #12]
 800f718:	2230      	movs	r2, #48	; 0x30
 800f71a:	9b03      	ldr	r3, [sp, #12]
 800f71c:	454b      	cmp	r3, r9
 800f71e:	d307      	bcc.n	800f730 <__cvt+0xbc>
 800f720:	9b03      	ldr	r3, [sp, #12]
 800f722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f724:	1bdb      	subs	r3, r3, r7
 800f726:	4638      	mov	r0, r7
 800f728:	6013      	str	r3, [r2, #0]
 800f72a:	b004      	add	sp, #16
 800f72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f730:	1c59      	adds	r1, r3, #1
 800f732:	9103      	str	r1, [sp, #12]
 800f734:	701a      	strb	r2, [r3, #0]
 800f736:	e7f0      	b.n	800f71a <__cvt+0xa6>

0800f738 <__exponent>:
 800f738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f73a:	4603      	mov	r3, r0
 800f73c:	2900      	cmp	r1, #0
 800f73e:	bfb8      	it	lt
 800f740:	4249      	neglt	r1, r1
 800f742:	f803 2b02 	strb.w	r2, [r3], #2
 800f746:	bfb4      	ite	lt
 800f748:	222d      	movlt	r2, #45	; 0x2d
 800f74a:	222b      	movge	r2, #43	; 0x2b
 800f74c:	2909      	cmp	r1, #9
 800f74e:	7042      	strb	r2, [r0, #1]
 800f750:	dd2a      	ble.n	800f7a8 <__exponent+0x70>
 800f752:	f10d 0207 	add.w	r2, sp, #7
 800f756:	4617      	mov	r7, r2
 800f758:	260a      	movs	r6, #10
 800f75a:	4694      	mov	ip, r2
 800f75c:	fb91 f5f6 	sdiv	r5, r1, r6
 800f760:	fb06 1415 	mls	r4, r6, r5, r1
 800f764:	3430      	adds	r4, #48	; 0x30
 800f766:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f76a:	460c      	mov	r4, r1
 800f76c:	2c63      	cmp	r4, #99	; 0x63
 800f76e:	f102 32ff 	add.w	r2, r2, #4294967295
 800f772:	4629      	mov	r1, r5
 800f774:	dcf1      	bgt.n	800f75a <__exponent+0x22>
 800f776:	3130      	adds	r1, #48	; 0x30
 800f778:	f1ac 0402 	sub.w	r4, ip, #2
 800f77c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f780:	1c41      	adds	r1, r0, #1
 800f782:	4622      	mov	r2, r4
 800f784:	42ba      	cmp	r2, r7
 800f786:	d30a      	bcc.n	800f79e <__exponent+0x66>
 800f788:	f10d 0209 	add.w	r2, sp, #9
 800f78c:	eba2 020c 	sub.w	r2, r2, ip
 800f790:	42bc      	cmp	r4, r7
 800f792:	bf88      	it	hi
 800f794:	2200      	movhi	r2, #0
 800f796:	4413      	add	r3, r2
 800f798:	1a18      	subs	r0, r3, r0
 800f79a:	b003      	add	sp, #12
 800f79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f79e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f7a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f7a6:	e7ed      	b.n	800f784 <__exponent+0x4c>
 800f7a8:	2330      	movs	r3, #48	; 0x30
 800f7aa:	3130      	adds	r1, #48	; 0x30
 800f7ac:	7083      	strb	r3, [r0, #2]
 800f7ae:	70c1      	strb	r1, [r0, #3]
 800f7b0:	1d03      	adds	r3, r0, #4
 800f7b2:	e7f1      	b.n	800f798 <__exponent+0x60>

0800f7b4 <_printf_float>:
 800f7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b8:	ed2d 8b02 	vpush	{d8}
 800f7bc:	b08d      	sub	sp, #52	; 0x34
 800f7be:	460c      	mov	r4, r1
 800f7c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f7c4:	4616      	mov	r6, r2
 800f7c6:	461f      	mov	r7, r3
 800f7c8:	4605      	mov	r5, r0
 800f7ca:	f001 f801 	bl	80107d0 <_localeconv_r>
 800f7ce:	f8d0 a000 	ldr.w	sl, [r0]
 800f7d2:	4650      	mov	r0, sl
 800f7d4:	f7f0 fd24 	bl	8000220 <strlen>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	930a      	str	r3, [sp, #40]	; 0x28
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	9305      	str	r3, [sp, #20]
 800f7e0:	f8d8 3000 	ldr.w	r3, [r8]
 800f7e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f7e8:	3307      	adds	r3, #7
 800f7ea:	f023 0307 	bic.w	r3, r3, #7
 800f7ee:	f103 0208 	add.w	r2, r3, #8
 800f7f2:	f8c8 2000 	str.w	r2, [r8]
 800f7f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f7fe:	9307      	str	r3, [sp, #28]
 800f800:	f8cd 8018 	str.w	r8, [sp, #24]
 800f804:	ee08 0a10 	vmov	s16, r0
 800f808:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f80c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f810:	4b9e      	ldr	r3, [pc, #632]	; (800fa8c <_printf_float+0x2d8>)
 800f812:	f04f 32ff 	mov.w	r2, #4294967295
 800f816:	f7f1 f961 	bl	8000adc <__aeabi_dcmpun>
 800f81a:	bb88      	cbnz	r0, 800f880 <_printf_float+0xcc>
 800f81c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f820:	4b9a      	ldr	r3, [pc, #616]	; (800fa8c <_printf_float+0x2d8>)
 800f822:	f04f 32ff 	mov.w	r2, #4294967295
 800f826:	f7f1 f93b 	bl	8000aa0 <__aeabi_dcmple>
 800f82a:	bb48      	cbnz	r0, 800f880 <_printf_float+0xcc>
 800f82c:	2200      	movs	r2, #0
 800f82e:	2300      	movs	r3, #0
 800f830:	4640      	mov	r0, r8
 800f832:	4649      	mov	r1, r9
 800f834:	f7f1 f92a 	bl	8000a8c <__aeabi_dcmplt>
 800f838:	b110      	cbz	r0, 800f840 <_printf_float+0x8c>
 800f83a:	232d      	movs	r3, #45	; 0x2d
 800f83c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f840:	4a93      	ldr	r2, [pc, #588]	; (800fa90 <_printf_float+0x2dc>)
 800f842:	4b94      	ldr	r3, [pc, #592]	; (800fa94 <_printf_float+0x2e0>)
 800f844:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f848:	bf94      	ite	ls
 800f84a:	4690      	movls	r8, r2
 800f84c:	4698      	movhi	r8, r3
 800f84e:	2303      	movs	r3, #3
 800f850:	6123      	str	r3, [r4, #16]
 800f852:	9b05      	ldr	r3, [sp, #20]
 800f854:	f023 0304 	bic.w	r3, r3, #4
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	f04f 0900 	mov.w	r9, #0
 800f85e:	9700      	str	r7, [sp, #0]
 800f860:	4633      	mov	r3, r6
 800f862:	aa0b      	add	r2, sp, #44	; 0x2c
 800f864:	4621      	mov	r1, r4
 800f866:	4628      	mov	r0, r5
 800f868:	f000 f9da 	bl	800fc20 <_printf_common>
 800f86c:	3001      	adds	r0, #1
 800f86e:	f040 8090 	bne.w	800f992 <_printf_float+0x1de>
 800f872:	f04f 30ff 	mov.w	r0, #4294967295
 800f876:	b00d      	add	sp, #52	; 0x34
 800f878:	ecbd 8b02 	vpop	{d8}
 800f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f880:	4642      	mov	r2, r8
 800f882:	464b      	mov	r3, r9
 800f884:	4640      	mov	r0, r8
 800f886:	4649      	mov	r1, r9
 800f888:	f7f1 f928 	bl	8000adc <__aeabi_dcmpun>
 800f88c:	b140      	cbz	r0, 800f8a0 <_printf_float+0xec>
 800f88e:	464b      	mov	r3, r9
 800f890:	2b00      	cmp	r3, #0
 800f892:	bfbc      	itt	lt
 800f894:	232d      	movlt	r3, #45	; 0x2d
 800f896:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f89a:	4a7f      	ldr	r2, [pc, #508]	; (800fa98 <_printf_float+0x2e4>)
 800f89c:	4b7f      	ldr	r3, [pc, #508]	; (800fa9c <_printf_float+0x2e8>)
 800f89e:	e7d1      	b.n	800f844 <_printf_float+0x90>
 800f8a0:	6863      	ldr	r3, [r4, #4]
 800f8a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f8a6:	9206      	str	r2, [sp, #24]
 800f8a8:	1c5a      	adds	r2, r3, #1
 800f8aa:	d13f      	bne.n	800f92c <_printf_float+0x178>
 800f8ac:	2306      	movs	r3, #6
 800f8ae:	6063      	str	r3, [r4, #4]
 800f8b0:	9b05      	ldr	r3, [sp, #20]
 800f8b2:	6861      	ldr	r1, [r4, #4]
 800f8b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	9303      	str	r3, [sp, #12]
 800f8bc:	ab0a      	add	r3, sp, #40	; 0x28
 800f8be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f8c2:	ab09      	add	r3, sp, #36	; 0x24
 800f8c4:	ec49 8b10 	vmov	d0, r8, r9
 800f8c8:	9300      	str	r3, [sp, #0]
 800f8ca:	6022      	str	r2, [r4, #0]
 800f8cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	f7ff fecf 	bl	800f674 <__cvt>
 800f8d6:	9b06      	ldr	r3, [sp, #24]
 800f8d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8da:	2b47      	cmp	r3, #71	; 0x47
 800f8dc:	4680      	mov	r8, r0
 800f8de:	d108      	bne.n	800f8f2 <_printf_float+0x13e>
 800f8e0:	1cc8      	adds	r0, r1, #3
 800f8e2:	db02      	blt.n	800f8ea <_printf_float+0x136>
 800f8e4:	6863      	ldr	r3, [r4, #4]
 800f8e6:	4299      	cmp	r1, r3
 800f8e8:	dd41      	ble.n	800f96e <_printf_float+0x1ba>
 800f8ea:	f1ab 0302 	sub.w	r3, fp, #2
 800f8ee:	fa5f fb83 	uxtb.w	fp, r3
 800f8f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8f6:	d820      	bhi.n	800f93a <_printf_float+0x186>
 800f8f8:	3901      	subs	r1, #1
 800f8fa:	465a      	mov	r2, fp
 800f8fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f900:	9109      	str	r1, [sp, #36]	; 0x24
 800f902:	f7ff ff19 	bl	800f738 <__exponent>
 800f906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f908:	1813      	adds	r3, r2, r0
 800f90a:	2a01      	cmp	r2, #1
 800f90c:	4681      	mov	r9, r0
 800f90e:	6123      	str	r3, [r4, #16]
 800f910:	dc02      	bgt.n	800f918 <_printf_float+0x164>
 800f912:	6822      	ldr	r2, [r4, #0]
 800f914:	07d2      	lsls	r2, r2, #31
 800f916:	d501      	bpl.n	800f91c <_printf_float+0x168>
 800f918:	3301      	adds	r3, #1
 800f91a:	6123      	str	r3, [r4, #16]
 800f91c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f920:	2b00      	cmp	r3, #0
 800f922:	d09c      	beq.n	800f85e <_printf_float+0xaa>
 800f924:	232d      	movs	r3, #45	; 0x2d
 800f926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f92a:	e798      	b.n	800f85e <_printf_float+0xaa>
 800f92c:	9a06      	ldr	r2, [sp, #24]
 800f92e:	2a47      	cmp	r2, #71	; 0x47
 800f930:	d1be      	bne.n	800f8b0 <_printf_float+0xfc>
 800f932:	2b00      	cmp	r3, #0
 800f934:	d1bc      	bne.n	800f8b0 <_printf_float+0xfc>
 800f936:	2301      	movs	r3, #1
 800f938:	e7b9      	b.n	800f8ae <_printf_float+0xfa>
 800f93a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f93e:	d118      	bne.n	800f972 <_printf_float+0x1be>
 800f940:	2900      	cmp	r1, #0
 800f942:	6863      	ldr	r3, [r4, #4]
 800f944:	dd0b      	ble.n	800f95e <_printf_float+0x1aa>
 800f946:	6121      	str	r1, [r4, #16]
 800f948:	b913      	cbnz	r3, 800f950 <_printf_float+0x19c>
 800f94a:	6822      	ldr	r2, [r4, #0]
 800f94c:	07d0      	lsls	r0, r2, #31
 800f94e:	d502      	bpl.n	800f956 <_printf_float+0x1a2>
 800f950:	3301      	adds	r3, #1
 800f952:	440b      	add	r3, r1
 800f954:	6123      	str	r3, [r4, #16]
 800f956:	65a1      	str	r1, [r4, #88]	; 0x58
 800f958:	f04f 0900 	mov.w	r9, #0
 800f95c:	e7de      	b.n	800f91c <_printf_float+0x168>
 800f95e:	b913      	cbnz	r3, 800f966 <_printf_float+0x1b2>
 800f960:	6822      	ldr	r2, [r4, #0]
 800f962:	07d2      	lsls	r2, r2, #31
 800f964:	d501      	bpl.n	800f96a <_printf_float+0x1b6>
 800f966:	3302      	adds	r3, #2
 800f968:	e7f4      	b.n	800f954 <_printf_float+0x1a0>
 800f96a:	2301      	movs	r3, #1
 800f96c:	e7f2      	b.n	800f954 <_printf_float+0x1a0>
 800f96e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f974:	4299      	cmp	r1, r3
 800f976:	db05      	blt.n	800f984 <_printf_float+0x1d0>
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	6121      	str	r1, [r4, #16]
 800f97c:	07d8      	lsls	r0, r3, #31
 800f97e:	d5ea      	bpl.n	800f956 <_printf_float+0x1a2>
 800f980:	1c4b      	adds	r3, r1, #1
 800f982:	e7e7      	b.n	800f954 <_printf_float+0x1a0>
 800f984:	2900      	cmp	r1, #0
 800f986:	bfd4      	ite	le
 800f988:	f1c1 0202 	rsble	r2, r1, #2
 800f98c:	2201      	movgt	r2, #1
 800f98e:	4413      	add	r3, r2
 800f990:	e7e0      	b.n	800f954 <_printf_float+0x1a0>
 800f992:	6823      	ldr	r3, [r4, #0]
 800f994:	055a      	lsls	r2, r3, #21
 800f996:	d407      	bmi.n	800f9a8 <_printf_float+0x1f4>
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	4642      	mov	r2, r8
 800f99c:	4631      	mov	r1, r6
 800f99e:	4628      	mov	r0, r5
 800f9a0:	47b8      	blx	r7
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	d12c      	bne.n	800fa00 <_printf_float+0x24c>
 800f9a6:	e764      	b.n	800f872 <_printf_float+0xbe>
 800f9a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f9ac:	f240 80e0 	bls.w	800fb70 <_printf_float+0x3bc>
 800f9b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	f7f1 f85e 	bl	8000a78 <__aeabi_dcmpeq>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d034      	beq.n	800fa2a <_printf_float+0x276>
 800f9c0:	4a37      	ldr	r2, [pc, #220]	; (800faa0 <_printf_float+0x2ec>)
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4631      	mov	r1, r6
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	47b8      	blx	r7
 800f9ca:	3001      	adds	r0, #1
 800f9cc:	f43f af51 	beq.w	800f872 <_printf_float+0xbe>
 800f9d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	db02      	blt.n	800f9de <_printf_float+0x22a>
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	07d8      	lsls	r0, r3, #31
 800f9dc:	d510      	bpl.n	800fa00 <_printf_float+0x24c>
 800f9de:	ee18 3a10 	vmov	r3, s16
 800f9e2:	4652      	mov	r2, sl
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	47b8      	blx	r7
 800f9ea:	3001      	adds	r0, #1
 800f9ec:	f43f af41 	beq.w	800f872 <_printf_float+0xbe>
 800f9f0:	f04f 0800 	mov.w	r8, #0
 800f9f4:	f104 091a 	add.w	r9, r4, #26
 800f9f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	4543      	cmp	r3, r8
 800f9fe:	dc09      	bgt.n	800fa14 <_printf_float+0x260>
 800fa00:	6823      	ldr	r3, [r4, #0]
 800fa02:	079b      	lsls	r3, r3, #30
 800fa04:	f100 8107 	bmi.w	800fc16 <_printf_float+0x462>
 800fa08:	68e0      	ldr	r0, [r4, #12]
 800fa0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa0c:	4298      	cmp	r0, r3
 800fa0e:	bfb8      	it	lt
 800fa10:	4618      	movlt	r0, r3
 800fa12:	e730      	b.n	800f876 <_printf_float+0xc2>
 800fa14:	2301      	movs	r3, #1
 800fa16:	464a      	mov	r2, r9
 800fa18:	4631      	mov	r1, r6
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	47b8      	blx	r7
 800fa1e:	3001      	adds	r0, #1
 800fa20:	f43f af27 	beq.w	800f872 <_printf_float+0xbe>
 800fa24:	f108 0801 	add.w	r8, r8, #1
 800fa28:	e7e6      	b.n	800f9f8 <_printf_float+0x244>
 800fa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	dc39      	bgt.n	800faa4 <_printf_float+0x2f0>
 800fa30:	4a1b      	ldr	r2, [pc, #108]	; (800faa0 <_printf_float+0x2ec>)
 800fa32:	2301      	movs	r3, #1
 800fa34:	4631      	mov	r1, r6
 800fa36:	4628      	mov	r0, r5
 800fa38:	47b8      	blx	r7
 800fa3a:	3001      	adds	r0, #1
 800fa3c:	f43f af19 	beq.w	800f872 <_printf_float+0xbe>
 800fa40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fa44:	4313      	orrs	r3, r2
 800fa46:	d102      	bne.n	800fa4e <_printf_float+0x29a>
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	07d9      	lsls	r1, r3, #31
 800fa4c:	d5d8      	bpl.n	800fa00 <_printf_float+0x24c>
 800fa4e:	ee18 3a10 	vmov	r3, s16
 800fa52:	4652      	mov	r2, sl
 800fa54:	4631      	mov	r1, r6
 800fa56:	4628      	mov	r0, r5
 800fa58:	47b8      	blx	r7
 800fa5a:	3001      	adds	r0, #1
 800fa5c:	f43f af09 	beq.w	800f872 <_printf_float+0xbe>
 800fa60:	f04f 0900 	mov.w	r9, #0
 800fa64:	f104 0a1a 	add.w	sl, r4, #26
 800fa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa6a:	425b      	negs	r3, r3
 800fa6c:	454b      	cmp	r3, r9
 800fa6e:	dc01      	bgt.n	800fa74 <_printf_float+0x2c0>
 800fa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa72:	e792      	b.n	800f99a <_printf_float+0x1e6>
 800fa74:	2301      	movs	r3, #1
 800fa76:	4652      	mov	r2, sl
 800fa78:	4631      	mov	r1, r6
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	47b8      	blx	r7
 800fa7e:	3001      	adds	r0, #1
 800fa80:	f43f aef7 	beq.w	800f872 <_printf_float+0xbe>
 800fa84:	f109 0901 	add.w	r9, r9, #1
 800fa88:	e7ee      	b.n	800fa68 <_printf_float+0x2b4>
 800fa8a:	bf00      	nop
 800fa8c:	7fefffff 	.word	0x7fefffff
 800fa90:	08016948 	.word	0x08016948
 800fa94:	0801694c 	.word	0x0801694c
 800fa98:	08016950 	.word	0x08016950
 800fa9c:	08016954 	.word	0x08016954
 800faa0:	08016958 	.word	0x08016958
 800faa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800faa8:	429a      	cmp	r2, r3
 800faaa:	bfa8      	it	ge
 800faac:	461a      	movge	r2, r3
 800faae:	2a00      	cmp	r2, #0
 800fab0:	4691      	mov	r9, r2
 800fab2:	dc37      	bgt.n	800fb24 <_printf_float+0x370>
 800fab4:	f04f 0b00 	mov.w	fp, #0
 800fab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fabc:	f104 021a 	add.w	r2, r4, #26
 800fac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fac2:	9305      	str	r3, [sp, #20]
 800fac4:	eba3 0309 	sub.w	r3, r3, r9
 800fac8:	455b      	cmp	r3, fp
 800faca:	dc33      	bgt.n	800fb34 <_printf_float+0x380>
 800facc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fad0:	429a      	cmp	r2, r3
 800fad2:	db3b      	blt.n	800fb4c <_printf_float+0x398>
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	07da      	lsls	r2, r3, #31
 800fad8:	d438      	bmi.n	800fb4c <_printf_float+0x398>
 800fada:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fade:	eba2 0903 	sub.w	r9, r2, r3
 800fae2:	9b05      	ldr	r3, [sp, #20]
 800fae4:	1ad2      	subs	r2, r2, r3
 800fae6:	4591      	cmp	r9, r2
 800fae8:	bfa8      	it	ge
 800faea:	4691      	movge	r9, r2
 800faec:	f1b9 0f00 	cmp.w	r9, #0
 800faf0:	dc35      	bgt.n	800fb5e <_printf_float+0x3aa>
 800faf2:	f04f 0800 	mov.w	r8, #0
 800faf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fafa:	f104 0a1a 	add.w	sl, r4, #26
 800fafe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb02:	1a9b      	subs	r3, r3, r2
 800fb04:	eba3 0309 	sub.w	r3, r3, r9
 800fb08:	4543      	cmp	r3, r8
 800fb0a:	f77f af79 	ble.w	800fa00 <_printf_float+0x24c>
 800fb0e:	2301      	movs	r3, #1
 800fb10:	4652      	mov	r2, sl
 800fb12:	4631      	mov	r1, r6
 800fb14:	4628      	mov	r0, r5
 800fb16:	47b8      	blx	r7
 800fb18:	3001      	adds	r0, #1
 800fb1a:	f43f aeaa 	beq.w	800f872 <_printf_float+0xbe>
 800fb1e:	f108 0801 	add.w	r8, r8, #1
 800fb22:	e7ec      	b.n	800fafe <_printf_float+0x34a>
 800fb24:	4613      	mov	r3, r2
 800fb26:	4631      	mov	r1, r6
 800fb28:	4642      	mov	r2, r8
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	47b8      	blx	r7
 800fb2e:	3001      	adds	r0, #1
 800fb30:	d1c0      	bne.n	800fab4 <_printf_float+0x300>
 800fb32:	e69e      	b.n	800f872 <_printf_float+0xbe>
 800fb34:	2301      	movs	r3, #1
 800fb36:	4631      	mov	r1, r6
 800fb38:	4628      	mov	r0, r5
 800fb3a:	9205      	str	r2, [sp, #20]
 800fb3c:	47b8      	blx	r7
 800fb3e:	3001      	adds	r0, #1
 800fb40:	f43f ae97 	beq.w	800f872 <_printf_float+0xbe>
 800fb44:	9a05      	ldr	r2, [sp, #20]
 800fb46:	f10b 0b01 	add.w	fp, fp, #1
 800fb4a:	e7b9      	b.n	800fac0 <_printf_float+0x30c>
 800fb4c:	ee18 3a10 	vmov	r3, s16
 800fb50:	4652      	mov	r2, sl
 800fb52:	4631      	mov	r1, r6
 800fb54:	4628      	mov	r0, r5
 800fb56:	47b8      	blx	r7
 800fb58:	3001      	adds	r0, #1
 800fb5a:	d1be      	bne.n	800fada <_printf_float+0x326>
 800fb5c:	e689      	b.n	800f872 <_printf_float+0xbe>
 800fb5e:	9a05      	ldr	r2, [sp, #20]
 800fb60:	464b      	mov	r3, r9
 800fb62:	4442      	add	r2, r8
 800fb64:	4631      	mov	r1, r6
 800fb66:	4628      	mov	r0, r5
 800fb68:	47b8      	blx	r7
 800fb6a:	3001      	adds	r0, #1
 800fb6c:	d1c1      	bne.n	800faf2 <_printf_float+0x33e>
 800fb6e:	e680      	b.n	800f872 <_printf_float+0xbe>
 800fb70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb72:	2a01      	cmp	r2, #1
 800fb74:	dc01      	bgt.n	800fb7a <_printf_float+0x3c6>
 800fb76:	07db      	lsls	r3, r3, #31
 800fb78:	d53a      	bpl.n	800fbf0 <_printf_float+0x43c>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	4642      	mov	r2, r8
 800fb7e:	4631      	mov	r1, r6
 800fb80:	4628      	mov	r0, r5
 800fb82:	47b8      	blx	r7
 800fb84:	3001      	adds	r0, #1
 800fb86:	f43f ae74 	beq.w	800f872 <_printf_float+0xbe>
 800fb8a:	ee18 3a10 	vmov	r3, s16
 800fb8e:	4652      	mov	r2, sl
 800fb90:	4631      	mov	r1, r6
 800fb92:	4628      	mov	r0, r5
 800fb94:	47b8      	blx	r7
 800fb96:	3001      	adds	r0, #1
 800fb98:	f43f ae6b 	beq.w	800f872 <_printf_float+0xbe>
 800fb9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fba0:	2200      	movs	r2, #0
 800fba2:	2300      	movs	r3, #0
 800fba4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fba8:	f7f0 ff66 	bl	8000a78 <__aeabi_dcmpeq>
 800fbac:	b9d8      	cbnz	r0, 800fbe6 <_printf_float+0x432>
 800fbae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fbb2:	f108 0201 	add.w	r2, r8, #1
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	4628      	mov	r0, r5
 800fbba:	47b8      	blx	r7
 800fbbc:	3001      	adds	r0, #1
 800fbbe:	d10e      	bne.n	800fbde <_printf_float+0x42a>
 800fbc0:	e657      	b.n	800f872 <_printf_float+0xbe>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	4652      	mov	r2, sl
 800fbc6:	4631      	mov	r1, r6
 800fbc8:	4628      	mov	r0, r5
 800fbca:	47b8      	blx	r7
 800fbcc:	3001      	adds	r0, #1
 800fbce:	f43f ae50 	beq.w	800f872 <_printf_float+0xbe>
 800fbd2:	f108 0801 	add.w	r8, r8, #1
 800fbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	4543      	cmp	r3, r8
 800fbdc:	dcf1      	bgt.n	800fbc2 <_printf_float+0x40e>
 800fbde:	464b      	mov	r3, r9
 800fbe0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fbe4:	e6da      	b.n	800f99c <_printf_float+0x1e8>
 800fbe6:	f04f 0800 	mov.w	r8, #0
 800fbea:	f104 0a1a 	add.w	sl, r4, #26
 800fbee:	e7f2      	b.n	800fbd6 <_printf_float+0x422>
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	4642      	mov	r2, r8
 800fbf4:	e7df      	b.n	800fbb6 <_printf_float+0x402>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	464a      	mov	r2, r9
 800fbfa:	4631      	mov	r1, r6
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	47b8      	blx	r7
 800fc00:	3001      	adds	r0, #1
 800fc02:	f43f ae36 	beq.w	800f872 <_printf_float+0xbe>
 800fc06:	f108 0801 	add.w	r8, r8, #1
 800fc0a:	68e3      	ldr	r3, [r4, #12]
 800fc0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc0e:	1a5b      	subs	r3, r3, r1
 800fc10:	4543      	cmp	r3, r8
 800fc12:	dcf0      	bgt.n	800fbf6 <_printf_float+0x442>
 800fc14:	e6f8      	b.n	800fa08 <_printf_float+0x254>
 800fc16:	f04f 0800 	mov.w	r8, #0
 800fc1a:	f104 0919 	add.w	r9, r4, #25
 800fc1e:	e7f4      	b.n	800fc0a <_printf_float+0x456>

0800fc20 <_printf_common>:
 800fc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc24:	4616      	mov	r6, r2
 800fc26:	4699      	mov	r9, r3
 800fc28:	688a      	ldr	r2, [r1, #8]
 800fc2a:	690b      	ldr	r3, [r1, #16]
 800fc2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc30:	4293      	cmp	r3, r2
 800fc32:	bfb8      	it	lt
 800fc34:	4613      	movlt	r3, r2
 800fc36:	6033      	str	r3, [r6, #0]
 800fc38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc3c:	4607      	mov	r7, r0
 800fc3e:	460c      	mov	r4, r1
 800fc40:	b10a      	cbz	r2, 800fc46 <_printf_common+0x26>
 800fc42:	3301      	adds	r3, #1
 800fc44:	6033      	str	r3, [r6, #0]
 800fc46:	6823      	ldr	r3, [r4, #0]
 800fc48:	0699      	lsls	r1, r3, #26
 800fc4a:	bf42      	ittt	mi
 800fc4c:	6833      	ldrmi	r3, [r6, #0]
 800fc4e:	3302      	addmi	r3, #2
 800fc50:	6033      	strmi	r3, [r6, #0]
 800fc52:	6825      	ldr	r5, [r4, #0]
 800fc54:	f015 0506 	ands.w	r5, r5, #6
 800fc58:	d106      	bne.n	800fc68 <_printf_common+0x48>
 800fc5a:	f104 0a19 	add.w	sl, r4, #25
 800fc5e:	68e3      	ldr	r3, [r4, #12]
 800fc60:	6832      	ldr	r2, [r6, #0]
 800fc62:	1a9b      	subs	r3, r3, r2
 800fc64:	42ab      	cmp	r3, r5
 800fc66:	dc26      	bgt.n	800fcb6 <_printf_common+0x96>
 800fc68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc6c:	1e13      	subs	r3, r2, #0
 800fc6e:	6822      	ldr	r2, [r4, #0]
 800fc70:	bf18      	it	ne
 800fc72:	2301      	movne	r3, #1
 800fc74:	0692      	lsls	r2, r2, #26
 800fc76:	d42b      	bmi.n	800fcd0 <_printf_common+0xb0>
 800fc78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc7c:	4649      	mov	r1, r9
 800fc7e:	4638      	mov	r0, r7
 800fc80:	47c0      	blx	r8
 800fc82:	3001      	adds	r0, #1
 800fc84:	d01e      	beq.n	800fcc4 <_printf_common+0xa4>
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	6922      	ldr	r2, [r4, #16]
 800fc8a:	f003 0306 	and.w	r3, r3, #6
 800fc8e:	2b04      	cmp	r3, #4
 800fc90:	bf02      	ittt	eq
 800fc92:	68e5      	ldreq	r5, [r4, #12]
 800fc94:	6833      	ldreq	r3, [r6, #0]
 800fc96:	1aed      	subeq	r5, r5, r3
 800fc98:	68a3      	ldr	r3, [r4, #8]
 800fc9a:	bf0c      	ite	eq
 800fc9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fca0:	2500      	movne	r5, #0
 800fca2:	4293      	cmp	r3, r2
 800fca4:	bfc4      	itt	gt
 800fca6:	1a9b      	subgt	r3, r3, r2
 800fca8:	18ed      	addgt	r5, r5, r3
 800fcaa:	2600      	movs	r6, #0
 800fcac:	341a      	adds	r4, #26
 800fcae:	42b5      	cmp	r5, r6
 800fcb0:	d11a      	bne.n	800fce8 <_printf_common+0xc8>
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	e008      	b.n	800fcc8 <_printf_common+0xa8>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	4652      	mov	r2, sl
 800fcba:	4649      	mov	r1, r9
 800fcbc:	4638      	mov	r0, r7
 800fcbe:	47c0      	blx	r8
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	d103      	bne.n	800fccc <_printf_common+0xac>
 800fcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fccc:	3501      	adds	r5, #1
 800fcce:	e7c6      	b.n	800fc5e <_printf_common+0x3e>
 800fcd0:	18e1      	adds	r1, r4, r3
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	2030      	movs	r0, #48	; 0x30
 800fcd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcda:	4422      	add	r2, r4
 800fcdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fce4:	3302      	adds	r3, #2
 800fce6:	e7c7      	b.n	800fc78 <_printf_common+0x58>
 800fce8:	2301      	movs	r3, #1
 800fcea:	4622      	mov	r2, r4
 800fcec:	4649      	mov	r1, r9
 800fcee:	4638      	mov	r0, r7
 800fcf0:	47c0      	blx	r8
 800fcf2:	3001      	adds	r0, #1
 800fcf4:	d0e6      	beq.n	800fcc4 <_printf_common+0xa4>
 800fcf6:	3601      	adds	r6, #1
 800fcf8:	e7d9      	b.n	800fcae <_printf_common+0x8e>
	...

0800fcfc <_printf_i>:
 800fcfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd00:	7e0f      	ldrb	r7, [r1, #24]
 800fd02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd04:	2f78      	cmp	r7, #120	; 0x78
 800fd06:	4691      	mov	r9, r2
 800fd08:	4680      	mov	r8, r0
 800fd0a:	460c      	mov	r4, r1
 800fd0c:	469a      	mov	sl, r3
 800fd0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd12:	d807      	bhi.n	800fd24 <_printf_i+0x28>
 800fd14:	2f62      	cmp	r7, #98	; 0x62
 800fd16:	d80a      	bhi.n	800fd2e <_printf_i+0x32>
 800fd18:	2f00      	cmp	r7, #0
 800fd1a:	f000 80d4 	beq.w	800fec6 <_printf_i+0x1ca>
 800fd1e:	2f58      	cmp	r7, #88	; 0x58
 800fd20:	f000 80c0 	beq.w	800fea4 <_printf_i+0x1a8>
 800fd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd2c:	e03a      	b.n	800fda4 <_printf_i+0xa8>
 800fd2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd32:	2b15      	cmp	r3, #21
 800fd34:	d8f6      	bhi.n	800fd24 <_printf_i+0x28>
 800fd36:	a101      	add	r1, pc, #4	; (adr r1, 800fd3c <_printf_i+0x40>)
 800fd38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd3c:	0800fd95 	.word	0x0800fd95
 800fd40:	0800fda9 	.word	0x0800fda9
 800fd44:	0800fd25 	.word	0x0800fd25
 800fd48:	0800fd25 	.word	0x0800fd25
 800fd4c:	0800fd25 	.word	0x0800fd25
 800fd50:	0800fd25 	.word	0x0800fd25
 800fd54:	0800fda9 	.word	0x0800fda9
 800fd58:	0800fd25 	.word	0x0800fd25
 800fd5c:	0800fd25 	.word	0x0800fd25
 800fd60:	0800fd25 	.word	0x0800fd25
 800fd64:	0800fd25 	.word	0x0800fd25
 800fd68:	0800fead 	.word	0x0800fead
 800fd6c:	0800fdd5 	.word	0x0800fdd5
 800fd70:	0800fe67 	.word	0x0800fe67
 800fd74:	0800fd25 	.word	0x0800fd25
 800fd78:	0800fd25 	.word	0x0800fd25
 800fd7c:	0800fecf 	.word	0x0800fecf
 800fd80:	0800fd25 	.word	0x0800fd25
 800fd84:	0800fdd5 	.word	0x0800fdd5
 800fd88:	0800fd25 	.word	0x0800fd25
 800fd8c:	0800fd25 	.word	0x0800fd25
 800fd90:	0800fe6f 	.word	0x0800fe6f
 800fd94:	682b      	ldr	r3, [r5, #0]
 800fd96:	1d1a      	adds	r2, r3, #4
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	602a      	str	r2, [r5, #0]
 800fd9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fda0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fda4:	2301      	movs	r3, #1
 800fda6:	e09f      	b.n	800fee8 <_printf_i+0x1ec>
 800fda8:	6820      	ldr	r0, [r4, #0]
 800fdaa:	682b      	ldr	r3, [r5, #0]
 800fdac:	0607      	lsls	r7, r0, #24
 800fdae:	f103 0104 	add.w	r1, r3, #4
 800fdb2:	6029      	str	r1, [r5, #0]
 800fdb4:	d501      	bpl.n	800fdba <_printf_i+0xbe>
 800fdb6:	681e      	ldr	r6, [r3, #0]
 800fdb8:	e003      	b.n	800fdc2 <_printf_i+0xc6>
 800fdba:	0646      	lsls	r6, r0, #25
 800fdbc:	d5fb      	bpl.n	800fdb6 <_printf_i+0xba>
 800fdbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fdc2:	2e00      	cmp	r6, #0
 800fdc4:	da03      	bge.n	800fdce <_printf_i+0xd2>
 800fdc6:	232d      	movs	r3, #45	; 0x2d
 800fdc8:	4276      	negs	r6, r6
 800fdca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdce:	485a      	ldr	r0, [pc, #360]	; (800ff38 <_printf_i+0x23c>)
 800fdd0:	230a      	movs	r3, #10
 800fdd2:	e012      	b.n	800fdfa <_printf_i+0xfe>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	6820      	ldr	r0, [r4, #0]
 800fdd8:	1d19      	adds	r1, r3, #4
 800fdda:	6029      	str	r1, [r5, #0]
 800fddc:	0605      	lsls	r5, r0, #24
 800fdde:	d501      	bpl.n	800fde4 <_printf_i+0xe8>
 800fde0:	681e      	ldr	r6, [r3, #0]
 800fde2:	e002      	b.n	800fdea <_printf_i+0xee>
 800fde4:	0641      	lsls	r1, r0, #25
 800fde6:	d5fb      	bpl.n	800fde0 <_printf_i+0xe4>
 800fde8:	881e      	ldrh	r6, [r3, #0]
 800fdea:	4853      	ldr	r0, [pc, #332]	; (800ff38 <_printf_i+0x23c>)
 800fdec:	2f6f      	cmp	r7, #111	; 0x6f
 800fdee:	bf0c      	ite	eq
 800fdf0:	2308      	moveq	r3, #8
 800fdf2:	230a      	movne	r3, #10
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fdfa:	6865      	ldr	r5, [r4, #4]
 800fdfc:	60a5      	str	r5, [r4, #8]
 800fdfe:	2d00      	cmp	r5, #0
 800fe00:	bfa2      	ittt	ge
 800fe02:	6821      	ldrge	r1, [r4, #0]
 800fe04:	f021 0104 	bicge.w	r1, r1, #4
 800fe08:	6021      	strge	r1, [r4, #0]
 800fe0a:	b90e      	cbnz	r6, 800fe10 <_printf_i+0x114>
 800fe0c:	2d00      	cmp	r5, #0
 800fe0e:	d04b      	beq.n	800fea8 <_printf_i+0x1ac>
 800fe10:	4615      	mov	r5, r2
 800fe12:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe16:	fb03 6711 	mls	r7, r3, r1, r6
 800fe1a:	5dc7      	ldrb	r7, [r0, r7]
 800fe1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe20:	4637      	mov	r7, r6
 800fe22:	42bb      	cmp	r3, r7
 800fe24:	460e      	mov	r6, r1
 800fe26:	d9f4      	bls.n	800fe12 <_printf_i+0x116>
 800fe28:	2b08      	cmp	r3, #8
 800fe2a:	d10b      	bne.n	800fe44 <_printf_i+0x148>
 800fe2c:	6823      	ldr	r3, [r4, #0]
 800fe2e:	07de      	lsls	r6, r3, #31
 800fe30:	d508      	bpl.n	800fe44 <_printf_i+0x148>
 800fe32:	6923      	ldr	r3, [r4, #16]
 800fe34:	6861      	ldr	r1, [r4, #4]
 800fe36:	4299      	cmp	r1, r3
 800fe38:	bfde      	ittt	le
 800fe3a:	2330      	movle	r3, #48	; 0x30
 800fe3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe40:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe44:	1b52      	subs	r2, r2, r5
 800fe46:	6122      	str	r2, [r4, #16]
 800fe48:	f8cd a000 	str.w	sl, [sp]
 800fe4c:	464b      	mov	r3, r9
 800fe4e:	aa03      	add	r2, sp, #12
 800fe50:	4621      	mov	r1, r4
 800fe52:	4640      	mov	r0, r8
 800fe54:	f7ff fee4 	bl	800fc20 <_printf_common>
 800fe58:	3001      	adds	r0, #1
 800fe5a:	d14a      	bne.n	800fef2 <_printf_i+0x1f6>
 800fe5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe60:	b004      	add	sp, #16
 800fe62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	f043 0320 	orr.w	r3, r3, #32
 800fe6c:	6023      	str	r3, [r4, #0]
 800fe6e:	4833      	ldr	r0, [pc, #204]	; (800ff3c <_printf_i+0x240>)
 800fe70:	2778      	movs	r7, #120	; 0x78
 800fe72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	6829      	ldr	r1, [r5, #0]
 800fe7a:	061f      	lsls	r7, r3, #24
 800fe7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe80:	d402      	bmi.n	800fe88 <_printf_i+0x18c>
 800fe82:	065f      	lsls	r7, r3, #25
 800fe84:	bf48      	it	mi
 800fe86:	b2b6      	uxthmi	r6, r6
 800fe88:	07df      	lsls	r7, r3, #31
 800fe8a:	bf48      	it	mi
 800fe8c:	f043 0320 	orrmi.w	r3, r3, #32
 800fe90:	6029      	str	r1, [r5, #0]
 800fe92:	bf48      	it	mi
 800fe94:	6023      	strmi	r3, [r4, #0]
 800fe96:	b91e      	cbnz	r6, 800fea0 <_printf_i+0x1a4>
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	f023 0320 	bic.w	r3, r3, #32
 800fe9e:	6023      	str	r3, [r4, #0]
 800fea0:	2310      	movs	r3, #16
 800fea2:	e7a7      	b.n	800fdf4 <_printf_i+0xf8>
 800fea4:	4824      	ldr	r0, [pc, #144]	; (800ff38 <_printf_i+0x23c>)
 800fea6:	e7e4      	b.n	800fe72 <_printf_i+0x176>
 800fea8:	4615      	mov	r5, r2
 800feaa:	e7bd      	b.n	800fe28 <_printf_i+0x12c>
 800feac:	682b      	ldr	r3, [r5, #0]
 800feae:	6826      	ldr	r6, [r4, #0]
 800feb0:	6961      	ldr	r1, [r4, #20]
 800feb2:	1d18      	adds	r0, r3, #4
 800feb4:	6028      	str	r0, [r5, #0]
 800feb6:	0635      	lsls	r5, r6, #24
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	d501      	bpl.n	800fec0 <_printf_i+0x1c4>
 800febc:	6019      	str	r1, [r3, #0]
 800febe:	e002      	b.n	800fec6 <_printf_i+0x1ca>
 800fec0:	0670      	lsls	r0, r6, #25
 800fec2:	d5fb      	bpl.n	800febc <_printf_i+0x1c0>
 800fec4:	8019      	strh	r1, [r3, #0]
 800fec6:	2300      	movs	r3, #0
 800fec8:	6123      	str	r3, [r4, #16]
 800feca:	4615      	mov	r5, r2
 800fecc:	e7bc      	b.n	800fe48 <_printf_i+0x14c>
 800fece:	682b      	ldr	r3, [r5, #0]
 800fed0:	1d1a      	adds	r2, r3, #4
 800fed2:	602a      	str	r2, [r5, #0]
 800fed4:	681d      	ldr	r5, [r3, #0]
 800fed6:	6862      	ldr	r2, [r4, #4]
 800fed8:	2100      	movs	r1, #0
 800feda:	4628      	mov	r0, r5
 800fedc:	f7f0 f950 	bl	8000180 <memchr>
 800fee0:	b108      	cbz	r0, 800fee6 <_printf_i+0x1ea>
 800fee2:	1b40      	subs	r0, r0, r5
 800fee4:	6060      	str	r0, [r4, #4]
 800fee6:	6863      	ldr	r3, [r4, #4]
 800fee8:	6123      	str	r3, [r4, #16]
 800feea:	2300      	movs	r3, #0
 800feec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fef0:	e7aa      	b.n	800fe48 <_printf_i+0x14c>
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	462a      	mov	r2, r5
 800fef6:	4649      	mov	r1, r9
 800fef8:	4640      	mov	r0, r8
 800fefa:	47d0      	blx	sl
 800fefc:	3001      	adds	r0, #1
 800fefe:	d0ad      	beq.n	800fe5c <_printf_i+0x160>
 800ff00:	6823      	ldr	r3, [r4, #0]
 800ff02:	079b      	lsls	r3, r3, #30
 800ff04:	d413      	bmi.n	800ff2e <_printf_i+0x232>
 800ff06:	68e0      	ldr	r0, [r4, #12]
 800ff08:	9b03      	ldr	r3, [sp, #12]
 800ff0a:	4298      	cmp	r0, r3
 800ff0c:	bfb8      	it	lt
 800ff0e:	4618      	movlt	r0, r3
 800ff10:	e7a6      	b.n	800fe60 <_printf_i+0x164>
 800ff12:	2301      	movs	r3, #1
 800ff14:	4632      	mov	r2, r6
 800ff16:	4649      	mov	r1, r9
 800ff18:	4640      	mov	r0, r8
 800ff1a:	47d0      	blx	sl
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	d09d      	beq.n	800fe5c <_printf_i+0x160>
 800ff20:	3501      	adds	r5, #1
 800ff22:	68e3      	ldr	r3, [r4, #12]
 800ff24:	9903      	ldr	r1, [sp, #12]
 800ff26:	1a5b      	subs	r3, r3, r1
 800ff28:	42ab      	cmp	r3, r5
 800ff2a:	dcf2      	bgt.n	800ff12 <_printf_i+0x216>
 800ff2c:	e7eb      	b.n	800ff06 <_printf_i+0x20a>
 800ff2e:	2500      	movs	r5, #0
 800ff30:	f104 0619 	add.w	r6, r4, #25
 800ff34:	e7f5      	b.n	800ff22 <_printf_i+0x226>
 800ff36:	bf00      	nop
 800ff38:	0801695a 	.word	0x0801695a
 800ff3c:	0801696b 	.word	0x0801696b

0800ff40 <_scanf_float>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	b087      	sub	sp, #28
 800ff46:	4617      	mov	r7, r2
 800ff48:	9303      	str	r3, [sp, #12]
 800ff4a:	688b      	ldr	r3, [r1, #8]
 800ff4c:	1e5a      	subs	r2, r3, #1
 800ff4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ff52:	bf83      	ittte	hi
 800ff54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ff58:	195b      	addhi	r3, r3, r5
 800ff5a:	9302      	strhi	r3, [sp, #8]
 800ff5c:	2300      	movls	r3, #0
 800ff5e:	bf86      	itte	hi
 800ff60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ff64:	608b      	strhi	r3, [r1, #8]
 800ff66:	9302      	strls	r3, [sp, #8]
 800ff68:	680b      	ldr	r3, [r1, #0]
 800ff6a:	468b      	mov	fp, r1
 800ff6c:	2500      	movs	r5, #0
 800ff6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ff72:	f84b 3b1c 	str.w	r3, [fp], #28
 800ff76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	460c      	mov	r4, r1
 800ff7e:	465e      	mov	r6, fp
 800ff80:	46aa      	mov	sl, r5
 800ff82:	46a9      	mov	r9, r5
 800ff84:	9501      	str	r5, [sp, #4]
 800ff86:	68a2      	ldr	r2, [r4, #8]
 800ff88:	b152      	cbz	r2, 800ffa0 <_scanf_float+0x60>
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b4e      	cmp	r3, #78	; 0x4e
 800ff90:	d864      	bhi.n	801005c <_scanf_float+0x11c>
 800ff92:	2b40      	cmp	r3, #64	; 0x40
 800ff94:	d83c      	bhi.n	8010010 <_scanf_float+0xd0>
 800ff96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ff9a:	b2c8      	uxtb	r0, r1
 800ff9c:	280e      	cmp	r0, #14
 800ff9e:	d93a      	bls.n	8010016 <_scanf_float+0xd6>
 800ffa0:	f1b9 0f00 	cmp.w	r9, #0
 800ffa4:	d003      	beq.n	800ffae <_scanf_float+0x6e>
 800ffa6:	6823      	ldr	r3, [r4, #0]
 800ffa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ffac:	6023      	str	r3, [r4, #0]
 800ffae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffb2:	f1ba 0f01 	cmp.w	sl, #1
 800ffb6:	f200 8113 	bhi.w	80101e0 <_scanf_float+0x2a0>
 800ffba:	455e      	cmp	r6, fp
 800ffbc:	f200 8105 	bhi.w	80101ca <_scanf_float+0x28a>
 800ffc0:	2501      	movs	r5, #1
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	b007      	add	sp, #28
 800ffc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ffce:	2a0d      	cmp	r2, #13
 800ffd0:	d8e6      	bhi.n	800ffa0 <_scanf_float+0x60>
 800ffd2:	a101      	add	r1, pc, #4	; (adr r1, 800ffd8 <_scanf_float+0x98>)
 800ffd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ffd8:	08010117 	.word	0x08010117
 800ffdc:	0800ffa1 	.word	0x0800ffa1
 800ffe0:	0800ffa1 	.word	0x0800ffa1
 800ffe4:	0800ffa1 	.word	0x0800ffa1
 800ffe8:	08010177 	.word	0x08010177
 800ffec:	0801014f 	.word	0x0801014f
 800fff0:	0800ffa1 	.word	0x0800ffa1
 800fff4:	0800ffa1 	.word	0x0800ffa1
 800fff8:	08010125 	.word	0x08010125
 800fffc:	0800ffa1 	.word	0x0800ffa1
 8010000:	0800ffa1 	.word	0x0800ffa1
 8010004:	0800ffa1 	.word	0x0800ffa1
 8010008:	0800ffa1 	.word	0x0800ffa1
 801000c:	080100dd 	.word	0x080100dd
 8010010:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010014:	e7db      	b.n	800ffce <_scanf_float+0x8e>
 8010016:	290e      	cmp	r1, #14
 8010018:	d8c2      	bhi.n	800ffa0 <_scanf_float+0x60>
 801001a:	a001      	add	r0, pc, #4	; (adr r0, 8010020 <_scanf_float+0xe0>)
 801001c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010020:	080100cf 	.word	0x080100cf
 8010024:	0800ffa1 	.word	0x0800ffa1
 8010028:	080100cf 	.word	0x080100cf
 801002c:	08010163 	.word	0x08010163
 8010030:	0800ffa1 	.word	0x0800ffa1
 8010034:	0801007d 	.word	0x0801007d
 8010038:	080100b9 	.word	0x080100b9
 801003c:	080100b9 	.word	0x080100b9
 8010040:	080100b9 	.word	0x080100b9
 8010044:	080100b9 	.word	0x080100b9
 8010048:	080100b9 	.word	0x080100b9
 801004c:	080100b9 	.word	0x080100b9
 8010050:	080100b9 	.word	0x080100b9
 8010054:	080100b9 	.word	0x080100b9
 8010058:	080100b9 	.word	0x080100b9
 801005c:	2b6e      	cmp	r3, #110	; 0x6e
 801005e:	d809      	bhi.n	8010074 <_scanf_float+0x134>
 8010060:	2b60      	cmp	r3, #96	; 0x60
 8010062:	d8b2      	bhi.n	800ffca <_scanf_float+0x8a>
 8010064:	2b54      	cmp	r3, #84	; 0x54
 8010066:	d077      	beq.n	8010158 <_scanf_float+0x218>
 8010068:	2b59      	cmp	r3, #89	; 0x59
 801006a:	d199      	bne.n	800ffa0 <_scanf_float+0x60>
 801006c:	2d07      	cmp	r5, #7
 801006e:	d197      	bne.n	800ffa0 <_scanf_float+0x60>
 8010070:	2508      	movs	r5, #8
 8010072:	e029      	b.n	80100c8 <_scanf_float+0x188>
 8010074:	2b74      	cmp	r3, #116	; 0x74
 8010076:	d06f      	beq.n	8010158 <_scanf_float+0x218>
 8010078:	2b79      	cmp	r3, #121	; 0x79
 801007a:	e7f6      	b.n	801006a <_scanf_float+0x12a>
 801007c:	6821      	ldr	r1, [r4, #0]
 801007e:	05c8      	lsls	r0, r1, #23
 8010080:	d51a      	bpl.n	80100b8 <_scanf_float+0x178>
 8010082:	9b02      	ldr	r3, [sp, #8]
 8010084:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010088:	6021      	str	r1, [r4, #0]
 801008a:	f109 0901 	add.w	r9, r9, #1
 801008e:	b11b      	cbz	r3, 8010098 <_scanf_float+0x158>
 8010090:	3b01      	subs	r3, #1
 8010092:	3201      	adds	r2, #1
 8010094:	9302      	str	r3, [sp, #8]
 8010096:	60a2      	str	r2, [r4, #8]
 8010098:	68a3      	ldr	r3, [r4, #8]
 801009a:	3b01      	subs	r3, #1
 801009c:	60a3      	str	r3, [r4, #8]
 801009e:	6923      	ldr	r3, [r4, #16]
 80100a0:	3301      	adds	r3, #1
 80100a2:	6123      	str	r3, [r4, #16]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	607b      	str	r3, [r7, #4]
 80100ac:	f340 8084 	ble.w	80101b8 <_scanf_float+0x278>
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	3301      	adds	r3, #1
 80100b4:	603b      	str	r3, [r7, #0]
 80100b6:	e766      	b.n	800ff86 <_scanf_float+0x46>
 80100b8:	eb1a 0f05 	cmn.w	sl, r5
 80100bc:	f47f af70 	bne.w	800ffa0 <_scanf_float+0x60>
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80100c6:	6022      	str	r2, [r4, #0]
 80100c8:	f806 3b01 	strb.w	r3, [r6], #1
 80100cc:	e7e4      	b.n	8010098 <_scanf_float+0x158>
 80100ce:	6822      	ldr	r2, [r4, #0]
 80100d0:	0610      	lsls	r0, r2, #24
 80100d2:	f57f af65 	bpl.w	800ffa0 <_scanf_float+0x60>
 80100d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80100da:	e7f4      	b.n	80100c6 <_scanf_float+0x186>
 80100dc:	f1ba 0f00 	cmp.w	sl, #0
 80100e0:	d10e      	bne.n	8010100 <_scanf_float+0x1c0>
 80100e2:	f1b9 0f00 	cmp.w	r9, #0
 80100e6:	d10e      	bne.n	8010106 <_scanf_float+0x1c6>
 80100e8:	6822      	ldr	r2, [r4, #0]
 80100ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80100ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80100f2:	d108      	bne.n	8010106 <_scanf_float+0x1c6>
 80100f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80100f8:	6022      	str	r2, [r4, #0]
 80100fa:	f04f 0a01 	mov.w	sl, #1
 80100fe:	e7e3      	b.n	80100c8 <_scanf_float+0x188>
 8010100:	f1ba 0f02 	cmp.w	sl, #2
 8010104:	d055      	beq.n	80101b2 <_scanf_float+0x272>
 8010106:	2d01      	cmp	r5, #1
 8010108:	d002      	beq.n	8010110 <_scanf_float+0x1d0>
 801010a:	2d04      	cmp	r5, #4
 801010c:	f47f af48 	bne.w	800ffa0 <_scanf_float+0x60>
 8010110:	3501      	adds	r5, #1
 8010112:	b2ed      	uxtb	r5, r5
 8010114:	e7d8      	b.n	80100c8 <_scanf_float+0x188>
 8010116:	f1ba 0f01 	cmp.w	sl, #1
 801011a:	f47f af41 	bne.w	800ffa0 <_scanf_float+0x60>
 801011e:	f04f 0a02 	mov.w	sl, #2
 8010122:	e7d1      	b.n	80100c8 <_scanf_float+0x188>
 8010124:	b97d      	cbnz	r5, 8010146 <_scanf_float+0x206>
 8010126:	f1b9 0f00 	cmp.w	r9, #0
 801012a:	f47f af3c 	bne.w	800ffa6 <_scanf_float+0x66>
 801012e:	6822      	ldr	r2, [r4, #0]
 8010130:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010134:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010138:	f47f af39 	bne.w	800ffae <_scanf_float+0x6e>
 801013c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010140:	6022      	str	r2, [r4, #0]
 8010142:	2501      	movs	r5, #1
 8010144:	e7c0      	b.n	80100c8 <_scanf_float+0x188>
 8010146:	2d03      	cmp	r5, #3
 8010148:	d0e2      	beq.n	8010110 <_scanf_float+0x1d0>
 801014a:	2d05      	cmp	r5, #5
 801014c:	e7de      	b.n	801010c <_scanf_float+0x1cc>
 801014e:	2d02      	cmp	r5, #2
 8010150:	f47f af26 	bne.w	800ffa0 <_scanf_float+0x60>
 8010154:	2503      	movs	r5, #3
 8010156:	e7b7      	b.n	80100c8 <_scanf_float+0x188>
 8010158:	2d06      	cmp	r5, #6
 801015a:	f47f af21 	bne.w	800ffa0 <_scanf_float+0x60>
 801015e:	2507      	movs	r5, #7
 8010160:	e7b2      	b.n	80100c8 <_scanf_float+0x188>
 8010162:	6822      	ldr	r2, [r4, #0]
 8010164:	0591      	lsls	r1, r2, #22
 8010166:	f57f af1b 	bpl.w	800ffa0 <_scanf_float+0x60>
 801016a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801016e:	6022      	str	r2, [r4, #0]
 8010170:	f8cd 9004 	str.w	r9, [sp, #4]
 8010174:	e7a8      	b.n	80100c8 <_scanf_float+0x188>
 8010176:	6822      	ldr	r2, [r4, #0]
 8010178:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801017c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010180:	d006      	beq.n	8010190 <_scanf_float+0x250>
 8010182:	0550      	lsls	r0, r2, #21
 8010184:	f57f af0c 	bpl.w	800ffa0 <_scanf_float+0x60>
 8010188:	f1b9 0f00 	cmp.w	r9, #0
 801018c:	f43f af0f 	beq.w	800ffae <_scanf_float+0x6e>
 8010190:	0591      	lsls	r1, r2, #22
 8010192:	bf58      	it	pl
 8010194:	9901      	ldrpl	r1, [sp, #4]
 8010196:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801019a:	bf58      	it	pl
 801019c:	eba9 0101 	subpl.w	r1, r9, r1
 80101a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80101a4:	bf58      	it	pl
 80101a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80101aa:	6022      	str	r2, [r4, #0]
 80101ac:	f04f 0900 	mov.w	r9, #0
 80101b0:	e78a      	b.n	80100c8 <_scanf_float+0x188>
 80101b2:	f04f 0a03 	mov.w	sl, #3
 80101b6:	e787      	b.n	80100c8 <_scanf_float+0x188>
 80101b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80101bc:	4639      	mov	r1, r7
 80101be:	4640      	mov	r0, r8
 80101c0:	4798      	blx	r3
 80101c2:	2800      	cmp	r0, #0
 80101c4:	f43f aedf 	beq.w	800ff86 <_scanf_float+0x46>
 80101c8:	e6ea      	b.n	800ffa0 <_scanf_float+0x60>
 80101ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80101d2:	463a      	mov	r2, r7
 80101d4:	4640      	mov	r0, r8
 80101d6:	4798      	blx	r3
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	3b01      	subs	r3, #1
 80101dc:	6123      	str	r3, [r4, #16]
 80101de:	e6ec      	b.n	800ffba <_scanf_float+0x7a>
 80101e0:	1e6b      	subs	r3, r5, #1
 80101e2:	2b06      	cmp	r3, #6
 80101e4:	d825      	bhi.n	8010232 <_scanf_float+0x2f2>
 80101e6:	2d02      	cmp	r5, #2
 80101e8:	d836      	bhi.n	8010258 <_scanf_float+0x318>
 80101ea:	455e      	cmp	r6, fp
 80101ec:	f67f aee8 	bls.w	800ffc0 <_scanf_float+0x80>
 80101f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80101f8:	463a      	mov	r2, r7
 80101fa:	4640      	mov	r0, r8
 80101fc:	4798      	blx	r3
 80101fe:	6923      	ldr	r3, [r4, #16]
 8010200:	3b01      	subs	r3, #1
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	e7f1      	b.n	80101ea <_scanf_float+0x2aa>
 8010206:	9802      	ldr	r0, [sp, #8]
 8010208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801020c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010210:	9002      	str	r0, [sp, #8]
 8010212:	463a      	mov	r2, r7
 8010214:	4640      	mov	r0, r8
 8010216:	4798      	blx	r3
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	3b01      	subs	r3, #1
 801021c:	6123      	str	r3, [r4, #16]
 801021e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010222:	fa5f fa8a 	uxtb.w	sl, sl
 8010226:	f1ba 0f02 	cmp.w	sl, #2
 801022a:	d1ec      	bne.n	8010206 <_scanf_float+0x2c6>
 801022c:	3d03      	subs	r5, #3
 801022e:	b2ed      	uxtb	r5, r5
 8010230:	1b76      	subs	r6, r6, r5
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	05da      	lsls	r2, r3, #23
 8010236:	d52f      	bpl.n	8010298 <_scanf_float+0x358>
 8010238:	055b      	lsls	r3, r3, #21
 801023a:	d510      	bpl.n	801025e <_scanf_float+0x31e>
 801023c:	455e      	cmp	r6, fp
 801023e:	f67f aebf 	bls.w	800ffc0 <_scanf_float+0x80>
 8010242:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010246:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801024a:	463a      	mov	r2, r7
 801024c:	4640      	mov	r0, r8
 801024e:	4798      	blx	r3
 8010250:	6923      	ldr	r3, [r4, #16]
 8010252:	3b01      	subs	r3, #1
 8010254:	6123      	str	r3, [r4, #16]
 8010256:	e7f1      	b.n	801023c <_scanf_float+0x2fc>
 8010258:	46aa      	mov	sl, r5
 801025a:	9602      	str	r6, [sp, #8]
 801025c:	e7df      	b.n	801021e <_scanf_float+0x2de>
 801025e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010262:	6923      	ldr	r3, [r4, #16]
 8010264:	2965      	cmp	r1, #101	; 0x65
 8010266:	f103 33ff 	add.w	r3, r3, #4294967295
 801026a:	f106 35ff 	add.w	r5, r6, #4294967295
 801026e:	6123      	str	r3, [r4, #16]
 8010270:	d00c      	beq.n	801028c <_scanf_float+0x34c>
 8010272:	2945      	cmp	r1, #69	; 0x45
 8010274:	d00a      	beq.n	801028c <_scanf_float+0x34c>
 8010276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801027a:	463a      	mov	r2, r7
 801027c:	4640      	mov	r0, r8
 801027e:	4798      	blx	r3
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010286:	3b01      	subs	r3, #1
 8010288:	1eb5      	subs	r5, r6, #2
 801028a:	6123      	str	r3, [r4, #16]
 801028c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010290:	463a      	mov	r2, r7
 8010292:	4640      	mov	r0, r8
 8010294:	4798      	blx	r3
 8010296:	462e      	mov	r6, r5
 8010298:	6825      	ldr	r5, [r4, #0]
 801029a:	f015 0510 	ands.w	r5, r5, #16
 801029e:	d158      	bne.n	8010352 <_scanf_float+0x412>
 80102a0:	7035      	strb	r5, [r6, #0]
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80102a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102ac:	d11c      	bne.n	80102e8 <_scanf_float+0x3a8>
 80102ae:	9b01      	ldr	r3, [sp, #4]
 80102b0:	454b      	cmp	r3, r9
 80102b2:	eba3 0209 	sub.w	r2, r3, r9
 80102b6:	d124      	bne.n	8010302 <_scanf_float+0x3c2>
 80102b8:	2200      	movs	r2, #0
 80102ba:	4659      	mov	r1, fp
 80102bc:	4640      	mov	r0, r8
 80102be:	f002 fd47 	bl	8012d50 <_strtod_r>
 80102c2:	9b03      	ldr	r3, [sp, #12]
 80102c4:	6821      	ldr	r1, [r4, #0]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f011 0f02 	tst.w	r1, #2
 80102cc:	ec57 6b10 	vmov	r6, r7, d0
 80102d0:	f103 0204 	add.w	r2, r3, #4
 80102d4:	d020      	beq.n	8010318 <_scanf_float+0x3d8>
 80102d6:	9903      	ldr	r1, [sp, #12]
 80102d8:	600a      	str	r2, [r1, #0]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	e9c3 6700 	strd	r6, r7, [r3]
 80102e0:	68e3      	ldr	r3, [r4, #12]
 80102e2:	3301      	adds	r3, #1
 80102e4:	60e3      	str	r3, [r4, #12]
 80102e6:	e66c      	b.n	800ffc2 <_scanf_float+0x82>
 80102e8:	9b04      	ldr	r3, [sp, #16]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d0e4      	beq.n	80102b8 <_scanf_float+0x378>
 80102ee:	9905      	ldr	r1, [sp, #20]
 80102f0:	230a      	movs	r3, #10
 80102f2:	462a      	mov	r2, r5
 80102f4:	3101      	adds	r1, #1
 80102f6:	4640      	mov	r0, r8
 80102f8:	f002 fdb2 	bl	8012e60 <_strtol_r>
 80102fc:	9b04      	ldr	r3, [sp, #16]
 80102fe:	9e05      	ldr	r6, [sp, #20]
 8010300:	1ac2      	subs	r2, r0, r3
 8010302:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010306:	429e      	cmp	r6, r3
 8010308:	bf28      	it	cs
 801030a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801030e:	4912      	ldr	r1, [pc, #72]	; (8010358 <_scanf_float+0x418>)
 8010310:	4630      	mov	r0, r6
 8010312:	f000 f95d 	bl	80105d0 <siprintf>
 8010316:	e7cf      	b.n	80102b8 <_scanf_float+0x378>
 8010318:	f011 0f04 	tst.w	r1, #4
 801031c:	9903      	ldr	r1, [sp, #12]
 801031e:	600a      	str	r2, [r1, #0]
 8010320:	d1db      	bne.n	80102da <_scanf_float+0x39a>
 8010322:	f8d3 8000 	ldr.w	r8, [r3]
 8010326:	ee10 2a10 	vmov	r2, s0
 801032a:	ee10 0a10 	vmov	r0, s0
 801032e:	463b      	mov	r3, r7
 8010330:	4639      	mov	r1, r7
 8010332:	f7f0 fbd3 	bl	8000adc <__aeabi_dcmpun>
 8010336:	b128      	cbz	r0, 8010344 <_scanf_float+0x404>
 8010338:	4808      	ldr	r0, [pc, #32]	; (801035c <_scanf_float+0x41c>)
 801033a:	f000 facf 	bl	80108dc <nanf>
 801033e:	ed88 0a00 	vstr	s0, [r8]
 8010342:	e7cd      	b.n	80102e0 <_scanf_float+0x3a0>
 8010344:	4630      	mov	r0, r6
 8010346:	4639      	mov	r1, r7
 8010348:	f7f0 fc26 	bl	8000b98 <__aeabi_d2f>
 801034c:	f8c8 0000 	str.w	r0, [r8]
 8010350:	e7c6      	b.n	80102e0 <_scanf_float+0x3a0>
 8010352:	2500      	movs	r5, #0
 8010354:	e635      	b.n	800ffc2 <_scanf_float+0x82>
 8010356:	bf00      	nop
 8010358:	0801697c 	.word	0x0801697c
 801035c:	08016d0d 	.word	0x08016d0d

08010360 <std>:
 8010360:	2300      	movs	r3, #0
 8010362:	b510      	push	{r4, lr}
 8010364:	4604      	mov	r4, r0
 8010366:	e9c0 3300 	strd	r3, r3, [r0]
 801036a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801036e:	6083      	str	r3, [r0, #8]
 8010370:	8181      	strh	r1, [r0, #12]
 8010372:	6643      	str	r3, [r0, #100]	; 0x64
 8010374:	81c2      	strh	r2, [r0, #14]
 8010376:	6183      	str	r3, [r0, #24]
 8010378:	4619      	mov	r1, r3
 801037a:	2208      	movs	r2, #8
 801037c:	305c      	adds	r0, #92	; 0x5c
 801037e:	f000 fa1f 	bl	80107c0 <memset>
 8010382:	4b0d      	ldr	r3, [pc, #52]	; (80103b8 <std+0x58>)
 8010384:	6263      	str	r3, [r4, #36]	; 0x24
 8010386:	4b0d      	ldr	r3, [pc, #52]	; (80103bc <std+0x5c>)
 8010388:	62a3      	str	r3, [r4, #40]	; 0x28
 801038a:	4b0d      	ldr	r3, [pc, #52]	; (80103c0 <std+0x60>)
 801038c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801038e:	4b0d      	ldr	r3, [pc, #52]	; (80103c4 <std+0x64>)
 8010390:	6323      	str	r3, [r4, #48]	; 0x30
 8010392:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <std+0x68>)
 8010394:	6224      	str	r4, [r4, #32]
 8010396:	429c      	cmp	r4, r3
 8010398:	d006      	beq.n	80103a8 <std+0x48>
 801039a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801039e:	4294      	cmp	r4, r2
 80103a0:	d002      	beq.n	80103a8 <std+0x48>
 80103a2:	33d0      	adds	r3, #208	; 0xd0
 80103a4:	429c      	cmp	r4, r3
 80103a6:	d105      	bne.n	80103b4 <std+0x54>
 80103a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80103ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103b0:	f000 ba82 	b.w	80108b8 <__retarget_lock_init_recursive>
 80103b4:	bd10      	pop	{r4, pc}
 80103b6:	bf00      	nop
 80103b8:	08010611 	.word	0x08010611
 80103bc:	08010633 	.word	0x08010633
 80103c0:	0801066b 	.word	0x0801066b
 80103c4:	0801068f 	.word	0x0801068f
 80103c8:	2000192c 	.word	0x2000192c

080103cc <stdio_exit_handler>:
 80103cc:	4a02      	ldr	r2, [pc, #8]	; (80103d8 <stdio_exit_handler+0xc>)
 80103ce:	4903      	ldr	r1, [pc, #12]	; (80103dc <stdio_exit_handler+0x10>)
 80103d0:	4803      	ldr	r0, [pc, #12]	; (80103e0 <stdio_exit_handler+0x14>)
 80103d2:	f000 b869 	b.w	80104a8 <_fwalk_sglue>
 80103d6:	bf00      	nop
 80103d8:	2000004c 	.word	0x2000004c
 80103dc:	080134a9 	.word	0x080134a9
 80103e0:	20000058 	.word	0x20000058

080103e4 <cleanup_stdio>:
 80103e4:	6841      	ldr	r1, [r0, #4]
 80103e6:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <cleanup_stdio+0x34>)
 80103e8:	4299      	cmp	r1, r3
 80103ea:	b510      	push	{r4, lr}
 80103ec:	4604      	mov	r4, r0
 80103ee:	d001      	beq.n	80103f4 <cleanup_stdio+0x10>
 80103f0:	f003 f85a 	bl	80134a8 <_fflush_r>
 80103f4:	68a1      	ldr	r1, [r4, #8]
 80103f6:	4b09      	ldr	r3, [pc, #36]	; (801041c <cleanup_stdio+0x38>)
 80103f8:	4299      	cmp	r1, r3
 80103fa:	d002      	beq.n	8010402 <cleanup_stdio+0x1e>
 80103fc:	4620      	mov	r0, r4
 80103fe:	f003 f853 	bl	80134a8 <_fflush_r>
 8010402:	68e1      	ldr	r1, [r4, #12]
 8010404:	4b06      	ldr	r3, [pc, #24]	; (8010420 <cleanup_stdio+0x3c>)
 8010406:	4299      	cmp	r1, r3
 8010408:	d004      	beq.n	8010414 <cleanup_stdio+0x30>
 801040a:	4620      	mov	r0, r4
 801040c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010410:	f003 b84a 	b.w	80134a8 <_fflush_r>
 8010414:	bd10      	pop	{r4, pc}
 8010416:	bf00      	nop
 8010418:	2000192c 	.word	0x2000192c
 801041c:	20001994 	.word	0x20001994
 8010420:	200019fc 	.word	0x200019fc

08010424 <global_stdio_init.part.0>:
 8010424:	b510      	push	{r4, lr}
 8010426:	4b0b      	ldr	r3, [pc, #44]	; (8010454 <global_stdio_init.part.0+0x30>)
 8010428:	4c0b      	ldr	r4, [pc, #44]	; (8010458 <global_stdio_init.part.0+0x34>)
 801042a:	4a0c      	ldr	r2, [pc, #48]	; (801045c <global_stdio_init.part.0+0x38>)
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	4620      	mov	r0, r4
 8010430:	2200      	movs	r2, #0
 8010432:	2104      	movs	r1, #4
 8010434:	f7ff ff94 	bl	8010360 <std>
 8010438:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801043c:	2201      	movs	r2, #1
 801043e:	2109      	movs	r1, #9
 8010440:	f7ff ff8e 	bl	8010360 <std>
 8010444:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010448:	2202      	movs	r2, #2
 801044a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801044e:	2112      	movs	r1, #18
 8010450:	f7ff bf86 	b.w	8010360 <std>
 8010454:	20001a64 	.word	0x20001a64
 8010458:	2000192c 	.word	0x2000192c
 801045c:	080103cd 	.word	0x080103cd

08010460 <__sfp_lock_acquire>:
 8010460:	4801      	ldr	r0, [pc, #4]	; (8010468 <__sfp_lock_acquire+0x8>)
 8010462:	f000 ba2a 	b.w	80108ba <__retarget_lock_acquire_recursive>
 8010466:	bf00      	nop
 8010468:	20001a6d 	.word	0x20001a6d

0801046c <__sfp_lock_release>:
 801046c:	4801      	ldr	r0, [pc, #4]	; (8010474 <__sfp_lock_release+0x8>)
 801046e:	f000 ba25 	b.w	80108bc <__retarget_lock_release_recursive>
 8010472:	bf00      	nop
 8010474:	20001a6d 	.word	0x20001a6d

08010478 <__sinit>:
 8010478:	b510      	push	{r4, lr}
 801047a:	4604      	mov	r4, r0
 801047c:	f7ff fff0 	bl	8010460 <__sfp_lock_acquire>
 8010480:	6a23      	ldr	r3, [r4, #32]
 8010482:	b11b      	cbz	r3, 801048c <__sinit+0x14>
 8010484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010488:	f7ff bff0 	b.w	801046c <__sfp_lock_release>
 801048c:	4b04      	ldr	r3, [pc, #16]	; (80104a0 <__sinit+0x28>)
 801048e:	6223      	str	r3, [r4, #32]
 8010490:	4b04      	ldr	r3, [pc, #16]	; (80104a4 <__sinit+0x2c>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1f5      	bne.n	8010484 <__sinit+0xc>
 8010498:	f7ff ffc4 	bl	8010424 <global_stdio_init.part.0>
 801049c:	e7f2      	b.n	8010484 <__sinit+0xc>
 801049e:	bf00      	nop
 80104a0:	080103e5 	.word	0x080103e5
 80104a4:	20001a64 	.word	0x20001a64

080104a8 <_fwalk_sglue>:
 80104a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104ac:	4607      	mov	r7, r0
 80104ae:	4688      	mov	r8, r1
 80104b0:	4614      	mov	r4, r2
 80104b2:	2600      	movs	r6, #0
 80104b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104b8:	f1b9 0901 	subs.w	r9, r9, #1
 80104bc:	d505      	bpl.n	80104ca <_fwalk_sglue+0x22>
 80104be:	6824      	ldr	r4, [r4, #0]
 80104c0:	2c00      	cmp	r4, #0
 80104c2:	d1f7      	bne.n	80104b4 <_fwalk_sglue+0xc>
 80104c4:	4630      	mov	r0, r6
 80104c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ca:	89ab      	ldrh	r3, [r5, #12]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d907      	bls.n	80104e0 <_fwalk_sglue+0x38>
 80104d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104d4:	3301      	adds	r3, #1
 80104d6:	d003      	beq.n	80104e0 <_fwalk_sglue+0x38>
 80104d8:	4629      	mov	r1, r5
 80104da:	4638      	mov	r0, r7
 80104dc:	47c0      	blx	r8
 80104de:	4306      	orrs	r6, r0
 80104e0:	3568      	adds	r5, #104	; 0x68
 80104e2:	e7e9      	b.n	80104b8 <_fwalk_sglue+0x10>

080104e4 <iprintf>:
 80104e4:	b40f      	push	{r0, r1, r2, r3}
 80104e6:	b507      	push	{r0, r1, r2, lr}
 80104e8:	4906      	ldr	r1, [pc, #24]	; (8010504 <iprintf+0x20>)
 80104ea:	ab04      	add	r3, sp, #16
 80104ec:	6808      	ldr	r0, [r1, #0]
 80104ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80104f2:	6881      	ldr	r1, [r0, #8]
 80104f4:	9301      	str	r3, [sp, #4]
 80104f6:	f002 fe37 	bl	8013168 <_vfiprintf_r>
 80104fa:	b003      	add	sp, #12
 80104fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010500:	b004      	add	sp, #16
 8010502:	4770      	bx	lr
 8010504:	200000a4 	.word	0x200000a4

08010508 <putchar>:
 8010508:	4b02      	ldr	r3, [pc, #8]	; (8010514 <putchar+0xc>)
 801050a:	4601      	mov	r1, r0
 801050c:	6818      	ldr	r0, [r3, #0]
 801050e:	6882      	ldr	r2, [r0, #8]
 8010510:	f003 b854 	b.w	80135bc <_putc_r>
 8010514:	200000a4 	.word	0x200000a4

08010518 <_puts_r>:
 8010518:	6a03      	ldr	r3, [r0, #32]
 801051a:	b570      	push	{r4, r5, r6, lr}
 801051c:	6884      	ldr	r4, [r0, #8]
 801051e:	4605      	mov	r5, r0
 8010520:	460e      	mov	r6, r1
 8010522:	b90b      	cbnz	r3, 8010528 <_puts_r+0x10>
 8010524:	f7ff ffa8 	bl	8010478 <__sinit>
 8010528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801052a:	07db      	lsls	r3, r3, #31
 801052c:	d405      	bmi.n	801053a <_puts_r+0x22>
 801052e:	89a3      	ldrh	r3, [r4, #12]
 8010530:	0598      	lsls	r0, r3, #22
 8010532:	d402      	bmi.n	801053a <_puts_r+0x22>
 8010534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010536:	f000 f9c0 	bl	80108ba <__retarget_lock_acquire_recursive>
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	0719      	lsls	r1, r3, #28
 801053e:	d513      	bpl.n	8010568 <_puts_r+0x50>
 8010540:	6923      	ldr	r3, [r4, #16]
 8010542:	b18b      	cbz	r3, 8010568 <_puts_r+0x50>
 8010544:	3e01      	subs	r6, #1
 8010546:	68a3      	ldr	r3, [r4, #8]
 8010548:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801054c:	3b01      	subs	r3, #1
 801054e:	60a3      	str	r3, [r4, #8]
 8010550:	b9e9      	cbnz	r1, 801058e <_puts_r+0x76>
 8010552:	2b00      	cmp	r3, #0
 8010554:	da2e      	bge.n	80105b4 <_puts_r+0x9c>
 8010556:	4622      	mov	r2, r4
 8010558:	210a      	movs	r1, #10
 801055a:	4628      	mov	r0, r5
 801055c:	f000 f89b 	bl	8010696 <__swbuf_r>
 8010560:	3001      	adds	r0, #1
 8010562:	d007      	beq.n	8010574 <_puts_r+0x5c>
 8010564:	250a      	movs	r5, #10
 8010566:	e007      	b.n	8010578 <_puts_r+0x60>
 8010568:	4621      	mov	r1, r4
 801056a:	4628      	mov	r0, r5
 801056c:	f000 f8d0 	bl	8010710 <__swsetup_r>
 8010570:	2800      	cmp	r0, #0
 8010572:	d0e7      	beq.n	8010544 <_puts_r+0x2c>
 8010574:	f04f 35ff 	mov.w	r5, #4294967295
 8010578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801057a:	07da      	lsls	r2, r3, #31
 801057c:	d405      	bmi.n	801058a <_puts_r+0x72>
 801057e:	89a3      	ldrh	r3, [r4, #12]
 8010580:	059b      	lsls	r3, r3, #22
 8010582:	d402      	bmi.n	801058a <_puts_r+0x72>
 8010584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010586:	f000 f999 	bl	80108bc <__retarget_lock_release_recursive>
 801058a:	4628      	mov	r0, r5
 801058c:	bd70      	pop	{r4, r5, r6, pc}
 801058e:	2b00      	cmp	r3, #0
 8010590:	da04      	bge.n	801059c <_puts_r+0x84>
 8010592:	69a2      	ldr	r2, [r4, #24]
 8010594:	429a      	cmp	r2, r3
 8010596:	dc06      	bgt.n	80105a6 <_puts_r+0x8e>
 8010598:	290a      	cmp	r1, #10
 801059a:	d004      	beq.n	80105a6 <_puts_r+0x8e>
 801059c:	6823      	ldr	r3, [r4, #0]
 801059e:	1c5a      	adds	r2, r3, #1
 80105a0:	6022      	str	r2, [r4, #0]
 80105a2:	7019      	strb	r1, [r3, #0]
 80105a4:	e7cf      	b.n	8010546 <_puts_r+0x2e>
 80105a6:	4622      	mov	r2, r4
 80105a8:	4628      	mov	r0, r5
 80105aa:	f000 f874 	bl	8010696 <__swbuf_r>
 80105ae:	3001      	adds	r0, #1
 80105b0:	d1c9      	bne.n	8010546 <_puts_r+0x2e>
 80105b2:	e7df      	b.n	8010574 <_puts_r+0x5c>
 80105b4:	6823      	ldr	r3, [r4, #0]
 80105b6:	250a      	movs	r5, #10
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	6022      	str	r2, [r4, #0]
 80105bc:	701d      	strb	r5, [r3, #0]
 80105be:	e7db      	b.n	8010578 <_puts_r+0x60>

080105c0 <puts>:
 80105c0:	4b02      	ldr	r3, [pc, #8]	; (80105cc <puts+0xc>)
 80105c2:	4601      	mov	r1, r0
 80105c4:	6818      	ldr	r0, [r3, #0]
 80105c6:	f7ff bfa7 	b.w	8010518 <_puts_r>
 80105ca:	bf00      	nop
 80105cc:	200000a4 	.word	0x200000a4

080105d0 <siprintf>:
 80105d0:	b40e      	push	{r1, r2, r3}
 80105d2:	b500      	push	{lr}
 80105d4:	b09c      	sub	sp, #112	; 0x70
 80105d6:	ab1d      	add	r3, sp, #116	; 0x74
 80105d8:	9002      	str	r0, [sp, #8]
 80105da:	9006      	str	r0, [sp, #24]
 80105dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105e0:	4809      	ldr	r0, [pc, #36]	; (8010608 <siprintf+0x38>)
 80105e2:	9107      	str	r1, [sp, #28]
 80105e4:	9104      	str	r1, [sp, #16]
 80105e6:	4909      	ldr	r1, [pc, #36]	; (801060c <siprintf+0x3c>)
 80105e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80105ec:	9105      	str	r1, [sp, #20]
 80105ee:	6800      	ldr	r0, [r0, #0]
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	a902      	add	r1, sp, #8
 80105f4:	f002 fc90 	bl	8012f18 <_svfiprintf_r>
 80105f8:	9b02      	ldr	r3, [sp, #8]
 80105fa:	2200      	movs	r2, #0
 80105fc:	701a      	strb	r2, [r3, #0]
 80105fe:	b01c      	add	sp, #112	; 0x70
 8010600:	f85d eb04 	ldr.w	lr, [sp], #4
 8010604:	b003      	add	sp, #12
 8010606:	4770      	bx	lr
 8010608:	200000a4 	.word	0x200000a4
 801060c:	ffff0208 	.word	0xffff0208

08010610 <__sread>:
 8010610:	b510      	push	{r4, lr}
 8010612:	460c      	mov	r4, r1
 8010614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010618:	f000 f900 	bl	801081c <_read_r>
 801061c:	2800      	cmp	r0, #0
 801061e:	bfab      	itete	ge
 8010620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010622:	89a3      	ldrhlt	r3, [r4, #12]
 8010624:	181b      	addge	r3, r3, r0
 8010626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801062a:	bfac      	ite	ge
 801062c:	6563      	strge	r3, [r4, #84]	; 0x54
 801062e:	81a3      	strhlt	r3, [r4, #12]
 8010630:	bd10      	pop	{r4, pc}

08010632 <__swrite>:
 8010632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010636:	461f      	mov	r7, r3
 8010638:	898b      	ldrh	r3, [r1, #12]
 801063a:	05db      	lsls	r3, r3, #23
 801063c:	4605      	mov	r5, r0
 801063e:	460c      	mov	r4, r1
 8010640:	4616      	mov	r6, r2
 8010642:	d505      	bpl.n	8010650 <__swrite+0x1e>
 8010644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010648:	2302      	movs	r3, #2
 801064a:	2200      	movs	r2, #0
 801064c:	f000 f8d4 	bl	80107f8 <_lseek_r>
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801065a:	81a3      	strh	r3, [r4, #12]
 801065c:	4632      	mov	r2, r6
 801065e:	463b      	mov	r3, r7
 8010660:	4628      	mov	r0, r5
 8010662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010666:	f000 b8eb 	b.w	8010840 <_write_r>

0801066a <__sseek>:
 801066a:	b510      	push	{r4, lr}
 801066c:	460c      	mov	r4, r1
 801066e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010672:	f000 f8c1 	bl	80107f8 <_lseek_r>
 8010676:	1c43      	adds	r3, r0, #1
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	bf15      	itete	ne
 801067c:	6560      	strne	r0, [r4, #84]	; 0x54
 801067e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010686:	81a3      	strheq	r3, [r4, #12]
 8010688:	bf18      	it	ne
 801068a:	81a3      	strhne	r3, [r4, #12]
 801068c:	bd10      	pop	{r4, pc}

0801068e <__sclose>:
 801068e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010692:	f000 b8a1 	b.w	80107d8 <_close_r>

08010696 <__swbuf_r>:
 8010696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010698:	460e      	mov	r6, r1
 801069a:	4614      	mov	r4, r2
 801069c:	4605      	mov	r5, r0
 801069e:	b118      	cbz	r0, 80106a8 <__swbuf_r+0x12>
 80106a0:	6a03      	ldr	r3, [r0, #32]
 80106a2:	b90b      	cbnz	r3, 80106a8 <__swbuf_r+0x12>
 80106a4:	f7ff fee8 	bl	8010478 <__sinit>
 80106a8:	69a3      	ldr	r3, [r4, #24]
 80106aa:	60a3      	str	r3, [r4, #8]
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	071a      	lsls	r2, r3, #28
 80106b0:	d525      	bpl.n	80106fe <__swbuf_r+0x68>
 80106b2:	6923      	ldr	r3, [r4, #16]
 80106b4:	b31b      	cbz	r3, 80106fe <__swbuf_r+0x68>
 80106b6:	6823      	ldr	r3, [r4, #0]
 80106b8:	6922      	ldr	r2, [r4, #16]
 80106ba:	1a98      	subs	r0, r3, r2
 80106bc:	6963      	ldr	r3, [r4, #20]
 80106be:	b2f6      	uxtb	r6, r6
 80106c0:	4283      	cmp	r3, r0
 80106c2:	4637      	mov	r7, r6
 80106c4:	dc04      	bgt.n	80106d0 <__swbuf_r+0x3a>
 80106c6:	4621      	mov	r1, r4
 80106c8:	4628      	mov	r0, r5
 80106ca:	f002 feed 	bl	80134a8 <_fflush_r>
 80106ce:	b9e0      	cbnz	r0, 801070a <__swbuf_r+0x74>
 80106d0:	68a3      	ldr	r3, [r4, #8]
 80106d2:	3b01      	subs	r3, #1
 80106d4:	60a3      	str	r3, [r4, #8]
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	1c5a      	adds	r2, r3, #1
 80106da:	6022      	str	r2, [r4, #0]
 80106dc:	701e      	strb	r6, [r3, #0]
 80106de:	6962      	ldr	r2, [r4, #20]
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d004      	beq.n	80106f0 <__swbuf_r+0x5a>
 80106e6:	89a3      	ldrh	r3, [r4, #12]
 80106e8:	07db      	lsls	r3, r3, #31
 80106ea:	d506      	bpl.n	80106fa <__swbuf_r+0x64>
 80106ec:	2e0a      	cmp	r6, #10
 80106ee:	d104      	bne.n	80106fa <__swbuf_r+0x64>
 80106f0:	4621      	mov	r1, r4
 80106f2:	4628      	mov	r0, r5
 80106f4:	f002 fed8 	bl	80134a8 <_fflush_r>
 80106f8:	b938      	cbnz	r0, 801070a <__swbuf_r+0x74>
 80106fa:	4638      	mov	r0, r7
 80106fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106fe:	4621      	mov	r1, r4
 8010700:	4628      	mov	r0, r5
 8010702:	f000 f805 	bl	8010710 <__swsetup_r>
 8010706:	2800      	cmp	r0, #0
 8010708:	d0d5      	beq.n	80106b6 <__swbuf_r+0x20>
 801070a:	f04f 37ff 	mov.w	r7, #4294967295
 801070e:	e7f4      	b.n	80106fa <__swbuf_r+0x64>

08010710 <__swsetup_r>:
 8010710:	b538      	push	{r3, r4, r5, lr}
 8010712:	4b2a      	ldr	r3, [pc, #168]	; (80107bc <__swsetup_r+0xac>)
 8010714:	4605      	mov	r5, r0
 8010716:	6818      	ldr	r0, [r3, #0]
 8010718:	460c      	mov	r4, r1
 801071a:	b118      	cbz	r0, 8010724 <__swsetup_r+0x14>
 801071c:	6a03      	ldr	r3, [r0, #32]
 801071e:	b90b      	cbnz	r3, 8010724 <__swsetup_r+0x14>
 8010720:	f7ff feaa 	bl	8010478 <__sinit>
 8010724:	89a3      	ldrh	r3, [r4, #12]
 8010726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801072a:	0718      	lsls	r0, r3, #28
 801072c:	d422      	bmi.n	8010774 <__swsetup_r+0x64>
 801072e:	06d9      	lsls	r1, r3, #27
 8010730:	d407      	bmi.n	8010742 <__swsetup_r+0x32>
 8010732:	2309      	movs	r3, #9
 8010734:	602b      	str	r3, [r5, #0]
 8010736:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801073a:	81a3      	strh	r3, [r4, #12]
 801073c:	f04f 30ff 	mov.w	r0, #4294967295
 8010740:	e034      	b.n	80107ac <__swsetup_r+0x9c>
 8010742:	0758      	lsls	r0, r3, #29
 8010744:	d512      	bpl.n	801076c <__swsetup_r+0x5c>
 8010746:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010748:	b141      	cbz	r1, 801075c <__swsetup_r+0x4c>
 801074a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801074e:	4299      	cmp	r1, r3
 8010750:	d002      	beq.n	8010758 <__swsetup_r+0x48>
 8010752:	4628      	mov	r0, r5
 8010754:	f000 ff42 	bl	80115dc <_free_r>
 8010758:	2300      	movs	r3, #0
 801075a:	6363      	str	r3, [r4, #52]	; 0x34
 801075c:	89a3      	ldrh	r3, [r4, #12]
 801075e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010762:	81a3      	strh	r3, [r4, #12]
 8010764:	2300      	movs	r3, #0
 8010766:	6063      	str	r3, [r4, #4]
 8010768:	6923      	ldr	r3, [r4, #16]
 801076a:	6023      	str	r3, [r4, #0]
 801076c:	89a3      	ldrh	r3, [r4, #12]
 801076e:	f043 0308 	orr.w	r3, r3, #8
 8010772:	81a3      	strh	r3, [r4, #12]
 8010774:	6923      	ldr	r3, [r4, #16]
 8010776:	b94b      	cbnz	r3, 801078c <__swsetup_r+0x7c>
 8010778:	89a3      	ldrh	r3, [r4, #12]
 801077a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801077e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010782:	d003      	beq.n	801078c <__swsetup_r+0x7c>
 8010784:	4621      	mov	r1, r4
 8010786:	4628      	mov	r0, r5
 8010788:	f002 fedc 	bl	8013544 <__smakebuf_r>
 801078c:	89a0      	ldrh	r0, [r4, #12]
 801078e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010792:	f010 0301 	ands.w	r3, r0, #1
 8010796:	d00a      	beq.n	80107ae <__swsetup_r+0x9e>
 8010798:	2300      	movs	r3, #0
 801079a:	60a3      	str	r3, [r4, #8]
 801079c:	6963      	ldr	r3, [r4, #20]
 801079e:	425b      	negs	r3, r3
 80107a0:	61a3      	str	r3, [r4, #24]
 80107a2:	6923      	ldr	r3, [r4, #16]
 80107a4:	b943      	cbnz	r3, 80107b8 <__swsetup_r+0xa8>
 80107a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107aa:	d1c4      	bne.n	8010736 <__swsetup_r+0x26>
 80107ac:	bd38      	pop	{r3, r4, r5, pc}
 80107ae:	0781      	lsls	r1, r0, #30
 80107b0:	bf58      	it	pl
 80107b2:	6963      	ldrpl	r3, [r4, #20]
 80107b4:	60a3      	str	r3, [r4, #8]
 80107b6:	e7f4      	b.n	80107a2 <__swsetup_r+0x92>
 80107b8:	2000      	movs	r0, #0
 80107ba:	e7f7      	b.n	80107ac <__swsetup_r+0x9c>
 80107bc:	200000a4 	.word	0x200000a4

080107c0 <memset>:
 80107c0:	4402      	add	r2, r0
 80107c2:	4603      	mov	r3, r0
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d100      	bne.n	80107ca <memset+0xa>
 80107c8:	4770      	bx	lr
 80107ca:	f803 1b01 	strb.w	r1, [r3], #1
 80107ce:	e7f9      	b.n	80107c4 <memset+0x4>

080107d0 <_localeconv_r>:
 80107d0:	4800      	ldr	r0, [pc, #0]	; (80107d4 <_localeconv_r+0x4>)
 80107d2:	4770      	bx	lr
 80107d4:	20000198 	.word	0x20000198

080107d8 <_close_r>:
 80107d8:	b538      	push	{r3, r4, r5, lr}
 80107da:	4d06      	ldr	r5, [pc, #24]	; (80107f4 <_close_r+0x1c>)
 80107dc:	2300      	movs	r3, #0
 80107de:	4604      	mov	r4, r0
 80107e0:	4608      	mov	r0, r1
 80107e2:	602b      	str	r3, [r5, #0]
 80107e4:	f7f3 f826 	bl	8003834 <_close>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	d102      	bne.n	80107f2 <_close_r+0x1a>
 80107ec:	682b      	ldr	r3, [r5, #0]
 80107ee:	b103      	cbz	r3, 80107f2 <_close_r+0x1a>
 80107f0:	6023      	str	r3, [r4, #0]
 80107f2:	bd38      	pop	{r3, r4, r5, pc}
 80107f4:	20001a68 	.word	0x20001a68

080107f8 <_lseek_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d07      	ldr	r5, [pc, #28]	; (8010818 <_lseek_r+0x20>)
 80107fc:	4604      	mov	r4, r0
 80107fe:	4608      	mov	r0, r1
 8010800:	4611      	mov	r1, r2
 8010802:	2200      	movs	r2, #0
 8010804:	602a      	str	r2, [r5, #0]
 8010806:	461a      	mov	r2, r3
 8010808:	f7f3 f83b 	bl	8003882 <_lseek>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d102      	bne.n	8010816 <_lseek_r+0x1e>
 8010810:	682b      	ldr	r3, [r5, #0]
 8010812:	b103      	cbz	r3, 8010816 <_lseek_r+0x1e>
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	20001a68 	.word	0x20001a68

0801081c <_read_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d07      	ldr	r5, [pc, #28]	; (801083c <_read_r+0x20>)
 8010820:	4604      	mov	r4, r0
 8010822:	4608      	mov	r0, r1
 8010824:	4611      	mov	r1, r2
 8010826:	2200      	movs	r2, #0
 8010828:	602a      	str	r2, [r5, #0]
 801082a:	461a      	mov	r2, r3
 801082c:	f7f2 ffe5 	bl	80037fa <_read>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_read_r+0x1e>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	b103      	cbz	r3, 801083a <_read_r+0x1e>
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	20001a68 	.word	0x20001a68

08010840 <_write_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	4d07      	ldr	r5, [pc, #28]	; (8010860 <_write_r+0x20>)
 8010844:	4604      	mov	r4, r0
 8010846:	4608      	mov	r0, r1
 8010848:	4611      	mov	r1, r2
 801084a:	2200      	movs	r2, #0
 801084c:	602a      	str	r2, [r5, #0]
 801084e:	461a      	mov	r2, r3
 8010850:	f7fc fed4 	bl	800d5fc <_write>
 8010854:	1c43      	adds	r3, r0, #1
 8010856:	d102      	bne.n	801085e <_write_r+0x1e>
 8010858:	682b      	ldr	r3, [r5, #0]
 801085a:	b103      	cbz	r3, 801085e <_write_r+0x1e>
 801085c:	6023      	str	r3, [r4, #0]
 801085e:	bd38      	pop	{r3, r4, r5, pc}
 8010860:	20001a68 	.word	0x20001a68

08010864 <__errno>:
 8010864:	4b01      	ldr	r3, [pc, #4]	; (801086c <__errno+0x8>)
 8010866:	6818      	ldr	r0, [r3, #0]
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	200000a4 	.word	0x200000a4

08010870 <__libc_init_array>:
 8010870:	b570      	push	{r4, r5, r6, lr}
 8010872:	4d0d      	ldr	r5, [pc, #52]	; (80108a8 <__libc_init_array+0x38>)
 8010874:	4c0d      	ldr	r4, [pc, #52]	; (80108ac <__libc_init_array+0x3c>)
 8010876:	1b64      	subs	r4, r4, r5
 8010878:	10a4      	asrs	r4, r4, #2
 801087a:	2600      	movs	r6, #0
 801087c:	42a6      	cmp	r6, r4
 801087e:	d109      	bne.n	8010894 <__libc_init_array+0x24>
 8010880:	4d0b      	ldr	r5, [pc, #44]	; (80108b0 <__libc_init_array+0x40>)
 8010882:	4c0c      	ldr	r4, [pc, #48]	; (80108b4 <__libc_init_array+0x44>)
 8010884:	f004 fd32 	bl	80152ec <_init>
 8010888:	1b64      	subs	r4, r4, r5
 801088a:	10a4      	asrs	r4, r4, #2
 801088c:	2600      	movs	r6, #0
 801088e:	42a6      	cmp	r6, r4
 8010890:	d105      	bne.n	801089e <__libc_init_array+0x2e>
 8010892:	bd70      	pop	{r4, r5, r6, pc}
 8010894:	f855 3b04 	ldr.w	r3, [r5], #4
 8010898:	4798      	blx	r3
 801089a:	3601      	adds	r6, #1
 801089c:	e7ee      	b.n	801087c <__libc_init_array+0xc>
 801089e:	f855 3b04 	ldr.w	r3, [r5], #4
 80108a2:	4798      	blx	r3
 80108a4:	3601      	adds	r6, #1
 80108a6:	e7f2      	b.n	801088e <__libc_init_array+0x1e>
 80108a8:	08016da8 	.word	0x08016da8
 80108ac:	08016da8 	.word	0x08016da8
 80108b0:	08016da8 	.word	0x08016da8
 80108b4:	08016dac 	.word	0x08016dac

080108b8 <__retarget_lock_init_recursive>:
 80108b8:	4770      	bx	lr

080108ba <__retarget_lock_acquire_recursive>:
 80108ba:	4770      	bx	lr

080108bc <__retarget_lock_release_recursive>:
 80108bc:	4770      	bx	lr

080108be <memcpy>:
 80108be:	440a      	add	r2, r1
 80108c0:	4291      	cmp	r1, r2
 80108c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80108c6:	d100      	bne.n	80108ca <memcpy+0xc>
 80108c8:	4770      	bx	lr
 80108ca:	b510      	push	{r4, lr}
 80108cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108d4:	4291      	cmp	r1, r2
 80108d6:	d1f9      	bne.n	80108cc <memcpy+0xe>
 80108d8:	bd10      	pop	{r4, pc}
	...

080108dc <nanf>:
 80108dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80108e4 <nanf+0x8>
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	7fc00000 	.word	0x7fc00000

080108e8 <quorem>:
 80108e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	6903      	ldr	r3, [r0, #16]
 80108ee:	690c      	ldr	r4, [r1, #16]
 80108f0:	42a3      	cmp	r3, r4
 80108f2:	4607      	mov	r7, r0
 80108f4:	db7e      	blt.n	80109f4 <quorem+0x10c>
 80108f6:	3c01      	subs	r4, #1
 80108f8:	f101 0814 	add.w	r8, r1, #20
 80108fc:	f100 0514 	add.w	r5, r0, #20
 8010900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010904:	9301      	str	r3, [sp, #4]
 8010906:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801090a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801090e:	3301      	adds	r3, #1
 8010910:	429a      	cmp	r2, r3
 8010912:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010916:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801091a:	fbb2 f6f3 	udiv	r6, r2, r3
 801091e:	d331      	bcc.n	8010984 <quorem+0x9c>
 8010920:	f04f 0e00 	mov.w	lr, #0
 8010924:	4640      	mov	r0, r8
 8010926:	46ac      	mov	ip, r5
 8010928:	46f2      	mov	sl, lr
 801092a:	f850 2b04 	ldr.w	r2, [r0], #4
 801092e:	b293      	uxth	r3, r2
 8010930:	fb06 e303 	mla	r3, r6, r3, lr
 8010934:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010938:	0c1a      	lsrs	r2, r3, #16
 801093a:	b29b      	uxth	r3, r3
 801093c:	ebaa 0303 	sub.w	r3, sl, r3
 8010940:	f8dc a000 	ldr.w	sl, [ip]
 8010944:	fa13 f38a 	uxtah	r3, r3, sl
 8010948:	fb06 220e 	mla	r2, r6, lr, r2
 801094c:	9300      	str	r3, [sp, #0]
 801094e:	9b00      	ldr	r3, [sp, #0]
 8010950:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010954:	b292      	uxth	r2, r2
 8010956:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801095a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801095e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010962:	4581      	cmp	r9, r0
 8010964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010968:	f84c 3b04 	str.w	r3, [ip], #4
 801096c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010970:	d2db      	bcs.n	801092a <quorem+0x42>
 8010972:	f855 300b 	ldr.w	r3, [r5, fp]
 8010976:	b92b      	cbnz	r3, 8010984 <quorem+0x9c>
 8010978:	9b01      	ldr	r3, [sp, #4]
 801097a:	3b04      	subs	r3, #4
 801097c:	429d      	cmp	r5, r3
 801097e:	461a      	mov	r2, r3
 8010980:	d32c      	bcc.n	80109dc <quorem+0xf4>
 8010982:	613c      	str	r4, [r7, #16]
 8010984:	4638      	mov	r0, r7
 8010986:	f001 f9ef 	bl	8011d68 <__mcmp>
 801098a:	2800      	cmp	r0, #0
 801098c:	db22      	blt.n	80109d4 <quorem+0xec>
 801098e:	3601      	adds	r6, #1
 8010990:	4629      	mov	r1, r5
 8010992:	2000      	movs	r0, #0
 8010994:	f858 2b04 	ldr.w	r2, [r8], #4
 8010998:	f8d1 c000 	ldr.w	ip, [r1]
 801099c:	b293      	uxth	r3, r2
 801099e:	1ac3      	subs	r3, r0, r3
 80109a0:	0c12      	lsrs	r2, r2, #16
 80109a2:	fa13 f38c 	uxtah	r3, r3, ip
 80109a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80109aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109b4:	45c1      	cmp	r9, r8
 80109b6:	f841 3b04 	str.w	r3, [r1], #4
 80109ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80109be:	d2e9      	bcs.n	8010994 <quorem+0xac>
 80109c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109c8:	b922      	cbnz	r2, 80109d4 <quorem+0xec>
 80109ca:	3b04      	subs	r3, #4
 80109cc:	429d      	cmp	r5, r3
 80109ce:	461a      	mov	r2, r3
 80109d0:	d30a      	bcc.n	80109e8 <quorem+0x100>
 80109d2:	613c      	str	r4, [r7, #16]
 80109d4:	4630      	mov	r0, r6
 80109d6:	b003      	add	sp, #12
 80109d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109dc:	6812      	ldr	r2, [r2, #0]
 80109de:	3b04      	subs	r3, #4
 80109e0:	2a00      	cmp	r2, #0
 80109e2:	d1ce      	bne.n	8010982 <quorem+0x9a>
 80109e4:	3c01      	subs	r4, #1
 80109e6:	e7c9      	b.n	801097c <quorem+0x94>
 80109e8:	6812      	ldr	r2, [r2, #0]
 80109ea:	3b04      	subs	r3, #4
 80109ec:	2a00      	cmp	r2, #0
 80109ee:	d1f0      	bne.n	80109d2 <quorem+0xea>
 80109f0:	3c01      	subs	r4, #1
 80109f2:	e7eb      	b.n	80109cc <quorem+0xe4>
 80109f4:	2000      	movs	r0, #0
 80109f6:	e7ee      	b.n	80109d6 <quorem+0xee>

080109f8 <_dtoa_r>:
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	ed2d 8b04 	vpush	{d8-d9}
 8010a00:	69c5      	ldr	r5, [r0, #28]
 8010a02:	b093      	sub	sp, #76	; 0x4c
 8010a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a08:	ec57 6b10 	vmov	r6, r7, d0
 8010a0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010a10:	9107      	str	r1, [sp, #28]
 8010a12:	4604      	mov	r4, r0
 8010a14:	920a      	str	r2, [sp, #40]	; 0x28
 8010a16:	930d      	str	r3, [sp, #52]	; 0x34
 8010a18:	b975      	cbnz	r5, 8010a38 <_dtoa_r+0x40>
 8010a1a:	2010      	movs	r0, #16
 8010a1c:	f000 fe2a 	bl	8011674 <malloc>
 8010a20:	4602      	mov	r2, r0
 8010a22:	61e0      	str	r0, [r4, #28]
 8010a24:	b920      	cbnz	r0, 8010a30 <_dtoa_r+0x38>
 8010a26:	4bae      	ldr	r3, [pc, #696]	; (8010ce0 <_dtoa_r+0x2e8>)
 8010a28:	21ef      	movs	r1, #239	; 0xef
 8010a2a:	48ae      	ldr	r0, [pc, #696]	; (8010ce4 <_dtoa_r+0x2ec>)
 8010a2c:	f002 fe60 	bl	80136f0 <__assert_func>
 8010a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a34:	6005      	str	r5, [r0, #0]
 8010a36:	60c5      	str	r5, [r0, #12]
 8010a38:	69e3      	ldr	r3, [r4, #28]
 8010a3a:	6819      	ldr	r1, [r3, #0]
 8010a3c:	b151      	cbz	r1, 8010a54 <_dtoa_r+0x5c>
 8010a3e:	685a      	ldr	r2, [r3, #4]
 8010a40:	604a      	str	r2, [r1, #4]
 8010a42:	2301      	movs	r3, #1
 8010a44:	4093      	lsls	r3, r2
 8010a46:	608b      	str	r3, [r1, #8]
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f000 ff07 	bl	801185c <_Bfree>
 8010a4e:	69e3      	ldr	r3, [r4, #28]
 8010a50:	2200      	movs	r2, #0
 8010a52:	601a      	str	r2, [r3, #0]
 8010a54:	1e3b      	subs	r3, r7, #0
 8010a56:	bfbb      	ittet	lt
 8010a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a5c:	9303      	strlt	r3, [sp, #12]
 8010a5e:	2300      	movge	r3, #0
 8010a60:	2201      	movlt	r2, #1
 8010a62:	bfac      	ite	ge
 8010a64:	f8c8 3000 	strge.w	r3, [r8]
 8010a68:	f8c8 2000 	strlt.w	r2, [r8]
 8010a6c:	4b9e      	ldr	r3, [pc, #632]	; (8010ce8 <_dtoa_r+0x2f0>)
 8010a6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010a72:	ea33 0308 	bics.w	r3, r3, r8
 8010a76:	d11b      	bne.n	8010ab0 <_dtoa_r+0xb8>
 8010a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a7e:	6013      	str	r3, [r2, #0]
 8010a80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010a84:	4333      	orrs	r3, r6
 8010a86:	f000 8593 	beq.w	80115b0 <_dtoa_r+0xbb8>
 8010a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a8c:	b963      	cbnz	r3, 8010aa8 <_dtoa_r+0xb0>
 8010a8e:	4b97      	ldr	r3, [pc, #604]	; (8010cec <_dtoa_r+0x2f4>)
 8010a90:	e027      	b.n	8010ae2 <_dtoa_r+0xea>
 8010a92:	4b97      	ldr	r3, [pc, #604]	; (8010cf0 <_dtoa_r+0x2f8>)
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	3308      	adds	r3, #8
 8010a98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a9a:	6013      	str	r3, [r2, #0]
 8010a9c:	9800      	ldr	r0, [sp, #0]
 8010a9e:	b013      	add	sp, #76	; 0x4c
 8010aa0:	ecbd 8b04 	vpop	{d8-d9}
 8010aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa8:	4b90      	ldr	r3, [pc, #576]	; (8010cec <_dtoa_r+0x2f4>)
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	3303      	adds	r3, #3
 8010aae:	e7f3      	b.n	8010a98 <_dtoa_r+0xa0>
 8010ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	ec51 0b17 	vmov	r0, r1, d7
 8010aba:	eeb0 8a47 	vmov.f32	s16, s14
 8010abe:	eef0 8a67 	vmov.f32	s17, s15
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f7ef ffd8 	bl	8000a78 <__aeabi_dcmpeq>
 8010ac8:	4681      	mov	r9, r0
 8010aca:	b160      	cbz	r0, 8010ae6 <_dtoa_r+0xee>
 8010acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ace:	2301      	movs	r3, #1
 8010ad0:	6013      	str	r3, [r2, #0]
 8010ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 8568 	beq.w	80115aa <_dtoa_r+0xbb2>
 8010ada:	4b86      	ldr	r3, [pc, #536]	; (8010cf4 <_dtoa_r+0x2fc>)
 8010adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ade:	6013      	str	r3, [r2, #0]
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	e7da      	b.n	8010a9c <_dtoa_r+0xa4>
 8010ae6:	aa10      	add	r2, sp, #64	; 0x40
 8010ae8:	a911      	add	r1, sp, #68	; 0x44
 8010aea:	4620      	mov	r0, r4
 8010aec:	eeb0 0a48 	vmov.f32	s0, s16
 8010af0:	eef0 0a68 	vmov.f32	s1, s17
 8010af4:	f001 fa4e 	bl	8011f94 <__d2b>
 8010af8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010afc:	4682      	mov	sl, r0
 8010afe:	2d00      	cmp	r5, #0
 8010b00:	d07f      	beq.n	8010c02 <_dtoa_r+0x20a>
 8010b02:	ee18 3a90 	vmov	r3, s17
 8010b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010b0e:	ec51 0b18 	vmov	r0, r1, d8
 8010b12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010b1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010b1e:	4619      	mov	r1, r3
 8010b20:	2200      	movs	r2, #0
 8010b22:	4b75      	ldr	r3, [pc, #468]	; (8010cf8 <_dtoa_r+0x300>)
 8010b24:	f7ef fb88 	bl	8000238 <__aeabi_dsub>
 8010b28:	a367      	add	r3, pc, #412	; (adr r3, 8010cc8 <_dtoa_r+0x2d0>)
 8010b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2e:	f7ef fd3b 	bl	80005a8 <__aeabi_dmul>
 8010b32:	a367      	add	r3, pc, #412	; (adr r3, 8010cd0 <_dtoa_r+0x2d8>)
 8010b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b38:	f7ef fb80 	bl	800023c <__adddf3>
 8010b3c:	4606      	mov	r6, r0
 8010b3e:	4628      	mov	r0, r5
 8010b40:	460f      	mov	r7, r1
 8010b42:	f7ef fcc7 	bl	80004d4 <__aeabi_i2d>
 8010b46:	a364      	add	r3, pc, #400	; (adr r3, 8010cd8 <_dtoa_r+0x2e0>)
 8010b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4c:	f7ef fd2c 	bl	80005a8 <__aeabi_dmul>
 8010b50:	4602      	mov	r2, r0
 8010b52:	460b      	mov	r3, r1
 8010b54:	4630      	mov	r0, r6
 8010b56:	4639      	mov	r1, r7
 8010b58:	f7ef fb70 	bl	800023c <__adddf3>
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	460f      	mov	r7, r1
 8010b60:	f7ef ffd2 	bl	8000b08 <__aeabi_d2iz>
 8010b64:	2200      	movs	r2, #0
 8010b66:	4683      	mov	fp, r0
 8010b68:	2300      	movs	r3, #0
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	4639      	mov	r1, r7
 8010b6e:	f7ef ff8d 	bl	8000a8c <__aeabi_dcmplt>
 8010b72:	b148      	cbz	r0, 8010b88 <_dtoa_r+0x190>
 8010b74:	4658      	mov	r0, fp
 8010b76:	f7ef fcad 	bl	80004d4 <__aeabi_i2d>
 8010b7a:	4632      	mov	r2, r6
 8010b7c:	463b      	mov	r3, r7
 8010b7e:	f7ef ff7b 	bl	8000a78 <__aeabi_dcmpeq>
 8010b82:	b908      	cbnz	r0, 8010b88 <_dtoa_r+0x190>
 8010b84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b88:	f1bb 0f16 	cmp.w	fp, #22
 8010b8c:	d857      	bhi.n	8010c3e <_dtoa_r+0x246>
 8010b8e:	4b5b      	ldr	r3, [pc, #364]	; (8010cfc <_dtoa_r+0x304>)
 8010b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b98:	ec51 0b18 	vmov	r0, r1, d8
 8010b9c:	f7ef ff76 	bl	8000a8c <__aeabi_dcmplt>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d04e      	beq.n	8010c42 <_dtoa_r+0x24a>
 8010ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ba8:	2300      	movs	r3, #0
 8010baa:	930c      	str	r3, [sp, #48]	; 0x30
 8010bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bae:	1b5b      	subs	r3, r3, r5
 8010bb0:	1e5a      	subs	r2, r3, #1
 8010bb2:	bf45      	ittet	mi
 8010bb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8010bb8:	9305      	strmi	r3, [sp, #20]
 8010bba:	2300      	movpl	r3, #0
 8010bbc:	2300      	movmi	r3, #0
 8010bbe:	9206      	str	r2, [sp, #24]
 8010bc0:	bf54      	ite	pl
 8010bc2:	9305      	strpl	r3, [sp, #20]
 8010bc4:	9306      	strmi	r3, [sp, #24]
 8010bc6:	f1bb 0f00 	cmp.w	fp, #0
 8010bca:	db3c      	blt.n	8010c46 <_dtoa_r+0x24e>
 8010bcc:	9b06      	ldr	r3, [sp, #24]
 8010bce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010bd2:	445b      	add	r3, fp
 8010bd4:	9306      	str	r3, [sp, #24]
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	9308      	str	r3, [sp, #32]
 8010bda:	9b07      	ldr	r3, [sp, #28]
 8010bdc:	2b09      	cmp	r3, #9
 8010bde:	d868      	bhi.n	8010cb2 <_dtoa_r+0x2ba>
 8010be0:	2b05      	cmp	r3, #5
 8010be2:	bfc4      	itt	gt
 8010be4:	3b04      	subgt	r3, #4
 8010be6:	9307      	strgt	r3, [sp, #28]
 8010be8:	9b07      	ldr	r3, [sp, #28]
 8010bea:	f1a3 0302 	sub.w	r3, r3, #2
 8010bee:	bfcc      	ite	gt
 8010bf0:	2500      	movgt	r5, #0
 8010bf2:	2501      	movle	r5, #1
 8010bf4:	2b03      	cmp	r3, #3
 8010bf6:	f200 8085 	bhi.w	8010d04 <_dtoa_r+0x30c>
 8010bfa:	e8df f003 	tbb	[pc, r3]
 8010bfe:	3b2e      	.short	0x3b2e
 8010c00:	5839      	.short	0x5839
 8010c02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010c06:	441d      	add	r5, r3
 8010c08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010c0c:	2b20      	cmp	r3, #32
 8010c0e:	bfc1      	itttt	gt
 8010c10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010c14:	fa08 f803 	lslgt.w	r8, r8, r3
 8010c18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010c1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010c20:	bfd6      	itet	le
 8010c22:	f1c3 0320 	rsble	r3, r3, #32
 8010c26:	ea48 0003 	orrgt.w	r0, r8, r3
 8010c2a:	fa06 f003 	lslle.w	r0, r6, r3
 8010c2e:	f7ef fc41 	bl	80004b4 <__aeabi_ui2d>
 8010c32:	2201      	movs	r2, #1
 8010c34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010c38:	3d01      	subs	r5, #1
 8010c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8010c3c:	e76f      	b.n	8010b1e <_dtoa_r+0x126>
 8010c3e:	2301      	movs	r3, #1
 8010c40:	e7b3      	b.n	8010baa <_dtoa_r+0x1b2>
 8010c42:	900c      	str	r0, [sp, #48]	; 0x30
 8010c44:	e7b2      	b.n	8010bac <_dtoa_r+0x1b4>
 8010c46:	9b05      	ldr	r3, [sp, #20]
 8010c48:	eba3 030b 	sub.w	r3, r3, fp
 8010c4c:	9305      	str	r3, [sp, #20]
 8010c4e:	f1cb 0300 	rsb	r3, fp, #0
 8010c52:	9308      	str	r3, [sp, #32]
 8010c54:	2300      	movs	r3, #0
 8010c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c58:	e7bf      	b.n	8010bda <_dtoa_r+0x1e2>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	dc52      	bgt.n	8010d0a <_dtoa_r+0x312>
 8010c64:	2301      	movs	r3, #1
 8010c66:	9301      	str	r3, [sp, #4]
 8010c68:	9304      	str	r3, [sp, #16]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8010c6e:	e00b      	b.n	8010c88 <_dtoa_r+0x290>
 8010c70:	2301      	movs	r3, #1
 8010c72:	e7f3      	b.n	8010c5c <_dtoa_r+0x264>
 8010c74:	2300      	movs	r3, #0
 8010c76:	9309      	str	r3, [sp, #36]	; 0x24
 8010c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c7a:	445b      	add	r3, fp
 8010c7c:	9301      	str	r3, [sp, #4]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	9304      	str	r3, [sp, #16]
 8010c84:	bfb8      	it	lt
 8010c86:	2301      	movlt	r3, #1
 8010c88:	69e0      	ldr	r0, [r4, #28]
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	2204      	movs	r2, #4
 8010c8e:	f102 0614 	add.w	r6, r2, #20
 8010c92:	429e      	cmp	r6, r3
 8010c94:	d93d      	bls.n	8010d12 <_dtoa_r+0x31a>
 8010c96:	6041      	str	r1, [r0, #4]
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f000 fd9f 	bl	80117dc <_Balloc>
 8010c9e:	9000      	str	r0, [sp, #0]
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	d139      	bne.n	8010d18 <_dtoa_r+0x320>
 8010ca4:	4b16      	ldr	r3, [pc, #88]	; (8010d00 <_dtoa_r+0x308>)
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	f240 11af 	movw	r1, #431	; 0x1af
 8010cac:	e6bd      	b.n	8010a2a <_dtoa_r+0x32>
 8010cae:	2301      	movs	r3, #1
 8010cb0:	e7e1      	b.n	8010c76 <_dtoa_r+0x27e>
 8010cb2:	2501      	movs	r5, #1
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	9307      	str	r3, [sp, #28]
 8010cb8:	9509      	str	r5, [sp, #36]	; 0x24
 8010cba:	f04f 33ff 	mov.w	r3, #4294967295
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	9304      	str	r3, [sp, #16]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2312      	movs	r3, #18
 8010cc6:	e7d1      	b.n	8010c6c <_dtoa_r+0x274>
 8010cc8:	636f4361 	.word	0x636f4361
 8010ccc:	3fd287a7 	.word	0x3fd287a7
 8010cd0:	8b60c8b3 	.word	0x8b60c8b3
 8010cd4:	3fc68a28 	.word	0x3fc68a28
 8010cd8:	509f79fb 	.word	0x509f79fb
 8010cdc:	3fd34413 	.word	0x3fd34413
 8010ce0:	0801698e 	.word	0x0801698e
 8010ce4:	080169a5 	.word	0x080169a5
 8010ce8:	7ff00000 	.word	0x7ff00000
 8010cec:	0801698a 	.word	0x0801698a
 8010cf0:	08016981 	.word	0x08016981
 8010cf4:	08016959 	.word	0x08016959
 8010cf8:	3ff80000 	.word	0x3ff80000
 8010cfc:	08016a90 	.word	0x08016a90
 8010d00:	080169fd 	.word	0x080169fd
 8010d04:	2301      	movs	r3, #1
 8010d06:	9309      	str	r3, [sp, #36]	; 0x24
 8010d08:	e7d7      	b.n	8010cba <_dtoa_r+0x2c2>
 8010d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d0c:	9301      	str	r3, [sp, #4]
 8010d0e:	9304      	str	r3, [sp, #16]
 8010d10:	e7ba      	b.n	8010c88 <_dtoa_r+0x290>
 8010d12:	3101      	adds	r1, #1
 8010d14:	0052      	lsls	r2, r2, #1
 8010d16:	e7ba      	b.n	8010c8e <_dtoa_r+0x296>
 8010d18:	69e3      	ldr	r3, [r4, #28]
 8010d1a:	9a00      	ldr	r2, [sp, #0]
 8010d1c:	601a      	str	r2, [r3, #0]
 8010d1e:	9b04      	ldr	r3, [sp, #16]
 8010d20:	2b0e      	cmp	r3, #14
 8010d22:	f200 80a8 	bhi.w	8010e76 <_dtoa_r+0x47e>
 8010d26:	2d00      	cmp	r5, #0
 8010d28:	f000 80a5 	beq.w	8010e76 <_dtoa_r+0x47e>
 8010d2c:	f1bb 0f00 	cmp.w	fp, #0
 8010d30:	dd38      	ble.n	8010da4 <_dtoa_r+0x3ac>
 8010d32:	4bc0      	ldr	r3, [pc, #768]	; (8011034 <_dtoa_r+0x63c>)
 8010d34:	f00b 020f 	and.w	r2, fp, #15
 8010d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010d40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010d44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010d48:	d019      	beq.n	8010d7e <_dtoa_r+0x386>
 8010d4a:	4bbb      	ldr	r3, [pc, #748]	; (8011038 <_dtoa_r+0x640>)
 8010d4c:	ec51 0b18 	vmov	r0, r1, d8
 8010d50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d54:	f7ef fd52 	bl	80007fc <__aeabi_ddiv>
 8010d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d5c:	f008 080f 	and.w	r8, r8, #15
 8010d60:	2503      	movs	r5, #3
 8010d62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011038 <_dtoa_r+0x640>
 8010d66:	f1b8 0f00 	cmp.w	r8, #0
 8010d6a:	d10a      	bne.n	8010d82 <_dtoa_r+0x38a>
 8010d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d70:	4632      	mov	r2, r6
 8010d72:	463b      	mov	r3, r7
 8010d74:	f7ef fd42 	bl	80007fc <__aeabi_ddiv>
 8010d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d7c:	e02b      	b.n	8010dd6 <_dtoa_r+0x3de>
 8010d7e:	2502      	movs	r5, #2
 8010d80:	e7ef      	b.n	8010d62 <_dtoa_r+0x36a>
 8010d82:	f018 0f01 	tst.w	r8, #1
 8010d86:	d008      	beq.n	8010d9a <_dtoa_r+0x3a2>
 8010d88:	4630      	mov	r0, r6
 8010d8a:	4639      	mov	r1, r7
 8010d8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010d90:	f7ef fc0a 	bl	80005a8 <__aeabi_dmul>
 8010d94:	3501      	adds	r5, #1
 8010d96:	4606      	mov	r6, r0
 8010d98:	460f      	mov	r7, r1
 8010d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010d9e:	f109 0908 	add.w	r9, r9, #8
 8010da2:	e7e0      	b.n	8010d66 <_dtoa_r+0x36e>
 8010da4:	f000 809f 	beq.w	8010ee6 <_dtoa_r+0x4ee>
 8010da8:	f1cb 0600 	rsb	r6, fp, #0
 8010dac:	4ba1      	ldr	r3, [pc, #644]	; (8011034 <_dtoa_r+0x63c>)
 8010dae:	4fa2      	ldr	r7, [pc, #648]	; (8011038 <_dtoa_r+0x640>)
 8010db0:	f006 020f 	and.w	r2, r6, #15
 8010db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbc:	ec51 0b18 	vmov	r0, r1, d8
 8010dc0:	f7ef fbf2 	bl	80005a8 <__aeabi_dmul>
 8010dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dc8:	1136      	asrs	r6, r6, #4
 8010dca:	2300      	movs	r3, #0
 8010dcc:	2502      	movs	r5, #2
 8010dce:	2e00      	cmp	r6, #0
 8010dd0:	d17e      	bne.n	8010ed0 <_dtoa_r+0x4d8>
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1d0      	bne.n	8010d78 <_dtoa_r+0x380>
 8010dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	f000 8084 	beq.w	8010eea <_dtoa_r+0x4f2>
 8010de2:	4b96      	ldr	r3, [pc, #600]	; (801103c <_dtoa_r+0x644>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4640      	mov	r0, r8
 8010de8:	4649      	mov	r1, r9
 8010dea:	f7ef fe4f 	bl	8000a8c <__aeabi_dcmplt>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d07b      	beq.n	8010eea <_dtoa_r+0x4f2>
 8010df2:	9b04      	ldr	r3, [sp, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d078      	beq.n	8010eea <_dtoa_r+0x4f2>
 8010df8:	9b01      	ldr	r3, [sp, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	dd39      	ble.n	8010e72 <_dtoa_r+0x47a>
 8010dfe:	4b90      	ldr	r3, [pc, #576]	; (8011040 <_dtoa_r+0x648>)
 8010e00:	2200      	movs	r2, #0
 8010e02:	4640      	mov	r0, r8
 8010e04:	4649      	mov	r1, r9
 8010e06:	f7ef fbcf 	bl	80005a8 <__aeabi_dmul>
 8010e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e0e:	9e01      	ldr	r6, [sp, #4]
 8010e10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010e14:	3501      	adds	r5, #1
 8010e16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f7ef fb5a 	bl	80004d4 <__aeabi_i2d>
 8010e20:	4642      	mov	r2, r8
 8010e22:	464b      	mov	r3, r9
 8010e24:	f7ef fbc0 	bl	80005a8 <__aeabi_dmul>
 8010e28:	4b86      	ldr	r3, [pc, #536]	; (8011044 <_dtoa_r+0x64c>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f7ef fa06 	bl	800023c <__adddf3>
 8010e30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e38:	9303      	str	r3, [sp, #12]
 8010e3a:	2e00      	cmp	r6, #0
 8010e3c:	d158      	bne.n	8010ef0 <_dtoa_r+0x4f8>
 8010e3e:	4b82      	ldr	r3, [pc, #520]	; (8011048 <_dtoa_r+0x650>)
 8010e40:	2200      	movs	r2, #0
 8010e42:	4640      	mov	r0, r8
 8010e44:	4649      	mov	r1, r9
 8010e46:	f7ef f9f7 	bl	8000238 <__aeabi_dsub>
 8010e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e4e:	4680      	mov	r8, r0
 8010e50:	4689      	mov	r9, r1
 8010e52:	f7ef fe39 	bl	8000ac8 <__aeabi_dcmpgt>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	f040 8296 	bne.w	8011388 <_dtoa_r+0x990>
 8010e5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e60:	4640      	mov	r0, r8
 8010e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e66:	4649      	mov	r1, r9
 8010e68:	f7ef fe10 	bl	8000a8c <__aeabi_dcmplt>
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	f040 8289 	bne.w	8011384 <_dtoa_r+0x98c>
 8010e72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f2c0 814e 	blt.w	801111a <_dtoa_r+0x722>
 8010e7e:	f1bb 0f0e 	cmp.w	fp, #14
 8010e82:	f300 814a 	bgt.w	801111a <_dtoa_r+0x722>
 8010e86:	4b6b      	ldr	r3, [pc, #428]	; (8011034 <_dtoa_r+0x63c>)
 8010e88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f280 80dc 	bge.w	8011050 <_dtoa_r+0x658>
 8010e98:	9b04      	ldr	r3, [sp, #16]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f300 80d8 	bgt.w	8011050 <_dtoa_r+0x658>
 8010ea0:	f040 826f 	bne.w	8011382 <_dtoa_r+0x98a>
 8010ea4:	4b68      	ldr	r3, [pc, #416]	; (8011048 <_dtoa_r+0x650>)
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	4640      	mov	r0, r8
 8010eaa:	4649      	mov	r1, r9
 8010eac:	f7ef fb7c 	bl	80005a8 <__aeabi_dmul>
 8010eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010eb4:	f7ef fdfe 	bl	8000ab4 <__aeabi_dcmpge>
 8010eb8:	9e04      	ldr	r6, [sp, #16]
 8010eba:	4637      	mov	r7, r6
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	f040 8245 	bne.w	801134c <_dtoa_r+0x954>
 8010ec2:	9d00      	ldr	r5, [sp, #0]
 8010ec4:	2331      	movs	r3, #49	; 0x31
 8010ec6:	f805 3b01 	strb.w	r3, [r5], #1
 8010eca:	f10b 0b01 	add.w	fp, fp, #1
 8010ece:	e241      	b.n	8011354 <_dtoa_r+0x95c>
 8010ed0:	07f2      	lsls	r2, r6, #31
 8010ed2:	d505      	bpl.n	8010ee0 <_dtoa_r+0x4e8>
 8010ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ed8:	f7ef fb66 	bl	80005a8 <__aeabi_dmul>
 8010edc:	3501      	adds	r5, #1
 8010ede:	2301      	movs	r3, #1
 8010ee0:	1076      	asrs	r6, r6, #1
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	e773      	b.n	8010dce <_dtoa_r+0x3d6>
 8010ee6:	2502      	movs	r5, #2
 8010ee8:	e775      	b.n	8010dd6 <_dtoa_r+0x3de>
 8010eea:	9e04      	ldr	r6, [sp, #16]
 8010eec:	465f      	mov	r7, fp
 8010eee:	e792      	b.n	8010e16 <_dtoa_r+0x41e>
 8010ef0:	9900      	ldr	r1, [sp, #0]
 8010ef2:	4b50      	ldr	r3, [pc, #320]	; (8011034 <_dtoa_r+0x63c>)
 8010ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ef8:	4431      	add	r1, r6
 8010efa:	9102      	str	r1, [sp, #8]
 8010efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010efe:	eeb0 9a47 	vmov.f32	s18, s14
 8010f02:	eef0 9a67 	vmov.f32	s19, s15
 8010f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f0e:	2900      	cmp	r1, #0
 8010f10:	d044      	beq.n	8010f9c <_dtoa_r+0x5a4>
 8010f12:	494e      	ldr	r1, [pc, #312]	; (801104c <_dtoa_r+0x654>)
 8010f14:	2000      	movs	r0, #0
 8010f16:	f7ef fc71 	bl	80007fc <__aeabi_ddiv>
 8010f1a:	ec53 2b19 	vmov	r2, r3, d9
 8010f1e:	f7ef f98b 	bl	8000238 <__aeabi_dsub>
 8010f22:	9d00      	ldr	r5, [sp, #0]
 8010f24:	ec41 0b19 	vmov	d9, r0, r1
 8010f28:	4649      	mov	r1, r9
 8010f2a:	4640      	mov	r0, r8
 8010f2c:	f7ef fdec 	bl	8000b08 <__aeabi_d2iz>
 8010f30:	4606      	mov	r6, r0
 8010f32:	f7ef facf 	bl	80004d4 <__aeabi_i2d>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	4640      	mov	r0, r8
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	f7ef f97b 	bl	8000238 <__aeabi_dsub>
 8010f42:	3630      	adds	r6, #48	; 0x30
 8010f44:	f805 6b01 	strb.w	r6, [r5], #1
 8010f48:	ec53 2b19 	vmov	r2, r3, d9
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	4689      	mov	r9, r1
 8010f50:	f7ef fd9c 	bl	8000a8c <__aeabi_dcmplt>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d164      	bne.n	8011022 <_dtoa_r+0x62a>
 8010f58:	4642      	mov	r2, r8
 8010f5a:	464b      	mov	r3, r9
 8010f5c:	4937      	ldr	r1, [pc, #220]	; (801103c <_dtoa_r+0x644>)
 8010f5e:	2000      	movs	r0, #0
 8010f60:	f7ef f96a 	bl	8000238 <__aeabi_dsub>
 8010f64:	ec53 2b19 	vmov	r2, r3, d9
 8010f68:	f7ef fd90 	bl	8000a8c <__aeabi_dcmplt>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	f040 80b6 	bne.w	80110de <_dtoa_r+0x6e6>
 8010f72:	9b02      	ldr	r3, [sp, #8]
 8010f74:	429d      	cmp	r5, r3
 8010f76:	f43f af7c 	beq.w	8010e72 <_dtoa_r+0x47a>
 8010f7a:	4b31      	ldr	r3, [pc, #196]	; (8011040 <_dtoa_r+0x648>)
 8010f7c:	ec51 0b19 	vmov	r0, r1, d9
 8010f80:	2200      	movs	r2, #0
 8010f82:	f7ef fb11 	bl	80005a8 <__aeabi_dmul>
 8010f86:	4b2e      	ldr	r3, [pc, #184]	; (8011040 <_dtoa_r+0x648>)
 8010f88:	ec41 0b19 	vmov	d9, r0, r1
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	4640      	mov	r0, r8
 8010f90:	4649      	mov	r1, r9
 8010f92:	f7ef fb09 	bl	80005a8 <__aeabi_dmul>
 8010f96:	4680      	mov	r8, r0
 8010f98:	4689      	mov	r9, r1
 8010f9a:	e7c5      	b.n	8010f28 <_dtoa_r+0x530>
 8010f9c:	ec51 0b17 	vmov	r0, r1, d7
 8010fa0:	f7ef fb02 	bl	80005a8 <__aeabi_dmul>
 8010fa4:	9b02      	ldr	r3, [sp, #8]
 8010fa6:	9d00      	ldr	r5, [sp, #0]
 8010fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010faa:	ec41 0b19 	vmov	d9, r0, r1
 8010fae:	4649      	mov	r1, r9
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	f7ef fda9 	bl	8000b08 <__aeabi_d2iz>
 8010fb6:	4606      	mov	r6, r0
 8010fb8:	f7ef fa8c 	bl	80004d4 <__aeabi_i2d>
 8010fbc:	3630      	adds	r6, #48	; 0x30
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	4649      	mov	r1, r9
 8010fc6:	f7ef f937 	bl	8000238 <__aeabi_dsub>
 8010fca:	f805 6b01 	strb.w	r6, [r5], #1
 8010fce:	9b02      	ldr	r3, [sp, #8]
 8010fd0:	429d      	cmp	r5, r3
 8010fd2:	4680      	mov	r8, r0
 8010fd4:	4689      	mov	r9, r1
 8010fd6:	f04f 0200 	mov.w	r2, #0
 8010fda:	d124      	bne.n	8011026 <_dtoa_r+0x62e>
 8010fdc:	4b1b      	ldr	r3, [pc, #108]	; (801104c <_dtoa_r+0x654>)
 8010fde:	ec51 0b19 	vmov	r0, r1, d9
 8010fe2:	f7ef f92b 	bl	800023c <__adddf3>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4640      	mov	r0, r8
 8010fec:	4649      	mov	r1, r9
 8010fee:	f7ef fd6b 	bl	8000ac8 <__aeabi_dcmpgt>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d173      	bne.n	80110de <_dtoa_r+0x6e6>
 8010ff6:	ec53 2b19 	vmov	r2, r3, d9
 8010ffa:	4914      	ldr	r1, [pc, #80]	; (801104c <_dtoa_r+0x654>)
 8010ffc:	2000      	movs	r0, #0
 8010ffe:	f7ef f91b 	bl	8000238 <__aeabi_dsub>
 8011002:	4602      	mov	r2, r0
 8011004:	460b      	mov	r3, r1
 8011006:	4640      	mov	r0, r8
 8011008:	4649      	mov	r1, r9
 801100a:	f7ef fd3f 	bl	8000a8c <__aeabi_dcmplt>
 801100e:	2800      	cmp	r0, #0
 8011010:	f43f af2f 	beq.w	8010e72 <_dtoa_r+0x47a>
 8011014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011016:	1e6b      	subs	r3, r5, #1
 8011018:	930f      	str	r3, [sp, #60]	; 0x3c
 801101a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801101e:	2b30      	cmp	r3, #48	; 0x30
 8011020:	d0f8      	beq.n	8011014 <_dtoa_r+0x61c>
 8011022:	46bb      	mov	fp, r7
 8011024:	e04a      	b.n	80110bc <_dtoa_r+0x6c4>
 8011026:	4b06      	ldr	r3, [pc, #24]	; (8011040 <_dtoa_r+0x648>)
 8011028:	f7ef fabe 	bl	80005a8 <__aeabi_dmul>
 801102c:	4680      	mov	r8, r0
 801102e:	4689      	mov	r9, r1
 8011030:	e7bd      	b.n	8010fae <_dtoa_r+0x5b6>
 8011032:	bf00      	nop
 8011034:	08016a90 	.word	0x08016a90
 8011038:	08016a68 	.word	0x08016a68
 801103c:	3ff00000 	.word	0x3ff00000
 8011040:	40240000 	.word	0x40240000
 8011044:	401c0000 	.word	0x401c0000
 8011048:	40140000 	.word	0x40140000
 801104c:	3fe00000 	.word	0x3fe00000
 8011050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011054:	9d00      	ldr	r5, [sp, #0]
 8011056:	4642      	mov	r2, r8
 8011058:	464b      	mov	r3, r9
 801105a:	4630      	mov	r0, r6
 801105c:	4639      	mov	r1, r7
 801105e:	f7ef fbcd 	bl	80007fc <__aeabi_ddiv>
 8011062:	f7ef fd51 	bl	8000b08 <__aeabi_d2iz>
 8011066:	9001      	str	r0, [sp, #4]
 8011068:	f7ef fa34 	bl	80004d4 <__aeabi_i2d>
 801106c:	4642      	mov	r2, r8
 801106e:	464b      	mov	r3, r9
 8011070:	f7ef fa9a 	bl	80005a8 <__aeabi_dmul>
 8011074:	4602      	mov	r2, r0
 8011076:	460b      	mov	r3, r1
 8011078:	4630      	mov	r0, r6
 801107a:	4639      	mov	r1, r7
 801107c:	f7ef f8dc 	bl	8000238 <__aeabi_dsub>
 8011080:	9e01      	ldr	r6, [sp, #4]
 8011082:	9f04      	ldr	r7, [sp, #16]
 8011084:	3630      	adds	r6, #48	; 0x30
 8011086:	f805 6b01 	strb.w	r6, [r5], #1
 801108a:	9e00      	ldr	r6, [sp, #0]
 801108c:	1bae      	subs	r6, r5, r6
 801108e:	42b7      	cmp	r7, r6
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	d134      	bne.n	8011100 <_dtoa_r+0x708>
 8011096:	f7ef f8d1 	bl	800023c <__adddf3>
 801109a:	4642      	mov	r2, r8
 801109c:	464b      	mov	r3, r9
 801109e:	4606      	mov	r6, r0
 80110a0:	460f      	mov	r7, r1
 80110a2:	f7ef fd11 	bl	8000ac8 <__aeabi_dcmpgt>
 80110a6:	b9c8      	cbnz	r0, 80110dc <_dtoa_r+0x6e4>
 80110a8:	4642      	mov	r2, r8
 80110aa:	464b      	mov	r3, r9
 80110ac:	4630      	mov	r0, r6
 80110ae:	4639      	mov	r1, r7
 80110b0:	f7ef fce2 	bl	8000a78 <__aeabi_dcmpeq>
 80110b4:	b110      	cbz	r0, 80110bc <_dtoa_r+0x6c4>
 80110b6:	9b01      	ldr	r3, [sp, #4]
 80110b8:	07db      	lsls	r3, r3, #31
 80110ba:	d40f      	bmi.n	80110dc <_dtoa_r+0x6e4>
 80110bc:	4651      	mov	r1, sl
 80110be:	4620      	mov	r0, r4
 80110c0:	f000 fbcc 	bl	801185c <_Bfree>
 80110c4:	2300      	movs	r3, #0
 80110c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110c8:	702b      	strb	r3, [r5, #0]
 80110ca:	f10b 0301 	add.w	r3, fp, #1
 80110ce:	6013      	str	r3, [r2, #0]
 80110d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f43f ace2 	beq.w	8010a9c <_dtoa_r+0xa4>
 80110d8:	601d      	str	r5, [r3, #0]
 80110da:	e4df      	b.n	8010a9c <_dtoa_r+0xa4>
 80110dc:	465f      	mov	r7, fp
 80110de:	462b      	mov	r3, r5
 80110e0:	461d      	mov	r5, r3
 80110e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110e6:	2a39      	cmp	r2, #57	; 0x39
 80110e8:	d106      	bne.n	80110f8 <_dtoa_r+0x700>
 80110ea:	9a00      	ldr	r2, [sp, #0]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d1f7      	bne.n	80110e0 <_dtoa_r+0x6e8>
 80110f0:	9900      	ldr	r1, [sp, #0]
 80110f2:	2230      	movs	r2, #48	; 0x30
 80110f4:	3701      	adds	r7, #1
 80110f6:	700a      	strb	r2, [r1, #0]
 80110f8:	781a      	ldrb	r2, [r3, #0]
 80110fa:	3201      	adds	r2, #1
 80110fc:	701a      	strb	r2, [r3, #0]
 80110fe:	e790      	b.n	8011022 <_dtoa_r+0x62a>
 8011100:	4ba3      	ldr	r3, [pc, #652]	; (8011390 <_dtoa_r+0x998>)
 8011102:	2200      	movs	r2, #0
 8011104:	f7ef fa50 	bl	80005a8 <__aeabi_dmul>
 8011108:	2200      	movs	r2, #0
 801110a:	2300      	movs	r3, #0
 801110c:	4606      	mov	r6, r0
 801110e:	460f      	mov	r7, r1
 8011110:	f7ef fcb2 	bl	8000a78 <__aeabi_dcmpeq>
 8011114:	2800      	cmp	r0, #0
 8011116:	d09e      	beq.n	8011056 <_dtoa_r+0x65e>
 8011118:	e7d0      	b.n	80110bc <_dtoa_r+0x6c4>
 801111a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801111c:	2a00      	cmp	r2, #0
 801111e:	f000 80ca 	beq.w	80112b6 <_dtoa_r+0x8be>
 8011122:	9a07      	ldr	r2, [sp, #28]
 8011124:	2a01      	cmp	r2, #1
 8011126:	f300 80ad 	bgt.w	8011284 <_dtoa_r+0x88c>
 801112a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801112c:	2a00      	cmp	r2, #0
 801112e:	f000 80a5 	beq.w	801127c <_dtoa_r+0x884>
 8011132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011136:	9e08      	ldr	r6, [sp, #32]
 8011138:	9d05      	ldr	r5, [sp, #20]
 801113a:	9a05      	ldr	r2, [sp, #20]
 801113c:	441a      	add	r2, r3
 801113e:	9205      	str	r2, [sp, #20]
 8011140:	9a06      	ldr	r2, [sp, #24]
 8011142:	2101      	movs	r1, #1
 8011144:	441a      	add	r2, r3
 8011146:	4620      	mov	r0, r4
 8011148:	9206      	str	r2, [sp, #24]
 801114a:	f000 fc87 	bl	8011a5c <__i2b>
 801114e:	4607      	mov	r7, r0
 8011150:	b165      	cbz	r5, 801116c <_dtoa_r+0x774>
 8011152:	9b06      	ldr	r3, [sp, #24]
 8011154:	2b00      	cmp	r3, #0
 8011156:	dd09      	ble.n	801116c <_dtoa_r+0x774>
 8011158:	42ab      	cmp	r3, r5
 801115a:	9a05      	ldr	r2, [sp, #20]
 801115c:	bfa8      	it	ge
 801115e:	462b      	movge	r3, r5
 8011160:	1ad2      	subs	r2, r2, r3
 8011162:	9205      	str	r2, [sp, #20]
 8011164:	9a06      	ldr	r2, [sp, #24]
 8011166:	1aed      	subs	r5, r5, r3
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	9306      	str	r3, [sp, #24]
 801116c:	9b08      	ldr	r3, [sp, #32]
 801116e:	b1f3      	cbz	r3, 80111ae <_dtoa_r+0x7b6>
 8011170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011172:	2b00      	cmp	r3, #0
 8011174:	f000 80a3 	beq.w	80112be <_dtoa_r+0x8c6>
 8011178:	2e00      	cmp	r6, #0
 801117a:	dd10      	ble.n	801119e <_dtoa_r+0x7a6>
 801117c:	4639      	mov	r1, r7
 801117e:	4632      	mov	r2, r6
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fd2b 	bl	8011bdc <__pow5mult>
 8011186:	4652      	mov	r2, sl
 8011188:	4601      	mov	r1, r0
 801118a:	4607      	mov	r7, r0
 801118c:	4620      	mov	r0, r4
 801118e:	f000 fc7b 	bl	8011a88 <__multiply>
 8011192:	4651      	mov	r1, sl
 8011194:	4680      	mov	r8, r0
 8011196:	4620      	mov	r0, r4
 8011198:	f000 fb60 	bl	801185c <_Bfree>
 801119c:	46c2      	mov	sl, r8
 801119e:	9b08      	ldr	r3, [sp, #32]
 80111a0:	1b9a      	subs	r2, r3, r6
 80111a2:	d004      	beq.n	80111ae <_dtoa_r+0x7b6>
 80111a4:	4651      	mov	r1, sl
 80111a6:	4620      	mov	r0, r4
 80111a8:	f000 fd18 	bl	8011bdc <__pow5mult>
 80111ac:	4682      	mov	sl, r0
 80111ae:	2101      	movs	r1, #1
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 fc53 	bl	8011a5c <__i2b>
 80111b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	4606      	mov	r6, r0
 80111bc:	f340 8081 	ble.w	80112c2 <_dtoa_r+0x8ca>
 80111c0:	461a      	mov	r2, r3
 80111c2:	4601      	mov	r1, r0
 80111c4:	4620      	mov	r0, r4
 80111c6:	f000 fd09 	bl	8011bdc <__pow5mult>
 80111ca:	9b07      	ldr	r3, [sp, #28]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	4606      	mov	r6, r0
 80111d0:	dd7a      	ble.n	80112c8 <_dtoa_r+0x8d0>
 80111d2:	f04f 0800 	mov.w	r8, #0
 80111d6:	6933      	ldr	r3, [r6, #16]
 80111d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80111dc:	6918      	ldr	r0, [r3, #16]
 80111de:	f000 fbef 	bl	80119c0 <__hi0bits>
 80111e2:	f1c0 0020 	rsb	r0, r0, #32
 80111e6:	9b06      	ldr	r3, [sp, #24]
 80111e8:	4418      	add	r0, r3
 80111ea:	f010 001f 	ands.w	r0, r0, #31
 80111ee:	f000 8094 	beq.w	801131a <_dtoa_r+0x922>
 80111f2:	f1c0 0320 	rsb	r3, r0, #32
 80111f6:	2b04      	cmp	r3, #4
 80111f8:	f340 8085 	ble.w	8011306 <_dtoa_r+0x90e>
 80111fc:	9b05      	ldr	r3, [sp, #20]
 80111fe:	f1c0 001c 	rsb	r0, r0, #28
 8011202:	4403      	add	r3, r0
 8011204:	9305      	str	r3, [sp, #20]
 8011206:	9b06      	ldr	r3, [sp, #24]
 8011208:	4403      	add	r3, r0
 801120a:	4405      	add	r5, r0
 801120c:	9306      	str	r3, [sp, #24]
 801120e:	9b05      	ldr	r3, [sp, #20]
 8011210:	2b00      	cmp	r3, #0
 8011212:	dd05      	ble.n	8011220 <_dtoa_r+0x828>
 8011214:	4651      	mov	r1, sl
 8011216:	461a      	mov	r2, r3
 8011218:	4620      	mov	r0, r4
 801121a:	f000 fd39 	bl	8011c90 <__lshift>
 801121e:	4682      	mov	sl, r0
 8011220:	9b06      	ldr	r3, [sp, #24]
 8011222:	2b00      	cmp	r3, #0
 8011224:	dd05      	ble.n	8011232 <_dtoa_r+0x83a>
 8011226:	4631      	mov	r1, r6
 8011228:	461a      	mov	r2, r3
 801122a:	4620      	mov	r0, r4
 801122c:	f000 fd30 	bl	8011c90 <__lshift>
 8011230:	4606      	mov	r6, r0
 8011232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011234:	2b00      	cmp	r3, #0
 8011236:	d072      	beq.n	801131e <_dtoa_r+0x926>
 8011238:	4631      	mov	r1, r6
 801123a:	4650      	mov	r0, sl
 801123c:	f000 fd94 	bl	8011d68 <__mcmp>
 8011240:	2800      	cmp	r0, #0
 8011242:	da6c      	bge.n	801131e <_dtoa_r+0x926>
 8011244:	2300      	movs	r3, #0
 8011246:	4651      	mov	r1, sl
 8011248:	220a      	movs	r2, #10
 801124a:	4620      	mov	r0, r4
 801124c:	f000 fb28 	bl	80118a0 <__multadd>
 8011250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011252:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011256:	4682      	mov	sl, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	f000 81b0 	beq.w	80115be <_dtoa_r+0xbc6>
 801125e:	2300      	movs	r3, #0
 8011260:	4639      	mov	r1, r7
 8011262:	220a      	movs	r2, #10
 8011264:	4620      	mov	r0, r4
 8011266:	f000 fb1b 	bl	80118a0 <__multadd>
 801126a:	9b01      	ldr	r3, [sp, #4]
 801126c:	2b00      	cmp	r3, #0
 801126e:	4607      	mov	r7, r0
 8011270:	f300 8096 	bgt.w	80113a0 <_dtoa_r+0x9a8>
 8011274:	9b07      	ldr	r3, [sp, #28]
 8011276:	2b02      	cmp	r3, #2
 8011278:	dc59      	bgt.n	801132e <_dtoa_r+0x936>
 801127a:	e091      	b.n	80113a0 <_dtoa_r+0x9a8>
 801127c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801127e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011282:	e758      	b.n	8011136 <_dtoa_r+0x73e>
 8011284:	9b04      	ldr	r3, [sp, #16]
 8011286:	1e5e      	subs	r6, r3, #1
 8011288:	9b08      	ldr	r3, [sp, #32]
 801128a:	42b3      	cmp	r3, r6
 801128c:	bfbf      	itttt	lt
 801128e:	9b08      	ldrlt	r3, [sp, #32]
 8011290:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011292:	9608      	strlt	r6, [sp, #32]
 8011294:	1af3      	sublt	r3, r6, r3
 8011296:	bfb4      	ite	lt
 8011298:	18d2      	addlt	r2, r2, r3
 801129a:	1b9e      	subge	r6, r3, r6
 801129c:	9b04      	ldr	r3, [sp, #16]
 801129e:	bfbc      	itt	lt
 80112a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80112a2:	2600      	movlt	r6, #0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	bfb7      	itett	lt
 80112a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80112ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80112b0:	1a9d      	sublt	r5, r3, r2
 80112b2:	2300      	movlt	r3, #0
 80112b4:	e741      	b.n	801113a <_dtoa_r+0x742>
 80112b6:	9e08      	ldr	r6, [sp, #32]
 80112b8:	9d05      	ldr	r5, [sp, #20]
 80112ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80112bc:	e748      	b.n	8011150 <_dtoa_r+0x758>
 80112be:	9a08      	ldr	r2, [sp, #32]
 80112c0:	e770      	b.n	80111a4 <_dtoa_r+0x7ac>
 80112c2:	9b07      	ldr	r3, [sp, #28]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	dc19      	bgt.n	80112fc <_dtoa_r+0x904>
 80112c8:	9b02      	ldr	r3, [sp, #8]
 80112ca:	b9bb      	cbnz	r3, 80112fc <_dtoa_r+0x904>
 80112cc:	9b03      	ldr	r3, [sp, #12]
 80112ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112d2:	b99b      	cbnz	r3, 80112fc <_dtoa_r+0x904>
 80112d4:	9b03      	ldr	r3, [sp, #12]
 80112d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112da:	0d1b      	lsrs	r3, r3, #20
 80112dc:	051b      	lsls	r3, r3, #20
 80112de:	b183      	cbz	r3, 8011302 <_dtoa_r+0x90a>
 80112e0:	9b05      	ldr	r3, [sp, #20]
 80112e2:	3301      	adds	r3, #1
 80112e4:	9305      	str	r3, [sp, #20]
 80112e6:	9b06      	ldr	r3, [sp, #24]
 80112e8:	3301      	adds	r3, #1
 80112ea:	9306      	str	r3, [sp, #24]
 80112ec:	f04f 0801 	mov.w	r8, #1
 80112f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f47f af6f 	bne.w	80111d6 <_dtoa_r+0x7de>
 80112f8:	2001      	movs	r0, #1
 80112fa:	e774      	b.n	80111e6 <_dtoa_r+0x7ee>
 80112fc:	f04f 0800 	mov.w	r8, #0
 8011300:	e7f6      	b.n	80112f0 <_dtoa_r+0x8f8>
 8011302:	4698      	mov	r8, r3
 8011304:	e7f4      	b.n	80112f0 <_dtoa_r+0x8f8>
 8011306:	d082      	beq.n	801120e <_dtoa_r+0x816>
 8011308:	9a05      	ldr	r2, [sp, #20]
 801130a:	331c      	adds	r3, #28
 801130c:	441a      	add	r2, r3
 801130e:	9205      	str	r2, [sp, #20]
 8011310:	9a06      	ldr	r2, [sp, #24]
 8011312:	441a      	add	r2, r3
 8011314:	441d      	add	r5, r3
 8011316:	9206      	str	r2, [sp, #24]
 8011318:	e779      	b.n	801120e <_dtoa_r+0x816>
 801131a:	4603      	mov	r3, r0
 801131c:	e7f4      	b.n	8011308 <_dtoa_r+0x910>
 801131e:	9b04      	ldr	r3, [sp, #16]
 8011320:	2b00      	cmp	r3, #0
 8011322:	dc37      	bgt.n	8011394 <_dtoa_r+0x99c>
 8011324:	9b07      	ldr	r3, [sp, #28]
 8011326:	2b02      	cmp	r3, #2
 8011328:	dd34      	ble.n	8011394 <_dtoa_r+0x99c>
 801132a:	9b04      	ldr	r3, [sp, #16]
 801132c:	9301      	str	r3, [sp, #4]
 801132e:	9b01      	ldr	r3, [sp, #4]
 8011330:	b963      	cbnz	r3, 801134c <_dtoa_r+0x954>
 8011332:	4631      	mov	r1, r6
 8011334:	2205      	movs	r2, #5
 8011336:	4620      	mov	r0, r4
 8011338:	f000 fab2 	bl	80118a0 <__multadd>
 801133c:	4601      	mov	r1, r0
 801133e:	4606      	mov	r6, r0
 8011340:	4650      	mov	r0, sl
 8011342:	f000 fd11 	bl	8011d68 <__mcmp>
 8011346:	2800      	cmp	r0, #0
 8011348:	f73f adbb 	bgt.w	8010ec2 <_dtoa_r+0x4ca>
 801134c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801134e:	9d00      	ldr	r5, [sp, #0]
 8011350:	ea6f 0b03 	mvn.w	fp, r3
 8011354:	f04f 0800 	mov.w	r8, #0
 8011358:	4631      	mov	r1, r6
 801135a:	4620      	mov	r0, r4
 801135c:	f000 fa7e 	bl	801185c <_Bfree>
 8011360:	2f00      	cmp	r7, #0
 8011362:	f43f aeab 	beq.w	80110bc <_dtoa_r+0x6c4>
 8011366:	f1b8 0f00 	cmp.w	r8, #0
 801136a:	d005      	beq.n	8011378 <_dtoa_r+0x980>
 801136c:	45b8      	cmp	r8, r7
 801136e:	d003      	beq.n	8011378 <_dtoa_r+0x980>
 8011370:	4641      	mov	r1, r8
 8011372:	4620      	mov	r0, r4
 8011374:	f000 fa72 	bl	801185c <_Bfree>
 8011378:	4639      	mov	r1, r7
 801137a:	4620      	mov	r0, r4
 801137c:	f000 fa6e 	bl	801185c <_Bfree>
 8011380:	e69c      	b.n	80110bc <_dtoa_r+0x6c4>
 8011382:	2600      	movs	r6, #0
 8011384:	4637      	mov	r7, r6
 8011386:	e7e1      	b.n	801134c <_dtoa_r+0x954>
 8011388:	46bb      	mov	fp, r7
 801138a:	4637      	mov	r7, r6
 801138c:	e599      	b.n	8010ec2 <_dtoa_r+0x4ca>
 801138e:	bf00      	nop
 8011390:	40240000 	.word	0x40240000
 8011394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011396:	2b00      	cmp	r3, #0
 8011398:	f000 80c8 	beq.w	801152c <_dtoa_r+0xb34>
 801139c:	9b04      	ldr	r3, [sp, #16]
 801139e:	9301      	str	r3, [sp, #4]
 80113a0:	2d00      	cmp	r5, #0
 80113a2:	dd05      	ble.n	80113b0 <_dtoa_r+0x9b8>
 80113a4:	4639      	mov	r1, r7
 80113a6:	462a      	mov	r2, r5
 80113a8:	4620      	mov	r0, r4
 80113aa:	f000 fc71 	bl	8011c90 <__lshift>
 80113ae:	4607      	mov	r7, r0
 80113b0:	f1b8 0f00 	cmp.w	r8, #0
 80113b4:	d05b      	beq.n	801146e <_dtoa_r+0xa76>
 80113b6:	6879      	ldr	r1, [r7, #4]
 80113b8:	4620      	mov	r0, r4
 80113ba:	f000 fa0f 	bl	80117dc <_Balloc>
 80113be:	4605      	mov	r5, r0
 80113c0:	b928      	cbnz	r0, 80113ce <_dtoa_r+0x9d6>
 80113c2:	4b83      	ldr	r3, [pc, #524]	; (80115d0 <_dtoa_r+0xbd8>)
 80113c4:	4602      	mov	r2, r0
 80113c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80113ca:	f7ff bb2e 	b.w	8010a2a <_dtoa_r+0x32>
 80113ce:	693a      	ldr	r2, [r7, #16]
 80113d0:	3202      	adds	r2, #2
 80113d2:	0092      	lsls	r2, r2, #2
 80113d4:	f107 010c 	add.w	r1, r7, #12
 80113d8:	300c      	adds	r0, #12
 80113da:	f7ff fa70 	bl	80108be <memcpy>
 80113de:	2201      	movs	r2, #1
 80113e0:	4629      	mov	r1, r5
 80113e2:	4620      	mov	r0, r4
 80113e4:	f000 fc54 	bl	8011c90 <__lshift>
 80113e8:	9b00      	ldr	r3, [sp, #0]
 80113ea:	3301      	adds	r3, #1
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113f2:	4413      	add	r3, r2
 80113f4:	9308      	str	r3, [sp, #32]
 80113f6:	9b02      	ldr	r3, [sp, #8]
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	46b8      	mov	r8, r7
 80113fe:	9306      	str	r3, [sp, #24]
 8011400:	4607      	mov	r7, r0
 8011402:	9b04      	ldr	r3, [sp, #16]
 8011404:	4631      	mov	r1, r6
 8011406:	3b01      	subs	r3, #1
 8011408:	4650      	mov	r0, sl
 801140a:	9301      	str	r3, [sp, #4]
 801140c:	f7ff fa6c 	bl	80108e8 <quorem>
 8011410:	4641      	mov	r1, r8
 8011412:	9002      	str	r0, [sp, #8]
 8011414:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011418:	4650      	mov	r0, sl
 801141a:	f000 fca5 	bl	8011d68 <__mcmp>
 801141e:	463a      	mov	r2, r7
 8011420:	9005      	str	r0, [sp, #20]
 8011422:	4631      	mov	r1, r6
 8011424:	4620      	mov	r0, r4
 8011426:	f000 fcbb 	bl	8011da0 <__mdiff>
 801142a:	68c2      	ldr	r2, [r0, #12]
 801142c:	4605      	mov	r5, r0
 801142e:	bb02      	cbnz	r2, 8011472 <_dtoa_r+0xa7a>
 8011430:	4601      	mov	r1, r0
 8011432:	4650      	mov	r0, sl
 8011434:	f000 fc98 	bl	8011d68 <__mcmp>
 8011438:	4602      	mov	r2, r0
 801143a:	4629      	mov	r1, r5
 801143c:	4620      	mov	r0, r4
 801143e:	9209      	str	r2, [sp, #36]	; 0x24
 8011440:	f000 fa0c 	bl	801185c <_Bfree>
 8011444:	9b07      	ldr	r3, [sp, #28]
 8011446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011448:	9d04      	ldr	r5, [sp, #16]
 801144a:	ea43 0102 	orr.w	r1, r3, r2
 801144e:	9b06      	ldr	r3, [sp, #24]
 8011450:	4319      	orrs	r1, r3
 8011452:	d110      	bne.n	8011476 <_dtoa_r+0xa7e>
 8011454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011458:	d029      	beq.n	80114ae <_dtoa_r+0xab6>
 801145a:	9b05      	ldr	r3, [sp, #20]
 801145c:	2b00      	cmp	r3, #0
 801145e:	dd02      	ble.n	8011466 <_dtoa_r+0xa6e>
 8011460:	9b02      	ldr	r3, [sp, #8]
 8011462:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011466:	9b01      	ldr	r3, [sp, #4]
 8011468:	f883 9000 	strb.w	r9, [r3]
 801146c:	e774      	b.n	8011358 <_dtoa_r+0x960>
 801146e:	4638      	mov	r0, r7
 8011470:	e7ba      	b.n	80113e8 <_dtoa_r+0x9f0>
 8011472:	2201      	movs	r2, #1
 8011474:	e7e1      	b.n	801143a <_dtoa_r+0xa42>
 8011476:	9b05      	ldr	r3, [sp, #20]
 8011478:	2b00      	cmp	r3, #0
 801147a:	db04      	blt.n	8011486 <_dtoa_r+0xa8e>
 801147c:	9907      	ldr	r1, [sp, #28]
 801147e:	430b      	orrs	r3, r1
 8011480:	9906      	ldr	r1, [sp, #24]
 8011482:	430b      	orrs	r3, r1
 8011484:	d120      	bne.n	80114c8 <_dtoa_r+0xad0>
 8011486:	2a00      	cmp	r2, #0
 8011488:	dded      	ble.n	8011466 <_dtoa_r+0xa6e>
 801148a:	4651      	mov	r1, sl
 801148c:	2201      	movs	r2, #1
 801148e:	4620      	mov	r0, r4
 8011490:	f000 fbfe 	bl	8011c90 <__lshift>
 8011494:	4631      	mov	r1, r6
 8011496:	4682      	mov	sl, r0
 8011498:	f000 fc66 	bl	8011d68 <__mcmp>
 801149c:	2800      	cmp	r0, #0
 801149e:	dc03      	bgt.n	80114a8 <_dtoa_r+0xab0>
 80114a0:	d1e1      	bne.n	8011466 <_dtoa_r+0xa6e>
 80114a2:	f019 0f01 	tst.w	r9, #1
 80114a6:	d0de      	beq.n	8011466 <_dtoa_r+0xa6e>
 80114a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80114ac:	d1d8      	bne.n	8011460 <_dtoa_r+0xa68>
 80114ae:	9a01      	ldr	r2, [sp, #4]
 80114b0:	2339      	movs	r3, #57	; 0x39
 80114b2:	7013      	strb	r3, [r2, #0]
 80114b4:	462b      	mov	r3, r5
 80114b6:	461d      	mov	r5, r3
 80114b8:	3b01      	subs	r3, #1
 80114ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80114be:	2a39      	cmp	r2, #57	; 0x39
 80114c0:	d06c      	beq.n	801159c <_dtoa_r+0xba4>
 80114c2:	3201      	adds	r2, #1
 80114c4:	701a      	strb	r2, [r3, #0]
 80114c6:	e747      	b.n	8011358 <_dtoa_r+0x960>
 80114c8:	2a00      	cmp	r2, #0
 80114ca:	dd07      	ble.n	80114dc <_dtoa_r+0xae4>
 80114cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80114d0:	d0ed      	beq.n	80114ae <_dtoa_r+0xab6>
 80114d2:	9a01      	ldr	r2, [sp, #4]
 80114d4:	f109 0301 	add.w	r3, r9, #1
 80114d8:	7013      	strb	r3, [r2, #0]
 80114da:	e73d      	b.n	8011358 <_dtoa_r+0x960>
 80114dc:	9b04      	ldr	r3, [sp, #16]
 80114de:	9a08      	ldr	r2, [sp, #32]
 80114e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d043      	beq.n	8011570 <_dtoa_r+0xb78>
 80114e8:	4651      	mov	r1, sl
 80114ea:	2300      	movs	r3, #0
 80114ec:	220a      	movs	r2, #10
 80114ee:	4620      	mov	r0, r4
 80114f0:	f000 f9d6 	bl	80118a0 <__multadd>
 80114f4:	45b8      	cmp	r8, r7
 80114f6:	4682      	mov	sl, r0
 80114f8:	f04f 0300 	mov.w	r3, #0
 80114fc:	f04f 020a 	mov.w	r2, #10
 8011500:	4641      	mov	r1, r8
 8011502:	4620      	mov	r0, r4
 8011504:	d107      	bne.n	8011516 <_dtoa_r+0xb1e>
 8011506:	f000 f9cb 	bl	80118a0 <__multadd>
 801150a:	4680      	mov	r8, r0
 801150c:	4607      	mov	r7, r0
 801150e:	9b04      	ldr	r3, [sp, #16]
 8011510:	3301      	adds	r3, #1
 8011512:	9304      	str	r3, [sp, #16]
 8011514:	e775      	b.n	8011402 <_dtoa_r+0xa0a>
 8011516:	f000 f9c3 	bl	80118a0 <__multadd>
 801151a:	4639      	mov	r1, r7
 801151c:	4680      	mov	r8, r0
 801151e:	2300      	movs	r3, #0
 8011520:	220a      	movs	r2, #10
 8011522:	4620      	mov	r0, r4
 8011524:	f000 f9bc 	bl	80118a0 <__multadd>
 8011528:	4607      	mov	r7, r0
 801152a:	e7f0      	b.n	801150e <_dtoa_r+0xb16>
 801152c:	9b04      	ldr	r3, [sp, #16]
 801152e:	9301      	str	r3, [sp, #4]
 8011530:	9d00      	ldr	r5, [sp, #0]
 8011532:	4631      	mov	r1, r6
 8011534:	4650      	mov	r0, sl
 8011536:	f7ff f9d7 	bl	80108e8 <quorem>
 801153a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801153e:	9b00      	ldr	r3, [sp, #0]
 8011540:	f805 9b01 	strb.w	r9, [r5], #1
 8011544:	1aea      	subs	r2, r5, r3
 8011546:	9b01      	ldr	r3, [sp, #4]
 8011548:	4293      	cmp	r3, r2
 801154a:	dd07      	ble.n	801155c <_dtoa_r+0xb64>
 801154c:	4651      	mov	r1, sl
 801154e:	2300      	movs	r3, #0
 8011550:	220a      	movs	r2, #10
 8011552:	4620      	mov	r0, r4
 8011554:	f000 f9a4 	bl	80118a0 <__multadd>
 8011558:	4682      	mov	sl, r0
 801155a:	e7ea      	b.n	8011532 <_dtoa_r+0xb3a>
 801155c:	9b01      	ldr	r3, [sp, #4]
 801155e:	2b00      	cmp	r3, #0
 8011560:	bfc8      	it	gt
 8011562:	461d      	movgt	r5, r3
 8011564:	9b00      	ldr	r3, [sp, #0]
 8011566:	bfd8      	it	le
 8011568:	2501      	movle	r5, #1
 801156a:	441d      	add	r5, r3
 801156c:	f04f 0800 	mov.w	r8, #0
 8011570:	4651      	mov	r1, sl
 8011572:	2201      	movs	r2, #1
 8011574:	4620      	mov	r0, r4
 8011576:	f000 fb8b 	bl	8011c90 <__lshift>
 801157a:	4631      	mov	r1, r6
 801157c:	4682      	mov	sl, r0
 801157e:	f000 fbf3 	bl	8011d68 <__mcmp>
 8011582:	2800      	cmp	r0, #0
 8011584:	dc96      	bgt.n	80114b4 <_dtoa_r+0xabc>
 8011586:	d102      	bne.n	801158e <_dtoa_r+0xb96>
 8011588:	f019 0f01 	tst.w	r9, #1
 801158c:	d192      	bne.n	80114b4 <_dtoa_r+0xabc>
 801158e:	462b      	mov	r3, r5
 8011590:	461d      	mov	r5, r3
 8011592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011596:	2a30      	cmp	r2, #48	; 0x30
 8011598:	d0fa      	beq.n	8011590 <_dtoa_r+0xb98>
 801159a:	e6dd      	b.n	8011358 <_dtoa_r+0x960>
 801159c:	9a00      	ldr	r2, [sp, #0]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d189      	bne.n	80114b6 <_dtoa_r+0xabe>
 80115a2:	f10b 0b01 	add.w	fp, fp, #1
 80115a6:	2331      	movs	r3, #49	; 0x31
 80115a8:	e796      	b.n	80114d8 <_dtoa_r+0xae0>
 80115aa:	4b0a      	ldr	r3, [pc, #40]	; (80115d4 <_dtoa_r+0xbdc>)
 80115ac:	f7ff ba99 	b.w	8010ae2 <_dtoa_r+0xea>
 80115b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	f47f aa6d 	bne.w	8010a92 <_dtoa_r+0x9a>
 80115b8:	4b07      	ldr	r3, [pc, #28]	; (80115d8 <_dtoa_r+0xbe0>)
 80115ba:	f7ff ba92 	b.w	8010ae2 <_dtoa_r+0xea>
 80115be:	9b01      	ldr	r3, [sp, #4]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	dcb5      	bgt.n	8011530 <_dtoa_r+0xb38>
 80115c4:	9b07      	ldr	r3, [sp, #28]
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	f73f aeb1 	bgt.w	801132e <_dtoa_r+0x936>
 80115cc:	e7b0      	b.n	8011530 <_dtoa_r+0xb38>
 80115ce:	bf00      	nop
 80115d0:	080169fd 	.word	0x080169fd
 80115d4:	08016958 	.word	0x08016958
 80115d8:	08016981 	.word	0x08016981

080115dc <_free_r>:
 80115dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115de:	2900      	cmp	r1, #0
 80115e0:	d044      	beq.n	801166c <_free_r+0x90>
 80115e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115e6:	9001      	str	r0, [sp, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f1a1 0404 	sub.w	r4, r1, #4
 80115ee:	bfb8      	it	lt
 80115f0:	18e4      	addlt	r4, r4, r3
 80115f2:	f000 f8e7 	bl	80117c4 <__malloc_lock>
 80115f6:	4a1e      	ldr	r2, [pc, #120]	; (8011670 <_free_r+0x94>)
 80115f8:	9801      	ldr	r0, [sp, #4]
 80115fa:	6813      	ldr	r3, [r2, #0]
 80115fc:	b933      	cbnz	r3, 801160c <_free_r+0x30>
 80115fe:	6063      	str	r3, [r4, #4]
 8011600:	6014      	str	r4, [r2, #0]
 8011602:	b003      	add	sp, #12
 8011604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011608:	f000 b8e2 	b.w	80117d0 <__malloc_unlock>
 801160c:	42a3      	cmp	r3, r4
 801160e:	d908      	bls.n	8011622 <_free_r+0x46>
 8011610:	6825      	ldr	r5, [r4, #0]
 8011612:	1961      	adds	r1, r4, r5
 8011614:	428b      	cmp	r3, r1
 8011616:	bf01      	itttt	eq
 8011618:	6819      	ldreq	r1, [r3, #0]
 801161a:	685b      	ldreq	r3, [r3, #4]
 801161c:	1949      	addeq	r1, r1, r5
 801161e:	6021      	streq	r1, [r4, #0]
 8011620:	e7ed      	b.n	80115fe <_free_r+0x22>
 8011622:	461a      	mov	r2, r3
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	b10b      	cbz	r3, 801162c <_free_r+0x50>
 8011628:	42a3      	cmp	r3, r4
 801162a:	d9fa      	bls.n	8011622 <_free_r+0x46>
 801162c:	6811      	ldr	r1, [r2, #0]
 801162e:	1855      	adds	r5, r2, r1
 8011630:	42a5      	cmp	r5, r4
 8011632:	d10b      	bne.n	801164c <_free_r+0x70>
 8011634:	6824      	ldr	r4, [r4, #0]
 8011636:	4421      	add	r1, r4
 8011638:	1854      	adds	r4, r2, r1
 801163a:	42a3      	cmp	r3, r4
 801163c:	6011      	str	r1, [r2, #0]
 801163e:	d1e0      	bne.n	8011602 <_free_r+0x26>
 8011640:	681c      	ldr	r4, [r3, #0]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	6053      	str	r3, [r2, #4]
 8011646:	440c      	add	r4, r1
 8011648:	6014      	str	r4, [r2, #0]
 801164a:	e7da      	b.n	8011602 <_free_r+0x26>
 801164c:	d902      	bls.n	8011654 <_free_r+0x78>
 801164e:	230c      	movs	r3, #12
 8011650:	6003      	str	r3, [r0, #0]
 8011652:	e7d6      	b.n	8011602 <_free_r+0x26>
 8011654:	6825      	ldr	r5, [r4, #0]
 8011656:	1961      	adds	r1, r4, r5
 8011658:	428b      	cmp	r3, r1
 801165a:	bf04      	itt	eq
 801165c:	6819      	ldreq	r1, [r3, #0]
 801165e:	685b      	ldreq	r3, [r3, #4]
 8011660:	6063      	str	r3, [r4, #4]
 8011662:	bf04      	itt	eq
 8011664:	1949      	addeq	r1, r1, r5
 8011666:	6021      	streq	r1, [r4, #0]
 8011668:	6054      	str	r4, [r2, #4]
 801166a:	e7ca      	b.n	8011602 <_free_r+0x26>
 801166c:	b003      	add	sp, #12
 801166e:	bd30      	pop	{r4, r5, pc}
 8011670:	20001a70 	.word	0x20001a70

08011674 <malloc>:
 8011674:	4b02      	ldr	r3, [pc, #8]	; (8011680 <malloc+0xc>)
 8011676:	4601      	mov	r1, r0
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	f000 b823 	b.w	80116c4 <_malloc_r>
 801167e:	bf00      	nop
 8011680:	200000a4 	.word	0x200000a4

08011684 <sbrk_aligned>:
 8011684:	b570      	push	{r4, r5, r6, lr}
 8011686:	4e0e      	ldr	r6, [pc, #56]	; (80116c0 <sbrk_aligned+0x3c>)
 8011688:	460c      	mov	r4, r1
 801168a:	6831      	ldr	r1, [r6, #0]
 801168c:	4605      	mov	r5, r0
 801168e:	b911      	cbnz	r1, 8011696 <sbrk_aligned+0x12>
 8011690:	f002 f816 	bl	80136c0 <_sbrk_r>
 8011694:	6030      	str	r0, [r6, #0]
 8011696:	4621      	mov	r1, r4
 8011698:	4628      	mov	r0, r5
 801169a:	f002 f811 	bl	80136c0 <_sbrk_r>
 801169e:	1c43      	adds	r3, r0, #1
 80116a0:	d00a      	beq.n	80116b8 <sbrk_aligned+0x34>
 80116a2:	1cc4      	adds	r4, r0, #3
 80116a4:	f024 0403 	bic.w	r4, r4, #3
 80116a8:	42a0      	cmp	r0, r4
 80116aa:	d007      	beq.n	80116bc <sbrk_aligned+0x38>
 80116ac:	1a21      	subs	r1, r4, r0
 80116ae:	4628      	mov	r0, r5
 80116b0:	f002 f806 	bl	80136c0 <_sbrk_r>
 80116b4:	3001      	adds	r0, #1
 80116b6:	d101      	bne.n	80116bc <sbrk_aligned+0x38>
 80116b8:	f04f 34ff 	mov.w	r4, #4294967295
 80116bc:	4620      	mov	r0, r4
 80116be:	bd70      	pop	{r4, r5, r6, pc}
 80116c0:	20001a74 	.word	0x20001a74

080116c4 <_malloc_r>:
 80116c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116c8:	1ccd      	adds	r5, r1, #3
 80116ca:	f025 0503 	bic.w	r5, r5, #3
 80116ce:	3508      	adds	r5, #8
 80116d0:	2d0c      	cmp	r5, #12
 80116d2:	bf38      	it	cc
 80116d4:	250c      	movcc	r5, #12
 80116d6:	2d00      	cmp	r5, #0
 80116d8:	4607      	mov	r7, r0
 80116da:	db01      	blt.n	80116e0 <_malloc_r+0x1c>
 80116dc:	42a9      	cmp	r1, r5
 80116de:	d905      	bls.n	80116ec <_malloc_r+0x28>
 80116e0:	230c      	movs	r3, #12
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	2600      	movs	r6, #0
 80116e6:	4630      	mov	r0, r6
 80116e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80117c0 <_malloc_r+0xfc>
 80116f0:	f000 f868 	bl	80117c4 <__malloc_lock>
 80116f4:	f8d8 3000 	ldr.w	r3, [r8]
 80116f8:	461c      	mov	r4, r3
 80116fa:	bb5c      	cbnz	r4, 8011754 <_malloc_r+0x90>
 80116fc:	4629      	mov	r1, r5
 80116fe:	4638      	mov	r0, r7
 8011700:	f7ff ffc0 	bl	8011684 <sbrk_aligned>
 8011704:	1c43      	adds	r3, r0, #1
 8011706:	4604      	mov	r4, r0
 8011708:	d155      	bne.n	80117b6 <_malloc_r+0xf2>
 801170a:	f8d8 4000 	ldr.w	r4, [r8]
 801170e:	4626      	mov	r6, r4
 8011710:	2e00      	cmp	r6, #0
 8011712:	d145      	bne.n	80117a0 <_malloc_r+0xdc>
 8011714:	2c00      	cmp	r4, #0
 8011716:	d048      	beq.n	80117aa <_malloc_r+0xe6>
 8011718:	6823      	ldr	r3, [r4, #0]
 801171a:	4631      	mov	r1, r6
 801171c:	4638      	mov	r0, r7
 801171e:	eb04 0903 	add.w	r9, r4, r3
 8011722:	f001 ffcd 	bl	80136c0 <_sbrk_r>
 8011726:	4581      	cmp	r9, r0
 8011728:	d13f      	bne.n	80117aa <_malloc_r+0xe6>
 801172a:	6821      	ldr	r1, [r4, #0]
 801172c:	1a6d      	subs	r5, r5, r1
 801172e:	4629      	mov	r1, r5
 8011730:	4638      	mov	r0, r7
 8011732:	f7ff ffa7 	bl	8011684 <sbrk_aligned>
 8011736:	3001      	adds	r0, #1
 8011738:	d037      	beq.n	80117aa <_malloc_r+0xe6>
 801173a:	6823      	ldr	r3, [r4, #0]
 801173c:	442b      	add	r3, r5
 801173e:	6023      	str	r3, [r4, #0]
 8011740:	f8d8 3000 	ldr.w	r3, [r8]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d038      	beq.n	80117ba <_malloc_r+0xf6>
 8011748:	685a      	ldr	r2, [r3, #4]
 801174a:	42a2      	cmp	r2, r4
 801174c:	d12b      	bne.n	80117a6 <_malloc_r+0xe2>
 801174e:	2200      	movs	r2, #0
 8011750:	605a      	str	r2, [r3, #4]
 8011752:	e00f      	b.n	8011774 <_malloc_r+0xb0>
 8011754:	6822      	ldr	r2, [r4, #0]
 8011756:	1b52      	subs	r2, r2, r5
 8011758:	d41f      	bmi.n	801179a <_malloc_r+0xd6>
 801175a:	2a0b      	cmp	r2, #11
 801175c:	d917      	bls.n	801178e <_malloc_r+0xca>
 801175e:	1961      	adds	r1, r4, r5
 8011760:	42a3      	cmp	r3, r4
 8011762:	6025      	str	r5, [r4, #0]
 8011764:	bf18      	it	ne
 8011766:	6059      	strne	r1, [r3, #4]
 8011768:	6863      	ldr	r3, [r4, #4]
 801176a:	bf08      	it	eq
 801176c:	f8c8 1000 	streq.w	r1, [r8]
 8011770:	5162      	str	r2, [r4, r5]
 8011772:	604b      	str	r3, [r1, #4]
 8011774:	4638      	mov	r0, r7
 8011776:	f104 060b 	add.w	r6, r4, #11
 801177a:	f000 f829 	bl	80117d0 <__malloc_unlock>
 801177e:	f026 0607 	bic.w	r6, r6, #7
 8011782:	1d23      	adds	r3, r4, #4
 8011784:	1af2      	subs	r2, r6, r3
 8011786:	d0ae      	beq.n	80116e6 <_malloc_r+0x22>
 8011788:	1b9b      	subs	r3, r3, r6
 801178a:	50a3      	str	r3, [r4, r2]
 801178c:	e7ab      	b.n	80116e6 <_malloc_r+0x22>
 801178e:	42a3      	cmp	r3, r4
 8011790:	6862      	ldr	r2, [r4, #4]
 8011792:	d1dd      	bne.n	8011750 <_malloc_r+0x8c>
 8011794:	f8c8 2000 	str.w	r2, [r8]
 8011798:	e7ec      	b.n	8011774 <_malloc_r+0xb0>
 801179a:	4623      	mov	r3, r4
 801179c:	6864      	ldr	r4, [r4, #4]
 801179e:	e7ac      	b.n	80116fa <_malloc_r+0x36>
 80117a0:	4634      	mov	r4, r6
 80117a2:	6876      	ldr	r6, [r6, #4]
 80117a4:	e7b4      	b.n	8011710 <_malloc_r+0x4c>
 80117a6:	4613      	mov	r3, r2
 80117a8:	e7cc      	b.n	8011744 <_malloc_r+0x80>
 80117aa:	230c      	movs	r3, #12
 80117ac:	603b      	str	r3, [r7, #0]
 80117ae:	4638      	mov	r0, r7
 80117b0:	f000 f80e 	bl	80117d0 <__malloc_unlock>
 80117b4:	e797      	b.n	80116e6 <_malloc_r+0x22>
 80117b6:	6025      	str	r5, [r4, #0]
 80117b8:	e7dc      	b.n	8011774 <_malloc_r+0xb0>
 80117ba:	605b      	str	r3, [r3, #4]
 80117bc:	deff      	udf	#255	; 0xff
 80117be:	bf00      	nop
 80117c0:	20001a70 	.word	0x20001a70

080117c4 <__malloc_lock>:
 80117c4:	4801      	ldr	r0, [pc, #4]	; (80117cc <__malloc_lock+0x8>)
 80117c6:	f7ff b878 	b.w	80108ba <__retarget_lock_acquire_recursive>
 80117ca:	bf00      	nop
 80117cc:	20001a6c 	.word	0x20001a6c

080117d0 <__malloc_unlock>:
 80117d0:	4801      	ldr	r0, [pc, #4]	; (80117d8 <__malloc_unlock+0x8>)
 80117d2:	f7ff b873 	b.w	80108bc <__retarget_lock_release_recursive>
 80117d6:	bf00      	nop
 80117d8:	20001a6c 	.word	0x20001a6c

080117dc <_Balloc>:
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	69c6      	ldr	r6, [r0, #28]
 80117e0:	4604      	mov	r4, r0
 80117e2:	460d      	mov	r5, r1
 80117e4:	b976      	cbnz	r6, 8011804 <_Balloc+0x28>
 80117e6:	2010      	movs	r0, #16
 80117e8:	f7ff ff44 	bl	8011674 <malloc>
 80117ec:	4602      	mov	r2, r0
 80117ee:	61e0      	str	r0, [r4, #28]
 80117f0:	b920      	cbnz	r0, 80117fc <_Balloc+0x20>
 80117f2:	4b18      	ldr	r3, [pc, #96]	; (8011854 <_Balloc+0x78>)
 80117f4:	4818      	ldr	r0, [pc, #96]	; (8011858 <_Balloc+0x7c>)
 80117f6:	216b      	movs	r1, #107	; 0x6b
 80117f8:	f001 ff7a 	bl	80136f0 <__assert_func>
 80117fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011800:	6006      	str	r6, [r0, #0]
 8011802:	60c6      	str	r6, [r0, #12]
 8011804:	69e6      	ldr	r6, [r4, #28]
 8011806:	68f3      	ldr	r3, [r6, #12]
 8011808:	b183      	cbz	r3, 801182c <_Balloc+0x50>
 801180a:	69e3      	ldr	r3, [r4, #28]
 801180c:	68db      	ldr	r3, [r3, #12]
 801180e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011812:	b9b8      	cbnz	r0, 8011844 <_Balloc+0x68>
 8011814:	2101      	movs	r1, #1
 8011816:	fa01 f605 	lsl.w	r6, r1, r5
 801181a:	1d72      	adds	r2, r6, #5
 801181c:	0092      	lsls	r2, r2, #2
 801181e:	4620      	mov	r0, r4
 8011820:	f001 ff84 	bl	801372c <_calloc_r>
 8011824:	b160      	cbz	r0, 8011840 <_Balloc+0x64>
 8011826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801182a:	e00e      	b.n	801184a <_Balloc+0x6e>
 801182c:	2221      	movs	r2, #33	; 0x21
 801182e:	2104      	movs	r1, #4
 8011830:	4620      	mov	r0, r4
 8011832:	f001 ff7b 	bl	801372c <_calloc_r>
 8011836:	69e3      	ldr	r3, [r4, #28]
 8011838:	60f0      	str	r0, [r6, #12]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d1e4      	bne.n	801180a <_Balloc+0x2e>
 8011840:	2000      	movs	r0, #0
 8011842:	bd70      	pop	{r4, r5, r6, pc}
 8011844:	6802      	ldr	r2, [r0, #0]
 8011846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801184a:	2300      	movs	r3, #0
 801184c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011850:	e7f7      	b.n	8011842 <_Balloc+0x66>
 8011852:	bf00      	nop
 8011854:	0801698e 	.word	0x0801698e
 8011858:	08016a0e 	.word	0x08016a0e

0801185c <_Bfree>:
 801185c:	b570      	push	{r4, r5, r6, lr}
 801185e:	69c6      	ldr	r6, [r0, #28]
 8011860:	4605      	mov	r5, r0
 8011862:	460c      	mov	r4, r1
 8011864:	b976      	cbnz	r6, 8011884 <_Bfree+0x28>
 8011866:	2010      	movs	r0, #16
 8011868:	f7ff ff04 	bl	8011674 <malloc>
 801186c:	4602      	mov	r2, r0
 801186e:	61e8      	str	r0, [r5, #28]
 8011870:	b920      	cbnz	r0, 801187c <_Bfree+0x20>
 8011872:	4b09      	ldr	r3, [pc, #36]	; (8011898 <_Bfree+0x3c>)
 8011874:	4809      	ldr	r0, [pc, #36]	; (801189c <_Bfree+0x40>)
 8011876:	218f      	movs	r1, #143	; 0x8f
 8011878:	f001 ff3a 	bl	80136f0 <__assert_func>
 801187c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011880:	6006      	str	r6, [r0, #0]
 8011882:	60c6      	str	r6, [r0, #12]
 8011884:	b13c      	cbz	r4, 8011896 <_Bfree+0x3a>
 8011886:	69eb      	ldr	r3, [r5, #28]
 8011888:	6862      	ldr	r2, [r4, #4]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011890:	6021      	str	r1, [r4, #0]
 8011892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011896:	bd70      	pop	{r4, r5, r6, pc}
 8011898:	0801698e 	.word	0x0801698e
 801189c:	08016a0e 	.word	0x08016a0e

080118a0 <__multadd>:
 80118a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a4:	690d      	ldr	r5, [r1, #16]
 80118a6:	4607      	mov	r7, r0
 80118a8:	460c      	mov	r4, r1
 80118aa:	461e      	mov	r6, r3
 80118ac:	f101 0c14 	add.w	ip, r1, #20
 80118b0:	2000      	movs	r0, #0
 80118b2:	f8dc 3000 	ldr.w	r3, [ip]
 80118b6:	b299      	uxth	r1, r3
 80118b8:	fb02 6101 	mla	r1, r2, r1, r6
 80118bc:	0c1e      	lsrs	r6, r3, #16
 80118be:	0c0b      	lsrs	r3, r1, #16
 80118c0:	fb02 3306 	mla	r3, r2, r6, r3
 80118c4:	b289      	uxth	r1, r1
 80118c6:	3001      	adds	r0, #1
 80118c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80118cc:	4285      	cmp	r5, r0
 80118ce:	f84c 1b04 	str.w	r1, [ip], #4
 80118d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80118d6:	dcec      	bgt.n	80118b2 <__multadd+0x12>
 80118d8:	b30e      	cbz	r6, 801191e <__multadd+0x7e>
 80118da:	68a3      	ldr	r3, [r4, #8]
 80118dc:	42ab      	cmp	r3, r5
 80118de:	dc19      	bgt.n	8011914 <__multadd+0x74>
 80118e0:	6861      	ldr	r1, [r4, #4]
 80118e2:	4638      	mov	r0, r7
 80118e4:	3101      	adds	r1, #1
 80118e6:	f7ff ff79 	bl	80117dc <_Balloc>
 80118ea:	4680      	mov	r8, r0
 80118ec:	b928      	cbnz	r0, 80118fa <__multadd+0x5a>
 80118ee:	4602      	mov	r2, r0
 80118f0:	4b0c      	ldr	r3, [pc, #48]	; (8011924 <__multadd+0x84>)
 80118f2:	480d      	ldr	r0, [pc, #52]	; (8011928 <__multadd+0x88>)
 80118f4:	21ba      	movs	r1, #186	; 0xba
 80118f6:	f001 fefb 	bl	80136f0 <__assert_func>
 80118fa:	6922      	ldr	r2, [r4, #16]
 80118fc:	3202      	adds	r2, #2
 80118fe:	f104 010c 	add.w	r1, r4, #12
 8011902:	0092      	lsls	r2, r2, #2
 8011904:	300c      	adds	r0, #12
 8011906:	f7fe ffda 	bl	80108be <memcpy>
 801190a:	4621      	mov	r1, r4
 801190c:	4638      	mov	r0, r7
 801190e:	f7ff ffa5 	bl	801185c <_Bfree>
 8011912:	4644      	mov	r4, r8
 8011914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011918:	3501      	adds	r5, #1
 801191a:	615e      	str	r6, [r3, #20]
 801191c:	6125      	str	r5, [r4, #16]
 801191e:	4620      	mov	r0, r4
 8011920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011924:	080169fd 	.word	0x080169fd
 8011928:	08016a0e 	.word	0x08016a0e

0801192c <__s2b>:
 801192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011930:	460c      	mov	r4, r1
 8011932:	4615      	mov	r5, r2
 8011934:	461f      	mov	r7, r3
 8011936:	2209      	movs	r2, #9
 8011938:	3308      	adds	r3, #8
 801193a:	4606      	mov	r6, r0
 801193c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011940:	2100      	movs	r1, #0
 8011942:	2201      	movs	r2, #1
 8011944:	429a      	cmp	r2, r3
 8011946:	db09      	blt.n	801195c <__s2b+0x30>
 8011948:	4630      	mov	r0, r6
 801194a:	f7ff ff47 	bl	80117dc <_Balloc>
 801194e:	b940      	cbnz	r0, 8011962 <__s2b+0x36>
 8011950:	4602      	mov	r2, r0
 8011952:	4b19      	ldr	r3, [pc, #100]	; (80119b8 <__s2b+0x8c>)
 8011954:	4819      	ldr	r0, [pc, #100]	; (80119bc <__s2b+0x90>)
 8011956:	21d3      	movs	r1, #211	; 0xd3
 8011958:	f001 feca 	bl	80136f0 <__assert_func>
 801195c:	0052      	lsls	r2, r2, #1
 801195e:	3101      	adds	r1, #1
 8011960:	e7f0      	b.n	8011944 <__s2b+0x18>
 8011962:	9b08      	ldr	r3, [sp, #32]
 8011964:	6143      	str	r3, [r0, #20]
 8011966:	2d09      	cmp	r5, #9
 8011968:	f04f 0301 	mov.w	r3, #1
 801196c:	6103      	str	r3, [r0, #16]
 801196e:	dd16      	ble.n	801199e <__s2b+0x72>
 8011970:	f104 0909 	add.w	r9, r4, #9
 8011974:	46c8      	mov	r8, r9
 8011976:	442c      	add	r4, r5
 8011978:	f818 3b01 	ldrb.w	r3, [r8], #1
 801197c:	4601      	mov	r1, r0
 801197e:	3b30      	subs	r3, #48	; 0x30
 8011980:	220a      	movs	r2, #10
 8011982:	4630      	mov	r0, r6
 8011984:	f7ff ff8c 	bl	80118a0 <__multadd>
 8011988:	45a0      	cmp	r8, r4
 801198a:	d1f5      	bne.n	8011978 <__s2b+0x4c>
 801198c:	f1a5 0408 	sub.w	r4, r5, #8
 8011990:	444c      	add	r4, r9
 8011992:	1b2d      	subs	r5, r5, r4
 8011994:	1963      	adds	r3, r4, r5
 8011996:	42bb      	cmp	r3, r7
 8011998:	db04      	blt.n	80119a4 <__s2b+0x78>
 801199a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801199e:	340a      	adds	r4, #10
 80119a0:	2509      	movs	r5, #9
 80119a2:	e7f6      	b.n	8011992 <__s2b+0x66>
 80119a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80119a8:	4601      	mov	r1, r0
 80119aa:	3b30      	subs	r3, #48	; 0x30
 80119ac:	220a      	movs	r2, #10
 80119ae:	4630      	mov	r0, r6
 80119b0:	f7ff ff76 	bl	80118a0 <__multadd>
 80119b4:	e7ee      	b.n	8011994 <__s2b+0x68>
 80119b6:	bf00      	nop
 80119b8:	080169fd 	.word	0x080169fd
 80119bc:	08016a0e 	.word	0x08016a0e

080119c0 <__hi0bits>:
 80119c0:	0c03      	lsrs	r3, r0, #16
 80119c2:	041b      	lsls	r3, r3, #16
 80119c4:	b9d3      	cbnz	r3, 80119fc <__hi0bits+0x3c>
 80119c6:	0400      	lsls	r0, r0, #16
 80119c8:	2310      	movs	r3, #16
 80119ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80119ce:	bf04      	itt	eq
 80119d0:	0200      	lsleq	r0, r0, #8
 80119d2:	3308      	addeq	r3, #8
 80119d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80119d8:	bf04      	itt	eq
 80119da:	0100      	lsleq	r0, r0, #4
 80119dc:	3304      	addeq	r3, #4
 80119de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80119e2:	bf04      	itt	eq
 80119e4:	0080      	lsleq	r0, r0, #2
 80119e6:	3302      	addeq	r3, #2
 80119e8:	2800      	cmp	r0, #0
 80119ea:	db05      	blt.n	80119f8 <__hi0bits+0x38>
 80119ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80119f0:	f103 0301 	add.w	r3, r3, #1
 80119f4:	bf08      	it	eq
 80119f6:	2320      	moveq	r3, #32
 80119f8:	4618      	mov	r0, r3
 80119fa:	4770      	bx	lr
 80119fc:	2300      	movs	r3, #0
 80119fe:	e7e4      	b.n	80119ca <__hi0bits+0xa>

08011a00 <__lo0bits>:
 8011a00:	6803      	ldr	r3, [r0, #0]
 8011a02:	f013 0207 	ands.w	r2, r3, #7
 8011a06:	d00c      	beq.n	8011a22 <__lo0bits+0x22>
 8011a08:	07d9      	lsls	r1, r3, #31
 8011a0a:	d422      	bmi.n	8011a52 <__lo0bits+0x52>
 8011a0c:	079a      	lsls	r2, r3, #30
 8011a0e:	bf49      	itett	mi
 8011a10:	085b      	lsrmi	r3, r3, #1
 8011a12:	089b      	lsrpl	r3, r3, #2
 8011a14:	6003      	strmi	r3, [r0, #0]
 8011a16:	2201      	movmi	r2, #1
 8011a18:	bf5c      	itt	pl
 8011a1a:	6003      	strpl	r3, [r0, #0]
 8011a1c:	2202      	movpl	r2, #2
 8011a1e:	4610      	mov	r0, r2
 8011a20:	4770      	bx	lr
 8011a22:	b299      	uxth	r1, r3
 8011a24:	b909      	cbnz	r1, 8011a2a <__lo0bits+0x2a>
 8011a26:	0c1b      	lsrs	r3, r3, #16
 8011a28:	2210      	movs	r2, #16
 8011a2a:	b2d9      	uxtb	r1, r3
 8011a2c:	b909      	cbnz	r1, 8011a32 <__lo0bits+0x32>
 8011a2e:	3208      	adds	r2, #8
 8011a30:	0a1b      	lsrs	r3, r3, #8
 8011a32:	0719      	lsls	r1, r3, #28
 8011a34:	bf04      	itt	eq
 8011a36:	091b      	lsreq	r3, r3, #4
 8011a38:	3204      	addeq	r2, #4
 8011a3a:	0799      	lsls	r1, r3, #30
 8011a3c:	bf04      	itt	eq
 8011a3e:	089b      	lsreq	r3, r3, #2
 8011a40:	3202      	addeq	r2, #2
 8011a42:	07d9      	lsls	r1, r3, #31
 8011a44:	d403      	bmi.n	8011a4e <__lo0bits+0x4e>
 8011a46:	085b      	lsrs	r3, r3, #1
 8011a48:	f102 0201 	add.w	r2, r2, #1
 8011a4c:	d003      	beq.n	8011a56 <__lo0bits+0x56>
 8011a4e:	6003      	str	r3, [r0, #0]
 8011a50:	e7e5      	b.n	8011a1e <__lo0bits+0x1e>
 8011a52:	2200      	movs	r2, #0
 8011a54:	e7e3      	b.n	8011a1e <__lo0bits+0x1e>
 8011a56:	2220      	movs	r2, #32
 8011a58:	e7e1      	b.n	8011a1e <__lo0bits+0x1e>
	...

08011a5c <__i2b>:
 8011a5c:	b510      	push	{r4, lr}
 8011a5e:	460c      	mov	r4, r1
 8011a60:	2101      	movs	r1, #1
 8011a62:	f7ff febb 	bl	80117dc <_Balloc>
 8011a66:	4602      	mov	r2, r0
 8011a68:	b928      	cbnz	r0, 8011a76 <__i2b+0x1a>
 8011a6a:	4b05      	ldr	r3, [pc, #20]	; (8011a80 <__i2b+0x24>)
 8011a6c:	4805      	ldr	r0, [pc, #20]	; (8011a84 <__i2b+0x28>)
 8011a6e:	f240 1145 	movw	r1, #325	; 0x145
 8011a72:	f001 fe3d 	bl	80136f0 <__assert_func>
 8011a76:	2301      	movs	r3, #1
 8011a78:	6144      	str	r4, [r0, #20]
 8011a7a:	6103      	str	r3, [r0, #16]
 8011a7c:	bd10      	pop	{r4, pc}
 8011a7e:	bf00      	nop
 8011a80:	080169fd 	.word	0x080169fd
 8011a84:	08016a0e 	.word	0x08016a0e

08011a88 <__multiply>:
 8011a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8c:	4691      	mov	r9, r2
 8011a8e:	690a      	ldr	r2, [r1, #16]
 8011a90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	bfb8      	it	lt
 8011a98:	460b      	movlt	r3, r1
 8011a9a:	460c      	mov	r4, r1
 8011a9c:	bfbc      	itt	lt
 8011a9e:	464c      	movlt	r4, r9
 8011aa0:	4699      	movlt	r9, r3
 8011aa2:	6927      	ldr	r7, [r4, #16]
 8011aa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011aa8:	68a3      	ldr	r3, [r4, #8]
 8011aaa:	6861      	ldr	r1, [r4, #4]
 8011aac:	eb07 060a 	add.w	r6, r7, sl
 8011ab0:	42b3      	cmp	r3, r6
 8011ab2:	b085      	sub	sp, #20
 8011ab4:	bfb8      	it	lt
 8011ab6:	3101      	addlt	r1, #1
 8011ab8:	f7ff fe90 	bl	80117dc <_Balloc>
 8011abc:	b930      	cbnz	r0, 8011acc <__multiply+0x44>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	4b44      	ldr	r3, [pc, #272]	; (8011bd4 <__multiply+0x14c>)
 8011ac2:	4845      	ldr	r0, [pc, #276]	; (8011bd8 <__multiply+0x150>)
 8011ac4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011ac8:	f001 fe12 	bl	80136f0 <__assert_func>
 8011acc:	f100 0514 	add.w	r5, r0, #20
 8011ad0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011ad4:	462b      	mov	r3, r5
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	4543      	cmp	r3, r8
 8011ada:	d321      	bcc.n	8011b20 <__multiply+0x98>
 8011adc:	f104 0314 	add.w	r3, r4, #20
 8011ae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011ae4:	f109 0314 	add.w	r3, r9, #20
 8011ae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011aec:	9202      	str	r2, [sp, #8]
 8011aee:	1b3a      	subs	r2, r7, r4
 8011af0:	3a15      	subs	r2, #21
 8011af2:	f022 0203 	bic.w	r2, r2, #3
 8011af6:	3204      	adds	r2, #4
 8011af8:	f104 0115 	add.w	r1, r4, #21
 8011afc:	428f      	cmp	r7, r1
 8011afe:	bf38      	it	cc
 8011b00:	2204      	movcc	r2, #4
 8011b02:	9201      	str	r2, [sp, #4]
 8011b04:	9a02      	ldr	r2, [sp, #8]
 8011b06:	9303      	str	r3, [sp, #12]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d80c      	bhi.n	8011b26 <__multiply+0x9e>
 8011b0c:	2e00      	cmp	r6, #0
 8011b0e:	dd03      	ble.n	8011b18 <__multiply+0x90>
 8011b10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d05b      	beq.n	8011bd0 <__multiply+0x148>
 8011b18:	6106      	str	r6, [r0, #16]
 8011b1a:	b005      	add	sp, #20
 8011b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b20:	f843 2b04 	str.w	r2, [r3], #4
 8011b24:	e7d8      	b.n	8011ad8 <__multiply+0x50>
 8011b26:	f8b3 a000 	ldrh.w	sl, [r3]
 8011b2a:	f1ba 0f00 	cmp.w	sl, #0
 8011b2e:	d024      	beq.n	8011b7a <__multiply+0xf2>
 8011b30:	f104 0e14 	add.w	lr, r4, #20
 8011b34:	46a9      	mov	r9, r5
 8011b36:	f04f 0c00 	mov.w	ip, #0
 8011b3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011b3e:	f8d9 1000 	ldr.w	r1, [r9]
 8011b42:	fa1f fb82 	uxth.w	fp, r2
 8011b46:	b289      	uxth	r1, r1
 8011b48:	fb0a 110b 	mla	r1, sl, fp, r1
 8011b4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011b50:	f8d9 2000 	ldr.w	r2, [r9]
 8011b54:	4461      	add	r1, ip
 8011b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011b5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8011b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011b62:	b289      	uxth	r1, r1
 8011b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011b68:	4577      	cmp	r7, lr
 8011b6a:	f849 1b04 	str.w	r1, [r9], #4
 8011b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011b72:	d8e2      	bhi.n	8011b3a <__multiply+0xb2>
 8011b74:	9a01      	ldr	r2, [sp, #4]
 8011b76:	f845 c002 	str.w	ip, [r5, r2]
 8011b7a:	9a03      	ldr	r2, [sp, #12]
 8011b7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011b80:	3304      	adds	r3, #4
 8011b82:	f1b9 0f00 	cmp.w	r9, #0
 8011b86:	d021      	beq.n	8011bcc <__multiply+0x144>
 8011b88:	6829      	ldr	r1, [r5, #0]
 8011b8a:	f104 0c14 	add.w	ip, r4, #20
 8011b8e:	46ae      	mov	lr, r5
 8011b90:	f04f 0a00 	mov.w	sl, #0
 8011b94:	f8bc b000 	ldrh.w	fp, [ip]
 8011b98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011b9c:	fb09 220b 	mla	r2, r9, fp, r2
 8011ba0:	4452      	add	r2, sl
 8011ba2:	b289      	uxth	r1, r1
 8011ba4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011ba8:	f84e 1b04 	str.w	r1, [lr], #4
 8011bac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011bb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011bb4:	f8be 1000 	ldrh.w	r1, [lr]
 8011bb8:	fb09 110a 	mla	r1, r9, sl, r1
 8011bbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011bc0:	4567      	cmp	r7, ip
 8011bc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011bc6:	d8e5      	bhi.n	8011b94 <__multiply+0x10c>
 8011bc8:	9a01      	ldr	r2, [sp, #4]
 8011bca:	50a9      	str	r1, [r5, r2]
 8011bcc:	3504      	adds	r5, #4
 8011bce:	e799      	b.n	8011b04 <__multiply+0x7c>
 8011bd0:	3e01      	subs	r6, #1
 8011bd2:	e79b      	b.n	8011b0c <__multiply+0x84>
 8011bd4:	080169fd 	.word	0x080169fd
 8011bd8:	08016a0e 	.word	0x08016a0e

08011bdc <__pow5mult>:
 8011bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011be0:	4615      	mov	r5, r2
 8011be2:	f012 0203 	ands.w	r2, r2, #3
 8011be6:	4606      	mov	r6, r0
 8011be8:	460f      	mov	r7, r1
 8011bea:	d007      	beq.n	8011bfc <__pow5mult+0x20>
 8011bec:	4c25      	ldr	r4, [pc, #148]	; (8011c84 <__pow5mult+0xa8>)
 8011bee:	3a01      	subs	r2, #1
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011bf6:	f7ff fe53 	bl	80118a0 <__multadd>
 8011bfa:	4607      	mov	r7, r0
 8011bfc:	10ad      	asrs	r5, r5, #2
 8011bfe:	d03d      	beq.n	8011c7c <__pow5mult+0xa0>
 8011c00:	69f4      	ldr	r4, [r6, #28]
 8011c02:	b97c      	cbnz	r4, 8011c24 <__pow5mult+0x48>
 8011c04:	2010      	movs	r0, #16
 8011c06:	f7ff fd35 	bl	8011674 <malloc>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	61f0      	str	r0, [r6, #28]
 8011c0e:	b928      	cbnz	r0, 8011c1c <__pow5mult+0x40>
 8011c10:	4b1d      	ldr	r3, [pc, #116]	; (8011c88 <__pow5mult+0xac>)
 8011c12:	481e      	ldr	r0, [pc, #120]	; (8011c8c <__pow5mult+0xb0>)
 8011c14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011c18:	f001 fd6a 	bl	80136f0 <__assert_func>
 8011c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c20:	6004      	str	r4, [r0, #0]
 8011c22:	60c4      	str	r4, [r0, #12]
 8011c24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c2c:	b94c      	cbnz	r4, 8011c42 <__pow5mult+0x66>
 8011c2e:	f240 2171 	movw	r1, #625	; 0x271
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7ff ff12 	bl	8011a5c <__i2b>
 8011c38:	2300      	movs	r3, #0
 8011c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c3e:	4604      	mov	r4, r0
 8011c40:	6003      	str	r3, [r0, #0]
 8011c42:	f04f 0900 	mov.w	r9, #0
 8011c46:	07eb      	lsls	r3, r5, #31
 8011c48:	d50a      	bpl.n	8011c60 <__pow5mult+0x84>
 8011c4a:	4639      	mov	r1, r7
 8011c4c:	4622      	mov	r2, r4
 8011c4e:	4630      	mov	r0, r6
 8011c50:	f7ff ff1a 	bl	8011a88 <__multiply>
 8011c54:	4639      	mov	r1, r7
 8011c56:	4680      	mov	r8, r0
 8011c58:	4630      	mov	r0, r6
 8011c5a:	f7ff fdff 	bl	801185c <_Bfree>
 8011c5e:	4647      	mov	r7, r8
 8011c60:	106d      	asrs	r5, r5, #1
 8011c62:	d00b      	beq.n	8011c7c <__pow5mult+0xa0>
 8011c64:	6820      	ldr	r0, [r4, #0]
 8011c66:	b938      	cbnz	r0, 8011c78 <__pow5mult+0x9c>
 8011c68:	4622      	mov	r2, r4
 8011c6a:	4621      	mov	r1, r4
 8011c6c:	4630      	mov	r0, r6
 8011c6e:	f7ff ff0b 	bl	8011a88 <__multiply>
 8011c72:	6020      	str	r0, [r4, #0]
 8011c74:	f8c0 9000 	str.w	r9, [r0]
 8011c78:	4604      	mov	r4, r0
 8011c7a:	e7e4      	b.n	8011c46 <__pow5mult+0x6a>
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c82:	bf00      	nop
 8011c84:	08016b58 	.word	0x08016b58
 8011c88:	0801698e 	.word	0x0801698e
 8011c8c:	08016a0e 	.word	0x08016a0e

08011c90 <__lshift>:
 8011c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c94:	460c      	mov	r4, r1
 8011c96:	6849      	ldr	r1, [r1, #4]
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011c9e:	68a3      	ldr	r3, [r4, #8]
 8011ca0:	4607      	mov	r7, r0
 8011ca2:	4691      	mov	r9, r2
 8011ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ca8:	f108 0601 	add.w	r6, r8, #1
 8011cac:	42b3      	cmp	r3, r6
 8011cae:	db0b      	blt.n	8011cc8 <__lshift+0x38>
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	f7ff fd93 	bl	80117dc <_Balloc>
 8011cb6:	4605      	mov	r5, r0
 8011cb8:	b948      	cbnz	r0, 8011cce <__lshift+0x3e>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	4b28      	ldr	r3, [pc, #160]	; (8011d60 <__lshift+0xd0>)
 8011cbe:	4829      	ldr	r0, [pc, #164]	; (8011d64 <__lshift+0xd4>)
 8011cc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011cc4:	f001 fd14 	bl	80136f0 <__assert_func>
 8011cc8:	3101      	adds	r1, #1
 8011cca:	005b      	lsls	r3, r3, #1
 8011ccc:	e7ee      	b.n	8011cac <__lshift+0x1c>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f100 0114 	add.w	r1, r0, #20
 8011cd4:	f100 0210 	add.w	r2, r0, #16
 8011cd8:	4618      	mov	r0, r3
 8011cda:	4553      	cmp	r3, sl
 8011cdc:	db33      	blt.n	8011d46 <__lshift+0xb6>
 8011cde:	6920      	ldr	r0, [r4, #16]
 8011ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ce4:	f104 0314 	add.w	r3, r4, #20
 8011ce8:	f019 091f 	ands.w	r9, r9, #31
 8011cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011cf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011cf4:	d02b      	beq.n	8011d4e <__lshift+0xbe>
 8011cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8011cfa:	468a      	mov	sl, r1
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	6818      	ldr	r0, [r3, #0]
 8011d00:	fa00 f009 	lsl.w	r0, r0, r9
 8011d04:	4310      	orrs	r0, r2
 8011d06:	f84a 0b04 	str.w	r0, [sl], #4
 8011d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d0e:	459c      	cmp	ip, r3
 8011d10:	fa22 f20e 	lsr.w	r2, r2, lr
 8011d14:	d8f3      	bhi.n	8011cfe <__lshift+0x6e>
 8011d16:	ebac 0304 	sub.w	r3, ip, r4
 8011d1a:	3b15      	subs	r3, #21
 8011d1c:	f023 0303 	bic.w	r3, r3, #3
 8011d20:	3304      	adds	r3, #4
 8011d22:	f104 0015 	add.w	r0, r4, #21
 8011d26:	4584      	cmp	ip, r0
 8011d28:	bf38      	it	cc
 8011d2a:	2304      	movcc	r3, #4
 8011d2c:	50ca      	str	r2, [r1, r3]
 8011d2e:	b10a      	cbz	r2, 8011d34 <__lshift+0xa4>
 8011d30:	f108 0602 	add.w	r6, r8, #2
 8011d34:	3e01      	subs	r6, #1
 8011d36:	4638      	mov	r0, r7
 8011d38:	612e      	str	r6, [r5, #16]
 8011d3a:	4621      	mov	r1, r4
 8011d3c:	f7ff fd8e 	bl	801185c <_Bfree>
 8011d40:	4628      	mov	r0, r5
 8011d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d46:	f842 0f04 	str.w	r0, [r2, #4]!
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	e7c5      	b.n	8011cda <__lshift+0x4a>
 8011d4e:	3904      	subs	r1, #4
 8011d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d54:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d58:	459c      	cmp	ip, r3
 8011d5a:	d8f9      	bhi.n	8011d50 <__lshift+0xc0>
 8011d5c:	e7ea      	b.n	8011d34 <__lshift+0xa4>
 8011d5e:	bf00      	nop
 8011d60:	080169fd 	.word	0x080169fd
 8011d64:	08016a0e 	.word	0x08016a0e

08011d68 <__mcmp>:
 8011d68:	b530      	push	{r4, r5, lr}
 8011d6a:	6902      	ldr	r2, [r0, #16]
 8011d6c:	690c      	ldr	r4, [r1, #16]
 8011d6e:	1b12      	subs	r2, r2, r4
 8011d70:	d10e      	bne.n	8011d90 <__mcmp+0x28>
 8011d72:	f100 0314 	add.w	r3, r0, #20
 8011d76:	3114      	adds	r1, #20
 8011d78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011d7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011d80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011d84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011d88:	42a5      	cmp	r5, r4
 8011d8a:	d003      	beq.n	8011d94 <__mcmp+0x2c>
 8011d8c:	d305      	bcc.n	8011d9a <__mcmp+0x32>
 8011d8e:	2201      	movs	r2, #1
 8011d90:	4610      	mov	r0, r2
 8011d92:	bd30      	pop	{r4, r5, pc}
 8011d94:	4283      	cmp	r3, r0
 8011d96:	d3f3      	bcc.n	8011d80 <__mcmp+0x18>
 8011d98:	e7fa      	b.n	8011d90 <__mcmp+0x28>
 8011d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d9e:	e7f7      	b.n	8011d90 <__mcmp+0x28>

08011da0 <__mdiff>:
 8011da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da4:	460c      	mov	r4, r1
 8011da6:	4606      	mov	r6, r0
 8011da8:	4611      	mov	r1, r2
 8011daa:	4620      	mov	r0, r4
 8011dac:	4690      	mov	r8, r2
 8011dae:	f7ff ffdb 	bl	8011d68 <__mcmp>
 8011db2:	1e05      	subs	r5, r0, #0
 8011db4:	d110      	bne.n	8011dd8 <__mdiff+0x38>
 8011db6:	4629      	mov	r1, r5
 8011db8:	4630      	mov	r0, r6
 8011dba:	f7ff fd0f 	bl	80117dc <_Balloc>
 8011dbe:	b930      	cbnz	r0, 8011dce <__mdiff+0x2e>
 8011dc0:	4b3a      	ldr	r3, [pc, #232]	; (8011eac <__mdiff+0x10c>)
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	f240 2137 	movw	r1, #567	; 0x237
 8011dc8:	4839      	ldr	r0, [pc, #228]	; (8011eb0 <__mdiff+0x110>)
 8011dca:	f001 fc91 	bl	80136f0 <__assert_func>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd8:	bfa4      	itt	ge
 8011dda:	4643      	movge	r3, r8
 8011ddc:	46a0      	movge	r8, r4
 8011dde:	4630      	mov	r0, r6
 8011de0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011de4:	bfa6      	itte	ge
 8011de6:	461c      	movge	r4, r3
 8011de8:	2500      	movge	r5, #0
 8011dea:	2501      	movlt	r5, #1
 8011dec:	f7ff fcf6 	bl	80117dc <_Balloc>
 8011df0:	b920      	cbnz	r0, 8011dfc <__mdiff+0x5c>
 8011df2:	4b2e      	ldr	r3, [pc, #184]	; (8011eac <__mdiff+0x10c>)
 8011df4:	4602      	mov	r2, r0
 8011df6:	f240 2145 	movw	r1, #581	; 0x245
 8011dfa:	e7e5      	b.n	8011dc8 <__mdiff+0x28>
 8011dfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e00:	6926      	ldr	r6, [r4, #16]
 8011e02:	60c5      	str	r5, [r0, #12]
 8011e04:	f104 0914 	add.w	r9, r4, #20
 8011e08:	f108 0514 	add.w	r5, r8, #20
 8011e0c:	f100 0e14 	add.w	lr, r0, #20
 8011e10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011e14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011e18:	f108 0210 	add.w	r2, r8, #16
 8011e1c:	46f2      	mov	sl, lr
 8011e1e:	2100      	movs	r1, #0
 8011e20:	f859 3b04 	ldr.w	r3, [r9], #4
 8011e24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011e28:	fa11 f88b 	uxtah	r8, r1, fp
 8011e2c:	b299      	uxth	r1, r3
 8011e2e:	0c1b      	lsrs	r3, r3, #16
 8011e30:	eba8 0801 	sub.w	r8, r8, r1
 8011e34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011e38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011e3c:	fa1f f888 	uxth.w	r8, r8
 8011e40:	1419      	asrs	r1, r3, #16
 8011e42:	454e      	cmp	r6, r9
 8011e44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011e48:	f84a 3b04 	str.w	r3, [sl], #4
 8011e4c:	d8e8      	bhi.n	8011e20 <__mdiff+0x80>
 8011e4e:	1b33      	subs	r3, r6, r4
 8011e50:	3b15      	subs	r3, #21
 8011e52:	f023 0303 	bic.w	r3, r3, #3
 8011e56:	3304      	adds	r3, #4
 8011e58:	3415      	adds	r4, #21
 8011e5a:	42a6      	cmp	r6, r4
 8011e5c:	bf38      	it	cc
 8011e5e:	2304      	movcc	r3, #4
 8011e60:	441d      	add	r5, r3
 8011e62:	4473      	add	r3, lr
 8011e64:	469e      	mov	lr, r3
 8011e66:	462e      	mov	r6, r5
 8011e68:	4566      	cmp	r6, ip
 8011e6a:	d30e      	bcc.n	8011e8a <__mdiff+0xea>
 8011e6c:	f10c 0203 	add.w	r2, ip, #3
 8011e70:	1b52      	subs	r2, r2, r5
 8011e72:	f022 0203 	bic.w	r2, r2, #3
 8011e76:	3d03      	subs	r5, #3
 8011e78:	45ac      	cmp	ip, r5
 8011e7a:	bf38      	it	cc
 8011e7c:	2200      	movcc	r2, #0
 8011e7e:	4413      	add	r3, r2
 8011e80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011e84:	b17a      	cbz	r2, 8011ea6 <__mdiff+0x106>
 8011e86:	6107      	str	r7, [r0, #16]
 8011e88:	e7a4      	b.n	8011dd4 <__mdiff+0x34>
 8011e8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8011e8e:	fa11 f288 	uxtah	r2, r1, r8
 8011e92:	1414      	asrs	r4, r2, #16
 8011e94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011e98:	b292      	uxth	r2, r2
 8011e9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011e9e:	f84e 2b04 	str.w	r2, [lr], #4
 8011ea2:	1421      	asrs	r1, r4, #16
 8011ea4:	e7e0      	b.n	8011e68 <__mdiff+0xc8>
 8011ea6:	3f01      	subs	r7, #1
 8011ea8:	e7ea      	b.n	8011e80 <__mdiff+0xe0>
 8011eaa:	bf00      	nop
 8011eac:	080169fd 	.word	0x080169fd
 8011eb0:	08016a0e 	.word	0x08016a0e

08011eb4 <__ulp>:
 8011eb4:	b082      	sub	sp, #8
 8011eb6:	ed8d 0b00 	vstr	d0, [sp]
 8011eba:	9a01      	ldr	r2, [sp, #4]
 8011ebc:	4b0f      	ldr	r3, [pc, #60]	; (8011efc <__ulp+0x48>)
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	dc08      	bgt.n	8011eda <__ulp+0x26>
 8011ec8:	425b      	negs	r3, r3
 8011eca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011ece:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011ed2:	da04      	bge.n	8011ede <__ulp+0x2a>
 8011ed4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011ed8:	4113      	asrs	r3, r2
 8011eda:	2200      	movs	r2, #0
 8011edc:	e008      	b.n	8011ef0 <__ulp+0x3c>
 8011ede:	f1a2 0314 	sub.w	r3, r2, #20
 8011ee2:	2b1e      	cmp	r3, #30
 8011ee4:	bfda      	itte	le
 8011ee6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011eea:	40da      	lsrle	r2, r3
 8011eec:	2201      	movgt	r2, #1
 8011eee:	2300      	movs	r3, #0
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	4610      	mov	r0, r2
 8011ef4:	ec41 0b10 	vmov	d0, r0, r1
 8011ef8:	b002      	add	sp, #8
 8011efa:	4770      	bx	lr
 8011efc:	7ff00000 	.word	0x7ff00000

08011f00 <__b2d>:
 8011f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f04:	6906      	ldr	r6, [r0, #16]
 8011f06:	f100 0814 	add.w	r8, r0, #20
 8011f0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011f0e:	1f37      	subs	r7, r6, #4
 8011f10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011f14:	4610      	mov	r0, r2
 8011f16:	f7ff fd53 	bl	80119c0 <__hi0bits>
 8011f1a:	f1c0 0320 	rsb	r3, r0, #32
 8011f1e:	280a      	cmp	r0, #10
 8011f20:	600b      	str	r3, [r1, #0]
 8011f22:	491b      	ldr	r1, [pc, #108]	; (8011f90 <__b2d+0x90>)
 8011f24:	dc15      	bgt.n	8011f52 <__b2d+0x52>
 8011f26:	f1c0 0c0b 	rsb	ip, r0, #11
 8011f2a:	fa22 f30c 	lsr.w	r3, r2, ip
 8011f2e:	45b8      	cmp	r8, r7
 8011f30:	ea43 0501 	orr.w	r5, r3, r1
 8011f34:	bf34      	ite	cc
 8011f36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011f3a:	2300      	movcs	r3, #0
 8011f3c:	3015      	adds	r0, #21
 8011f3e:	fa02 f000 	lsl.w	r0, r2, r0
 8011f42:	fa23 f30c 	lsr.w	r3, r3, ip
 8011f46:	4303      	orrs	r3, r0
 8011f48:	461c      	mov	r4, r3
 8011f4a:	ec45 4b10 	vmov	d0, r4, r5
 8011f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f52:	45b8      	cmp	r8, r7
 8011f54:	bf3a      	itte	cc
 8011f56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011f5a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011f5e:	2300      	movcs	r3, #0
 8011f60:	380b      	subs	r0, #11
 8011f62:	d012      	beq.n	8011f8a <__b2d+0x8a>
 8011f64:	f1c0 0120 	rsb	r1, r0, #32
 8011f68:	fa23 f401 	lsr.w	r4, r3, r1
 8011f6c:	4082      	lsls	r2, r0
 8011f6e:	4322      	orrs	r2, r4
 8011f70:	4547      	cmp	r7, r8
 8011f72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011f76:	bf8c      	ite	hi
 8011f78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011f7c:	2200      	movls	r2, #0
 8011f7e:	4083      	lsls	r3, r0
 8011f80:	40ca      	lsrs	r2, r1
 8011f82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011f86:	4313      	orrs	r3, r2
 8011f88:	e7de      	b.n	8011f48 <__b2d+0x48>
 8011f8a:	ea42 0501 	orr.w	r5, r2, r1
 8011f8e:	e7db      	b.n	8011f48 <__b2d+0x48>
 8011f90:	3ff00000 	.word	0x3ff00000

08011f94 <__d2b>:
 8011f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f98:	460f      	mov	r7, r1
 8011f9a:	2101      	movs	r1, #1
 8011f9c:	ec59 8b10 	vmov	r8, r9, d0
 8011fa0:	4616      	mov	r6, r2
 8011fa2:	f7ff fc1b 	bl	80117dc <_Balloc>
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	b930      	cbnz	r0, 8011fb8 <__d2b+0x24>
 8011faa:	4602      	mov	r2, r0
 8011fac:	4b24      	ldr	r3, [pc, #144]	; (8012040 <__d2b+0xac>)
 8011fae:	4825      	ldr	r0, [pc, #148]	; (8012044 <__d2b+0xb0>)
 8011fb0:	f240 310f 	movw	r1, #783	; 0x30f
 8011fb4:	f001 fb9c 	bl	80136f0 <__assert_func>
 8011fb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011fbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011fc0:	bb2d      	cbnz	r5, 801200e <__d2b+0x7a>
 8011fc2:	9301      	str	r3, [sp, #4]
 8011fc4:	f1b8 0300 	subs.w	r3, r8, #0
 8011fc8:	d026      	beq.n	8012018 <__d2b+0x84>
 8011fca:	4668      	mov	r0, sp
 8011fcc:	9300      	str	r3, [sp, #0]
 8011fce:	f7ff fd17 	bl	8011a00 <__lo0bits>
 8011fd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011fd6:	b1e8      	cbz	r0, 8012014 <__d2b+0x80>
 8011fd8:	f1c0 0320 	rsb	r3, r0, #32
 8011fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8011fe0:	430b      	orrs	r3, r1
 8011fe2:	40c2      	lsrs	r2, r0
 8011fe4:	6163      	str	r3, [r4, #20]
 8011fe6:	9201      	str	r2, [sp, #4]
 8011fe8:	9b01      	ldr	r3, [sp, #4]
 8011fea:	61a3      	str	r3, [r4, #24]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	bf14      	ite	ne
 8011ff0:	2202      	movne	r2, #2
 8011ff2:	2201      	moveq	r2, #1
 8011ff4:	6122      	str	r2, [r4, #16]
 8011ff6:	b1bd      	cbz	r5, 8012028 <__d2b+0x94>
 8011ff8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ffc:	4405      	add	r5, r0
 8011ffe:	603d      	str	r5, [r7, #0]
 8012000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012004:	6030      	str	r0, [r6, #0]
 8012006:	4620      	mov	r0, r4
 8012008:	b003      	add	sp, #12
 801200a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801200e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012012:	e7d6      	b.n	8011fc2 <__d2b+0x2e>
 8012014:	6161      	str	r1, [r4, #20]
 8012016:	e7e7      	b.n	8011fe8 <__d2b+0x54>
 8012018:	a801      	add	r0, sp, #4
 801201a:	f7ff fcf1 	bl	8011a00 <__lo0bits>
 801201e:	9b01      	ldr	r3, [sp, #4]
 8012020:	6163      	str	r3, [r4, #20]
 8012022:	3020      	adds	r0, #32
 8012024:	2201      	movs	r2, #1
 8012026:	e7e5      	b.n	8011ff4 <__d2b+0x60>
 8012028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801202c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012030:	6038      	str	r0, [r7, #0]
 8012032:	6918      	ldr	r0, [r3, #16]
 8012034:	f7ff fcc4 	bl	80119c0 <__hi0bits>
 8012038:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801203c:	e7e2      	b.n	8012004 <__d2b+0x70>
 801203e:	bf00      	nop
 8012040:	080169fd 	.word	0x080169fd
 8012044:	08016a0e 	.word	0x08016a0e

08012048 <__ratio>:
 8012048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	4688      	mov	r8, r1
 801204e:	4669      	mov	r1, sp
 8012050:	4681      	mov	r9, r0
 8012052:	f7ff ff55 	bl	8011f00 <__b2d>
 8012056:	a901      	add	r1, sp, #4
 8012058:	4640      	mov	r0, r8
 801205a:	ec55 4b10 	vmov	r4, r5, d0
 801205e:	f7ff ff4f 	bl	8011f00 <__b2d>
 8012062:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012066:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801206a:	eba3 0c02 	sub.w	ip, r3, r2
 801206e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012072:	1a9b      	subs	r3, r3, r2
 8012074:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012078:	ec51 0b10 	vmov	r0, r1, d0
 801207c:	2b00      	cmp	r3, #0
 801207e:	bfd6      	itet	le
 8012080:	460a      	movle	r2, r1
 8012082:	462a      	movgt	r2, r5
 8012084:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012088:	468b      	mov	fp, r1
 801208a:	462f      	mov	r7, r5
 801208c:	bfd4      	ite	le
 801208e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012092:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012096:	4620      	mov	r0, r4
 8012098:	ee10 2a10 	vmov	r2, s0
 801209c:	465b      	mov	r3, fp
 801209e:	4639      	mov	r1, r7
 80120a0:	f7ee fbac 	bl	80007fc <__aeabi_ddiv>
 80120a4:	ec41 0b10 	vmov	d0, r0, r1
 80120a8:	b003      	add	sp, #12
 80120aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080120ae <__copybits>:
 80120ae:	3901      	subs	r1, #1
 80120b0:	b570      	push	{r4, r5, r6, lr}
 80120b2:	1149      	asrs	r1, r1, #5
 80120b4:	6914      	ldr	r4, [r2, #16]
 80120b6:	3101      	adds	r1, #1
 80120b8:	f102 0314 	add.w	r3, r2, #20
 80120bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80120c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80120c4:	1f05      	subs	r5, r0, #4
 80120c6:	42a3      	cmp	r3, r4
 80120c8:	d30c      	bcc.n	80120e4 <__copybits+0x36>
 80120ca:	1aa3      	subs	r3, r4, r2
 80120cc:	3b11      	subs	r3, #17
 80120ce:	f023 0303 	bic.w	r3, r3, #3
 80120d2:	3211      	adds	r2, #17
 80120d4:	42a2      	cmp	r2, r4
 80120d6:	bf88      	it	hi
 80120d8:	2300      	movhi	r3, #0
 80120da:	4418      	add	r0, r3
 80120dc:	2300      	movs	r3, #0
 80120de:	4288      	cmp	r0, r1
 80120e0:	d305      	bcc.n	80120ee <__copybits+0x40>
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80120e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80120ec:	e7eb      	b.n	80120c6 <__copybits+0x18>
 80120ee:	f840 3b04 	str.w	r3, [r0], #4
 80120f2:	e7f4      	b.n	80120de <__copybits+0x30>

080120f4 <__any_on>:
 80120f4:	f100 0214 	add.w	r2, r0, #20
 80120f8:	6900      	ldr	r0, [r0, #16]
 80120fa:	114b      	asrs	r3, r1, #5
 80120fc:	4298      	cmp	r0, r3
 80120fe:	b510      	push	{r4, lr}
 8012100:	db11      	blt.n	8012126 <__any_on+0x32>
 8012102:	dd0a      	ble.n	801211a <__any_on+0x26>
 8012104:	f011 011f 	ands.w	r1, r1, #31
 8012108:	d007      	beq.n	801211a <__any_on+0x26>
 801210a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801210e:	fa24 f001 	lsr.w	r0, r4, r1
 8012112:	fa00 f101 	lsl.w	r1, r0, r1
 8012116:	428c      	cmp	r4, r1
 8012118:	d10b      	bne.n	8012132 <__any_on+0x3e>
 801211a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801211e:	4293      	cmp	r3, r2
 8012120:	d803      	bhi.n	801212a <__any_on+0x36>
 8012122:	2000      	movs	r0, #0
 8012124:	bd10      	pop	{r4, pc}
 8012126:	4603      	mov	r3, r0
 8012128:	e7f7      	b.n	801211a <__any_on+0x26>
 801212a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801212e:	2900      	cmp	r1, #0
 8012130:	d0f5      	beq.n	801211e <__any_on+0x2a>
 8012132:	2001      	movs	r0, #1
 8012134:	e7f6      	b.n	8012124 <__any_on+0x30>

08012136 <sulp>:
 8012136:	b570      	push	{r4, r5, r6, lr}
 8012138:	4604      	mov	r4, r0
 801213a:	460d      	mov	r5, r1
 801213c:	ec45 4b10 	vmov	d0, r4, r5
 8012140:	4616      	mov	r6, r2
 8012142:	f7ff feb7 	bl	8011eb4 <__ulp>
 8012146:	ec51 0b10 	vmov	r0, r1, d0
 801214a:	b17e      	cbz	r6, 801216c <sulp+0x36>
 801214c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012150:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012154:	2b00      	cmp	r3, #0
 8012156:	dd09      	ble.n	801216c <sulp+0x36>
 8012158:	051b      	lsls	r3, r3, #20
 801215a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801215e:	2400      	movs	r4, #0
 8012160:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012164:	4622      	mov	r2, r4
 8012166:	462b      	mov	r3, r5
 8012168:	f7ee fa1e 	bl	80005a8 <__aeabi_dmul>
 801216c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012170 <_strtod_l>:
 8012170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012174:	ed2d 8b02 	vpush	{d8}
 8012178:	b09b      	sub	sp, #108	; 0x6c
 801217a:	4604      	mov	r4, r0
 801217c:	9213      	str	r2, [sp, #76]	; 0x4c
 801217e:	2200      	movs	r2, #0
 8012180:	9216      	str	r2, [sp, #88]	; 0x58
 8012182:	460d      	mov	r5, r1
 8012184:	f04f 0800 	mov.w	r8, #0
 8012188:	f04f 0900 	mov.w	r9, #0
 801218c:	460a      	mov	r2, r1
 801218e:	9215      	str	r2, [sp, #84]	; 0x54
 8012190:	7811      	ldrb	r1, [r2, #0]
 8012192:	292b      	cmp	r1, #43	; 0x2b
 8012194:	d04c      	beq.n	8012230 <_strtod_l+0xc0>
 8012196:	d83a      	bhi.n	801220e <_strtod_l+0x9e>
 8012198:	290d      	cmp	r1, #13
 801219a:	d834      	bhi.n	8012206 <_strtod_l+0x96>
 801219c:	2908      	cmp	r1, #8
 801219e:	d834      	bhi.n	801220a <_strtod_l+0x9a>
 80121a0:	2900      	cmp	r1, #0
 80121a2:	d03d      	beq.n	8012220 <_strtod_l+0xb0>
 80121a4:	2200      	movs	r2, #0
 80121a6:	920a      	str	r2, [sp, #40]	; 0x28
 80121a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80121aa:	7832      	ldrb	r2, [r6, #0]
 80121ac:	2a30      	cmp	r2, #48	; 0x30
 80121ae:	f040 80b4 	bne.w	801231a <_strtod_l+0x1aa>
 80121b2:	7872      	ldrb	r2, [r6, #1]
 80121b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80121b8:	2a58      	cmp	r2, #88	; 0x58
 80121ba:	d170      	bne.n	801229e <_strtod_l+0x12e>
 80121bc:	9302      	str	r3, [sp, #8]
 80121be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121c0:	9301      	str	r3, [sp, #4]
 80121c2:	ab16      	add	r3, sp, #88	; 0x58
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	4a8e      	ldr	r2, [pc, #568]	; (8012400 <_strtod_l+0x290>)
 80121c8:	ab17      	add	r3, sp, #92	; 0x5c
 80121ca:	a915      	add	r1, sp, #84	; 0x54
 80121cc:	4620      	mov	r0, r4
 80121ce:	f001 fb2b 	bl	8013828 <__gethex>
 80121d2:	f010 070f 	ands.w	r7, r0, #15
 80121d6:	4605      	mov	r5, r0
 80121d8:	d005      	beq.n	80121e6 <_strtod_l+0x76>
 80121da:	2f06      	cmp	r7, #6
 80121dc:	d12a      	bne.n	8012234 <_strtod_l+0xc4>
 80121de:	3601      	adds	r6, #1
 80121e0:	2300      	movs	r3, #0
 80121e2:	9615      	str	r6, [sp, #84]	; 0x54
 80121e4:	930a      	str	r3, [sp, #40]	; 0x28
 80121e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f040 857f 	bne.w	8012cec <_strtod_l+0xb7c>
 80121ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121f0:	b1db      	cbz	r3, 801222a <_strtod_l+0xba>
 80121f2:	4642      	mov	r2, r8
 80121f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80121f8:	ec43 2b10 	vmov	d0, r2, r3
 80121fc:	b01b      	add	sp, #108	; 0x6c
 80121fe:	ecbd 8b02 	vpop	{d8}
 8012202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012206:	2920      	cmp	r1, #32
 8012208:	d1cc      	bne.n	80121a4 <_strtod_l+0x34>
 801220a:	3201      	adds	r2, #1
 801220c:	e7bf      	b.n	801218e <_strtod_l+0x1e>
 801220e:	292d      	cmp	r1, #45	; 0x2d
 8012210:	d1c8      	bne.n	80121a4 <_strtod_l+0x34>
 8012212:	2101      	movs	r1, #1
 8012214:	910a      	str	r1, [sp, #40]	; 0x28
 8012216:	1c51      	adds	r1, r2, #1
 8012218:	9115      	str	r1, [sp, #84]	; 0x54
 801221a:	7852      	ldrb	r2, [r2, #1]
 801221c:	2a00      	cmp	r2, #0
 801221e:	d1c3      	bne.n	80121a8 <_strtod_l+0x38>
 8012220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012222:	9515      	str	r5, [sp, #84]	; 0x54
 8012224:	2b00      	cmp	r3, #0
 8012226:	f040 855f 	bne.w	8012ce8 <_strtod_l+0xb78>
 801222a:	4642      	mov	r2, r8
 801222c:	464b      	mov	r3, r9
 801222e:	e7e3      	b.n	80121f8 <_strtod_l+0x88>
 8012230:	2100      	movs	r1, #0
 8012232:	e7ef      	b.n	8012214 <_strtod_l+0xa4>
 8012234:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012236:	b13a      	cbz	r2, 8012248 <_strtod_l+0xd8>
 8012238:	2135      	movs	r1, #53	; 0x35
 801223a:	a818      	add	r0, sp, #96	; 0x60
 801223c:	f7ff ff37 	bl	80120ae <__copybits>
 8012240:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012242:	4620      	mov	r0, r4
 8012244:	f7ff fb0a 	bl	801185c <_Bfree>
 8012248:	3f01      	subs	r7, #1
 801224a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801224c:	2f04      	cmp	r7, #4
 801224e:	d806      	bhi.n	801225e <_strtod_l+0xee>
 8012250:	e8df f007 	tbb	[pc, r7]
 8012254:	201d0314 	.word	0x201d0314
 8012258:	14          	.byte	0x14
 8012259:	00          	.byte	0x00
 801225a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801225e:	05e9      	lsls	r1, r5, #23
 8012260:	bf48      	it	mi
 8012262:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8012266:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801226a:	0d1b      	lsrs	r3, r3, #20
 801226c:	051b      	lsls	r3, r3, #20
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1b9      	bne.n	80121e6 <_strtod_l+0x76>
 8012272:	f7fe faf7 	bl	8010864 <__errno>
 8012276:	2322      	movs	r3, #34	; 0x22
 8012278:	6003      	str	r3, [r0, #0]
 801227a:	e7b4      	b.n	80121e6 <_strtod_l+0x76>
 801227c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8012280:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012284:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012288:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801228c:	e7e7      	b.n	801225e <_strtod_l+0xee>
 801228e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012408 <_strtod_l+0x298>
 8012292:	e7e4      	b.n	801225e <_strtod_l+0xee>
 8012294:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012298:	f04f 38ff 	mov.w	r8, #4294967295
 801229c:	e7df      	b.n	801225e <_strtod_l+0xee>
 801229e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122a0:	1c5a      	adds	r2, r3, #1
 80122a2:	9215      	str	r2, [sp, #84]	; 0x54
 80122a4:	785b      	ldrb	r3, [r3, #1]
 80122a6:	2b30      	cmp	r3, #48	; 0x30
 80122a8:	d0f9      	beq.n	801229e <_strtod_l+0x12e>
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d09b      	beq.n	80121e6 <_strtod_l+0x76>
 80122ae:	2301      	movs	r3, #1
 80122b0:	f04f 0a00 	mov.w	sl, #0
 80122b4:	9304      	str	r3, [sp, #16]
 80122b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80122ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80122be:	46d3      	mov	fp, sl
 80122c0:	220a      	movs	r2, #10
 80122c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80122c4:	7806      	ldrb	r6, [r0, #0]
 80122c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80122ca:	b2d9      	uxtb	r1, r3
 80122cc:	2909      	cmp	r1, #9
 80122ce:	d926      	bls.n	801231e <_strtod_l+0x1ae>
 80122d0:	494c      	ldr	r1, [pc, #304]	; (8012404 <_strtod_l+0x294>)
 80122d2:	2201      	movs	r2, #1
 80122d4:	f001 f9c0 	bl	8013658 <strncmp>
 80122d8:	2800      	cmp	r0, #0
 80122da:	d030      	beq.n	801233e <_strtod_l+0x1ce>
 80122dc:	2000      	movs	r0, #0
 80122de:	4632      	mov	r2, r6
 80122e0:	9005      	str	r0, [sp, #20]
 80122e2:	465e      	mov	r6, fp
 80122e4:	4603      	mov	r3, r0
 80122e6:	2a65      	cmp	r2, #101	; 0x65
 80122e8:	d001      	beq.n	80122ee <_strtod_l+0x17e>
 80122ea:	2a45      	cmp	r2, #69	; 0x45
 80122ec:	d113      	bne.n	8012316 <_strtod_l+0x1a6>
 80122ee:	b91e      	cbnz	r6, 80122f8 <_strtod_l+0x188>
 80122f0:	9a04      	ldr	r2, [sp, #16]
 80122f2:	4302      	orrs	r2, r0
 80122f4:	d094      	beq.n	8012220 <_strtod_l+0xb0>
 80122f6:	2600      	movs	r6, #0
 80122f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80122fa:	1c6a      	adds	r2, r5, #1
 80122fc:	9215      	str	r2, [sp, #84]	; 0x54
 80122fe:	786a      	ldrb	r2, [r5, #1]
 8012300:	2a2b      	cmp	r2, #43	; 0x2b
 8012302:	d074      	beq.n	80123ee <_strtod_l+0x27e>
 8012304:	2a2d      	cmp	r2, #45	; 0x2d
 8012306:	d078      	beq.n	80123fa <_strtod_l+0x28a>
 8012308:	f04f 0c00 	mov.w	ip, #0
 801230c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012310:	2909      	cmp	r1, #9
 8012312:	d97f      	bls.n	8012414 <_strtod_l+0x2a4>
 8012314:	9515      	str	r5, [sp, #84]	; 0x54
 8012316:	2700      	movs	r7, #0
 8012318:	e09e      	b.n	8012458 <_strtod_l+0x2e8>
 801231a:	2300      	movs	r3, #0
 801231c:	e7c8      	b.n	80122b0 <_strtod_l+0x140>
 801231e:	f1bb 0f08 	cmp.w	fp, #8
 8012322:	bfd8      	it	le
 8012324:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012326:	f100 0001 	add.w	r0, r0, #1
 801232a:	bfda      	itte	le
 801232c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012330:	9309      	strle	r3, [sp, #36]	; 0x24
 8012332:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8012336:	f10b 0b01 	add.w	fp, fp, #1
 801233a:	9015      	str	r0, [sp, #84]	; 0x54
 801233c:	e7c1      	b.n	80122c2 <_strtod_l+0x152>
 801233e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012340:	1c5a      	adds	r2, r3, #1
 8012342:	9215      	str	r2, [sp, #84]	; 0x54
 8012344:	785a      	ldrb	r2, [r3, #1]
 8012346:	f1bb 0f00 	cmp.w	fp, #0
 801234a:	d037      	beq.n	80123bc <_strtod_l+0x24c>
 801234c:	9005      	str	r0, [sp, #20]
 801234e:	465e      	mov	r6, fp
 8012350:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012354:	2b09      	cmp	r3, #9
 8012356:	d912      	bls.n	801237e <_strtod_l+0x20e>
 8012358:	2301      	movs	r3, #1
 801235a:	e7c4      	b.n	80122e6 <_strtod_l+0x176>
 801235c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801235e:	1c5a      	adds	r2, r3, #1
 8012360:	9215      	str	r2, [sp, #84]	; 0x54
 8012362:	785a      	ldrb	r2, [r3, #1]
 8012364:	3001      	adds	r0, #1
 8012366:	2a30      	cmp	r2, #48	; 0x30
 8012368:	d0f8      	beq.n	801235c <_strtod_l+0x1ec>
 801236a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801236e:	2b08      	cmp	r3, #8
 8012370:	f200 84c1 	bhi.w	8012cf6 <_strtod_l+0xb86>
 8012374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012376:	9005      	str	r0, [sp, #20]
 8012378:	2000      	movs	r0, #0
 801237a:	930b      	str	r3, [sp, #44]	; 0x2c
 801237c:	4606      	mov	r6, r0
 801237e:	3a30      	subs	r2, #48	; 0x30
 8012380:	f100 0301 	add.w	r3, r0, #1
 8012384:	d014      	beq.n	80123b0 <_strtod_l+0x240>
 8012386:	9905      	ldr	r1, [sp, #20]
 8012388:	4419      	add	r1, r3
 801238a:	9105      	str	r1, [sp, #20]
 801238c:	4633      	mov	r3, r6
 801238e:	eb00 0c06 	add.w	ip, r0, r6
 8012392:	210a      	movs	r1, #10
 8012394:	4563      	cmp	r3, ip
 8012396:	d113      	bne.n	80123c0 <_strtod_l+0x250>
 8012398:	1833      	adds	r3, r6, r0
 801239a:	2b08      	cmp	r3, #8
 801239c:	f106 0601 	add.w	r6, r6, #1
 80123a0:	4406      	add	r6, r0
 80123a2:	dc1a      	bgt.n	80123da <_strtod_l+0x26a>
 80123a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123a6:	230a      	movs	r3, #10
 80123a8:	fb03 2301 	mla	r3, r3, r1, r2
 80123ac:	9309      	str	r3, [sp, #36]	; 0x24
 80123ae:	2300      	movs	r3, #0
 80123b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80123b2:	1c51      	adds	r1, r2, #1
 80123b4:	9115      	str	r1, [sp, #84]	; 0x54
 80123b6:	7852      	ldrb	r2, [r2, #1]
 80123b8:	4618      	mov	r0, r3
 80123ba:	e7c9      	b.n	8012350 <_strtod_l+0x1e0>
 80123bc:	4658      	mov	r0, fp
 80123be:	e7d2      	b.n	8012366 <_strtod_l+0x1f6>
 80123c0:	2b08      	cmp	r3, #8
 80123c2:	f103 0301 	add.w	r3, r3, #1
 80123c6:	dc03      	bgt.n	80123d0 <_strtod_l+0x260>
 80123c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80123ca:	434f      	muls	r7, r1
 80123cc:	9709      	str	r7, [sp, #36]	; 0x24
 80123ce:	e7e1      	b.n	8012394 <_strtod_l+0x224>
 80123d0:	2b10      	cmp	r3, #16
 80123d2:	bfd8      	it	le
 80123d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80123d8:	e7dc      	b.n	8012394 <_strtod_l+0x224>
 80123da:	2e10      	cmp	r6, #16
 80123dc:	bfdc      	itt	le
 80123de:	230a      	movle	r3, #10
 80123e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80123e4:	e7e3      	b.n	80123ae <_strtod_l+0x23e>
 80123e6:	2300      	movs	r3, #0
 80123e8:	9305      	str	r3, [sp, #20]
 80123ea:	2301      	movs	r3, #1
 80123ec:	e780      	b.n	80122f0 <_strtod_l+0x180>
 80123ee:	f04f 0c00 	mov.w	ip, #0
 80123f2:	1caa      	adds	r2, r5, #2
 80123f4:	9215      	str	r2, [sp, #84]	; 0x54
 80123f6:	78aa      	ldrb	r2, [r5, #2]
 80123f8:	e788      	b.n	801230c <_strtod_l+0x19c>
 80123fa:	f04f 0c01 	mov.w	ip, #1
 80123fe:	e7f8      	b.n	80123f2 <_strtod_l+0x282>
 8012400:	08016b68 	.word	0x08016b68
 8012404:	08016b64 	.word	0x08016b64
 8012408:	7ff00000 	.word	0x7ff00000
 801240c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801240e:	1c51      	adds	r1, r2, #1
 8012410:	9115      	str	r1, [sp, #84]	; 0x54
 8012412:	7852      	ldrb	r2, [r2, #1]
 8012414:	2a30      	cmp	r2, #48	; 0x30
 8012416:	d0f9      	beq.n	801240c <_strtod_l+0x29c>
 8012418:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801241c:	2908      	cmp	r1, #8
 801241e:	f63f af7a 	bhi.w	8012316 <_strtod_l+0x1a6>
 8012422:	3a30      	subs	r2, #48	; 0x30
 8012424:	9208      	str	r2, [sp, #32]
 8012426:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012428:	920c      	str	r2, [sp, #48]	; 0x30
 801242a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801242c:	1c57      	adds	r7, r2, #1
 801242e:	9715      	str	r7, [sp, #84]	; 0x54
 8012430:	7852      	ldrb	r2, [r2, #1]
 8012432:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012436:	f1be 0f09 	cmp.w	lr, #9
 801243a:	d938      	bls.n	80124ae <_strtod_l+0x33e>
 801243c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801243e:	1a7f      	subs	r7, r7, r1
 8012440:	2f08      	cmp	r7, #8
 8012442:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012446:	dc03      	bgt.n	8012450 <_strtod_l+0x2e0>
 8012448:	9908      	ldr	r1, [sp, #32]
 801244a:	428f      	cmp	r7, r1
 801244c:	bfa8      	it	ge
 801244e:	460f      	movge	r7, r1
 8012450:	f1bc 0f00 	cmp.w	ip, #0
 8012454:	d000      	beq.n	8012458 <_strtod_l+0x2e8>
 8012456:	427f      	negs	r7, r7
 8012458:	2e00      	cmp	r6, #0
 801245a:	d14f      	bne.n	80124fc <_strtod_l+0x38c>
 801245c:	9904      	ldr	r1, [sp, #16]
 801245e:	4301      	orrs	r1, r0
 8012460:	f47f aec1 	bne.w	80121e6 <_strtod_l+0x76>
 8012464:	2b00      	cmp	r3, #0
 8012466:	f47f aedb 	bne.w	8012220 <_strtod_l+0xb0>
 801246a:	2a69      	cmp	r2, #105	; 0x69
 801246c:	d029      	beq.n	80124c2 <_strtod_l+0x352>
 801246e:	dc26      	bgt.n	80124be <_strtod_l+0x34e>
 8012470:	2a49      	cmp	r2, #73	; 0x49
 8012472:	d026      	beq.n	80124c2 <_strtod_l+0x352>
 8012474:	2a4e      	cmp	r2, #78	; 0x4e
 8012476:	f47f aed3 	bne.w	8012220 <_strtod_l+0xb0>
 801247a:	499b      	ldr	r1, [pc, #620]	; (80126e8 <_strtod_l+0x578>)
 801247c:	a815      	add	r0, sp, #84	; 0x54
 801247e:	f001 fc13 	bl	8013ca8 <__match>
 8012482:	2800      	cmp	r0, #0
 8012484:	f43f aecc 	beq.w	8012220 <_strtod_l+0xb0>
 8012488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	2b28      	cmp	r3, #40	; 0x28
 801248e:	d12f      	bne.n	80124f0 <_strtod_l+0x380>
 8012490:	4996      	ldr	r1, [pc, #600]	; (80126ec <_strtod_l+0x57c>)
 8012492:	aa18      	add	r2, sp, #96	; 0x60
 8012494:	a815      	add	r0, sp, #84	; 0x54
 8012496:	f001 fc1b 	bl	8013cd0 <__hexnan>
 801249a:	2805      	cmp	r0, #5
 801249c:	d128      	bne.n	80124f0 <_strtod_l+0x380>
 801249e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80124a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80124a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80124ac:	e69b      	b.n	80121e6 <_strtod_l+0x76>
 80124ae:	9f08      	ldr	r7, [sp, #32]
 80124b0:	210a      	movs	r1, #10
 80124b2:	fb01 2107 	mla	r1, r1, r7, r2
 80124b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80124ba:	9208      	str	r2, [sp, #32]
 80124bc:	e7b5      	b.n	801242a <_strtod_l+0x2ba>
 80124be:	2a6e      	cmp	r2, #110	; 0x6e
 80124c0:	e7d9      	b.n	8012476 <_strtod_l+0x306>
 80124c2:	498b      	ldr	r1, [pc, #556]	; (80126f0 <_strtod_l+0x580>)
 80124c4:	a815      	add	r0, sp, #84	; 0x54
 80124c6:	f001 fbef 	bl	8013ca8 <__match>
 80124ca:	2800      	cmp	r0, #0
 80124cc:	f43f aea8 	beq.w	8012220 <_strtod_l+0xb0>
 80124d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124d2:	4988      	ldr	r1, [pc, #544]	; (80126f4 <_strtod_l+0x584>)
 80124d4:	3b01      	subs	r3, #1
 80124d6:	a815      	add	r0, sp, #84	; 0x54
 80124d8:	9315      	str	r3, [sp, #84]	; 0x54
 80124da:	f001 fbe5 	bl	8013ca8 <__match>
 80124de:	b910      	cbnz	r0, 80124e6 <_strtod_l+0x376>
 80124e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124e2:	3301      	adds	r3, #1
 80124e4:	9315      	str	r3, [sp, #84]	; 0x54
 80124e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012704 <_strtod_l+0x594>
 80124ea:	f04f 0800 	mov.w	r8, #0
 80124ee:	e67a      	b.n	80121e6 <_strtod_l+0x76>
 80124f0:	4881      	ldr	r0, [pc, #516]	; (80126f8 <_strtod_l+0x588>)
 80124f2:	f001 f8f5 	bl	80136e0 <nan>
 80124f6:	ec59 8b10 	vmov	r8, r9, d0
 80124fa:	e674      	b.n	80121e6 <_strtod_l+0x76>
 80124fc:	9b05      	ldr	r3, [sp, #20]
 80124fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012500:	1afb      	subs	r3, r7, r3
 8012502:	f1bb 0f00 	cmp.w	fp, #0
 8012506:	bf08      	it	eq
 8012508:	46b3      	moveq	fp, r6
 801250a:	2e10      	cmp	r6, #16
 801250c:	9308      	str	r3, [sp, #32]
 801250e:	4635      	mov	r5, r6
 8012510:	bfa8      	it	ge
 8012512:	2510      	movge	r5, #16
 8012514:	f7ed ffce 	bl	80004b4 <__aeabi_ui2d>
 8012518:	2e09      	cmp	r6, #9
 801251a:	4680      	mov	r8, r0
 801251c:	4689      	mov	r9, r1
 801251e:	dd13      	ble.n	8012548 <_strtod_l+0x3d8>
 8012520:	4b76      	ldr	r3, [pc, #472]	; (80126fc <_strtod_l+0x58c>)
 8012522:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012526:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801252a:	f7ee f83d 	bl	80005a8 <__aeabi_dmul>
 801252e:	4680      	mov	r8, r0
 8012530:	4650      	mov	r0, sl
 8012532:	4689      	mov	r9, r1
 8012534:	f7ed ffbe 	bl	80004b4 <__aeabi_ui2d>
 8012538:	4602      	mov	r2, r0
 801253a:	460b      	mov	r3, r1
 801253c:	4640      	mov	r0, r8
 801253e:	4649      	mov	r1, r9
 8012540:	f7ed fe7c 	bl	800023c <__adddf3>
 8012544:	4680      	mov	r8, r0
 8012546:	4689      	mov	r9, r1
 8012548:	2e0f      	cmp	r6, #15
 801254a:	dc38      	bgt.n	80125be <_strtod_l+0x44e>
 801254c:	9b08      	ldr	r3, [sp, #32]
 801254e:	2b00      	cmp	r3, #0
 8012550:	f43f ae49 	beq.w	80121e6 <_strtod_l+0x76>
 8012554:	dd24      	ble.n	80125a0 <_strtod_l+0x430>
 8012556:	2b16      	cmp	r3, #22
 8012558:	dc0b      	bgt.n	8012572 <_strtod_l+0x402>
 801255a:	4968      	ldr	r1, [pc, #416]	; (80126fc <_strtod_l+0x58c>)
 801255c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012564:	4642      	mov	r2, r8
 8012566:	464b      	mov	r3, r9
 8012568:	f7ee f81e 	bl	80005a8 <__aeabi_dmul>
 801256c:	4680      	mov	r8, r0
 801256e:	4689      	mov	r9, r1
 8012570:	e639      	b.n	80121e6 <_strtod_l+0x76>
 8012572:	9a08      	ldr	r2, [sp, #32]
 8012574:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012578:	4293      	cmp	r3, r2
 801257a:	db20      	blt.n	80125be <_strtod_l+0x44e>
 801257c:	4c5f      	ldr	r4, [pc, #380]	; (80126fc <_strtod_l+0x58c>)
 801257e:	f1c6 060f 	rsb	r6, r6, #15
 8012582:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012586:	4642      	mov	r2, r8
 8012588:	464b      	mov	r3, r9
 801258a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801258e:	f7ee f80b 	bl	80005a8 <__aeabi_dmul>
 8012592:	9b08      	ldr	r3, [sp, #32]
 8012594:	1b9e      	subs	r6, r3, r6
 8012596:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801259a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801259e:	e7e3      	b.n	8012568 <_strtod_l+0x3f8>
 80125a0:	9b08      	ldr	r3, [sp, #32]
 80125a2:	3316      	adds	r3, #22
 80125a4:	db0b      	blt.n	80125be <_strtod_l+0x44e>
 80125a6:	9b05      	ldr	r3, [sp, #20]
 80125a8:	1bdf      	subs	r7, r3, r7
 80125aa:	4b54      	ldr	r3, [pc, #336]	; (80126fc <_strtod_l+0x58c>)
 80125ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80125b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125b4:	4640      	mov	r0, r8
 80125b6:	4649      	mov	r1, r9
 80125b8:	f7ee f920 	bl	80007fc <__aeabi_ddiv>
 80125bc:	e7d6      	b.n	801256c <_strtod_l+0x3fc>
 80125be:	9b08      	ldr	r3, [sp, #32]
 80125c0:	1b75      	subs	r5, r6, r5
 80125c2:	441d      	add	r5, r3
 80125c4:	2d00      	cmp	r5, #0
 80125c6:	dd70      	ble.n	80126aa <_strtod_l+0x53a>
 80125c8:	f015 030f 	ands.w	r3, r5, #15
 80125cc:	d00a      	beq.n	80125e4 <_strtod_l+0x474>
 80125ce:	494b      	ldr	r1, [pc, #300]	; (80126fc <_strtod_l+0x58c>)
 80125d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80125d4:	4642      	mov	r2, r8
 80125d6:	464b      	mov	r3, r9
 80125d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125dc:	f7ed ffe4 	bl	80005a8 <__aeabi_dmul>
 80125e0:	4680      	mov	r8, r0
 80125e2:	4689      	mov	r9, r1
 80125e4:	f035 050f 	bics.w	r5, r5, #15
 80125e8:	d04d      	beq.n	8012686 <_strtod_l+0x516>
 80125ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80125ee:	dd22      	ble.n	8012636 <_strtod_l+0x4c6>
 80125f0:	2500      	movs	r5, #0
 80125f2:	46ab      	mov	fp, r5
 80125f4:	9509      	str	r5, [sp, #36]	; 0x24
 80125f6:	9505      	str	r5, [sp, #20]
 80125f8:	2322      	movs	r3, #34	; 0x22
 80125fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012704 <_strtod_l+0x594>
 80125fe:	6023      	str	r3, [r4, #0]
 8012600:	f04f 0800 	mov.w	r8, #0
 8012604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012606:	2b00      	cmp	r3, #0
 8012608:	f43f aded 	beq.w	80121e6 <_strtod_l+0x76>
 801260c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801260e:	4620      	mov	r0, r4
 8012610:	f7ff f924 	bl	801185c <_Bfree>
 8012614:	9905      	ldr	r1, [sp, #20]
 8012616:	4620      	mov	r0, r4
 8012618:	f7ff f920 	bl	801185c <_Bfree>
 801261c:	4659      	mov	r1, fp
 801261e:	4620      	mov	r0, r4
 8012620:	f7ff f91c 	bl	801185c <_Bfree>
 8012624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012626:	4620      	mov	r0, r4
 8012628:	f7ff f918 	bl	801185c <_Bfree>
 801262c:	4629      	mov	r1, r5
 801262e:	4620      	mov	r0, r4
 8012630:	f7ff f914 	bl	801185c <_Bfree>
 8012634:	e5d7      	b.n	80121e6 <_strtod_l+0x76>
 8012636:	4b32      	ldr	r3, [pc, #200]	; (8012700 <_strtod_l+0x590>)
 8012638:	9304      	str	r3, [sp, #16]
 801263a:	2300      	movs	r3, #0
 801263c:	112d      	asrs	r5, r5, #4
 801263e:	4640      	mov	r0, r8
 8012640:	4649      	mov	r1, r9
 8012642:	469a      	mov	sl, r3
 8012644:	2d01      	cmp	r5, #1
 8012646:	dc21      	bgt.n	801268c <_strtod_l+0x51c>
 8012648:	b10b      	cbz	r3, 801264e <_strtod_l+0x4de>
 801264a:	4680      	mov	r8, r0
 801264c:	4689      	mov	r9, r1
 801264e:	492c      	ldr	r1, [pc, #176]	; (8012700 <_strtod_l+0x590>)
 8012650:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012654:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012658:	4642      	mov	r2, r8
 801265a:	464b      	mov	r3, r9
 801265c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012660:	f7ed ffa2 	bl	80005a8 <__aeabi_dmul>
 8012664:	4b27      	ldr	r3, [pc, #156]	; (8012704 <_strtod_l+0x594>)
 8012666:	460a      	mov	r2, r1
 8012668:	400b      	ands	r3, r1
 801266a:	4927      	ldr	r1, [pc, #156]	; (8012708 <_strtod_l+0x598>)
 801266c:	428b      	cmp	r3, r1
 801266e:	4680      	mov	r8, r0
 8012670:	d8be      	bhi.n	80125f0 <_strtod_l+0x480>
 8012672:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012676:	428b      	cmp	r3, r1
 8012678:	bf86      	itte	hi
 801267a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801270c <_strtod_l+0x59c>
 801267e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012682:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012686:	2300      	movs	r3, #0
 8012688:	9304      	str	r3, [sp, #16]
 801268a:	e07b      	b.n	8012784 <_strtod_l+0x614>
 801268c:	07ea      	lsls	r2, r5, #31
 801268e:	d505      	bpl.n	801269c <_strtod_l+0x52c>
 8012690:	9b04      	ldr	r3, [sp, #16]
 8012692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012696:	f7ed ff87 	bl	80005a8 <__aeabi_dmul>
 801269a:	2301      	movs	r3, #1
 801269c:	9a04      	ldr	r2, [sp, #16]
 801269e:	3208      	adds	r2, #8
 80126a0:	f10a 0a01 	add.w	sl, sl, #1
 80126a4:	106d      	asrs	r5, r5, #1
 80126a6:	9204      	str	r2, [sp, #16]
 80126a8:	e7cc      	b.n	8012644 <_strtod_l+0x4d4>
 80126aa:	d0ec      	beq.n	8012686 <_strtod_l+0x516>
 80126ac:	426d      	negs	r5, r5
 80126ae:	f015 020f 	ands.w	r2, r5, #15
 80126b2:	d00a      	beq.n	80126ca <_strtod_l+0x55a>
 80126b4:	4b11      	ldr	r3, [pc, #68]	; (80126fc <_strtod_l+0x58c>)
 80126b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126ba:	4640      	mov	r0, r8
 80126bc:	4649      	mov	r1, r9
 80126be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c2:	f7ee f89b 	bl	80007fc <__aeabi_ddiv>
 80126c6:	4680      	mov	r8, r0
 80126c8:	4689      	mov	r9, r1
 80126ca:	112d      	asrs	r5, r5, #4
 80126cc:	d0db      	beq.n	8012686 <_strtod_l+0x516>
 80126ce:	2d1f      	cmp	r5, #31
 80126d0:	dd1e      	ble.n	8012710 <_strtod_l+0x5a0>
 80126d2:	2500      	movs	r5, #0
 80126d4:	46ab      	mov	fp, r5
 80126d6:	9509      	str	r5, [sp, #36]	; 0x24
 80126d8:	9505      	str	r5, [sp, #20]
 80126da:	2322      	movs	r3, #34	; 0x22
 80126dc:	f04f 0800 	mov.w	r8, #0
 80126e0:	f04f 0900 	mov.w	r9, #0
 80126e4:	6023      	str	r3, [r4, #0]
 80126e6:	e78d      	b.n	8012604 <_strtod_l+0x494>
 80126e8:	08016955 	.word	0x08016955
 80126ec:	08016b7c 	.word	0x08016b7c
 80126f0:	0801694d 	.word	0x0801694d
 80126f4:	08016984 	.word	0x08016984
 80126f8:	08016d0d 	.word	0x08016d0d
 80126fc:	08016a90 	.word	0x08016a90
 8012700:	08016a68 	.word	0x08016a68
 8012704:	7ff00000 	.word	0x7ff00000
 8012708:	7ca00000 	.word	0x7ca00000
 801270c:	7fefffff 	.word	0x7fefffff
 8012710:	f015 0310 	ands.w	r3, r5, #16
 8012714:	bf18      	it	ne
 8012716:	236a      	movne	r3, #106	; 0x6a
 8012718:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8012abc <_strtod_l+0x94c>
 801271c:	9304      	str	r3, [sp, #16]
 801271e:	4640      	mov	r0, r8
 8012720:	4649      	mov	r1, r9
 8012722:	2300      	movs	r3, #0
 8012724:	07ea      	lsls	r2, r5, #31
 8012726:	d504      	bpl.n	8012732 <_strtod_l+0x5c2>
 8012728:	e9da 2300 	ldrd	r2, r3, [sl]
 801272c:	f7ed ff3c 	bl	80005a8 <__aeabi_dmul>
 8012730:	2301      	movs	r3, #1
 8012732:	106d      	asrs	r5, r5, #1
 8012734:	f10a 0a08 	add.w	sl, sl, #8
 8012738:	d1f4      	bne.n	8012724 <_strtod_l+0x5b4>
 801273a:	b10b      	cbz	r3, 8012740 <_strtod_l+0x5d0>
 801273c:	4680      	mov	r8, r0
 801273e:	4689      	mov	r9, r1
 8012740:	9b04      	ldr	r3, [sp, #16]
 8012742:	b1bb      	cbz	r3, 8012774 <_strtod_l+0x604>
 8012744:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012748:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801274c:	2b00      	cmp	r3, #0
 801274e:	4649      	mov	r1, r9
 8012750:	dd10      	ble.n	8012774 <_strtod_l+0x604>
 8012752:	2b1f      	cmp	r3, #31
 8012754:	f340 811e 	ble.w	8012994 <_strtod_l+0x824>
 8012758:	2b34      	cmp	r3, #52	; 0x34
 801275a:	bfde      	ittt	le
 801275c:	f04f 33ff 	movle.w	r3, #4294967295
 8012760:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012764:	4093      	lslle	r3, r2
 8012766:	f04f 0800 	mov.w	r8, #0
 801276a:	bfcc      	ite	gt
 801276c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012770:	ea03 0901 	andle.w	r9, r3, r1
 8012774:	2200      	movs	r2, #0
 8012776:	2300      	movs	r3, #0
 8012778:	4640      	mov	r0, r8
 801277a:	4649      	mov	r1, r9
 801277c:	f7ee f97c 	bl	8000a78 <__aeabi_dcmpeq>
 8012780:	2800      	cmp	r0, #0
 8012782:	d1a6      	bne.n	80126d2 <_strtod_l+0x562>
 8012784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801278a:	4633      	mov	r3, r6
 801278c:	465a      	mov	r2, fp
 801278e:	4620      	mov	r0, r4
 8012790:	f7ff f8cc 	bl	801192c <__s2b>
 8012794:	9009      	str	r0, [sp, #36]	; 0x24
 8012796:	2800      	cmp	r0, #0
 8012798:	f43f af2a 	beq.w	80125f0 <_strtod_l+0x480>
 801279c:	9a08      	ldr	r2, [sp, #32]
 801279e:	9b05      	ldr	r3, [sp, #20]
 80127a0:	2a00      	cmp	r2, #0
 80127a2:	eba3 0307 	sub.w	r3, r3, r7
 80127a6:	bfa8      	it	ge
 80127a8:	2300      	movge	r3, #0
 80127aa:	930c      	str	r3, [sp, #48]	; 0x30
 80127ac:	2500      	movs	r5, #0
 80127ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80127b2:	9312      	str	r3, [sp, #72]	; 0x48
 80127b4:	46ab      	mov	fp, r5
 80127b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127b8:	4620      	mov	r0, r4
 80127ba:	6859      	ldr	r1, [r3, #4]
 80127bc:	f7ff f80e 	bl	80117dc <_Balloc>
 80127c0:	9005      	str	r0, [sp, #20]
 80127c2:	2800      	cmp	r0, #0
 80127c4:	f43f af18 	beq.w	80125f8 <_strtod_l+0x488>
 80127c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ca:	691a      	ldr	r2, [r3, #16]
 80127cc:	3202      	adds	r2, #2
 80127ce:	f103 010c 	add.w	r1, r3, #12
 80127d2:	0092      	lsls	r2, r2, #2
 80127d4:	300c      	adds	r0, #12
 80127d6:	f7fe f872 	bl	80108be <memcpy>
 80127da:	ec49 8b10 	vmov	d0, r8, r9
 80127de:	aa18      	add	r2, sp, #96	; 0x60
 80127e0:	a917      	add	r1, sp, #92	; 0x5c
 80127e2:	4620      	mov	r0, r4
 80127e4:	f7ff fbd6 	bl	8011f94 <__d2b>
 80127e8:	ec49 8b18 	vmov	d8, r8, r9
 80127ec:	9016      	str	r0, [sp, #88]	; 0x58
 80127ee:	2800      	cmp	r0, #0
 80127f0:	f43f af02 	beq.w	80125f8 <_strtod_l+0x488>
 80127f4:	2101      	movs	r1, #1
 80127f6:	4620      	mov	r0, r4
 80127f8:	f7ff f930 	bl	8011a5c <__i2b>
 80127fc:	4683      	mov	fp, r0
 80127fe:	2800      	cmp	r0, #0
 8012800:	f43f aefa 	beq.w	80125f8 <_strtod_l+0x488>
 8012804:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012806:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012808:	2e00      	cmp	r6, #0
 801280a:	bfab      	itete	ge
 801280c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801280e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012810:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012812:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012816:	bfac      	ite	ge
 8012818:	eb06 0a03 	addge.w	sl, r6, r3
 801281c:	1b9f      	sublt	r7, r3, r6
 801281e:	9b04      	ldr	r3, [sp, #16]
 8012820:	1af6      	subs	r6, r6, r3
 8012822:	4416      	add	r6, r2
 8012824:	4ba0      	ldr	r3, [pc, #640]	; (8012aa8 <_strtod_l+0x938>)
 8012826:	3e01      	subs	r6, #1
 8012828:	429e      	cmp	r6, r3
 801282a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801282e:	f280 80c4 	bge.w	80129ba <_strtod_l+0x84a>
 8012832:	1b9b      	subs	r3, r3, r6
 8012834:	2b1f      	cmp	r3, #31
 8012836:	eba2 0203 	sub.w	r2, r2, r3
 801283a:	f04f 0101 	mov.w	r1, #1
 801283e:	f300 80b0 	bgt.w	80129a2 <_strtod_l+0x832>
 8012842:	fa01 f303 	lsl.w	r3, r1, r3
 8012846:	930e      	str	r3, [sp, #56]	; 0x38
 8012848:	2300      	movs	r3, #0
 801284a:	930d      	str	r3, [sp, #52]	; 0x34
 801284c:	eb0a 0602 	add.w	r6, sl, r2
 8012850:	9b04      	ldr	r3, [sp, #16]
 8012852:	45b2      	cmp	sl, r6
 8012854:	4417      	add	r7, r2
 8012856:	441f      	add	r7, r3
 8012858:	4653      	mov	r3, sl
 801285a:	bfa8      	it	ge
 801285c:	4633      	movge	r3, r6
 801285e:	42bb      	cmp	r3, r7
 8012860:	bfa8      	it	ge
 8012862:	463b      	movge	r3, r7
 8012864:	2b00      	cmp	r3, #0
 8012866:	bfc2      	ittt	gt
 8012868:	1af6      	subgt	r6, r6, r3
 801286a:	1aff      	subgt	r7, r7, r3
 801286c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012872:	2b00      	cmp	r3, #0
 8012874:	dd17      	ble.n	80128a6 <_strtod_l+0x736>
 8012876:	4659      	mov	r1, fp
 8012878:	461a      	mov	r2, r3
 801287a:	4620      	mov	r0, r4
 801287c:	f7ff f9ae 	bl	8011bdc <__pow5mult>
 8012880:	4683      	mov	fp, r0
 8012882:	2800      	cmp	r0, #0
 8012884:	f43f aeb8 	beq.w	80125f8 <_strtod_l+0x488>
 8012888:	4601      	mov	r1, r0
 801288a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801288c:	4620      	mov	r0, r4
 801288e:	f7ff f8fb 	bl	8011a88 <__multiply>
 8012892:	900b      	str	r0, [sp, #44]	; 0x2c
 8012894:	2800      	cmp	r0, #0
 8012896:	f43f aeaf 	beq.w	80125f8 <_strtod_l+0x488>
 801289a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801289c:	4620      	mov	r0, r4
 801289e:	f7fe ffdd 	bl	801185c <_Bfree>
 80128a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128a4:	9316      	str	r3, [sp, #88]	; 0x58
 80128a6:	2e00      	cmp	r6, #0
 80128a8:	f300 808c 	bgt.w	80129c4 <_strtod_l+0x854>
 80128ac:	9b08      	ldr	r3, [sp, #32]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	dd08      	ble.n	80128c4 <_strtod_l+0x754>
 80128b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80128b4:	9905      	ldr	r1, [sp, #20]
 80128b6:	4620      	mov	r0, r4
 80128b8:	f7ff f990 	bl	8011bdc <__pow5mult>
 80128bc:	9005      	str	r0, [sp, #20]
 80128be:	2800      	cmp	r0, #0
 80128c0:	f43f ae9a 	beq.w	80125f8 <_strtod_l+0x488>
 80128c4:	2f00      	cmp	r7, #0
 80128c6:	dd08      	ble.n	80128da <_strtod_l+0x76a>
 80128c8:	9905      	ldr	r1, [sp, #20]
 80128ca:	463a      	mov	r2, r7
 80128cc:	4620      	mov	r0, r4
 80128ce:	f7ff f9df 	bl	8011c90 <__lshift>
 80128d2:	9005      	str	r0, [sp, #20]
 80128d4:	2800      	cmp	r0, #0
 80128d6:	f43f ae8f 	beq.w	80125f8 <_strtod_l+0x488>
 80128da:	f1ba 0f00 	cmp.w	sl, #0
 80128de:	dd08      	ble.n	80128f2 <_strtod_l+0x782>
 80128e0:	4659      	mov	r1, fp
 80128e2:	4652      	mov	r2, sl
 80128e4:	4620      	mov	r0, r4
 80128e6:	f7ff f9d3 	bl	8011c90 <__lshift>
 80128ea:	4683      	mov	fp, r0
 80128ec:	2800      	cmp	r0, #0
 80128ee:	f43f ae83 	beq.w	80125f8 <_strtod_l+0x488>
 80128f2:	9a05      	ldr	r2, [sp, #20]
 80128f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80128f6:	4620      	mov	r0, r4
 80128f8:	f7ff fa52 	bl	8011da0 <__mdiff>
 80128fc:	4605      	mov	r5, r0
 80128fe:	2800      	cmp	r0, #0
 8012900:	f43f ae7a 	beq.w	80125f8 <_strtod_l+0x488>
 8012904:	68c3      	ldr	r3, [r0, #12]
 8012906:	930b      	str	r3, [sp, #44]	; 0x2c
 8012908:	2300      	movs	r3, #0
 801290a:	60c3      	str	r3, [r0, #12]
 801290c:	4659      	mov	r1, fp
 801290e:	f7ff fa2b 	bl	8011d68 <__mcmp>
 8012912:	2800      	cmp	r0, #0
 8012914:	da60      	bge.n	80129d8 <_strtod_l+0x868>
 8012916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012918:	ea53 0308 	orrs.w	r3, r3, r8
 801291c:	f040 8084 	bne.w	8012a28 <_strtod_l+0x8b8>
 8012920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012924:	2b00      	cmp	r3, #0
 8012926:	d17f      	bne.n	8012a28 <_strtod_l+0x8b8>
 8012928:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801292c:	0d1b      	lsrs	r3, r3, #20
 801292e:	051b      	lsls	r3, r3, #20
 8012930:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012934:	d978      	bls.n	8012a28 <_strtod_l+0x8b8>
 8012936:	696b      	ldr	r3, [r5, #20]
 8012938:	b913      	cbnz	r3, 8012940 <_strtod_l+0x7d0>
 801293a:	692b      	ldr	r3, [r5, #16]
 801293c:	2b01      	cmp	r3, #1
 801293e:	dd73      	ble.n	8012a28 <_strtod_l+0x8b8>
 8012940:	4629      	mov	r1, r5
 8012942:	2201      	movs	r2, #1
 8012944:	4620      	mov	r0, r4
 8012946:	f7ff f9a3 	bl	8011c90 <__lshift>
 801294a:	4659      	mov	r1, fp
 801294c:	4605      	mov	r5, r0
 801294e:	f7ff fa0b 	bl	8011d68 <__mcmp>
 8012952:	2800      	cmp	r0, #0
 8012954:	dd68      	ble.n	8012a28 <_strtod_l+0x8b8>
 8012956:	9904      	ldr	r1, [sp, #16]
 8012958:	4a54      	ldr	r2, [pc, #336]	; (8012aac <_strtod_l+0x93c>)
 801295a:	464b      	mov	r3, r9
 801295c:	2900      	cmp	r1, #0
 801295e:	f000 8084 	beq.w	8012a6a <_strtod_l+0x8fa>
 8012962:	ea02 0109 	and.w	r1, r2, r9
 8012966:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801296a:	dc7e      	bgt.n	8012a6a <_strtod_l+0x8fa>
 801296c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012970:	f77f aeb3 	ble.w	80126da <_strtod_l+0x56a>
 8012974:	4b4e      	ldr	r3, [pc, #312]	; (8012ab0 <_strtod_l+0x940>)
 8012976:	4640      	mov	r0, r8
 8012978:	4649      	mov	r1, r9
 801297a:	2200      	movs	r2, #0
 801297c:	f7ed fe14 	bl	80005a8 <__aeabi_dmul>
 8012980:	4b4a      	ldr	r3, [pc, #296]	; (8012aac <_strtod_l+0x93c>)
 8012982:	400b      	ands	r3, r1
 8012984:	4680      	mov	r8, r0
 8012986:	4689      	mov	r9, r1
 8012988:	2b00      	cmp	r3, #0
 801298a:	f47f ae3f 	bne.w	801260c <_strtod_l+0x49c>
 801298e:	2322      	movs	r3, #34	; 0x22
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	e63b      	b.n	801260c <_strtod_l+0x49c>
 8012994:	f04f 32ff 	mov.w	r2, #4294967295
 8012998:	fa02 f303 	lsl.w	r3, r2, r3
 801299c:	ea03 0808 	and.w	r8, r3, r8
 80129a0:	e6e8      	b.n	8012774 <_strtod_l+0x604>
 80129a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80129a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80129aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80129ae:	36e2      	adds	r6, #226	; 0xe2
 80129b0:	fa01 f306 	lsl.w	r3, r1, r6
 80129b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80129b8:	e748      	b.n	801284c <_strtod_l+0x6dc>
 80129ba:	2100      	movs	r1, #0
 80129bc:	2301      	movs	r3, #1
 80129be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80129c2:	e743      	b.n	801284c <_strtod_l+0x6dc>
 80129c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80129c6:	4632      	mov	r2, r6
 80129c8:	4620      	mov	r0, r4
 80129ca:	f7ff f961 	bl	8011c90 <__lshift>
 80129ce:	9016      	str	r0, [sp, #88]	; 0x58
 80129d0:	2800      	cmp	r0, #0
 80129d2:	f47f af6b 	bne.w	80128ac <_strtod_l+0x73c>
 80129d6:	e60f      	b.n	80125f8 <_strtod_l+0x488>
 80129d8:	46ca      	mov	sl, r9
 80129da:	d171      	bne.n	8012ac0 <_strtod_l+0x950>
 80129dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80129de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80129e2:	b352      	cbz	r2, 8012a3a <_strtod_l+0x8ca>
 80129e4:	4a33      	ldr	r2, [pc, #204]	; (8012ab4 <_strtod_l+0x944>)
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d12a      	bne.n	8012a40 <_strtod_l+0x8d0>
 80129ea:	9b04      	ldr	r3, [sp, #16]
 80129ec:	4641      	mov	r1, r8
 80129ee:	b1fb      	cbz	r3, 8012a30 <_strtod_l+0x8c0>
 80129f0:	4b2e      	ldr	r3, [pc, #184]	; (8012aac <_strtod_l+0x93c>)
 80129f2:	ea09 0303 	and.w	r3, r9, r3
 80129f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80129fa:	f04f 32ff 	mov.w	r2, #4294967295
 80129fe:	d81a      	bhi.n	8012a36 <_strtod_l+0x8c6>
 8012a00:	0d1b      	lsrs	r3, r3, #20
 8012a02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012a06:	fa02 f303 	lsl.w	r3, r2, r3
 8012a0a:	4299      	cmp	r1, r3
 8012a0c:	d118      	bne.n	8012a40 <_strtod_l+0x8d0>
 8012a0e:	4b2a      	ldr	r3, [pc, #168]	; (8012ab8 <_strtod_l+0x948>)
 8012a10:	459a      	cmp	sl, r3
 8012a12:	d102      	bne.n	8012a1a <_strtod_l+0x8aa>
 8012a14:	3101      	adds	r1, #1
 8012a16:	f43f adef 	beq.w	80125f8 <_strtod_l+0x488>
 8012a1a:	4b24      	ldr	r3, [pc, #144]	; (8012aac <_strtod_l+0x93c>)
 8012a1c:	ea0a 0303 	and.w	r3, sl, r3
 8012a20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012a24:	f04f 0800 	mov.w	r8, #0
 8012a28:	9b04      	ldr	r3, [sp, #16]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d1a2      	bne.n	8012974 <_strtod_l+0x804>
 8012a2e:	e5ed      	b.n	801260c <_strtod_l+0x49c>
 8012a30:	f04f 33ff 	mov.w	r3, #4294967295
 8012a34:	e7e9      	b.n	8012a0a <_strtod_l+0x89a>
 8012a36:	4613      	mov	r3, r2
 8012a38:	e7e7      	b.n	8012a0a <_strtod_l+0x89a>
 8012a3a:	ea53 0308 	orrs.w	r3, r3, r8
 8012a3e:	d08a      	beq.n	8012956 <_strtod_l+0x7e6>
 8012a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a42:	b1e3      	cbz	r3, 8012a7e <_strtod_l+0x90e>
 8012a44:	ea13 0f0a 	tst.w	r3, sl
 8012a48:	d0ee      	beq.n	8012a28 <_strtod_l+0x8b8>
 8012a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a4c:	9a04      	ldr	r2, [sp, #16]
 8012a4e:	4640      	mov	r0, r8
 8012a50:	4649      	mov	r1, r9
 8012a52:	b1c3      	cbz	r3, 8012a86 <_strtod_l+0x916>
 8012a54:	f7ff fb6f 	bl	8012136 <sulp>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	ec51 0b18 	vmov	r0, r1, d8
 8012a60:	f7ed fbec 	bl	800023c <__adddf3>
 8012a64:	4680      	mov	r8, r0
 8012a66:	4689      	mov	r9, r1
 8012a68:	e7de      	b.n	8012a28 <_strtod_l+0x8b8>
 8012a6a:	4013      	ands	r3, r2
 8012a6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012a70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012a74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012a78:	f04f 38ff 	mov.w	r8, #4294967295
 8012a7c:	e7d4      	b.n	8012a28 <_strtod_l+0x8b8>
 8012a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a80:	ea13 0f08 	tst.w	r3, r8
 8012a84:	e7e0      	b.n	8012a48 <_strtod_l+0x8d8>
 8012a86:	f7ff fb56 	bl	8012136 <sulp>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	ec51 0b18 	vmov	r0, r1, d8
 8012a92:	f7ed fbd1 	bl	8000238 <__aeabi_dsub>
 8012a96:	2200      	movs	r2, #0
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4680      	mov	r8, r0
 8012a9c:	4689      	mov	r9, r1
 8012a9e:	f7ed ffeb 	bl	8000a78 <__aeabi_dcmpeq>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d0c0      	beq.n	8012a28 <_strtod_l+0x8b8>
 8012aa6:	e618      	b.n	80126da <_strtod_l+0x56a>
 8012aa8:	fffffc02 	.word	0xfffffc02
 8012aac:	7ff00000 	.word	0x7ff00000
 8012ab0:	39500000 	.word	0x39500000
 8012ab4:	000fffff 	.word	0x000fffff
 8012ab8:	7fefffff 	.word	0x7fefffff
 8012abc:	08016b90 	.word	0x08016b90
 8012ac0:	4659      	mov	r1, fp
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f7ff fac0 	bl	8012048 <__ratio>
 8012ac8:	ec57 6b10 	vmov	r6, r7, d0
 8012acc:	ee10 0a10 	vmov	r0, s0
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012ad6:	4639      	mov	r1, r7
 8012ad8:	f7ed ffe2 	bl	8000aa0 <__aeabi_dcmple>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d071      	beq.n	8012bc4 <_strtod_l+0xa54>
 8012ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d17c      	bne.n	8012be0 <_strtod_l+0xa70>
 8012ae6:	f1b8 0f00 	cmp.w	r8, #0
 8012aea:	d15a      	bne.n	8012ba2 <_strtod_l+0xa32>
 8012aec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d15d      	bne.n	8012bb0 <_strtod_l+0xa40>
 8012af4:	4b90      	ldr	r3, [pc, #576]	; (8012d38 <_strtod_l+0xbc8>)
 8012af6:	2200      	movs	r2, #0
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	f7ed ffc6 	bl	8000a8c <__aeabi_dcmplt>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d15c      	bne.n	8012bbe <_strtod_l+0xa4e>
 8012b04:	4630      	mov	r0, r6
 8012b06:	4639      	mov	r1, r7
 8012b08:	4b8c      	ldr	r3, [pc, #560]	; (8012d3c <_strtod_l+0xbcc>)
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	f7ed fd4c 	bl	80005a8 <__aeabi_dmul>
 8012b10:	4606      	mov	r6, r0
 8012b12:	460f      	mov	r7, r1
 8012b14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012b18:	9606      	str	r6, [sp, #24]
 8012b1a:	9307      	str	r3, [sp, #28]
 8012b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012b24:	4b86      	ldr	r3, [pc, #536]	; (8012d40 <_strtod_l+0xbd0>)
 8012b26:	ea0a 0303 	and.w	r3, sl, r3
 8012b2a:	930d      	str	r3, [sp, #52]	; 0x34
 8012b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b2e:	4b85      	ldr	r3, [pc, #532]	; (8012d44 <_strtod_l+0xbd4>)
 8012b30:	429a      	cmp	r2, r3
 8012b32:	f040 8090 	bne.w	8012c56 <_strtod_l+0xae6>
 8012b36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8012b3a:	ec49 8b10 	vmov	d0, r8, r9
 8012b3e:	f7ff f9b9 	bl	8011eb4 <__ulp>
 8012b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b46:	ec51 0b10 	vmov	r0, r1, d0
 8012b4a:	f7ed fd2d 	bl	80005a8 <__aeabi_dmul>
 8012b4e:	4642      	mov	r2, r8
 8012b50:	464b      	mov	r3, r9
 8012b52:	f7ed fb73 	bl	800023c <__adddf3>
 8012b56:	460b      	mov	r3, r1
 8012b58:	4979      	ldr	r1, [pc, #484]	; (8012d40 <_strtod_l+0xbd0>)
 8012b5a:	4a7b      	ldr	r2, [pc, #492]	; (8012d48 <_strtod_l+0xbd8>)
 8012b5c:	4019      	ands	r1, r3
 8012b5e:	4291      	cmp	r1, r2
 8012b60:	4680      	mov	r8, r0
 8012b62:	d944      	bls.n	8012bee <_strtod_l+0xa7e>
 8012b64:	ee18 2a90 	vmov	r2, s17
 8012b68:	4b78      	ldr	r3, [pc, #480]	; (8012d4c <_strtod_l+0xbdc>)
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d104      	bne.n	8012b78 <_strtod_l+0xa08>
 8012b6e:	ee18 3a10 	vmov	r3, s16
 8012b72:	3301      	adds	r3, #1
 8012b74:	f43f ad40 	beq.w	80125f8 <_strtod_l+0x488>
 8012b78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012d4c <_strtod_l+0xbdc>
 8012b7c:	f04f 38ff 	mov.w	r8, #4294967295
 8012b80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012b82:	4620      	mov	r0, r4
 8012b84:	f7fe fe6a 	bl	801185c <_Bfree>
 8012b88:	9905      	ldr	r1, [sp, #20]
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f7fe fe66 	bl	801185c <_Bfree>
 8012b90:	4659      	mov	r1, fp
 8012b92:	4620      	mov	r0, r4
 8012b94:	f7fe fe62 	bl	801185c <_Bfree>
 8012b98:	4629      	mov	r1, r5
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	f7fe fe5e 	bl	801185c <_Bfree>
 8012ba0:	e609      	b.n	80127b6 <_strtod_l+0x646>
 8012ba2:	f1b8 0f01 	cmp.w	r8, #1
 8012ba6:	d103      	bne.n	8012bb0 <_strtod_l+0xa40>
 8012ba8:	f1b9 0f00 	cmp.w	r9, #0
 8012bac:	f43f ad95 	beq.w	80126da <_strtod_l+0x56a>
 8012bb0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012d08 <_strtod_l+0xb98>
 8012bb4:	4f60      	ldr	r7, [pc, #384]	; (8012d38 <_strtod_l+0xbc8>)
 8012bb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012bba:	2600      	movs	r6, #0
 8012bbc:	e7ae      	b.n	8012b1c <_strtod_l+0x9ac>
 8012bbe:	4f5f      	ldr	r7, [pc, #380]	; (8012d3c <_strtod_l+0xbcc>)
 8012bc0:	2600      	movs	r6, #0
 8012bc2:	e7a7      	b.n	8012b14 <_strtod_l+0x9a4>
 8012bc4:	4b5d      	ldr	r3, [pc, #372]	; (8012d3c <_strtod_l+0xbcc>)
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	4639      	mov	r1, r7
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f7ed fcec 	bl	80005a8 <__aeabi_dmul>
 8012bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bd2:	4606      	mov	r6, r0
 8012bd4:	460f      	mov	r7, r1
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d09c      	beq.n	8012b14 <_strtod_l+0x9a4>
 8012bda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012bde:	e79d      	b.n	8012b1c <_strtod_l+0x9ac>
 8012be0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012d10 <_strtod_l+0xba0>
 8012be4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012be8:	ec57 6b17 	vmov	r6, r7, d7
 8012bec:	e796      	b.n	8012b1c <_strtod_l+0x9ac>
 8012bee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012bf2:	9b04      	ldr	r3, [sp, #16]
 8012bf4:	46ca      	mov	sl, r9
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1c2      	bne.n	8012b80 <_strtod_l+0xa10>
 8012bfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c00:	0d1b      	lsrs	r3, r3, #20
 8012c02:	051b      	lsls	r3, r3, #20
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d1bb      	bne.n	8012b80 <_strtod_l+0xa10>
 8012c08:	4630      	mov	r0, r6
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	f7ee f82c 	bl	8000c68 <__aeabi_d2lz>
 8012c10:	f7ed fc9c 	bl	800054c <__aeabi_l2d>
 8012c14:	4602      	mov	r2, r0
 8012c16:	460b      	mov	r3, r1
 8012c18:	4630      	mov	r0, r6
 8012c1a:	4639      	mov	r1, r7
 8012c1c:	f7ed fb0c 	bl	8000238 <__aeabi_dsub>
 8012c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012c26:	ea43 0308 	orr.w	r3, r3, r8
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	4606      	mov	r6, r0
 8012c2e:	460f      	mov	r7, r1
 8012c30:	d054      	beq.n	8012cdc <_strtod_l+0xb6c>
 8012c32:	a339      	add	r3, pc, #228	; (adr r3, 8012d18 <_strtod_l+0xba8>)
 8012c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c38:	f7ed ff28 	bl	8000a8c <__aeabi_dcmplt>
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	f47f ace5 	bne.w	801260c <_strtod_l+0x49c>
 8012c42:	a337      	add	r3, pc, #220	; (adr r3, 8012d20 <_strtod_l+0xbb0>)
 8012c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c48:	4630      	mov	r0, r6
 8012c4a:	4639      	mov	r1, r7
 8012c4c:	f7ed ff3c 	bl	8000ac8 <__aeabi_dcmpgt>
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d095      	beq.n	8012b80 <_strtod_l+0xa10>
 8012c54:	e4da      	b.n	801260c <_strtod_l+0x49c>
 8012c56:	9b04      	ldr	r3, [sp, #16]
 8012c58:	b333      	cbz	r3, 8012ca8 <_strtod_l+0xb38>
 8012c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012c60:	d822      	bhi.n	8012ca8 <_strtod_l+0xb38>
 8012c62:	a331      	add	r3, pc, #196	; (adr r3, 8012d28 <_strtod_l+0xbb8>)
 8012c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c68:	4630      	mov	r0, r6
 8012c6a:	4639      	mov	r1, r7
 8012c6c:	f7ed ff18 	bl	8000aa0 <__aeabi_dcmple>
 8012c70:	b1a0      	cbz	r0, 8012c9c <_strtod_l+0xb2c>
 8012c72:	4639      	mov	r1, r7
 8012c74:	4630      	mov	r0, r6
 8012c76:	f7ed ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8012c7a:	2801      	cmp	r0, #1
 8012c7c:	bf38      	it	cc
 8012c7e:	2001      	movcc	r0, #1
 8012c80:	f7ed fc18 	bl	80004b4 <__aeabi_ui2d>
 8012c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c86:	4606      	mov	r6, r0
 8012c88:	460f      	mov	r7, r1
 8012c8a:	bb23      	cbnz	r3, 8012cd6 <_strtod_l+0xb66>
 8012c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c90:	9010      	str	r0, [sp, #64]	; 0x40
 8012c92:	9311      	str	r3, [sp, #68]	; 0x44
 8012c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012c98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ca0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012ca4:	1a9b      	subs	r3, r3, r2
 8012ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ca8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012cac:	eeb0 0a48 	vmov.f32	s0, s16
 8012cb0:	eef0 0a68 	vmov.f32	s1, s17
 8012cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012cb8:	f7ff f8fc 	bl	8011eb4 <__ulp>
 8012cbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012cc0:	ec53 2b10 	vmov	r2, r3, d0
 8012cc4:	f7ed fc70 	bl	80005a8 <__aeabi_dmul>
 8012cc8:	ec53 2b18 	vmov	r2, r3, d8
 8012ccc:	f7ed fab6 	bl	800023c <__adddf3>
 8012cd0:	4680      	mov	r8, r0
 8012cd2:	4689      	mov	r9, r1
 8012cd4:	e78d      	b.n	8012bf2 <_strtod_l+0xa82>
 8012cd6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012cda:	e7db      	b.n	8012c94 <_strtod_l+0xb24>
 8012cdc:	a314      	add	r3, pc, #80	; (adr r3, 8012d30 <_strtod_l+0xbc0>)
 8012cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce2:	f7ed fed3 	bl	8000a8c <__aeabi_dcmplt>
 8012ce6:	e7b3      	b.n	8012c50 <_strtod_l+0xae0>
 8012ce8:	2300      	movs	r3, #0
 8012cea:	930a      	str	r3, [sp, #40]	; 0x28
 8012cec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012cee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cf0:	6013      	str	r3, [r2, #0]
 8012cf2:	f7ff ba7c 	b.w	80121ee <_strtod_l+0x7e>
 8012cf6:	2a65      	cmp	r2, #101	; 0x65
 8012cf8:	f43f ab75 	beq.w	80123e6 <_strtod_l+0x276>
 8012cfc:	2a45      	cmp	r2, #69	; 0x45
 8012cfe:	f43f ab72 	beq.w	80123e6 <_strtod_l+0x276>
 8012d02:	2301      	movs	r3, #1
 8012d04:	f7ff bbaa 	b.w	801245c <_strtod_l+0x2ec>
 8012d08:	00000000 	.word	0x00000000
 8012d0c:	bff00000 	.word	0xbff00000
 8012d10:	00000000 	.word	0x00000000
 8012d14:	3ff00000 	.word	0x3ff00000
 8012d18:	94a03595 	.word	0x94a03595
 8012d1c:	3fdfffff 	.word	0x3fdfffff
 8012d20:	35afe535 	.word	0x35afe535
 8012d24:	3fe00000 	.word	0x3fe00000
 8012d28:	ffc00000 	.word	0xffc00000
 8012d2c:	41dfffff 	.word	0x41dfffff
 8012d30:	94a03595 	.word	0x94a03595
 8012d34:	3fcfffff 	.word	0x3fcfffff
 8012d38:	3ff00000 	.word	0x3ff00000
 8012d3c:	3fe00000 	.word	0x3fe00000
 8012d40:	7ff00000 	.word	0x7ff00000
 8012d44:	7fe00000 	.word	0x7fe00000
 8012d48:	7c9fffff 	.word	0x7c9fffff
 8012d4c:	7fefffff 	.word	0x7fefffff

08012d50 <_strtod_r>:
 8012d50:	4b01      	ldr	r3, [pc, #4]	; (8012d58 <_strtod_r+0x8>)
 8012d52:	f7ff ba0d 	b.w	8012170 <_strtod_l>
 8012d56:	bf00      	nop
 8012d58:	200000a8 	.word	0x200000a8

08012d5c <_strtol_l.constprop.0>:
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d62:	d001      	beq.n	8012d68 <_strtol_l.constprop.0+0xc>
 8012d64:	2b24      	cmp	r3, #36	; 0x24
 8012d66:	d906      	bls.n	8012d76 <_strtol_l.constprop.0+0x1a>
 8012d68:	f7fd fd7c 	bl	8010864 <__errno>
 8012d6c:	2316      	movs	r3, #22
 8012d6e:	6003      	str	r3, [r0, #0]
 8012d70:	2000      	movs	r0, #0
 8012d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012e5c <_strtol_l.constprop.0+0x100>
 8012d7a:	460d      	mov	r5, r1
 8012d7c:	462e      	mov	r6, r5
 8012d7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012d82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012d86:	f017 0708 	ands.w	r7, r7, #8
 8012d8a:	d1f7      	bne.n	8012d7c <_strtol_l.constprop.0+0x20>
 8012d8c:	2c2d      	cmp	r4, #45	; 0x2d
 8012d8e:	d132      	bne.n	8012df6 <_strtol_l.constprop.0+0x9a>
 8012d90:	782c      	ldrb	r4, [r5, #0]
 8012d92:	2701      	movs	r7, #1
 8012d94:	1cb5      	adds	r5, r6, #2
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d05b      	beq.n	8012e52 <_strtol_l.constprop.0+0xf6>
 8012d9a:	2b10      	cmp	r3, #16
 8012d9c:	d109      	bne.n	8012db2 <_strtol_l.constprop.0+0x56>
 8012d9e:	2c30      	cmp	r4, #48	; 0x30
 8012da0:	d107      	bne.n	8012db2 <_strtol_l.constprop.0+0x56>
 8012da2:	782c      	ldrb	r4, [r5, #0]
 8012da4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012da8:	2c58      	cmp	r4, #88	; 0x58
 8012daa:	d14d      	bne.n	8012e48 <_strtol_l.constprop.0+0xec>
 8012dac:	786c      	ldrb	r4, [r5, #1]
 8012dae:	2310      	movs	r3, #16
 8012db0:	3502      	adds	r5, #2
 8012db2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012db6:	f108 38ff 	add.w	r8, r8, #4294967295
 8012dba:	f04f 0e00 	mov.w	lr, #0
 8012dbe:	fbb8 f9f3 	udiv	r9, r8, r3
 8012dc2:	4676      	mov	r6, lr
 8012dc4:	fb03 8a19 	mls	sl, r3, r9, r8
 8012dc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012dcc:	f1bc 0f09 	cmp.w	ip, #9
 8012dd0:	d816      	bhi.n	8012e00 <_strtol_l.constprop.0+0xa4>
 8012dd2:	4664      	mov	r4, ip
 8012dd4:	42a3      	cmp	r3, r4
 8012dd6:	dd24      	ble.n	8012e22 <_strtol_l.constprop.0+0xc6>
 8012dd8:	f1be 3fff 	cmp.w	lr, #4294967295
 8012ddc:	d008      	beq.n	8012df0 <_strtol_l.constprop.0+0x94>
 8012dde:	45b1      	cmp	r9, r6
 8012de0:	d31c      	bcc.n	8012e1c <_strtol_l.constprop.0+0xc0>
 8012de2:	d101      	bne.n	8012de8 <_strtol_l.constprop.0+0x8c>
 8012de4:	45a2      	cmp	sl, r4
 8012de6:	db19      	blt.n	8012e1c <_strtol_l.constprop.0+0xc0>
 8012de8:	fb06 4603 	mla	r6, r6, r3, r4
 8012dec:	f04f 0e01 	mov.w	lr, #1
 8012df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012df4:	e7e8      	b.n	8012dc8 <_strtol_l.constprop.0+0x6c>
 8012df6:	2c2b      	cmp	r4, #43	; 0x2b
 8012df8:	bf04      	itt	eq
 8012dfa:	782c      	ldrbeq	r4, [r5, #0]
 8012dfc:	1cb5      	addeq	r5, r6, #2
 8012dfe:	e7ca      	b.n	8012d96 <_strtol_l.constprop.0+0x3a>
 8012e00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012e04:	f1bc 0f19 	cmp.w	ip, #25
 8012e08:	d801      	bhi.n	8012e0e <_strtol_l.constprop.0+0xb2>
 8012e0a:	3c37      	subs	r4, #55	; 0x37
 8012e0c:	e7e2      	b.n	8012dd4 <_strtol_l.constprop.0+0x78>
 8012e0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012e12:	f1bc 0f19 	cmp.w	ip, #25
 8012e16:	d804      	bhi.n	8012e22 <_strtol_l.constprop.0+0xc6>
 8012e18:	3c57      	subs	r4, #87	; 0x57
 8012e1a:	e7db      	b.n	8012dd4 <_strtol_l.constprop.0+0x78>
 8012e1c:	f04f 3eff 	mov.w	lr, #4294967295
 8012e20:	e7e6      	b.n	8012df0 <_strtol_l.constprop.0+0x94>
 8012e22:	f1be 3fff 	cmp.w	lr, #4294967295
 8012e26:	d105      	bne.n	8012e34 <_strtol_l.constprop.0+0xd8>
 8012e28:	2322      	movs	r3, #34	; 0x22
 8012e2a:	6003      	str	r3, [r0, #0]
 8012e2c:	4646      	mov	r6, r8
 8012e2e:	b942      	cbnz	r2, 8012e42 <_strtol_l.constprop.0+0xe6>
 8012e30:	4630      	mov	r0, r6
 8012e32:	e79e      	b.n	8012d72 <_strtol_l.constprop.0+0x16>
 8012e34:	b107      	cbz	r7, 8012e38 <_strtol_l.constprop.0+0xdc>
 8012e36:	4276      	negs	r6, r6
 8012e38:	2a00      	cmp	r2, #0
 8012e3a:	d0f9      	beq.n	8012e30 <_strtol_l.constprop.0+0xd4>
 8012e3c:	f1be 0f00 	cmp.w	lr, #0
 8012e40:	d000      	beq.n	8012e44 <_strtol_l.constprop.0+0xe8>
 8012e42:	1e69      	subs	r1, r5, #1
 8012e44:	6011      	str	r1, [r2, #0]
 8012e46:	e7f3      	b.n	8012e30 <_strtol_l.constprop.0+0xd4>
 8012e48:	2430      	movs	r4, #48	; 0x30
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d1b1      	bne.n	8012db2 <_strtol_l.constprop.0+0x56>
 8012e4e:	2308      	movs	r3, #8
 8012e50:	e7af      	b.n	8012db2 <_strtol_l.constprop.0+0x56>
 8012e52:	2c30      	cmp	r4, #48	; 0x30
 8012e54:	d0a5      	beq.n	8012da2 <_strtol_l.constprop.0+0x46>
 8012e56:	230a      	movs	r3, #10
 8012e58:	e7ab      	b.n	8012db2 <_strtol_l.constprop.0+0x56>
 8012e5a:	bf00      	nop
 8012e5c:	08016bb9 	.word	0x08016bb9

08012e60 <_strtol_r>:
 8012e60:	f7ff bf7c 	b.w	8012d5c <_strtol_l.constprop.0>

08012e64 <__ssputs_r>:
 8012e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e68:	688e      	ldr	r6, [r1, #8]
 8012e6a:	461f      	mov	r7, r3
 8012e6c:	42be      	cmp	r6, r7
 8012e6e:	680b      	ldr	r3, [r1, #0]
 8012e70:	4682      	mov	sl, r0
 8012e72:	460c      	mov	r4, r1
 8012e74:	4690      	mov	r8, r2
 8012e76:	d82c      	bhi.n	8012ed2 <__ssputs_r+0x6e>
 8012e78:	898a      	ldrh	r2, [r1, #12]
 8012e7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e7e:	d026      	beq.n	8012ece <__ssputs_r+0x6a>
 8012e80:	6965      	ldr	r5, [r4, #20]
 8012e82:	6909      	ldr	r1, [r1, #16]
 8012e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e88:	eba3 0901 	sub.w	r9, r3, r1
 8012e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e90:	1c7b      	adds	r3, r7, #1
 8012e92:	444b      	add	r3, r9
 8012e94:	106d      	asrs	r5, r5, #1
 8012e96:	429d      	cmp	r5, r3
 8012e98:	bf38      	it	cc
 8012e9a:	461d      	movcc	r5, r3
 8012e9c:	0553      	lsls	r3, r2, #21
 8012e9e:	d527      	bpl.n	8012ef0 <__ssputs_r+0x8c>
 8012ea0:	4629      	mov	r1, r5
 8012ea2:	f7fe fc0f 	bl	80116c4 <_malloc_r>
 8012ea6:	4606      	mov	r6, r0
 8012ea8:	b360      	cbz	r0, 8012f04 <__ssputs_r+0xa0>
 8012eaa:	6921      	ldr	r1, [r4, #16]
 8012eac:	464a      	mov	r2, r9
 8012eae:	f7fd fd06 	bl	80108be <memcpy>
 8012eb2:	89a3      	ldrh	r3, [r4, #12]
 8012eb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ebc:	81a3      	strh	r3, [r4, #12]
 8012ebe:	6126      	str	r6, [r4, #16]
 8012ec0:	6165      	str	r5, [r4, #20]
 8012ec2:	444e      	add	r6, r9
 8012ec4:	eba5 0509 	sub.w	r5, r5, r9
 8012ec8:	6026      	str	r6, [r4, #0]
 8012eca:	60a5      	str	r5, [r4, #8]
 8012ecc:	463e      	mov	r6, r7
 8012ece:	42be      	cmp	r6, r7
 8012ed0:	d900      	bls.n	8012ed4 <__ssputs_r+0x70>
 8012ed2:	463e      	mov	r6, r7
 8012ed4:	6820      	ldr	r0, [r4, #0]
 8012ed6:	4632      	mov	r2, r6
 8012ed8:	4641      	mov	r1, r8
 8012eda:	f000 fba3 	bl	8013624 <memmove>
 8012ede:	68a3      	ldr	r3, [r4, #8]
 8012ee0:	1b9b      	subs	r3, r3, r6
 8012ee2:	60a3      	str	r3, [r4, #8]
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	4433      	add	r3, r6
 8012ee8:	6023      	str	r3, [r4, #0]
 8012eea:	2000      	movs	r0, #0
 8012eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ef0:	462a      	mov	r2, r5
 8012ef2:	f000 ff9a 	bl	8013e2a <_realloc_r>
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d1e0      	bne.n	8012ebe <__ssputs_r+0x5a>
 8012efc:	6921      	ldr	r1, [r4, #16]
 8012efe:	4650      	mov	r0, sl
 8012f00:	f7fe fb6c 	bl	80115dc <_free_r>
 8012f04:	230c      	movs	r3, #12
 8012f06:	f8ca 3000 	str.w	r3, [sl]
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f10:	81a3      	strh	r3, [r4, #12]
 8012f12:	f04f 30ff 	mov.w	r0, #4294967295
 8012f16:	e7e9      	b.n	8012eec <__ssputs_r+0x88>

08012f18 <_svfiprintf_r>:
 8012f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	4698      	mov	r8, r3
 8012f1e:	898b      	ldrh	r3, [r1, #12]
 8012f20:	061b      	lsls	r3, r3, #24
 8012f22:	b09d      	sub	sp, #116	; 0x74
 8012f24:	4607      	mov	r7, r0
 8012f26:	460d      	mov	r5, r1
 8012f28:	4614      	mov	r4, r2
 8012f2a:	d50e      	bpl.n	8012f4a <_svfiprintf_r+0x32>
 8012f2c:	690b      	ldr	r3, [r1, #16]
 8012f2e:	b963      	cbnz	r3, 8012f4a <_svfiprintf_r+0x32>
 8012f30:	2140      	movs	r1, #64	; 0x40
 8012f32:	f7fe fbc7 	bl	80116c4 <_malloc_r>
 8012f36:	6028      	str	r0, [r5, #0]
 8012f38:	6128      	str	r0, [r5, #16]
 8012f3a:	b920      	cbnz	r0, 8012f46 <_svfiprintf_r+0x2e>
 8012f3c:	230c      	movs	r3, #12
 8012f3e:	603b      	str	r3, [r7, #0]
 8012f40:	f04f 30ff 	mov.w	r0, #4294967295
 8012f44:	e0d0      	b.n	80130e8 <_svfiprintf_r+0x1d0>
 8012f46:	2340      	movs	r3, #64	; 0x40
 8012f48:	616b      	str	r3, [r5, #20]
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f4e:	2320      	movs	r3, #32
 8012f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f58:	2330      	movs	r3, #48	; 0x30
 8012f5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013100 <_svfiprintf_r+0x1e8>
 8012f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f62:	f04f 0901 	mov.w	r9, #1
 8012f66:	4623      	mov	r3, r4
 8012f68:	469a      	mov	sl, r3
 8012f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f6e:	b10a      	cbz	r2, 8012f74 <_svfiprintf_r+0x5c>
 8012f70:	2a25      	cmp	r2, #37	; 0x25
 8012f72:	d1f9      	bne.n	8012f68 <_svfiprintf_r+0x50>
 8012f74:	ebba 0b04 	subs.w	fp, sl, r4
 8012f78:	d00b      	beq.n	8012f92 <_svfiprintf_r+0x7a>
 8012f7a:	465b      	mov	r3, fp
 8012f7c:	4622      	mov	r2, r4
 8012f7e:	4629      	mov	r1, r5
 8012f80:	4638      	mov	r0, r7
 8012f82:	f7ff ff6f 	bl	8012e64 <__ssputs_r>
 8012f86:	3001      	adds	r0, #1
 8012f88:	f000 80a9 	beq.w	80130de <_svfiprintf_r+0x1c6>
 8012f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f8e:	445a      	add	r2, fp
 8012f90:	9209      	str	r2, [sp, #36]	; 0x24
 8012f92:	f89a 3000 	ldrb.w	r3, [sl]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	f000 80a1 	beq.w	80130de <_svfiprintf_r+0x1c6>
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012fa6:	f10a 0a01 	add.w	sl, sl, #1
 8012faa:	9304      	str	r3, [sp, #16]
 8012fac:	9307      	str	r3, [sp, #28]
 8012fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8012fb4:	4654      	mov	r4, sl
 8012fb6:	2205      	movs	r2, #5
 8012fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fbc:	4850      	ldr	r0, [pc, #320]	; (8013100 <_svfiprintf_r+0x1e8>)
 8012fbe:	f7ed f8df 	bl	8000180 <memchr>
 8012fc2:	9a04      	ldr	r2, [sp, #16]
 8012fc4:	b9d8      	cbnz	r0, 8012ffe <_svfiprintf_r+0xe6>
 8012fc6:	06d0      	lsls	r0, r2, #27
 8012fc8:	bf44      	itt	mi
 8012fca:	2320      	movmi	r3, #32
 8012fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fd0:	0711      	lsls	r1, r2, #28
 8012fd2:	bf44      	itt	mi
 8012fd4:	232b      	movmi	r3, #43	; 0x2b
 8012fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fda:	f89a 3000 	ldrb.w	r3, [sl]
 8012fde:	2b2a      	cmp	r3, #42	; 0x2a
 8012fe0:	d015      	beq.n	801300e <_svfiprintf_r+0xf6>
 8012fe2:	9a07      	ldr	r2, [sp, #28]
 8012fe4:	4654      	mov	r4, sl
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	f04f 0c0a 	mov.w	ip, #10
 8012fec:	4621      	mov	r1, r4
 8012fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ff2:	3b30      	subs	r3, #48	; 0x30
 8012ff4:	2b09      	cmp	r3, #9
 8012ff6:	d94d      	bls.n	8013094 <_svfiprintf_r+0x17c>
 8012ff8:	b1b0      	cbz	r0, 8013028 <_svfiprintf_r+0x110>
 8012ffa:	9207      	str	r2, [sp, #28]
 8012ffc:	e014      	b.n	8013028 <_svfiprintf_r+0x110>
 8012ffe:	eba0 0308 	sub.w	r3, r0, r8
 8013002:	fa09 f303 	lsl.w	r3, r9, r3
 8013006:	4313      	orrs	r3, r2
 8013008:	9304      	str	r3, [sp, #16]
 801300a:	46a2      	mov	sl, r4
 801300c:	e7d2      	b.n	8012fb4 <_svfiprintf_r+0x9c>
 801300e:	9b03      	ldr	r3, [sp, #12]
 8013010:	1d19      	adds	r1, r3, #4
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	9103      	str	r1, [sp, #12]
 8013016:	2b00      	cmp	r3, #0
 8013018:	bfbb      	ittet	lt
 801301a:	425b      	neglt	r3, r3
 801301c:	f042 0202 	orrlt.w	r2, r2, #2
 8013020:	9307      	strge	r3, [sp, #28]
 8013022:	9307      	strlt	r3, [sp, #28]
 8013024:	bfb8      	it	lt
 8013026:	9204      	strlt	r2, [sp, #16]
 8013028:	7823      	ldrb	r3, [r4, #0]
 801302a:	2b2e      	cmp	r3, #46	; 0x2e
 801302c:	d10c      	bne.n	8013048 <_svfiprintf_r+0x130>
 801302e:	7863      	ldrb	r3, [r4, #1]
 8013030:	2b2a      	cmp	r3, #42	; 0x2a
 8013032:	d134      	bne.n	801309e <_svfiprintf_r+0x186>
 8013034:	9b03      	ldr	r3, [sp, #12]
 8013036:	1d1a      	adds	r2, r3, #4
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	9203      	str	r2, [sp, #12]
 801303c:	2b00      	cmp	r3, #0
 801303e:	bfb8      	it	lt
 8013040:	f04f 33ff 	movlt.w	r3, #4294967295
 8013044:	3402      	adds	r4, #2
 8013046:	9305      	str	r3, [sp, #20]
 8013048:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013110 <_svfiprintf_r+0x1f8>
 801304c:	7821      	ldrb	r1, [r4, #0]
 801304e:	2203      	movs	r2, #3
 8013050:	4650      	mov	r0, sl
 8013052:	f7ed f895 	bl	8000180 <memchr>
 8013056:	b138      	cbz	r0, 8013068 <_svfiprintf_r+0x150>
 8013058:	9b04      	ldr	r3, [sp, #16]
 801305a:	eba0 000a 	sub.w	r0, r0, sl
 801305e:	2240      	movs	r2, #64	; 0x40
 8013060:	4082      	lsls	r2, r0
 8013062:	4313      	orrs	r3, r2
 8013064:	3401      	adds	r4, #1
 8013066:	9304      	str	r3, [sp, #16]
 8013068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801306c:	4825      	ldr	r0, [pc, #148]	; (8013104 <_svfiprintf_r+0x1ec>)
 801306e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013072:	2206      	movs	r2, #6
 8013074:	f7ed f884 	bl	8000180 <memchr>
 8013078:	2800      	cmp	r0, #0
 801307a:	d038      	beq.n	80130ee <_svfiprintf_r+0x1d6>
 801307c:	4b22      	ldr	r3, [pc, #136]	; (8013108 <_svfiprintf_r+0x1f0>)
 801307e:	bb1b      	cbnz	r3, 80130c8 <_svfiprintf_r+0x1b0>
 8013080:	9b03      	ldr	r3, [sp, #12]
 8013082:	3307      	adds	r3, #7
 8013084:	f023 0307 	bic.w	r3, r3, #7
 8013088:	3308      	adds	r3, #8
 801308a:	9303      	str	r3, [sp, #12]
 801308c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801308e:	4433      	add	r3, r6
 8013090:	9309      	str	r3, [sp, #36]	; 0x24
 8013092:	e768      	b.n	8012f66 <_svfiprintf_r+0x4e>
 8013094:	fb0c 3202 	mla	r2, ip, r2, r3
 8013098:	460c      	mov	r4, r1
 801309a:	2001      	movs	r0, #1
 801309c:	e7a6      	b.n	8012fec <_svfiprintf_r+0xd4>
 801309e:	2300      	movs	r3, #0
 80130a0:	3401      	adds	r4, #1
 80130a2:	9305      	str	r3, [sp, #20]
 80130a4:	4619      	mov	r1, r3
 80130a6:	f04f 0c0a 	mov.w	ip, #10
 80130aa:	4620      	mov	r0, r4
 80130ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130b0:	3a30      	subs	r2, #48	; 0x30
 80130b2:	2a09      	cmp	r2, #9
 80130b4:	d903      	bls.n	80130be <_svfiprintf_r+0x1a6>
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d0c6      	beq.n	8013048 <_svfiprintf_r+0x130>
 80130ba:	9105      	str	r1, [sp, #20]
 80130bc:	e7c4      	b.n	8013048 <_svfiprintf_r+0x130>
 80130be:	fb0c 2101 	mla	r1, ip, r1, r2
 80130c2:	4604      	mov	r4, r0
 80130c4:	2301      	movs	r3, #1
 80130c6:	e7f0      	b.n	80130aa <_svfiprintf_r+0x192>
 80130c8:	ab03      	add	r3, sp, #12
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	462a      	mov	r2, r5
 80130ce:	4b0f      	ldr	r3, [pc, #60]	; (801310c <_svfiprintf_r+0x1f4>)
 80130d0:	a904      	add	r1, sp, #16
 80130d2:	4638      	mov	r0, r7
 80130d4:	f7fc fb6e 	bl	800f7b4 <_printf_float>
 80130d8:	1c42      	adds	r2, r0, #1
 80130da:	4606      	mov	r6, r0
 80130dc:	d1d6      	bne.n	801308c <_svfiprintf_r+0x174>
 80130de:	89ab      	ldrh	r3, [r5, #12]
 80130e0:	065b      	lsls	r3, r3, #25
 80130e2:	f53f af2d 	bmi.w	8012f40 <_svfiprintf_r+0x28>
 80130e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130e8:	b01d      	add	sp, #116	; 0x74
 80130ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ee:	ab03      	add	r3, sp, #12
 80130f0:	9300      	str	r3, [sp, #0]
 80130f2:	462a      	mov	r2, r5
 80130f4:	4b05      	ldr	r3, [pc, #20]	; (801310c <_svfiprintf_r+0x1f4>)
 80130f6:	a904      	add	r1, sp, #16
 80130f8:	4638      	mov	r0, r7
 80130fa:	f7fc fdff 	bl	800fcfc <_printf_i>
 80130fe:	e7eb      	b.n	80130d8 <_svfiprintf_r+0x1c0>
 8013100:	08016cb9 	.word	0x08016cb9
 8013104:	08016cc3 	.word	0x08016cc3
 8013108:	0800f7b5 	.word	0x0800f7b5
 801310c:	08012e65 	.word	0x08012e65
 8013110:	08016cbf 	.word	0x08016cbf

08013114 <__sfputc_r>:
 8013114:	6893      	ldr	r3, [r2, #8]
 8013116:	3b01      	subs	r3, #1
 8013118:	2b00      	cmp	r3, #0
 801311a:	b410      	push	{r4}
 801311c:	6093      	str	r3, [r2, #8]
 801311e:	da08      	bge.n	8013132 <__sfputc_r+0x1e>
 8013120:	6994      	ldr	r4, [r2, #24]
 8013122:	42a3      	cmp	r3, r4
 8013124:	db01      	blt.n	801312a <__sfputc_r+0x16>
 8013126:	290a      	cmp	r1, #10
 8013128:	d103      	bne.n	8013132 <__sfputc_r+0x1e>
 801312a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801312e:	f7fd bab2 	b.w	8010696 <__swbuf_r>
 8013132:	6813      	ldr	r3, [r2, #0]
 8013134:	1c58      	adds	r0, r3, #1
 8013136:	6010      	str	r0, [r2, #0]
 8013138:	7019      	strb	r1, [r3, #0]
 801313a:	4608      	mov	r0, r1
 801313c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013140:	4770      	bx	lr

08013142 <__sfputs_r>:
 8013142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013144:	4606      	mov	r6, r0
 8013146:	460f      	mov	r7, r1
 8013148:	4614      	mov	r4, r2
 801314a:	18d5      	adds	r5, r2, r3
 801314c:	42ac      	cmp	r4, r5
 801314e:	d101      	bne.n	8013154 <__sfputs_r+0x12>
 8013150:	2000      	movs	r0, #0
 8013152:	e007      	b.n	8013164 <__sfputs_r+0x22>
 8013154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013158:	463a      	mov	r2, r7
 801315a:	4630      	mov	r0, r6
 801315c:	f7ff ffda 	bl	8013114 <__sfputc_r>
 8013160:	1c43      	adds	r3, r0, #1
 8013162:	d1f3      	bne.n	801314c <__sfputs_r+0xa>
 8013164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013168 <_vfiprintf_r>:
 8013168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316c:	460d      	mov	r5, r1
 801316e:	b09d      	sub	sp, #116	; 0x74
 8013170:	4614      	mov	r4, r2
 8013172:	4698      	mov	r8, r3
 8013174:	4606      	mov	r6, r0
 8013176:	b118      	cbz	r0, 8013180 <_vfiprintf_r+0x18>
 8013178:	6a03      	ldr	r3, [r0, #32]
 801317a:	b90b      	cbnz	r3, 8013180 <_vfiprintf_r+0x18>
 801317c:	f7fd f97c 	bl	8010478 <__sinit>
 8013180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013182:	07d9      	lsls	r1, r3, #31
 8013184:	d405      	bmi.n	8013192 <_vfiprintf_r+0x2a>
 8013186:	89ab      	ldrh	r3, [r5, #12]
 8013188:	059a      	lsls	r2, r3, #22
 801318a:	d402      	bmi.n	8013192 <_vfiprintf_r+0x2a>
 801318c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801318e:	f7fd fb94 	bl	80108ba <__retarget_lock_acquire_recursive>
 8013192:	89ab      	ldrh	r3, [r5, #12]
 8013194:	071b      	lsls	r3, r3, #28
 8013196:	d501      	bpl.n	801319c <_vfiprintf_r+0x34>
 8013198:	692b      	ldr	r3, [r5, #16]
 801319a:	b99b      	cbnz	r3, 80131c4 <_vfiprintf_r+0x5c>
 801319c:	4629      	mov	r1, r5
 801319e:	4630      	mov	r0, r6
 80131a0:	f7fd fab6 	bl	8010710 <__swsetup_r>
 80131a4:	b170      	cbz	r0, 80131c4 <_vfiprintf_r+0x5c>
 80131a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131a8:	07dc      	lsls	r4, r3, #31
 80131aa:	d504      	bpl.n	80131b6 <_vfiprintf_r+0x4e>
 80131ac:	f04f 30ff 	mov.w	r0, #4294967295
 80131b0:	b01d      	add	sp, #116	; 0x74
 80131b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b6:	89ab      	ldrh	r3, [r5, #12]
 80131b8:	0598      	lsls	r0, r3, #22
 80131ba:	d4f7      	bmi.n	80131ac <_vfiprintf_r+0x44>
 80131bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131be:	f7fd fb7d 	bl	80108bc <__retarget_lock_release_recursive>
 80131c2:	e7f3      	b.n	80131ac <_vfiprintf_r+0x44>
 80131c4:	2300      	movs	r3, #0
 80131c6:	9309      	str	r3, [sp, #36]	; 0x24
 80131c8:	2320      	movs	r3, #32
 80131ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80131d2:	2330      	movs	r3, #48	; 0x30
 80131d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013388 <_vfiprintf_r+0x220>
 80131d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131dc:	f04f 0901 	mov.w	r9, #1
 80131e0:	4623      	mov	r3, r4
 80131e2:	469a      	mov	sl, r3
 80131e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131e8:	b10a      	cbz	r2, 80131ee <_vfiprintf_r+0x86>
 80131ea:	2a25      	cmp	r2, #37	; 0x25
 80131ec:	d1f9      	bne.n	80131e2 <_vfiprintf_r+0x7a>
 80131ee:	ebba 0b04 	subs.w	fp, sl, r4
 80131f2:	d00b      	beq.n	801320c <_vfiprintf_r+0xa4>
 80131f4:	465b      	mov	r3, fp
 80131f6:	4622      	mov	r2, r4
 80131f8:	4629      	mov	r1, r5
 80131fa:	4630      	mov	r0, r6
 80131fc:	f7ff ffa1 	bl	8013142 <__sfputs_r>
 8013200:	3001      	adds	r0, #1
 8013202:	f000 80a9 	beq.w	8013358 <_vfiprintf_r+0x1f0>
 8013206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013208:	445a      	add	r2, fp
 801320a:	9209      	str	r2, [sp, #36]	; 0x24
 801320c:	f89a 3000 	ldrb.w	r3, [sl]
 8013210:	2b00      	cmp	r3, #0
 8013212:	f000 80a1 	beq.w	8013358 <_vfiprintf_r+0x1f0>
 8013216:	2300      	movs	r3, #0
 8013218:	f04f 32ff 	mov.w	r2, #4294967295
 801321c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013220:	f10a 0a01 	add.w	sl, sl, #1
 8013224:	9304      	str	r3, [sp, #16]
 8013226:	9307      	str	r3, [sp, #28]
 8013228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801322c:	931a      	str	r3, [sp, #104]	; 0x68
 801322e:	4654      	mov	r4, sl
 8013230:	2205      	movs	r2, #5
 8013232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013236:	4854      	ldr	r0, [pc, #336]	; (8013388 <_vfiprintf_r+0x220>)
 8013238:	f7ec ffa2 	bl	8000180 <memchr>
 801323c:	9a04      	ldr	r2, [sp, #16]
 801323e:	b9d8      	cbnz	r0, 8013278 <_vfiprintf_r+0x110>
 8013240:	06d1      	lsls	r1, r2, #27
 8013242:	bf44      	itt	mi
 8013244:	2320      	movmi	r3, #32
 8013246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801324a:	0713      	lsls	r3, r2, #28
 801324c:	bf44      	itt	mi
 801324e:	232b      	movmi	r3, #43	; 0x2b
 8013250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013254:	f89a 3000 	ldrb.w	r3, [sl]
 8013258:	2b2a      	cmp	r3, #42	; 0x2a
 801325a:	d015      	beq.n	8013288 <_vfiprintf_r+0x120>
 801325c:	9a07      	ldr	r2, [sp, #28]
 801325e:	4654      	mov	r4, sl
 8013260:	2000      	movs	r0, #0
 8013262:	f04f 0c0a 	mov.w	ip, #10
 8013266:	4621      	mov	r1, r4
 8013268:	f811 3b01 	ldrb.w	r3, [r1], #1
 801326c:	3b30      	subs	r3, #48	; 0x30
 801326e:	2b09      	cmp	r3, #9
 8013270:	d94d      	bls.n	801330e <_vfiprintf_r+0x1a6>
 8013272:	b1b0      	cbz	r0, 80132a2 <_vfiprintf_r+0x13a>
 8013274:	9207      	str	r2, [sp, #28]
 8013276:	e014      	b.n	80132a2 <_vfiprintf_r+0x13a>
 8013278:	eba0 0308 	sub.w	r3, r0, r8
 801327c:	fa09 f303 	lsl.w	r3, r9, r3
 8013280:	4313      	orrs	r3, r2
 8013282:	9304      	str	r3, [sp, #16]
 8013284:	46a2      	mov	sl, r4
 8013286:	e7d2      	b.n	801322e <_vfiprintf_r+0xc6>
 8013288:	9b03      	ldr	r3, [sp, #12]
 801328a:	1d19      	adds	r1, r3, #4
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	9103      	str	r1, [sp, #12]
 8013290:	2b00      	cmp	r3, #0
 8013292:	bfbb      	ittet	lt
 8013294:	425b      	neglt	r3, r3
 8013296:	f042 0202 	orrlt.w	r2, r2, #2
 801329a:	9307      	strge	r3, [sp, #28]
 801329c:	9307      	strlt	r3, [sp, #28]
 801329e:	bfb8      	it	lt
 80132a0:	9204      	strlt	r2, [sp, #16]
 80132a2:	7823      	ldrb	r3, [r4, #0]
 80132a4:	2b2e      	cmp	r3, #46	; 0x2e
 80132a6:	d10c      	bne.n	80132c2 <_vfiprintf_r+0x15a>
 80132a8:	7863      	ldrb	r3, [r4, #1]
 80132aa:	2b2a      	cmp	r3, #42	; 0x2a
 80132ac:	d134      	bne.n	8013318 <_vfiprintf_r+0x1b0>
 80132ae:	9b03      	ldr	r3, [sp, #12]
 80132b0:	1d1a      	adds	r2, r3, #4
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	9203      	str	r2, [sp, #12]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	bfb8      	it	lt
 80132ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80132be:	3402      	adds	r4, #2
 80132c0:	9305      	str	r3, [sp, #20]
 80132c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013398 <_vfiprintf_r+0x230>
 80132c6:	7821      	ldrb	r1, [r4, #0]
 80132c8:	2203      	movs	r2, #3
 80132ca:	4650      	mov	r0, sl
 80132cc:	f7ec ff58 	bl	8000180 <memchr>
 80132d0:	b138      	cbz	r0, 80132e2 <_vfiprintf_r+0x17a>
 80132d2:	9b04      	ldr	r3, [sp, #16]
 80132d4:	eba0 000a 	sub.w	r0, r0, sl
 80132d8:	2240      	movs	r2, #64	; 0x40
 80132da:	4082      	lsls	r2, r0
 80132dc:	4313      	orrs	r3, r2
 80132de:	3401      	adds	r4, #1
 80132e0:	9304      	str	r3, [sp, #16]
 80132e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132e6:	4829      	ldr	r0, [pc, #164]	; (801338c <_vfiprintf_r+0x224>)
 80132e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132ec:	2206      	movs	r2, #6
 80132ee:	f7ec ff47 	bl	8000180 <memchr>
 80132f2:	2800      	cmp	r0, #0
 80132f4:	d03f      	beq.n	8013376 <_vfiprintf_r+0x20e>
 80132f6:	4b26      	ldr	r3, [pc, #152]	; (8013390 <_vfiprintf_r+0x228>)
 80132f8:	bb1b      	cbnz	r3, 8013342 <_vfiprintf_r+0x1da>
 80132fa:	9b03      	ldr	r3, [sp, #12]
 80132fc:	3307      	adds	r3, #7
 80132fe:	f023 0307 	bic.w	r3, r3, #7
 8013302:	3308      	adds	r3, #8
 8013304:	9303      	str	r3, [sp, #12]
 8013306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013308:	443b      	add	r3, r7
 801330a:	9309      	str	r3, [sp, #36]	; 0x24
 801330c:	e768      	b.n	80131e0 <_vfiprintf_r+0x78>
 801330e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013312:	460c      	mov	r4, r1
 8013314:	2001      	movs	r0, #1
 8013316:	e7a6      	b.n	8013266 <_vfiprintf_r+0xfe>
 8013318:	2300      	movs	r3, #0
 801331a:	3401      	adds	r4, #1
 801331c:	9305      	str	r3, [sp, #20]
 801331e:	4619      	mov	r1, r3
 8013320:	f04f 0c0a 	mov.w	ip, #10
 8013324:	4620      	mov	r0, r4
 8013326:	f810 2b01 	ldrb.w	r2, [r0], #1
 801332a:	3a30      	subs	r2, #48	; 0x30
 801332c:	2a09      	cmp	r2, #9
 801332e:	d903      	bls.n	8013338 <_vfiprintf_r+0x1d0>
 8013330:	2b00      	cmp	r3, #0
 8013332:	d0c6      	beq.n	80132c2 <_vfiprintf_r+0x15a>
 8013334:	9105      	str	r1, [sp, #20]
 8013336:	e7c4      	b.n	80132c2 <_vfiprintf_r+0x15a>
 8013338:	fb0c 2101 	mla	r1, ip, r1, r2
 801333c:	4604      	mov	r4, r0
 801333e:	2301      	movs	r3, #1
 8013340:	e7f0      	b.n	8013324 <_vfiprintf_r+0x1bc>
 8013342:	ab03      	add	r3, sp, #12
 8013344:	9300      	str	r3, [sp, #0]
 8013346:	462a      	mov	r2, r5
 8013348:	4b12      	ldr	r3, [pc, #72]	; (8013394 <_vfiprintf_r+0x22c>)
 801334a:	a904      	add	r1, sp, #16
 801334c:	4630      	mov	r0, r6
 801334e:	f7fc fa31 	bl	800f7b4 <_printf_float>
 8013352:	4607      	mov	r7, r0
 8013354:	1c78      	adds	r0, r7, #1
 8013356:	d1d6      	bne.n	8013306 <_vfiprintf_r+0x19e>
 8013358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801335a:	07d9      	lsls	r1, r3, #31
 801335c:	d405      	bmi.n	801336a <_vfiprintf_r+0x202>
 801335e:	89ab      	ldrh	r3, [r5, #12]
 8013360:	059a      	lsls	r2, r3, #22
 8013362:	d402      	bmi.n	801336a <_vfiprintf_r+0x202>
 8013364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013366:	f7fd faa9 	bl	80108bc <__retarget_lock_release_recursive>
 801336a:	89ab      	ldrh	r3, [r5, #12]
 801336c:	065b      	lsls	r3, r3, #25
 801336e:	f53f af1d 	bmi.w	80131ac <_vfiprintf_r+0x44>
 8013372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013374:	e71c      	b.n	80131b0 <_vfiprintf_r+0x48>
 8013376:	ab03      	add	r3, sp, #12
 8013378:	9300      	str	r3, [sp, #0]
 801337a:	462a      	mov	r2, r5
 801337c:	4b05      	ldr	r3, [pc, #20]	; (8013394 <_vfiprintf_r+0x22c>)
 801337e:	a904      	add	r1, sp, #16
 8013380:	4630      	mov	r0, r6
 8013382:	f7fc fcbb 	bl	800fcfc <_printf_i>
 8013386:	e7e4      	b.n	8013352 <_vfiprintf_r+0x1ea>
 8013388:	08016cb9 	.word	0x08016cb9
 801338c:	08016cc3 	.word	0x08016cc3
 8013390:	0800f7b5 	.word	0x0800f7b5
 8013394:	08013143 	.word	0x08013143
 8013398:	08016cbf 	.word	0x08016cbf

0801339c <__sflush_r>:
 801339c:	898a      	ldrh	r2, [r1, #12]
 801339e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a2:	4605      	mov	r5, r0
 80133a4:	0710      	lsls	r0, r2, #28
 80133a6:	460c      	mov	r4, r1
 80133a8:	d458      	bmi.n	801345c <__sflush_r+0xc0>
 80133aa:	684b      	ldr	r3, [r1, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	dc05      	bgt.n	80133bc <__sflush_r+0x20>
 80133b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	dc02      	bgt.n	80133bc <__sflush_r+0x20>
 80133b6:	2000      	movs	r0, #0
 80133b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80133be:	2e00      	cmp	r6, #0
 80133c0:	d0f9      	beq.n	80133b6 <__sflush_r+0x1a>
 80133c2:	2300      	movs	r3, #0
 80133c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80133c8:	682f      	ldr	r7, [r5, #0]
 80133ca:	6a21      	ldr	r1, [r4, #32]
 80133cc:	602b      	str	r3, [r5, #0]
 80133ce:	d032      	beq.n	8013436 <__sflush_r+0x9a>
 80133d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80133d2:	89a3      	ldrh	r3, [r4, #12]
 80133d4:	075a      	lsls	r2, r3, #29
 80133d6:	d505      	bpl.n	80133e4 <__sflush_r+0x48>
 80133d8:	6863      	ldr	r3, [r4, #4]
 80133da:	1ac0      	subs	r0, r0, r3
 80133dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80133de:	b10b      	cbz	r3, 80133e4 <__sflush_r+0x48>
 80133e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80133e2:	1ac0      	subs	r0, r0, r3
 80133e4:	2300      	movs	r3, #0
 80133e6:	4602      	mov	r2, r0
 80133e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80133ea:	6a21      	ldr	r1, [r4, #32]
 80133ec:	4628      	mov	r0, r5
 80133ee:	47b0      	blx	r6
 80133f0:	1c43      	adds	r3, r0, #1
 80133f2:	89a3      	ldrh	r3, [r4, #12]
 80133f4:	d106      	bne.n	8013404 <__sflush_r+0x68>
 80133f6:	6829      	ldr	r1, [r5, #0]
 80133f8:	291d      	cmp	r1, #29
 80133fa:	d82b      	bhi.n	8013454 <__sflush_r+0xb8>
 80133fc:	4a29      	ldr	r2, [pc, #164]	; (80134a4 <__sflush_r+0x108>)
 80133fe:	410a      	asrs	r2, r1
 8013400:	07d6      	lsls	r6, r2, #31
 8013402:	d427      	bmi.n	8013454 <__sflush_r+0xb8>
 8013404:	2200      	movs	r2, #0
 8013406:	6062      	str	r2, [r4, #4]
 8013408:	04d9      	lsls	r1, r3, #19
 801340a:	6922      	ldr	r2, [r4, #16]
 801340c:	6022      	str	r2, [r4, #0]
 801340e:	d504      	bpl.n	801341a <__sflush_r+0x7e>
 8013410:	1c42      	adds	r2, r0, #1
 8013412:	d101      	bne.n	8013418 <__sflush_r+0x7c>
 8013414:	682b      	ldr	r3, [r5, #0]
 8013416:	b903      	cbnz	r3, 801341a <__sflush_r+0x7e>
 8013418:	6560      	str	r0, [r4, #84]	; 0x54
 801341a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801341c:	602f      	str	r7, [r5, #0]
 801341e:	2900      	cmp	r1, #0
 8013420:	d0c9      	beq.n	80133b6 <__sflush_r+0x1a>
 8013422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013426:	4299      	cmp	r1, r3
 8013428:	d002      	beq.n	8013430 <__sflush_r+0x94>
 801342a:	4628      	mov	r0, r5
 801342c:	f7fe f8d6 	bl	80115dc <_free_r>
 8013430:	2000      	movs	r0, #0
 8013432:	6360      	str	r0, [r4, #52]	; 0x34
 8013434:	e7c0      	b.n	80133b8 <__sflush_r+0x1c>
 8013436:	2301      	movs	r3, #1
 8013438:	4628      	mov	r0, r5
 801343a:	47b0      	blx	r6
 801343c:	1c41      	adds	r1, r0, #1
 801343e:	d1c8      	bne.n	80133d2 <__sflush_r+0x36>
 8013440:	682b      	ldr	r3, [r5, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d0c5      	beq.n	80133d2 <__sflush_r+0x36>
 8013446:	2b1d      	cmp	r3, #29
 8013448:	d001      	beq.n	801344e <__sflush_r+0xb2>
 801344a:	2b16      	cmp	r3, #22
 801344c:	d101      	bne.n	8013452 <__sflush_r+0xb6>
 801344e:	602f      	str	r7, [r5, #0]
 8013450:	e7b1      	b.n	80133b6 <__sflush_r+0x1a>
 8013452:	89a3      	ldrh	r3, [r4, #12]
 8013454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013458:	81a3      	strh	r3, [r4, #12]
 801345a:	e7ad      	b.n	80133b8 <__sflush_r+0x1c>
 801345c:	690f      	ldr	r7, [r1, #16]
 801345e:	2f00      	cmp	r7, #0
 8013460:	d0a9      	beq.n	80133b6 <__sflush_r+0x1a>
 8013462:	0793      	lsls	r3, r2, #30
 8013464:	680e      	ldr	r6, [r1, #0]
 8013466:	bf08      	it	eq
 8013468:	694b      	ldreq	r3, [r1, #20]
 801346a:	600f      	str	r7, [r1, #0]
 801346c:	bf18      	it	ne
 801346e:	2300      	movne	r3, #0
 8013470:	eba6 0807 	sub.w	r8, r6, r7
 8013474:	608b      	str	r3, [r1, #8]
 8013476:	f1b8 0f00 	cmp.w	r8, #0
 801347a:	dd9c      	ble.n	80133b6 <__sflush_r+0x1a>
 801347c:	6a21      	ldr	r1, [r4, #32]
 801347e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013480:	4643      	mov	r3, r8
 8013482:	463a      	mov	r2, r7
 8013484:	4628      	mov	r0, r5
 8013486:	47b0      	blx	r6
 8013488:	2800      	cmp	r0, #0
 801348a:	dc06      	bgt.n	801349a <__sflush_r+0xfe>
 801348c:	89a3      	ldrh	r3, [r4, #12]
 801348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013492:	81a3      	strh	r3, [r4, #12]
 8013494:	f04f 30ff 	mov.w	r0, #4294967295
 8013498:	e78e      	b.n	80133b8 <__sflush_r+0x1c>
 801349a:	4407      	add	r7, r0
 801349c:	eba8 0800 	sub.w	r8, r8, r0
 80134a0:	e7e9      	b.n	8013476 <__sflush_r+0xda>
 80134a2:	bf00      	nop
 80134a4:	dfbffffe 	.word	0xdfbffffe

080134a8 <_fflush_r>:
 80134a8:	b538      	push	{r3, r4, r5, lr}
 80134aa:	690b      	ldr	r3, [r1, #16]
 80134ac:	4605      	mov	r5, r0
 80134ae:	460c      	mov	r4, r1
 80134b0:	b913      	cbnz	r3, 80134b8 <_fflush_r+0x10>
 80134b2:	2500      	movs	r5, #0
 80134b4:	4628      	mov	r0, r5
 80134b6:	bd38      	pop	{r3, r4, r5, pc}
 80134b8:	b118      	cbz	r0, 80134c2 <_fflush_r+0x1a>
 80134ba:	6a03      	ldr	r3, [r0, #32]
 80134bc:	b90b      	cbnz	r3, 80134c2 <_fflush_r+0x1a>
 80134be:	f7fc ffdb 	bl	8010478 <__sinit>
 80134c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d0f3      	beq.n	80134b2 <_fflush_r+0xa>
 80134ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80134cc:	07d0      	lsls	r0, r2, #31
 80134ce:	d404      	bmi.n	80134da <_fflush_r+0x32>
 80134d0:	0599      	lsls	r1, r3, #22
 80134d2:	d402      	bmi.n	80134da <_fflush_r+0x32>
 80134d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134d6:	f7fd f9f0 	bl	80108ba <__retarget_lock_acquire_recursive>
 80134da:	4628      	mov	r0, r5
 80134dc:	4621      	mov	r1, r4
 80134de:	f7ff ff5d 	bl	801339c <__sflush_r>
 80134e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134e4:	07da      	lsls	r2, r3, #31
 80134e6:	4605      	mov	r5, r0
 80134e8:	d4e4      	bmi.n	80134b4 <_fflush_r+0xc>
 80134ea:	89a3      	ldrh	r3, [r4, #12]
 80134ec:	059b      	lsls	r3, r3, #22
 80134ee:	d4e1      	bmi.n	80134b4 <_fflush_r+0xc>
 80134f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134f2:	f7fd f9e3 	bl	80108bc <__retarget_lock_release_recursive>
 80134f6:	e7dd      	b.n	80134b4 <_fflush_r+0xc>

080134f8 <__swhatbuf_r>:
 80134f8:	b570      	push	{r4, r5, r6, lr}
 80134fa:	460c      	mov	r4, r1
 80134fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013500:	2900      	cmp	r1, #0
 8013502:	b096      	sub	sp, #88	; 0x58
 8013504:	4615      	mov	r5, r2
 8013506:	461e      	mov	r6, r3
 8013508:	da0d      	bge.n	8013526 <__swhatbuf_r+0x2e>
 801350a:	89a3      	ldrh	r3, [r4, #12]
 801350c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013510:	f04f 0100 	mov.w	r1, #0
 8013514:	bf0c      	ite	eq
 8013516:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801351a:	2340      	movne	r3, #64	; 0x40
 801351c:	2000      	movs	r0, #0
 801351e:	6031      	str	r1, [r6, #0]
 8013520:	602b      	str	r3, [r5, #0]
 8013522:	b016      	add	sp, #88	; 0x58
 8013524:	bd70      	pop	{r4, r5, r6, pc}
 8013526:	466a      	mov	r2, sp
 8013528:	f000 f8a8 	bl	801367c <_fstat_r>
 801352c:	2800      	cmp	r0, #0
 801352e:	dbec      	blt.n	801350a <__swhatbuf_r+0x12>
 8013530:	9901      	ldr	r1, [sp, #4]
 8013532:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013536:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801353a:	4259      	negs	r1, r3
 801353c:	4159      	adcs	r1, r3
 801353e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013542:	e7eb      	b.n	801351c <__swhatbuf_r+0x24>

08013544 <__smakebuf_r>:
 8013544:	898b      	ldrh	r3, [r1, #12]
 8013546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013548:	079d      	lsls	r5, r3, #30
 801354a:	4606      	mov	r6, r0
 801354c:	460c      	mov	r4, r1
 801354e:	d507      	bpl.n	8013560 <__smakebuf_r+0x1c>
 8013550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013554:	6023      	str	r3, [r4, #0]
 8013556:	6123      	str	r3, [r4, #16]
 8013558:	2301      	movs	r3, #1
 801355a:	6163      	str	r3, [r4, #20]
 801355c:	b002      	add	sp, #8
 801355e:	bd70      	pop	{r4, r5, r6, pc}
 8013560:	ab01      	add	r3, sp, #4
 8013562:	466a      	mov	r2, sp
 8013564:	f7ff ffc8 	bl	80134f8 <__swhatbuf_r>
 8013568:	9900      	ldr	r1, [sp, #0]
 801356a:	4605      	mov	r5, r0
 801356c:	4630      	mov	r0, r6
 801356e:	f7fe f8a9 	bl	80116c4 <_malloc_r>
 8013572:	b948      	cbnz	r0, 8013588 <__smakebuf_r+0x44>
 8013574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013578:	059a      	lsls	r2, r3, #22
 801357a:	d4ef      	bmi.n	801355c <__smakebuf_r+0x18>
 801357c:	f023 0303 	bic.w	r3, r3, #3
 8013580:	f043 0302 	orr.w	r3, r3, #2
 8013584:	81a3      	strh	r3, [r4, #12]
 8013586:	e7e3      	b.n	8013550 <__smakebuf_r+0xc>
 8013588:	89a3      	ldrh	r3, [r4, #12]
 801358a:	6020      	str	r0, [r4, #0]
 801358c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013590:	81a3      	strh	r3, [r4, #12]
 8013592:	9b00      	ldr	r3, [sp, #0]
 8013594:	6163      	str	r3, [r4, #20]
 8013596:	9b01      	ldr	r3, [sp, #4]
 8013598:	6120      	str	r0, [r4, #16]
 801359a:	b15b      	cbz	r3, 80135b4 <__smakebuf_r+0x70>
 801359c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135a0:	4630      	mov	r0, r6
 80135a2:	f000 f87d 	bl	80136a0 <_isatty_r>
 80135a6:	b128      	cbz	r0, 80135b4 <__smakebuf_r+0x70>
 80135a8:	89a3      	ldrh	r3, [r4, #12]
 80135aa:	f023 0303 	bic.w	r3, r3, #3
 80135ae:	f043 0301 	orr.w	r3, r3, #1
 80135b2:	81a3      	strh	r3, [r4, #12]
 80135b4:	89a3      	ldrh	r3, [r4, #12]
 80135b6:	431d      	orrs	r5, r3
 80135b8:	81a5      	strh	r5, [r4, #12]
 80135ba:	e7cf      	b.n	801355c <__smakebuf_r+0x18>

080135bc <_putc_r>:
 80135bc:	b570      	push	{r4, r5, r6, lr}
 80135be:	460d      	mov	r5, r1
 80135c0:	4614      	mov	r4, r2
 80135c2:	4606      	mov	r6, r0
 80135c4:	b118      	cbz	r0, 80135ce <_putc_r+0x12>
 80135c6:	6a03      	ldr	r3, [r0, #32]
 80135c8:	b90b      	cbnz	r3, 80135ce <_putc_r+0x12>
 80135ca:	f7fc ff55 	bl	8010478 <__sinit>
 80135ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135d0:	07d8      	lsls	r0, r3, #31
 80135d2:	d405      	bmi.n	80135e0 <_putc_r+0x24>
 80135d4:	89a3      	ldrh	r3, [r4, #12]
 80135d6:	0599      	lsls	r1, r3, #22
 80135d8:	d402      	bmi.n	80135e0 <_putc_r+0x24>
 80135da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135dc:	f7fd f96d 	bl	80108ba <__retarget_lock_acquire_recursive>
 80135e0:	68a3      	ldr	r3, [r4, #8]
 80135e2:	3b01      	subs	r3, #1
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	60a3      	str	r3, [r4, #8]
 80135e8:	da05      	bge.n	80135f6 <_putc_r+0x3a>
 80135ea:	69a2      	ldr	r2, [r4, #24]
 80135ec:	4293      	cmp	r3, r2
 80135ee:	db12      	blt.n	8013616 <_putc_r+0x5a>
 80135f0:	b2eb      	uxtb	r3, r5
 80135f2:	2b0a      	cmp	r3, #10
 80135f4:	d00f      	beq.n	8013616 <_putc_r+0x5a>
 80135f6:	6823      	ldr	r3, [r4, #0]
 80135f8:	1c5a      	adds	r2, r3, #1
 80135fa:	6022      	str	r2, [r4, #0]
 80135fc:	701d      	strb	r5, [r3, #0]
 80135fe:	b2ed      	uxtb	r5, r5
 8013600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013602:	07da      	lsls	r2, r3, #31
 8013604:	d405      	bmi.n	8013612 <_putc_r+0x56>
 8013606:	89a3      	ldrh	r3, [r4, #12]
 8013608:	059b      	lsls	r3, r3, #22
 801360a:	d402      	bmi.n	8013612 <_putc_r+0x56>
 801360c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801360e:	f7fd f955 	bl	80108bc <__retarget_lock_release_recursive>
 8013612:	4628      	mov	r0, r5
 8013614:	bd70      	pop	{r4, r5, r6, pc}
 8013616:	4629      	mov	r1, r5
 8013618:	4622      	mov	r2, r4
 801361a:	4630      	mov	r0, r6
 801361c:	f7fd f83b 	bl	8010696 <__swbuf_r>
 8013620:	4605      	mov	r5, r0
 8013622:	e7ed      	b.n	8013600 <_putc_r+0x44>

08013624 <memmove>:
 8013624:	4288      	cmp	r0, r1
 8013626:	b510      	push	{r4, lr}
 8013628:	eb01 0402 	add.w	r4, r1, r2
 801362c:	d902      	bls.n	8013634 <memmove+0x10>
 801362e:	4284      	cmp	r4, r0
 8013630:	4623      	mov	r3, r4
 8013632:	d807      	bhi.n	8013644 <memmove+0x20>
 8013634:	1e43      	subs	r3, r0, #1
 8013636:	42a1      	cmp	r1, r4
 8013638:	d008      	beq.n	801364c <memmove+0x28>
 801363a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801363e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013642:	e7f8      	b.n	8013636 <memmove+0x12>
 8013644:	4402      	add	r2, r0
 8013646:	4601      	mov	r1, r0
 8013648:	428a      	cmp	r2, r1
 801364a:	d100      	bne.n	801364e <memmove+0x2a>
 801364c:	bd10      	pop	{r4, pc}
 801364e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013656:	e7f7      	b.n	8013648 <memmove+0x24>

08013658 <strncmp>:
 8013658:	b510      	push	{r4, lr}
 801365a:	b16a      	cbz	r2, 8013678 <strncmp+0x20>
 801365c:	3901      	subs	r1, #1
 801365e:	1884      	adds	r4, r0, r2
 8013660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013664:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013668:	429a      	cmp	r2, r3
 801366a:	d103      	bne.n	8013674 <strncmp+0x1c>
 801366c:	42a0      	cmp	r0, r4
 801366e:	d001      	beq.n	8013674 <strncmp+0x1c>
 8013670:	2a00      	cmp	r2, #0
 8013672:	d1f5      	bne.n	8013660 <strncmp+0x8>
 8013674:	1ad0      	subs	r0, r2, r3
 8013676:	bd10      	pop	{r4, pc}
 8013678:	4610      	mov	r0, r2
 801367a:	e7fc      	b.n	8013676 <strncmp+0x1e>

0801367c <_fstat_r>:
 801367c:	b538      	push	{r3, r4, r5, lr}
 801367e:	4d07      	ldr	r5, [pc, #28]	; (801369c <_fstat_r+0x20>)
 8013680:	2300      	movs	r3, #0
 8013682:	4604      	mov	r4, r0
 8013684:	4608      	mov	r0, r1
 8013686:	4611      	mov	r1, r2
 8013688:	602b      	str	r3, [r5, #0]
 801368a:	f7f0 f8df 	bl	800384c <_fstat>
 801368e:	1c43      	adds	r3, r0, #1
 8013690:	d102      	bne.n	8013698 <_fstat_r+0x1c>
 8013692:	682b      	ldr	r3, [r5, #0]
 8013694:	b103      	cbz	r3, 8013698 <_fstat_r+0x1c>
 8013696:	6023      	str	r3, [r4, #0]
 8013698:	bd38      	pop	{r3, r4, r5, pc}
 801369a:	bf00      	nop
 801369c:	20001a68 	.word	0x20001a68

080136a0 <_isatty_r>:
 80136a0:	b538      	push	{r3, r4, r5, lr}
 80136a2:	4d06      	ldr	r5, [pc, #24]	; (80136bc <_isatty_r+0x1c>)
 80136a4:	2300      	movs	r3, #0
 80136a6:	4604      	mov	r4, r0
 80136a8:	4608      	mov	r0, r1
 80136aa:	602b      	str	r3, [r5, #0]
 80136ac:	f7f0 f8de 	bl	800386c <_isatty>
 80136b0:	1c43      	adds	r3, r0, #1
 80136b2:	d102      	bne.n	80136ba <_isatty_r+0x1a>
 80136b4:	682b      	ldr	r3, [r5, #0]
 80136b6:	b103      	cbz	r3, 80136ba <_isatty_r+0x1a>
 80136b8:	6023      	str	r3, [r4, #0]
 80136ba:	bd38      	pop	{r3, r4, r5, pc}
 80136bc:	20001a68 	.word	0x20001a68

080136c0 <_sbrk_r>:
 80136c0:	b538      	push	{r3, r4, r5, lr}
 80136c2:	4d06      	ldr	r5, [pc, #24]	; (80136dc <_sbrk_r+0x1c>)
 80136c4:	2300      	movs	r3, #0
 80136c6:	4604      	mov	r4, r0
 80136c8:	4608      	mov	r0, r1
 80136ca:	602b      	str	r3, [r5, #0]
 80136cc:	f7f0 f8e6 	bl	800389c <_sbrk>
 80136d0:	1c43      	adds	r3, r0, #1
 80136d2:	d102      	bne.n	80136da <_sbrk_r+0x1a>
 80136d4:	682b      	ldr	r3, [r5, #0]
 80136d6:	b103      	cbz	r3, 80136da <_sbrk_r+0x1a>
 80136d8:	6023      	str	r3, [r4, #0]
 80136da:	bd38      	pop	{r3, r4, r5, pc}
 80136dc:	20001a68 	.word	0x20001a68

080136e0 <nan>:
 80136e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80136e8 <nan+0x8>
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop
 80136e8:	00000000 	.word	0x00000000
 80136ec:	7ff80000 	.word	0x7ff80000

080136f0 <__assert_func>:
 80136f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136f2:	4614      	mov	r4, r2
 80136f4:	461a      	mov	r2, r3
 80136f6:	4b09      	ldr	r3, [pc, #36]	; (801371c <__assert_func+0x2c>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4605      	mov	r5, r0
 80136fc:	68d8      	ldr	r0, [r3, #12]
 80136fe:	b14c      	cbz	r4, 8013714 <__assert_func+0x24>
 8013700:	4b07      	ldr	r3, [pc, #28]	; (8013720 <__assert_func+0x30>)
 8013702:	9100      	str	r1, [sp, #0]
 8013704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013708:	4906      	ldr	r1, [pc, #24]	; (8013724 <__assert_func+0x34>)
 801370a:	462b      	mov	r3, r5
 801370c:	f000 fbca 	bl	8013ea4 <fiprintf>
 8013710:	f000 fbda 	bl	8013ec8 <abort>
 8013714:	4b04      	ldr	r3, [pc, #16]	; (8013728 <__assert_func+0x38>)
 8013716:	461c      	mov	r4, r3
 8013718:	e7f3      	b.n	8013702 <__assert_func+0x12>
 801371a:	bf00      	nop
 801371c:	200000a4 	.word	0x200000a4
 8013720:	08016cd2 	.word	0x08016cd2
 8013724:	08016cdf 	.word	0x08016cdf
 8013728:	08016d0d 	.word	0x08016d0d

0801372c <_calloc_r>:
 801372c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801372e:	fba1 2402 	umull	r2, r4, r1, r2
 8013732:	b94c      	cbnz	r4, 8013748 <_calloc_r+0x1c>
 8013734:	4611      	mov	r1, r2
 8013736:	9201      	str	r2, [sp, #4]
 8013738:	f7fd ffc4 	bl	80116c4 <_malloc_r>
 801373c:	9a01      	ldr	r2, [sp, #4]
 801373e:	4605      	mov	r5, r0
 8013740:	b930      	cbnz	r0, 8013750 <_calloc_r+0x24>
 8013742:	4628      	mov	r0, r5
 8013744:	b003      	add	sp, #12
 8013746:	bd30      	pop	{r4, r5, pc}
 8013748:	220c      	movs	r2, #12
 801374a:	6002      	str	r2, [r0, #0]
 801374c:	2500      	movs	r5, #0
 801374e:	e7f8      	b.n	8013742 <_calloc_r+0x16>
 8013750:	4621      	mov	r1, r4
 8013752:	f7fd f835 	bl	80107c0 <memset>
 8013756:	e7f4      	b.n	8013742 <_calloc_r+0x16>

08013758 <rshift>:
 8013758:	6903      	ldr	r3, [r0, #16]
 801375a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801375e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013762:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013766:	f100 0414 	add.w	r4, r0, #20
 801376a:	dd45      	ble.n	80137f8 <rshift+0xa0>
 801376c:	f011 011f 	ands.w	r1, r1, #31
 8013770:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013774:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013778:	d10c      	bne.n	8013794 <rshift+0x3c>
 801377a:	f100 0710 	add.w	r7, r0, #16
 801377e:	4629      	mov	r1, r5
 8013780:	42b1      	cmp	r1, r6
 8013782:	d334      	bcc.n	80137ee <rshift+0x96>
 8013784:	1a9b      	subs	r3, r3, r2
 8013786:	009b      	lsls	r3, r3, #2
 8013788:	1eea      	subs	r2, r5, #3
 801378a:	4296      	cmp	r6, r2
 801378c:	bf38      	it	cc
 801378e:	2300      	movcc	r3, #0
 8013790:	4423      	add	r3, r4
 8013792:	e015      	b.n	80137c0 <rshift+0x68>
 8013794:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013798:	f1c1 0820 	rsb	r8, r1, #32
 801379c:	40cf      	lsrs	r7, r1
 801379e:	f105 0e04 	add.w	lr, r5, #4
 80137a2:	46a1      	mov	r9, r4
 80137a4:	4576      	cmp	r6, lr
 80137a6:	46f4      	mov	ip, lr
 80137a8:	d815      	bhi.n	80137d6 <rshift+0x7e>
 80137aa:	1a9a      	subs	r2, r3, r2
 80137ac:	0092      	lsls	r2, r2, #2
 80137ae:	3a04      	subs	r2, #4
 80137b0:	3501      	adds	r5, #1
 80137b2:	42ae      	cmp	r6, r5
 80137b4:	bf38      	it	cc
 80137b6:	2200      	movcc	r2, #0
 80137b8:	18a3      	adds	r3, r4, r2
 80137ba:	50a7      	str	r7, [r4, r2]
 80137bc:	b107      	cbz	r7, 80137c0 <rshift+0x68>
 80137be:	3304      	adds	r3, #4
 80137c0:	1b1a      	subs	r2, r3, r4
 80137c2:	42a3      	cmp	r3, r4
 80137c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80137c8:	bf08      	it	eq
 80137ca:	2300      	moveq	r3, #0
 80137cc:	6102      	str	r2, [r0, #16]
 80137ce:	bf08      	it	eq
 80137d0:	6143      	streq	r3, [r0, #20]
 80137d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137d6:	f8dc c000 	ldr.w	ip, [ip]
 80137da:	fa0c fc08 	lsl.w	ip, ip, r8
 80137de:	ea4c 0707 	orr.w	r7, ip, r7
 80137e2:	f849 7b04 	str.w	r7, [r9], #4
 80137e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80137ea:	40cf      	lsrs	r7, r1
 80137ec:	e7da      	b.n	80137a4 <rshift+0x4c>
 80137ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80137f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80137f6:	e7c3      	b.n	8013780 <rshift+0x28>
 80137f8:	4623      	mov	r3, r4
 80137fa:	e7e1      	b.n	80137c0 <rshift+0x68>

080137fc <__hexdig_fun>:
 80137fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013800:	2b09      	cmp	r3, #9
 8013802:	d802      	bhi.n	801380a <__hexdig_fun+0xe>
 8013804:	3820      	subs	r0, #32
 8013806:	b2c0      	uxtb	r0, r0
 8013808:	4770      	bx	lr
 801380a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801380e:	2b05      	cmp	r3, #5
 8013810:	d801      	bhi.n	8013816 <__hexdig_fun+0x1a>
 8013812:	3847      	subs	r0, #71	; 0x47
 8013814:	e7f7      	b.n	8013806 <__hexdig_fun+0xa>
 8013816:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801381a:	2b05      	cmp	r3, #5
 801381c:	d801      	bhi.n	8013822 <__hexdig_fun+0x26>
 801381e:	3827      	subs	r0, #39	; 0x27
 8013820:	e7f1      	b.n	8013806 <__hexdig_fun+0xa>
 8013822:	2000      	movs	r0, #0
 8013824:	4770      	bx	lr
	...

08013828 <__gethex>:
 8013828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382c:	4617      	mov	r7, r2
 801382e:	680a      	ldr	r2, [r1, #0]
 8013830:	b085      	sub	sp, #20
 8013832:	f102 0b02 	add.w	fp, r2, #2
 8013836:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801383a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801383e:	4681      	mov	r9, r0
 8013840:	468a      	mov	sl, r1
 8013842:	9302      	str	r3, [sp, #8]
 8013844:	32fe      	adds	r2, #254	; 0xfe
 8013846:	eb02 030b 	add.w	r3, r2, fp
 801384a:	46d8      	mov	r8, fp
 801384c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013850:	9301      	str	r3, [sp, #4]
 8013852:	2830      	cmp	r0, #48	; 0x30
 8013854:	d0f7      	beq.n	8013846 <__gethex+0x1e>
 8013856:	f7ff ffd1 	bl	80137fc <__hexdig_fun>
 801385a:	4604      	mov	r4, r0
 801385c:	2800      	cmp	r0, #0
 801385e:	d138      	bne.n	80138d2 <__gethex+0xaa>
 8013860:	49a7      	ldr	r1, [pc, #668]	; (8013b00 <__gethex+0x2d8>)
 8013862:	2201      	movs	r2, #1
 8013864:	4640      	mov	r0, r8
 8013866:	f7ff fef7 	bl	8013658 <strncmp>
 801386a:	4606      	mov	r6, r0
 801386c:	2800      	cmp	r0, #0
 801386e:	d169      	bne.n	8013944 <__gethex+0x11c>
 8013870:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013874:	465d      	mov	r5, fp
 8013876:	f7ff ffc1 	bl	80137fc <__hexdig_fun>
 801387a:	2800      	cmp	r0, #0
 801387c:	d064      	beq.n	8013948 <__gethex+0x120>
 801387e:	465a      	mov	r2, fp
 8013880:	7810      	ldrb	r0, [r2, #0]
 8013882:	2830      	cmp	r0, #48	; 0x30
 8013884:	4690      	mov	r8, r2
 8013886:	f102 0201 	add.w	r2, r2, #1
 801388a:	d0f9      	beq.n	8013880 <__gethex+0x58>
 801388c:	f7ff ffb6 	bl	80137fc <__hexdig_fun>
 8013890:	2301      	movs	r3, #1
 8013892:	fab0 f480 	clz	r4, r0
 8013896:	0964      	lsrs	r4, r4, #5
 8013898:	465e      	mov	r6, fp
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	4642      	mov	r2, r8
 801389e:	4615      	mov	r5, r2
 80138a0:	3201      	adds	r2, #1
 80138a2:	7828      	ldrb	r0, [r5, #0]
 80138a4:	f7ff ffaa 	bl	80137fc <__hexdig_fun>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	d1f8      	bne.n	801389e <__gethex+0x76>
 80138ac:	4994      	ldr	r1, [pc, #592]	; (8013b00 <__gethex+0x2d8>)
 80138ae:	2201      	movs	r2, #1
 80138b0:	4628      	mov	r0, r5
 80138b2:	f7ff fed1 	bl	8013658 <strncmp>
 80138b6:	b978      	cbnz	r0, 80138d8 <__gethex+0xb0>
 80138b8:	b946      	cbnz	r6, 80138cc <__gethex+0xa4>
 80138ba:	1c6e      	adds	r6, r5, #1
 80138bc:	4632      	mov	r2, r6
 80138be:	4615      	mov	r5, r2
 80138c0:	3201      	adds	r2, #1
 80138c2:	7828      	ldrb	r0, [r5, #0]
 80138c4:	f7ff ff9a 	bl	80137fc <__hexdig_fun>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d1f8      	bne.n	80138be <__gethex+0x96>
 80138cc:	1b73      	subs	r3, r6, r5
 80138ce:	009e      	lsls	r6, r3, #2
 80138d0:	e004      	b.n	80138dc <__gethex+0xb4>
 80138d2:	2400      	movs	r4, #0
 80138d4:	4626      	mov	r6, r4
 80138d6:	e7e1      	b.n	801389c <__gethex+0x74>
 80138d8:	2e00      	cmp	r6, #0
 80138da:	d1f7      	bne.n	80138cc <__gethex+0xa4>
 80138dc:	782b      	ldrb	r3, [r5, #0]
 80138de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80138e2:	2b50      	cmp	r3, #80	; 0x50
 80138e4:	d13d      	bne.n	8013962 <__gethex+0x13a>
 80138e6:	786b      	ldrb	r3, [r5, #1]
 80138e8:	2b2b      	cmp	r3, #43	; 0x2b
 80138ea:	d02f      	beq.n	801394c <__gethex+0x124>
 80138ec:	2b2d      	cmp	r3, #45	; 0x2d
 80138ee:	d031      	beq.n	8013954 <__gethex+0x12c>
 80138f0:	1c69      	adds	r1, r5, #1
 80138f2:	f04f 0b00 	mov.w	fp, #0
 80138f6:	7808      	ldrb	r0, [r1, #0]
 80138f8:	f7ff ff80 	bl	80137fc <__hexdig_fun>
 80138fc:	1e42      	subs	r2, r0, #1
 80138fe:	b2d2      	uxtb	r2, r2
 8013900:	2a18      	cmp	r2, #24
 8013902:	d82e      	bhi.n	8013962 <__gethex+0x13a>
 8013904:	f1a0 0210 	sub.w	r2, r0, #16
 8013908:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801390c:	f7ff ff76 	bl	80137fc <__hexdig_fun>
 8013910:	f100 3cff 	add.w	ip, r0, #4294967295
 8013914:	fa5f fc8c 	uxtb.w	ip, ip
 8013918:	f1bc 0f18 	cmp.w	ip, #24
 801391c:	d91d      	bls.n	801395a <__gethex+0x132>
 801391e:	f1bb 0f00 	cmp.w	fp, #0
 8013922:	d000      	beq.n	8013926 <__gethex+0xfe>
 8013924:	4252      	negs	r2, r2
 8013926:	4416      	add	r6, r2
 8013928:	f8ca 1000 	str.w	r1, [sl]
 801392c:	b1dc      	cbz	r4, 8013966 <__gethex+0x13e>
 801392e:	9b01      	ldr	r3, [sp, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	bf14      	ite	ne
 8013934:	f04f 0800 	movne.w	r8, #0
 8013938:	f04f 0806 	moveq.w	r8, #6
 801393c:	4640      	mov	r0, r8
 801393e:	b005      	add	sp, #20
 8013940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013944:	4645      	mov	r5, r8
 8013946:	4626      	mov	r6, r4
 8013948:	2401      	movs	r4, #1
 801394a:	e7c7      	b.n	80138dc <__gethex+0xb4>
 801394c:	f04f 0b00 	mov.w	fp, #0
 8013950:	1ca9      	adds	r1, r5, #2
 8013952:	e7d0      	b.n	80138f6 <__gethex+0xce>
 8013954:	f04f 0b01 	mov.w	fp, #1
 8013958:	e7fa      	b.n	8013950 <__gethex+0x128>
 801395a:	230a      	movs	r3, #10
 801395c:	fb03 0002 	mla	r0, r3, r2, r0
 8013960:	e7d0      	b.n	8013904 <__gethex+0xdc>
 8013962:	4629      	mov	r1, r5
 8013964:	e7e0      	b.n	8013928 <__gethex+0x100>
 8013966:	eba5 0308 	sub.w	r3, r5, r8
 801396a:	3b01      	subs	r3, #1
 801396c:	4621      	mov	r1, r4
 801396e:	2b07      	cmp	r3, #7
 8013970:	dc0a      	bgt.n	8013988 <__gethex+0x160>
 8013972:	4648      	mov	r0, r9
 8013974:	f7fd ff32 	bl	80117dc <_Balloc>
 8013978:	4604      	mov	r4, r0
 801397a:	b940      	cbnz	r0, 801398e <__gethex+0x166>
 801397c:	4b61      	ldr	r3, [pc, #388]	; (8013b04 <__gethex+0x2dc>)
 801397e:	4602      	mov	r2, r0
 8013980:	21e4      	movs	r1, #228	; 0xe4
 8013982:	4861      	ldr	r0, [pc, #388]	; (8013b08 <__gethex+0x2e0>)
 8013984:	f7ff feb4 	bl	80136f0 <__assert_func>
 8013988:	3101      	adds	r1, #1
 801398a:	105b      	asrs	r3, r3, #1
 801398c:	e7ef      	b.n	801396e <__gethex+0x146>
 801398e:	f100 0a14 	add.w	sl, r0, #20
 8013992:	2300      	movs	r3, #0
 8013994:	495a      	ldr	r1, [pc, #360]	; (8013b00 <__gethex+0x2d8>)
 8013996:	f8cd a004 	str.w	sl, [sp, #4]
 801399a:	469b      	mov	fp, r3
 801399c:	45a8      	cmp	r8, r5
 801399e:	d342      	bcc.n	8013a26 <__gethex+0x1fe>
 80139a0:	9801      	ldr	r0, [sp, #4]
 80139a2:	f840 bb04 	str.w	fp, [r0], #4
 80139a6:	eba0 000a 	sub.w	r0, r0, sl
 80139aa:	1080      	asrs	r0, r0, #2
 80139ac:	6120      	str	r0, [r4, #16]
 80139ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80139b2:	4658      	mov	r0, fp
 80139b4:	f7fe f804 	bl	80119c0 <__hi0bits>
 80139b8:	683d      	ldr	r5, [r7, #0]
 80139ba:	eba8 0000 	sub.w	r0, r8, r0
 80139be:	42a8      	cmp	r0, r5
 80139c0:	dd59      	ble.n	8013a76 <__gethex+0x24e>
 80139c2:	eba0 0805 	sub.w	r8, r0, r5
 80139c6:	4641      	mov	r1, r8
 80139c8:	4620      	mov	r0, r4
 80139ca:	f7fe fb93 	bl	80120f4 <__any_on>
 80139ce:	4683      	mov	fp, r0
 80139d0:	b1b8      	cbz	r0, 8013a02 <__gethex+0x1da>
 80139d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80139d6:	1159      	asrs	r1, r3, #5
 80139d8:	f003 021f 	and.w	r2, r3, #31
 80139dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80139e0:	f04f 0b01 	mov.w	fp, #1
 80139e4:	fa0b f202 	lsl.w	r2, fp, r2
 80139e8:	420a      	tst	r2, r1
 80139ea:	d00a      	beq.n	8013a02 <__gethex+0x1da>
 80139ec:	455b      	cmp	r3, fp
 80139ee:	dd06      	ble.n	80139fe <__gethex+0x1d6>
 80139f0:	f1a8 0102 	sub.w	r1, r8, #2
 80139f4:	4620      	mov	r0, r4
 80139f6:	f7fe fb7d 	bl	80120f4 <__any_on>
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d138      	bne.n	8013a70 <__gethex+0x248>
 80139fe:	f04f 0b02 	mov.w	fp, #2
 8013a02:	4641      	mov	r1, r8
 8013a04:	4620      	mov	r0, r4
 8013a06:	f7ff fea7 	bl	8013758 <rshift>
 8013a0a:	4446      	add	r6, r8
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	42b3      	cmp	r3, r6
 8013a10:	da41      	bge.n	8013a96 <__gethex+0x26e>
 8013a12:	4621      	mov	r1, r4
 8013a14:	4648      	mov	r0, r9
 8013a16:	f7fd ff21 	bl	801185c <_Bfree>
 8013a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	6013      	str	r3, [r2, #0]
 8013a20:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013a24:	e78a      	b.n	801393c <__gethex+0x114>
 8013a26:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013a2a:	2a2e      	cmp	r2, #46	; 0x2e
 8013a2c:	d014      	beq.n	8013a58 <__gethex+0x230>
 8013a2e:	2b20      	cmp	r3, #32
 8013a30:	d106      	bne.n	8013a40 <__gethex+0x218>
 8013a32:	9b01      	ldr	r3, [sp, #4]
 8013a34:	f843 bb04 	str.w	fp, [r3], #4
 8013a38:	f04f 0b00 	mov.w	fp, #0
 8013a3c:	9301      	str	r3, [sp, #4]
 8013a3e:	465b      	mov	r3, fp
 8013a40:	7828      	ldrb	r0, [r5, #0]
 8013a42:	9303      	str	r3, [sp, #12]
 8013a44:	f7ff feda 	bl	80137fc <__hexdig_fun>
 8013a48:	9b03      	ldr	r3, [sp, #12]
 8013a4a:	f000 000f 	and.w	r0, r0, #15
 8013a4e:	4098      	lsls	r0, r3
 8013a50:	ea4b 0b00 	orr.w	fp, fp, r0
 8013a54:	3304      	adds	r3, #4
 8013a56:	e7a1      	b.n	801399c <__gethex+0x174>
 8013a58:	45a8      	cmp	r8, r5
 8013a5a:	d8e8      	bhi.n	8013a2e <__gethex+0x206>
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	4628      	mov	r0, r5
 8013a60:	9303      	str	r3, [sp, #12]
 8013a62:	f7ff fdf9 	bl	8013658 <strncmp>
 8013a66:	4926      	ldr	r1, [pc, #152]	; (8013b00 <__gethex+0x2d8>)
 8013a68:	9b03      	ldr	r3, [sp, #12]
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d1df      	bne.n	8013a2e <__gethex+0x206>
 8013a6e:	e795      	b.n	801399c <__gethex+0x174>
 8013a70:	f04f 0b03 	mov.w	fp, #3
 8013a74:	e7c5      	b.n	8013a02 <__gethex+0x1da>
 8013a76:	da0b      	bge.n	8013a90 <__gethex+0x268>
 8013a78:	eba5 0800 	sub.w	r8, r5, r0
 8013a7c:	4621      	mov	r1, r4
 8013a7e:	4642      	mov	r2, r8
 8013a80:	4648      	mov	r0, r9
 8013a82:	f7fe f905 	bl	8011c90 <__lshift>
 8013a86:	eba6 0608 	sub.w	r6, r6, r8
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	f100 0a14 	add.w	sl, r0, #20
 8013a90:	f04f 0b00 	mov.w	fp, #0
 8013a94:	e7ba      	b.n	8013a0c <__gethex+0x1e4>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	42b3      	cmp	r3, r6
 8013a9a:	dd73      	ble.n	8013b84 <__gethex+0x35c>
 8013a9c:	1b9e      	subs	r6, r3, r6
 8013a9e:	42b5      	cmp	r5, r6
 8013aa0:	dc34      	bgt.n	8013b0c <__gethex+0x2e4>
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2b02      	cmp	r3, #2
 8013aa6:	d023      	beq.n	8013af0 <__gethex+0x2c8>
 8013aa8:	2b03      	cmp	r3, #3
 8013aaa:	d025      	beq.n	8013af8 <__gethex+0x2d0>
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d115      	bne.n	8013adc <__gethex+0x2b4>
 8013ab0:	42b5      	cmp	r5, r6
 8013ab2:	d113      	bne.n	8013adc <__gethex+0x2b4>
 8013ab4:	2d01      	cmp	r5, #1
 8013ab6:	d10b      	bne.n	8013ad0 <__gethex+0x2a8>
 8013ab8:	9a02      	ldr	r2, [sp, #8]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6013      	str	r3, [r2, #0]
 8013abe:	2301      	movs	r3, #1
 8013ac0:	6123      	str	r3, [r4, #16]
 8013ac2:	f8ca 3000 	str.w	r3, [sl]
 8013ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ac8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013acc:	601c      	str	r4, [r3, #0]
 8013ace:	e735      	b.n	801393c <__gethex+0x114>
 8013ad0:	1e69      	subs	r1, r5, #1
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f7fe fb0e 	bl	80120f4 <__any_on>
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d1ed      	bne.n	8013ab8 <__gethex+0x290>
 8013adc:	4621      	mov	r1, r4
 8013ade:	4648      	mov	r0, r9
 8013ae0:	f7fd febc 	bl	801185c <_Bfree>
 8013ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	6013      	str	r3, [r2, #0]
 8013aea:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013aee:	e725      	b.n	801393c <__gethex+0x114>
 8013af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d1f2      	bne.n	8013adc <__gethex+0x2b4>
 8013af6:	e7df      	b.n	8013ab8 <__gethex+0x290>
 8013af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d1dc      	bne.n	8013ab8 <__gethex+0x290>
 8013afe:	e7ed      	b.n	8013adc <__gethex+0x2b4>
 8013b00:	08016b64 	.word	0x08016b64
 8013b04:	080169fd 	.word	0x080169fd
 8013b08:	08016d0e 	.word	0x08016d0e
 8013b0c:	f106 38ff 	add.w	r8, r6, #4294967295
 8013b10:	f1bb 0f00 	cmp.w	fp, #0
 8013b14:	d133      	bne.n	8013b7e <__gethex+0x356>
 8013b16:	f1b8 0f00 	cmp.w	r8, #0
 8013b1a:	d004      	beq.n	8013b26 <__gethex+0x2fe>
 8013b1c:	4641      	mov	r1, r8
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f7fe fae8 	bl	80120f4 <__any_on>
 8013b24:	4683      	mov	fp, r0
 8013b26:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013b30:	f008 081f 	and.w	r8, r8, #31
 8013b34:	fa03 f308 	lsl.w	r3, r3, r8
 8013b38:	4213      	tst	r3, r2
 8013b3a:	4631      	mov	r1, r6
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	bf18      	it	ne
 8013b40:	f04b 0b02 	orrne.w	fp, fp, #2
 8013b44:	1bad      	subs	r5, r5, r6
 8013b46:	f7ff fe07 	bl	8013758 <rshift>
 8013b4a:	687e      	ldr	r6, [r7, #4]
 8013b4c:	f04f 0802 	mov.w	r8, #2
 8013b50:	f1bb 0f00 	cmp.w	fp, #0
 8013b54:	d04a      	beq.n	8013bec <__gethex+0x3c4>
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b02      	cmp	r3, #2
 8013b5a:	d016      	beq.n	8013b8a <__gethex+0x362>
 8013b5c:	2b03      	cmp	r3, #3
 8013b5e:	d018      	beq.n	8013b92 <__gethex+0x36a>
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d109      	bne.n	8013b78 <__gethex+0x350>
 8013b64:	f01b 0f02 	tst.w	fp, #2
 8013b68:	d006      	beq.n	8013b78 <__gethex+0x350>
 8013b6a:	f8da 3000 	ldr.w	r3, [sl]
 8013b6e:	ea4b 0b03 	orr.w	fp, fp, r3
 8013b72:	f01b 0f01 	tst.w	fp, #1
 8013b76:	d10f      	bne.n	8013b98 <__gethex+0x370>
 8013b78:	f048 0810 	orr.w	r8, r8, #16
 8013b7c:	e036      	b.n	8013bec <__gethex+0x3c4>
 8013b7e:	f04f 0b01 	mov.w	fp, #1
 8013b82:	e7d0      	b.n	8013b26 <__gethex+0x2fe>
 8013b84:	f04f 0801 	mov.w	r8, #1
 8013b88:	e7e2      	b.n	8013b50 <__gethex+0x328>
 8013b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b8c:	f1c3 0301 	rsb	r3, r3, #1
 8013b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d0ef      	beq.n	8013b78 <__gethex+0x350>
 8013b98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013b9c:	f104 0214 	add.w	r2, r4, #20
 8013ba0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013ba4:	9301      	str	r3, [sp, #4]
 8013ba6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8013baa:	2300      	movs	r3, #0
 8013bac:	4694      	mov	ip, r2
 8013bae:	f852 1b04 	ldr.w	r1, [r2], #4
 8013bb2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013bb6:	d01e      	beq.n	8013bf6 <__gethex+0x3ce>
 8013bb8:	3101      	adds	r1, #1
 8013bba:	f8cc 1000 	str.w	r1, [ip]
 8013bbe:	f1b8 0f02 	cmp.w	r8, #2
 8013bc2:	f104 0214 	add.w	r2, r4, #20
 8013bc6:	d13d      	bne.n	8013c44 <__gethex+0x41c>
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	3b01      	subs	r3, #1
 8013bcc:	42ab      	cmp	r3, r5
 8013bce:	d10b      	bne.n	8013be8 <__gethex+0x3c0>
 8013bd0:	1169      	asrs	r1, r5, #5
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	f005 051f 	and.w	r5, r5, #31
 8013bd8:	fa03 f505 	lsl.w	r5, r3, r5
 8013bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013be0:	421d      	tst	r5, r3
 8013be2:	bf18      	it	ne
 8013be4:	f04f 0801 	movne.w	r8, #1
 8013be8:	f048 0820 	orr.w	r8, r8, #32
 8013bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bee:	601c      	str	r4, [r3, #0]
 8013bf0:	9b02      	ldr	r3, [sp, #8]
 8013bf2:	601e      	str	r6, [r3, #0]
 8013bf4:	e6a2      	b.n	801393c <__gethex+0x114>
 8013bf6:	4290      	cmp	r0, r2
 8013bf8:	f842 3c04 	str.w	r3, [r2, #-4]
 8013bfc:	d8d6      	bhi.n	8013bac <__gethex+0x384>
 8013bfe:	68a2      	ldr	r2, [r4, #8]
 8013c00:	4593      	cmp	fp, r2
 8013c02:	db17      	blt.n	8013c34 <__gethex+0x40c>
 8013c04:	6861      	ldr	r1, [r4, #4]
 8013c06:	4648      	mov	r0, r9
 8013c08:	3101      	adds	r1, #1
 8013c0a:	f7fd fde7 	bl	80117dc <_Balloc>
 8013c0e:	4682      	mov	sl, r0
 8013c10:	b918      	cbnz	r0, 8013c1a <__gethex+0x3f2>
 8013c12:	4b1b      	ldr	r3, [pc, #108]	; (8013c80 <__gethex+0x458>)
 8013c14:	4602      	mov	r2, r0
 8013c16:	2184      	movs	r1, #132	; 0x84
 8013c18:	e6b3      	b.n	8013982 <__gethex+0x15a>
 8013c1a:	6922      	ldr	r2, [r4, #16]
 8013c1c:	3202      	adds	r2, #2
 8013c1e:	f104 010c 	add.w	r1, r4, #12
 8013c22:	0092      	lsls	r2, r2, #2
 8013c24:	300c      	adds	r0, #12
 8013c26:	f7fc fe4a 	bl	80108be <memcpy>
 8013c2a:	4621      	mov	r1, r4
 8013c2c:	4648      	mov	r0, r9
 8013c2e:	f7fd fe15 	bl	801185c <_Bfree>
 8013c32:	4654      	mov	r4, sl
 8013c34:	6922      	ldr	r2, [r4, #16]
 8013c36:	1c51      	adds	r1, r2, #1
 8013c38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013c3c:	6121      	str	r1, [r4, #16]
 8013c3e:	2101      	movs	r1, #1
 8013c40:	6151      	str	r1, [r2, #20]
 8013c42:	e7bc      	b.n	8013bbe <__gethex+0x396>
 8013c44:	6921      	ldr	r1, [r4, #16]
 8013c46:	4559      	cmp	r1, fp
 8013c48:	dd0b      	ble.n	8013c62 <__gethex+0x43a>
 8013c4a:	2101      	movs	r1, #1
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f7ff fd83 	bl	8013758 <rshift>
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	3601      	adds	r6, #1
 8013c56:	42b3      	cmp	r3, r6
 8013c58:	f6ff aedb 	blt.w	8013a12 <__gethex+0x1ea>
 8013c5c:	f04f 0801 	mov.w	r8, #1
 8013c60:	e7c2      	b.n	8013be8 <__gethex+0x3c0>
 8013c62:	f015 051f 	ands.w	r5, r5, #31
 8013c66:	d0f9      	beq.n	8013c5c <__gethex+0x434>
 8013c68:	9b01      	ldr	r3, [sp, #4]
 8013c6a:	441a      	add	r2, r3
 8013c6c:	f1c5 0520 	rsb	r5, r5, #32
 8013c70:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013c74:	f7fd fea4 	bl	80119c0 <__hi0bits>
 8013c78:	42a8      	cmp	r0, r5
 8013c7a:	dbe6      	blt.n	8013c4a <__gethex+0x422>
 8013c7c:	e7ee      	b.n	8013c5c <__gethex+0x434>
 8013c7e:	bf00      	nop
 8013c80:	080169fd 	.word	0x080169fd

08013c84 <L_shift>:
 8013c84:	f1c2 0208 	rsb	r2, r2, #8
 8013c88:	0092      	lsls	r2, r2, #2
 8013c8a:	b570      	push	{r4, r5, r6, lr}
 8013c8c:	f1c2 0620 	rsb	r6, r2, #32
 8013c90:	6843      	ldr	r3, [r0, #4]
 8013c92:	6804      	ldr	r4, [r0, #0]
 8013c94:	fa03 f506 	lsl.w	r5, r3, r6
 8013c98:	432c      	orrs	r4, r5
 8013c9a:	40d3      	lsrs	r3, r2
 8013c9c:	6004      	str	r4, [r0, #0]
 8013c9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013ca2:	4288      	cmp	r0, r1
 8013ca4:	d3f4      	bcc.n	8013c90 <L_shift+0xc>
 8013ca6:	bd70      	pop	{r4, r5, r6, pc}

08013ca8 <__match>:
 8013ca8:	b530      	push	{r4, r5, lr}
 8013caa:	6803      	ldr	r3, [r0, #0]
 8013cac:	3301      	adds	r3, #1
 8013cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cb2:	b914      	cbnz	r4, 8013cba <__match+0x12>
 8013cb4:	6003      	str	r3, [r0, #0]
 8013cb6:	2001      	movs	r0, #1
 8013cb8:	bd30      	pop	{r4, r5, pc}
 8013cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013cbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013cc2:	2d19      	cmp	r5, #25
 8013cc4:	bf98      	it	ls
 8013cc6:	3220      	addls	r2, #32
 8013cc8:	42a2      	cmp	r2, r4
 8013cca:	d0f0      	beq.n	8013cae <__match+0x6>
 8013ccc:	2000      	movs	r0, #0
 8013cce:	e7f3      	b.n	8013cb8 <__match+0x10>

08013cd0 <__hexnan>:
 8013cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd4:	680b      	ldr	r3, [r1, #0]
 8013cd6:	6801      	ldr	r1, [r0, #0]
 8013cd8:	115e      	asrs	r6, r3, #5
 8013cda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013cde:	f013 031f 	ands.w	r3, r3, #31
 8013ce2:	b087      	sub	sp, #28
 8013ce4:	bf18      	it	ne
 8013ce6:	3604      	addne	r6, #4
 8013ce8:	2500      	movs	r5, #0
 8013cea:	1f37      	subs	r7, r6, #4
 8013cec:	4682      	mov	sl, r0
 8013cee:	4690      	mov	r8, r2
 8013cf0:	9301      	str	r3, [sp, #4]
 8013cf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8013cf6:	46b9      	mov	r9, r7
 8013cf8:	463c      	mov	r4, r7
 8013cfa:	9502      	str	r5, [sp, #8]
 8013cfc:	46ab      	mov	fp, r5
 8013cfe:	784a      	ldrb	r2, [r1, #1]
 8013d00:	1c4b      	adds	r3, r1, #1
 8013d02:	9303      	str	r3, [sp, #12]
 8013d04:	b342      	cbz	r2, 8013d58 <__hexnan+0x88>
 8013d06:	4610      	mov	r0, r2
 8013d08:	9105      	str	r1, [sp, #20]
 8013d0a:	9204      	str	r2, [sp, #16]
 8013d0c:	f7ff fd76 	bl	80137fc <__hexdig_fun>
 8013d10:	2800      	cmp	r0, #0
 8013d12:	d14f      	bne.n	8013db4 <__hexnan+0xe4>
 8013d14:	9a04      	ldr	r2, [sp, #16]
 8013d16:	9905      	ldr	r1, [sp, #20]
 8013d18:	2a20      	cmp	r2, #32
 8013d1a:	d818      	bhi.n	8013d4e <__hexnan+0x7e>
 8013d1c:	9b02      	ldr	r3, [sp, #8]
 8013d1e:	459b      	cmp	fp, r3
 8013d20:	dd13      	ble.n	8013d4a <__hexnan+0x7a>
 8013d22:	454c      	cmp	r4, r9
 8013d24:	d206      	bcs.n	8013d34 <__hexnan+0x64>
 8013d26:	2d07      	cmp	r5, #7
 8013d28:	dc04      	bgt.n	8013d34 <__hexnan+0x64>
 8013d2a:	462a      	mov	r2, r5
 8013d2c:	4649      	mov	r1, r9
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f7ff ffa8 	bl	8013c84 <L_shift>
 8013d34:	4544      	cmp	r4, r8
 8013d36:	d950      	bls.n	8013dda <__hexnan+0x10a>
 8013d38:	2300      	movs	r3, #0
 8013d3a:	f1a4 0904 	sub.w	r9, r4, #4
 8013d3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013d42:	f8cd b008 	str.w	fp, [sp, #8]
 8013d46:	464c      	mov	r4, r9
 8013d48:	461d      	mov	r5, r3
 8013d4a:	9903      	ldr	r1, [sp, #12]
 8013d4c:	e7d7      	b.n	8013cfe <__hexnan+0x2e>
 8013d4e:	2a29      	cmp	r2, #41	; 0x29
 8013d50:	d155      	bne.n	8013dfe <__hexnan+0x12e>
 8013d52:	3102      	adds	r1, #2
 8013d54:	f8ca 1000 	str.w	r1, [sl]
 8013d58:	f1bb 0f00 	cmp.w	fp, #0
 8013d5c:	d04f      	beq.n	8013dfe <__hexnan+0x12e>
 8013d5e:	454c      	cmp	r4, r9
 8013d60:	d206      	bcs.n	8013d70 <__hexnan+0xa0>
 8013d62:	2d07      	cmp	r5, #7
 8013d64:	dc04      	bgt.n	8013d70 <__hexnan+0xa0>
 8013d66:	462a      	mov	r2, r5
 8013d68:	4649      	mov	r1, r9
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f7ff ff8a 	bl	8013c84 <L_shift>
 8013d70:	4544      	cmp	r4, r8
 8013d72:	d934      	bls.n	8013dde <__hexnan+0x10e>
 8013d74:	f1a8 0204 	sub.w	r2, r8, #4
 8013d78:	4623      	mov	r3, r4
 8013d7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013d7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013d82:	429f      	cmp	r7, r3
 8013d84:	d2f9      	bcs.n	8013d7a <__hexnan+0xaa>
 8013d86:	1b3b      	subs	r3, r7, r4
 8013d88:	f023 0303 	bic.w	r3, r3, #3
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	3e03      	subs	r6, #3
 8013d90:	3401      	adds	r4, #1
 8013d92:	42a6      	cmp	r6, r4
 8013d94:	bf38      	it	cc
 8013d96:	2304      	movcc	r3, #4
 8013d98:	4443      	add	r3, r8
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f843 2b04 	str.w	r2, [r3], #4
 8013da0:	429f      	cmp	r7, r3
 8013da2:	d2fb      	bcs.n	8013d9c <__hexnan+0xcc>
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	b91b      	cbnz	r3, 8013db0 <__hexnan+0xe0>
 8013da8:	4547      	cmp	r7, r8
 8013daa:	d126      	bne.n	8013dfa <__hexnan+0x12a>
 8013dac:	2301      	movs	r3, #1
 8013dae:	603b      	str	r3, [r7, #0]
 8013db0:	2005      	movs	r0, #5
 8013db2:	e025      	b.n	8013e00 <__hexnan+0x130>
 8013db4:	3501      	adds	r5, #1
 8013db6:	2d08      	cmp	r5, #8
 8013db8:	f10b 0b01 	add.w	fp, fp, #1
 8013dbc:	dd06      	ble.n	8013dcc <__hexnan+0xfc>
 8013dbe:	4544      	cmp	r4, r8
 8013dc0:	d9c3      	bls.n	8013d4a <__hexnan+0x7a>
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	f844 3c04 	str.w	r3, [r4, #-4]
 8013dc8:	2501      	movs	r5, #1
 8013dca:	3c04      	subs	r4, #4
 8013dcc:	6822      	ldr	r2, [r4, #0]
 8013dce:	f000 000f 	and.w	r0, r0, #15
 8013dd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013dd6:	6020      	str	r0, [r4, #0]
 8013dd8:	e7b7      	b.n	8013d4a <__hexnan+0x7a>
 8013dda:	2508      	movs	r5, #8
 8013ddc:	e7b5      	b.n	8013d4a <__hexnan+0x7a>
 8013dde:	9b01      	ldr	r3, [sp, #4]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d0df      	beq.n	8013da4 <__hexnan+0xd4>
 8013de4:	f1c3 0320 	rsb	r3, r3, #32
 8013de8:	f04f 32ff 	mov.w	r2, #4294967295
 8013dec:	40da      	lsrs	r2, r3
 8013dee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013df2:	4013      	ands	r3, r2
 8013df4:	f846 3c04 	str.w	r3, [r6, #-4]
 8013df8:	e7d4      	b.n	8013da4 <__hexnan+0xd4>
 8013dfa:	3f04      	subs	r7, #4
 8013dfc:	e7d2      	b.n	8013da4 <__hexnan+0xd4>
 8013dfe:	2004      	movs	r0, #4
 8013e00:	b007      	add	sp, #28
 8013e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e06 <__ascii_mbtowc>:
 8013e06:	b082      	sub	sp, #8
 8013e08:	b901      	cbnz	r1, 8013e0c <__ascii_mbtowc+0x6>
 8013e0a:	a901      	add	r1, sp, #4
 8013e0c:	b142      	cbz	r2, 8013e20 <__ascii_mbtowc+0x1a>
 8013e0e:	b14b      	cbz	r3, 8013e24 <__ascii_mbtowc+0x1e>
 8013e10:	7813      	ldrb	r3, [r2, #0]
 8013e12:	600b      	str	r3, [r1, #0]
 8013e14:	7812      	ldrb	r2, [r2, #0]
 8013e16:	1e10      	subs	r0, r2, #0
 8013e18:	bf18      	it	ne
 8013e1a:	2001      	movne	r0, #1
 8013e1c:	b002      	add	sp, #8
 8013e1e:	4770      	bx	lr
 8013e20:	4610      	mov	r0, r2
 8013e22:	e7fb      	b.n	8013e1c <__ascii_mbtowc+0x16>
 8013e24:	f06f 0001 	mvn.w	r0, #1
 8013e28:	e7f8      	b.n	8013e1c <__ascii_mbtowc+0x16>

08013e2a <_realloc_r>:
 8013e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e2e:	4680      	mov	r8, r0
 8013e30:	4614      	mov	r4, r2
 8013e32:	460e      	mov	r6, r1
 8013e34:	b921      	cbnz	r1, 8013e40 <_realloc_r+0x16>
 8013e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3a:	4611      	mov	r1, r2
 8013e3c:	f7fd bc42 	b.w	80116c4 <_malloc_r>
 8013e40:	b92a      	cbnz	r2, 8013e4e <_realloc_r+0x24>
 8013e42:	f7fd fbcb 	bl	80115dc <_free_r>
 8013e46:	4625      	mov	r5, r4
 8013e48:	4628      	mov	r0, r5
 8013e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4e:	f000 f842 	bl	8013ed6 <_malloc_usable_size_r>
 8013e52:	4284      	cmp	r4, r0
 8013e54:	4607      	mov	r7, r0
 8013e56:	d802      	bhi.n	8013e5e <_realloc_r+0x34>
 8013e58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e5c:	d812      	bhi.n	8013e84 <_realloc_r+0x5a>
 8013e5e:	4621      	mov	r1, r4
 8013e60:	4640      	mov	r0, r8
 8013e62:	f7fd fc2f 	bl	80116c4 <_malloc_r>
 8013e66:	4605      	mov	r5, r0
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d0ed      	beq.n	8013e48 <_realloc_r+0x1e>
 8013e6c:	42bc      	cmp	r4, r7
 8013e6e:	4622      	mov	r2, r4
 8013e70:	4631      	mov	r1, r6
 8013e72:	bf28      	it	cs
 8013e74:	463a      	movcs	r2, r7
 8013e76:	f7fc fd22 	bl	80108be <memcpy>
 8013e7a:	4631      	mov	r1, r6
 8013e7c:	4640      	mov	r0, r8
 8013e7e:	f7fd fbad 	bl	80115dc <_free_r>
 8013e82:	e7e1      	b.n	8013e48 <_realloc_r+0x1e>
 8013e84:	4635      	mov	r5, r6
 8013e86:	e7df      	b.n	8013e48 <_realloc_r+0x1e>

08013e88 <__ascii_wctomb>:
 8013e88:	b149      	cbz	r1, 8013e9e <__ascii_wctomb+0x16>
 8013e8a:	2aff      	cmp	r2, #255	; 0xff
 8013e8c:	bf85      	ittet	hi
 8013e8e:	238a      	movhi	r3, #138	; 0x8a
 8013e90:	6003      	strhi	r3, [r0, #0]
 8013e92:	700a      	strbls	r2, [r1, #0]
 8013e94:	f04f 30ff 	movhi.w	r0, #4294967295
 8013e98:	bf98      	it	ls
 8013e9a:	2001      	movls	r0, #1
 8013e9c:	4770      	bx	lr
 8013e9e:	4608      	mov	r0, r1
 8013ea0:	4770      	bx	lr
	...

08013ea4 <fiprintf>:
 8013ea4:	b40e      	push	{r1, r2, r3}
 8013ea6:	b503      	push	{r0, r1, lr}
 8013ea8:	4601      	mov	r1, r0
 8013eaa:	ab03      	add	r3, sp, #12
 8013eac:	4805      	ldr	r0, [pc, #20]	; (8013ec4 <fiprintf+0x20>)
 8013eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eb2:	6800      	ldr	r0, [r0, #0]
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	f7ff f957 	bl	8013168 <_vfiprintf_r>
 8013eba:	b002      	add	sp, #8
 8013ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ec0:	b003      	add	sp, #12
 8013ec2:	4770      	bx	lr
 8013ec4:	200000a4 	.word	0x200000a4

08013ec8 <abort>:
 8013ec8:	b508      	push	{r3, lr}
 8013eca:	2006      	movs	r0, #6
 8013ecc:	f000 f834 	bl	8013f38 <raise>
 8013ed0:	2001      	movs	r0, #1
 8013ed2:	f7ef fc88 	bl	80037e6 <_exit>

08013ed6 <_malloc_usable_size_r>:
 8013ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013eda:	1f18      	subs	r0, r3, #4
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	bfbc      	itt	lt
 8013ee0:	580b      	ldrlt	r3, [r1, r0]
 8013ee2:	18c0      	addlt	r0, r0, r3
 8013ee4:	4770      	bx	lr

08013ee6 <_raise_r>:
 8013ee6:	291f      	cmp	r1, #31
 8013ee8:	b538      	push	{r3, r4, r5, lr}
 8013eea:	4604      	mov	r4, r0
 8013eec:	460d      	mov	r5, r1
 8013eee:	d904      	bls.n	8013efa <_raise_r+0x14>
 8013ef0:	2316      	movs	r3, #22
 8013ef2:	6003      	str	r3, [r0, #0]
 8013ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ef8:	bd38      	pop	{r3, r4, r5, pc}
 8013efa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013efc:	b112      	cbz	r2, 8013f04 <_raise_r+0x1e>
 8013efe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f02:	b94b      	cbnz	r3, 8013f18 <_raise_r+0x32>
 8013f04:	4620      	mov	r0, r4
 8013f06:	f000 f831 	bl	8013f6c <_getpid_r>
 8013f0a:	462a      	mov	r2, r5
 8013f0c:	4601      	mov	r1, r0
 8013f0e:	4620      	mov	r0, r4
 8013f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f14:	f000 b818 	b.w	8013f48 <_kill_r>
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d00a      	beq.n	8013f32 <_raise_r+0x4c>
 8013f1c:	1c59      	adds	r1, r3, #1
 8013f1e:	d103      	bne.n	8013f28 <_raise_r+0x42>
 8013f20:	2316      	movs	r3, #22
 8013f22:	6003      	str	r3, [r0, #0]
 8013f24:	2001      	movs	r0, #1
 8013f26:	e7e7      	b.n	8013ef8 <_raise_r+0x12>
 8013f28:	2400      	movs	r4, #0
 8013f2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013f2e:	4628      	mov	r0, r5
 8013f30:	4798      	blx	r3
 8013f32:	2000      	movs	r0, #0
 8013f34:	e7e0      	b.n	8013ef8 <_raise_r+0x12>
	...

08013f38 <raise>:
 8013f38:	4b02      	ldr	r3, [pc, #8]	; (8013f44 <raise+0xc>)
 8013f3a:	4601      	mov	r1, r0
 8013f3c:	6818      	ldr	r0, [r3, #0]
 8013f3e:	f7ff bfd2 	b.w	8013ee6 <_raise_r>
 8013f42:	bf00      	nop
 8013f44:	200000a4 	.word	0x200000a4

08013f48 <_kill_r>:
 8013f48:	b538      	push	{r3, r4, r5, lr}
 8013f4a:	4d07      	ldr	r5, [pc, #28]	; (8013f68 <_kill_r+0x20>)
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	4604      	mov	r4, r0
 8013f50:	4608      	mov	r0, r1
 8013f52:	4611      	mov	r1, r2
 8013f54:	602b      	str	r3, [r5, #0]
 8013f56:	f7ef fc36 	bl	80037c6 <_kill>
 8013f5a:	1c43      	adds	r3, r0, #1
 8013f5c:	d102      	bne.n	8013f64 <_kill_r+0x1c>
 8013f5e:	682b      	ldr	r3, [r5, #0]
 8013f60:	b103      	cbz	r3, 8013f64 <_kill_r+0x1c>
 8013f62:	6023      	str	r3, [r4, #0]
 8013f64:	bd38      	pop	{r3, r4, r5, pc}
 8013f66:	bf00      	nop
 8013f68:	20001a68 	.word	0x20001a68

08013f6c <_getpid_r>:
 8013f6c:	f7ef bc23 	b.w	80037b6 <_getpid>

08013f70 <log10>:
 8013f70:	b538      	push	{r3, r4, r5, lr}
 8013f72:	ed2d 8b02 	vpush	{d8}
 8013f76:	ec55 4b10 	vmov	r4, r5, d0
 8013f7a:	f000 f8b5 	bl	80140e8 <__ieee754_log10>
 8013f7e:	4622      	mov	r2, r4
 8013f80:	462b      	mov	r3, r5
 8013f82:	4620      	mov	r0, r4
 8013f84:	4629      	mov	r1, r5
 8013f86:	eeb0 8a40 	vmov.f32	s16, s0
 8013f8a:	eef0 8a60 	vmov.f32	s17, s1
 8013f8e:	f7ec fda5 	bl	8000adc <__aeabi_dcmpun>
 8013f92:	b998      	cbnz	r0, 8013fbc <log10+0x4c>
 8013f94:	2200      	movs	r2, #0
 8013f96:	2300      	movs	r3, #0
 8013f98:	4620      	mov	r0, r4
 8013f9a:	4629      	mov	r1, r5
 8013f9c:	f7ec fd80 	bl	8000aa0 <__aeabi_dcmple>
 8013fa0:	b160      	cbz	r0, 8013fbc <log10+0x4c>
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	4629      	mov	r1, r5
 8013faa:	f7ec fd65 	bl	8000a78 <__aeabi_dcmpeq>
 8013fae:	b160      	cbz	r0, 8013fca <log10+0x5a>
 8013fb0:	f7fc fc58 	bl	8010864 <__errno>
 8013fb4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8013fe0 <log10+0x70>
 8013fb8:	2322      	movs	r3, #34	; 0x22
 8013fba:	6003      	str	r3, [r0, #0]
 8013fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8013fc0:	eef0 0a68 	vmov.f32	s1, s17
 8013fc4:	ecbd 8b02 	vpop	{d8}
 8013fc8:	bd38      	pop	{r3, r4, r5, pc}
 8013fca:	f7fc fc4b 	bl	8010864 <__errno>
 8013fce:	ecbd 8b02 	vpop	{d8}
 8013fd2:	2321      	movs	r3, #33	; 0x21
 8013fd4:	6003      	str	r3, [r0, #0]
 8013fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fda:	4803      	ldr	r0, [pc, #12]	; (8013fe8 <log10+0x78>)
 8013fdc:	f7ff bb80 	b.w	80136e0 <nan>
 8013fe0:	00000000 	.word	0x00000000
 8013fe4:	fff00000 	.word	0xfff00000
 8013fe8:	08016d0d 	.word	0x08016d0d

08013fec <pow>:
 8013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fee:	ed2d 8b02 	vpush	{d8}
 8013ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8013ff6:	eef0 8a60 	vmov.f32	s17, s1
 8013ffa:	ec55 4b11 	vmov	r4, r5, d1
 8013ffe:	f000 f8ff 	bl	8014200 <__ieee754_pow>
 8014002:	4622      	mov	r2, r4
 8014004:	462b      	mov	r3, r5
 8014006:	4620      	mov	r0, r4
 8014008:	4629      	mov	r1, r5
 801400a:	ec57 6b10 	vmov	r6, r7, d0
 801400e:	f7ec fd65 	bl	8000adc <__aeabi_dcmpun>
 8014012:	2800      	cmp	r0, #0
 8014014:	d13b      	bne.n	801408e <pow+0xa2>
 8014016:	ec51 0b18 	vmov	r0, r1, d8
 801401a:	2200      	movs	r2, #0
 801401c:	2300      	movs	r3, #0
 801401e:	f7ec fd2b 	bl	8000a78 <__aeabi_dcmpeq>
 8014022:	b1b8      	cbz	r0, 8014054 <pow+0x68>
 8014024:	2200      	movs	r2, #0
 8014026:	2300      	movs	r3, #0
 8014028:	4620      	mov	r0, r4
 801402a:	4629      	mov	r1, r5
 801402c:	f7ec fd24 	bl	8000a78 <__aeabi_dcmpeq>
 8014030:	2800      	cmp	r0, #0
 8014032:	d146      	bne.n	80140c2 <pow+0xd6>
 8014034:	ec45 4b10 	vmov	d0, r4, r5
 8014038:	f000 f848 	bl	80140cc <finite>
 801403c:	b338      	cbz	r0, 801408e <pow+0xa2>
 801403e:	2200      	movs	r2, #0
 8014040:	2300      	movs	r3, #0
 8014042:	4620      	mov	r0, r4
 8014044:	4629      	mov	r1, r5
 8014046:	f7ec fd21 	bl	8000a8c <__aeabi_dcmplt>
 801404a:	b300      	cbz	r0, 801408e <pow+0xa2>
 801404c:	f7fc fc0a 	bl	8010864 <__errno>
 8014050:	2322      	movs	r3, #34	; 0x22
 8014052:	e01b      	b.n	801408c <pow+0xa0>
 8014054:	ec47 6b10 	vmov	d0, r6, r7
 8014058:	f000 f838 	bl	80140cc <finite>
 801405c:	b9e0      	cbnz	r0, 8014098 <pow+0xac>
 801405e:	eeb0 0a48 	vmov.f32	s0, s16
 8014062:	eef0 0a68 	vmov.f32	s1, s17
 8014066:	f000 f831 	bl	80140cc <finite>
 801406a:	b1a8      	cbz	r0, 8014098 <pow+0xac>
 801406c:	ec45 4b10 	vmov	d0, r4, r5
 8014070:	f000 f82c 	bl	80140cc <finite>
 8014074:	b180      	cbz	r0, 8014098 <pow+0xac>
 8014076:	4632      	mov	r2, r6
 8014078:	463b      	mov	r3, r7
 801407a:	4630      	mov	r0, r6
 801407c:	4639      	mov	r1, r7
 801407e:	f7ec fd2d 	bl	8000adc <__aeabi_dcmpun>
 8014082:	2800      	cmp	r0, #0
 8014084:	d0e2      	beq.n	801404c <pow+0x60>
 8014086:	f7fc fbed 	bl	8010864 <__errno>
 801408a:	2321      	movs	r3, #33	; 0x21
 801408c:	6003      	str	r3, [r0, #0]
 801408e:	ecbd 8b02 	vpop	{d8}
 8014092:	ec47 6b10 	vmov	d0, r6, r7
 8014096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014098:	2200      	movs	r2, #0
 801409a:	2300      	movs	r3, #0
 801409c:	4630      	mov	r0, r6
 801409e:	4639      	mov	r1, r7
 80140a0:	f7ec fcea 	bl	8000a78 <__aeabi_dcmpeq>
 80140a4:	2800      	cmp	r0, #0
 80140a6:	d0f2      	beq.n	801408e <pow+0xa2>
 80140a8:	eeb0 0a48 	vmov.f32	s0, s16
 80140ac:	eef0 0a68 	vmov.f32	s1, s17
 80140b0:	f000 f80c 	bl	80140cc <finite>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d0ea      	beq.n	801408e <pow+0xa2>
 80140b8:	ec45 4b10 	vmov	d0, r4, r5
 80140bc:	f000 f806 	bl	80140cc <finite>
 80140c0:	e7c3      	b.n	801404a <pow+0x5e>
 80140c2:	4f01      	ldr	r7, [pc, #4]	; (80140c8 <pow+0xdc>)
 80140c4:	2600      	movs	r6, #0
 80140c6:	e7e2      	b.n	801408e <pow+0xa2>
 80140c8:	3ff00000 	.word	0x3ff00000

080140cc <finite>:
 80140cc:	b082      	sub	sp, #8
 80140ce:	ed8d 0b00 	vstr	d0, [sp]
 80140d2:	9801      	ldr	r0, [sp, #4]
 80140d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80140d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80140dc:	0fc0      	lsrs	r0, r0, #31
 80140de:	b002      	add	sp, #8
 80140e0:	4770      	bx	lr
 80140e2:	0000      	movs	r0, r0
 80140e4:	0000      	movs	r0, r0
	...

080140e8 <__ieee754_log10>:
 80140e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140ec:	ec55 4b10 	vmov	r4, r5, d0
 80140f0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80140f4:	462b      	mov	r3, r5
 80140f6:	da2f      	bge.n	8014158 <__ieee754_log10+0x70>
 80140f8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80140fc:	4322      	orrs	r2, r4
 80140fe:	d109      	bne.n	8014114 <__ieee754_log10+0x2c>
 8014100:	493b      	ldr	r1, [pc, #236]	; (80141f0 <__ieee754_log10+0x108>)
 8014102:	2200      	movs	r2, #0
 8014104:	2300      	movs	r3, #0
 8014106:	2000      	movs	r0, #0
 8014108:	f7ec fb78 	bl	80007fc <__aeabi_ddiv>
 801410c:	ec41 0b10 	vmov	d0, r0, r1
 8014110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014114:	2d00      	cmp	r5, #0
 8014116:	da09      	bge.n	801412c <__ieee754_log10+0x44>
 8014118:	ee10 2a10 	vmov	r2, s0
 801411c:	ee10 0a10 	vmov	r0, s0
 8014120:	4629      	mov	r1, r5
 8014122:	f7ec f889 	bl	8000238 <__aeabi_dsub>
 8014126:	2200      	movs	r2, #0
 8014128:	2300      	movs	r3, #0
 801412a:	e7ed      	b.n	8014108 <__ieee754_log10+0x20>
 801412c:	4b31      	ldr	r3, [pc, #196]	; (80141f4 <__ieee754_log10+0x10c>)
 801412e:	2200      	movs	r2, #0
 8014130:	4629      	mov	r1, r5
 8014132:	ee10 0a10 	vmov	r0, s0
 8014136:	f7ec fa37 	bl	80005a8 <__aeabi_dmul>
 801413a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801413e:	4604      	mov	r4, r0
 8014140:	460d      	mov	r5, r1
 8014142:	460b      	mov	r3, r1
 8014144:	492c      	ldr	r1, [pc, #176]	; (80141f8 <__ieee754_log10+0x110>)
 8014146:	428b      	cmp	r3, r1
 8014148:	dd08      	ble.n	801415c <__ieee754_log10+0x74>
 801414a:	4622      	mov	r2, r4
 801414c:	462b      	mov	r3, r5
 801414e:	4620      	mov	r0, r4
 8014150:	4629      	mov	r1, r5
 8014152:	f7ec f873 	bl	800023c <__adddf3>
 8014156:	e7d9      	b.n	801410c <__ieee754_log10+0x24>
 8014158:	2200      	movs	r2, #0
 801415a:	e7f3      	b.n	8014144 <__ieee754_log10+0x5c>
 801415c:	1518      	asrs	r0, r3, #20
 801415e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8014162:	4410      	add	r0, r2
 8014164:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8014168:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801416c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8014170:	f7ec f9b0 	bl	80004d4 <__aeabi_i2d>
 8014174:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8014178:	3303      	adds	r3, #3
 801417a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801417e:	ec45 4b10 	vmov	d0, r4, r5
 8014182:	4606      	mov	r6, r0
 8014184:	460f      	mov	r7, r1
 8014186:	f000 fef7 	bl	8014f78 <__ieee754_log>
 801418a:	a313      	add	r3, pc, #76	; (adr r3, 80141d8 <__ieee754_log10+0xf0>)
 801418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014190:	4630      	mov	r0, r6
 8014192:	4639      	mov	r1, r7
 8014194:	ec59 8b10 	vmov	r8, r9, d0
 8014198:	f7ec fa06 	bl	80005a8 <__aeabi_dmul>
 801419c:	a310      	add	r3, pc, #64	; (adr r3, 80141e0 <__ieee754_log10+0xf8>)
 801419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a2:	4604      	mov	r4, r0
 80141a4:	460d      	mov	r5, r1
 80141a6:	4640      	mov	r0, r8
 80141a8:	4649      	mov	r1, r9
 80141aa:	f7ec f9fd 	bl	80005a8 <__aeabi_dmul>
 80141ae:	4602      	mov	r2, r0
 80141b0:	460b      	mov	r3, r1
 80141b2:	4620      	mov	r0, r4
 80141b4:	4629      	mov	r1, r5
 80141b6:	f7ec f841 	bl	800023c <__adddf3>
 80141ba:	a30b      	add	r3, pc, #44	; (adr r3, 80141e8 <__ieee754_log10+0x100>)
 80141bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c0:	4604      	mov	r4, r0
 80141c2:	460d      	mov	r5, r1
 80141c4:	4630      	mov	r0, r6
 80141c6:	4639      	mov	r1, r7
 80141c8:	f7ec f9ee 	bl	80005a8 <__aeabi_dmul>
 80141cc:	4602      	mov	r2, r0
 80141ce:	460b      	mov	r3, r1
 80141d0:	4620      	mov	r0, r4
 80141d2:	4629      	mov	r1, r5
 80141d4:	e7bd      	b.n	8014152 <__ieee754_log10+0x6a>
 80141d6:	bf00      	nop
 80141d8:	11f12b36 	.word	0x11f12b36
 80141dc:	3d59fef3 	.word	0x3d59fef3
 80141e0:	1526e50e 	.word	0x1526e50e
 80141e4:	3fdbcb7b 	.word	0x3fdbcb7b
 80141e8:	509f6000 	.word	0x509f6000
 80141ec:	3fd34413 	.word	0x3fd34413
 80141f0:	c3500000 	.word	0xc3500000
 80141f4:	43500000 	.word	0x43500000
 80141f8:	7fefffff 	.word	0x7fefffff
 80141fc:	00000000 	.word	0x00000000

08014200 <__ieee754_pow>:
 8014200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014204:	ed2d 8b06 	vpush	{d8-d10}
 8014208:	b089      	sub	sp, #36	; 0x24
 801420a:	ed8d 1b00 	vstr	d1, [sp]
 801420e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014212:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014216:	ea58 0102 	orrs.w	r1, r8, r2
 801421a:	ec57 6b10 	vmov	r6, r7, d0
 801421e:	d115      	bne.n	801424c <__ieee754_pow+0x4c>
 8014220:	19b3      	adds	r3, r6, r6
 8014222:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8014226:	4152      	adcs	r2, r2
 8014228:	4299      	cmp	r1, r3
 801422a:	4b89      	ldr	r3, [pc, #548]	; (8014450 <__ieee754_pow+0x250>)
 801422c:	4193      	sbcs	r3, r2
 801422e:	f080 84d1 	bcs.w	8014bd4 <__ieee754_pow+0x9d4>
 8014232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014236:	4630      	mov	r0, r6
 8014238:	4639      	mov	r1, r7
 801423a:	f7eb ffff 	bl	800023c <__adddf3>
 801423e:	ec41 0b10 	vmov	d0, r0, r1
 8014242:	b009      	add	sp, #36	; 0x24
 8014244:	ecbd 8b06 	vpop	{d8-d10}
 8014248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424c:	4b81      	ldr	r3, [pc, #516]	; (8014454 <__ieee754_pow+0x254>)
 801424e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014252:	429c      	cmp	r4, r3
 8014254:	ee10 aa10 	vmov	sl, s0
 8014258:	463d      	mov	r5, r7
 801425a:	dc06      	bgt.n	801426a <__ieee754_pow+0x6a>
 801425c:	d101      	bne.n	8014262 <__ieee754_pow+0x62>
 801425e:	2e00      	cmp	r6, #0
 8014260:	d1e7      	bne.n	8014232 <__ieee754_pow+0x32>
 8014262:	4598      	cmp	r8, r3
 8014264:	dc01      	bgt.n	801426a <__ieee754_pow+0x6a>
 8014266:	d10f      	bne.n	8014288 <__ieee754_pow+0x88>
 8014268:	b172      	cbz	r2, 8014288 <__ieee754_pow+0x88>
 801426a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801426e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014272:	ea55 050a 	orrs.w	r5, r5, sl
 8014276:	d1dc      	bne.n	8014232 <__ieee754_pow+0x32>
 8014278:	e9dd 3200 	ldrd	r3, r2, [sp]
 801427c:	18db      	adds	r3, r3, r3
 801427e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8014282:	4152      	adcs	r2, r2
 8014284:	429d      	cmp	r5, r3
 8014286:	e7d0      	b.n	801422a <__ieee754_pow+0x2a>
 8014288:	2d00      	cmp	r5, #0
 801428a:	da3b      	bge.n	8014304 <__ieee754_pow+0x104>
 801428c:	4b72      	ldr	r3, [pc, #456]	; (8014458 <__ieee754_pow+0x258>)
 801428e:	4598      	cmp	r8, r3
 8014290:	dc51      	bgt.n	8014336 <__ieee754_pow+0x136>
 8014292:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014296:	4598      	cmp	r8, r3
 8014298:	f340 84ab 	ble.w	8014bf2 <__ieee754_pow+0x9f2>
 801429c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80142a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80142a4:	2b14      	cmp	r3, #20
 80142a6:	dd0f      	ble.n	80142c8 <__ieee754_pow+0xc8>
 80142a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80142ac:	fa22 f103 	lsr.w	r1, r2, r3
 80142b0:	fa01 f303 	lsl.w	r3, r1, r3
 80142b4:	4293      	cmp	r3, r2
 80142b6:	f040 849c 	bne.w	8014bf2 <__ieee754_pow+0x9f2>
 80142ba:	f001 0101 	and.w	r1, r1, #1
 80142be:	f1c1 0302 	rsb	r3, r1, #2
 80142c2:	9304      	str	r3, [sp, #16]
 80142c4:	b182      	cbz	r2, 80142e8 <__ieee754_pow+0xe8>
 80142c6:	e05f      	b.n	8014388 <__ieee754_pow+0x188>
 80142c8:	2a00      	cmp	r2, #0
 80142ca:	d15b      	bne.n	8014384 <__ieee754_pow+0x184>
 80142cc:	f1c3 0314 	rsb	r3, r3, #20
 80142d0:	fa48 f103 	asr.w	r1, r8, r3
 80142d4:	fa01 f303 	lsl.w	r3, r1, r3
 80142d8:	4543      	cmp	r3, r8
 80142da:	f040 8487 	bne.w	8014bec <__ieee754_pow+0x9ec>
 80142de:	f001 0101 	and.w	r1, r1, #1
 80142e2:	f1c1 0302 	rsb	r3, r1, #2
 80142e6:	9304      	str	r3, [sp, #16]
 80142e8:	4b5c      	ldr	r3, [pc, #368]	; (801445c <__ieee754_pow+0x25c>)
 80142ea:	4598      	cmp	r8, r3
 80142ec:	d132      	bne.n	8014354 <__ieee754_pow+0x154>
 80142ee:	f1b9 0f00 	cmp.w	r9, #0
 80142f2:	f280 8477 	bge.w	8014be4 <__ieee754_pow+0x9e4>
 80142f6:	4959      	ldr	r1, [pc, #356]	; (801445c <__ieee754_pow+0x25c>)
 80142f8:	4632      	mov	r2, r6
 80142fa:	463b      	mov	r3, r7
 80142fc:	2000      	movs	r0, #0
 80142fe:	f7ec fa7d 	bl	80007fc <__aeabi_ddiv>
 8014302:	e79c      	b.n	801423e <__ieee754_pow+0x3e>
 8014304:	2300      	movs	r3, #0
 8014306:	9304      	str	r3, [sp, #16]
 8014308:	2a00      	cmp	r2, #0
 801430a:	d13d      	bne.n	8014388 <__ieee754_pow+0x188>
 801430c:	4b51      	ldr	r3, [pc, #324]	; (8014454 <__ieee754_pow+0x254>)
 801430e:	4598      	cmp	r8, r3
 8014310:	d1ea      	bne.n	80142e8 <__ieee754_pow+0xe8>
 8014312:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014316:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801431a:	ea53 030a 	orrs.w	r3, r3, sl
 801431e:	f000 8459 	beq.w	8014bd4 <__ieee754_pow+0x9d4>
 8014322:	4b4f      	ldr	r3, [pc, #316]	; (8014460 <__ieee754_pow+0x260>)
 8014324:	429c      	cmp	r4, r3
 8014326:	dd08      	ble.n	801433a <__ieee754_pow+0x13a>
 8014328:	f1b9 0f00 	cmp.w	r9, #0
 801432c:	f2c0 8456 	blt.w	8014bdc <__ieee754_pow+0x9dc>
 8014330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014334:	e783      	b.n	801423e <__ieee754_pow+0x3e>
 8014336:	2302      	movs	r3, #2
 8014338:	e7e5      	b.n	8014306 <__ieee754_pow+0x106>
 801433a:	f1b9 0f00 	cmp.w	r9, #0
 801433e:	f04f 0000 	mov.w	r0, #0
 8014342:	f04f 0100 	mov.w	r1, #0
 8014346:	f6bf af7a 	bge.w	801423e <__ieee754_pow+0x3e>
 801434a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801434e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014352:	e774      	b.n	801423e <__ieee754_pow+0x3e>
 8014354:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014358:	d106      	bne.n	8014368 <__ieee754_pow+0x168>
 801435a:	4632      	mov	r2, r6
 801435c:	463b      	mov	r3, r7
 801435e:	4630      	mov	r0, r6
 8014360:	4639      	mov	r1, r7
 8014362:	f7ec f921 	bl	80005a8 <__aeabi_dmul>
 8014366:	e76a      	b.n	801423e <__ieee754_pow+0x3e>
 8014368:	4b3e      	ldr	r3, [pc, #248]	; (8014464 <__ieee754_pow+0x264>)
 801436a:	4599      	cmp	r9, r3
 801436c:	d10c      	bne.n	8014388 <__ieee754_pow+0x188>
 801436e:	2d00      	cmp	r5, #0
 8014370:	db0a      	blt.n	8014388 <__ieee754_pow+0x188>
 8014372:	ec47 6b10 	vmov	d0, r6, r7
 8014376:	b009      	add	sp, #36	; 0x24
 8014378:	ecbd 8b06 	vpop	{d8-d10}
 801437c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014380:	f000 bd20 	b.w	8014dc4 <__ieee754_sqrt>
 8014384:	2300      	movs	r3, #0
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	ec47 6b10 	vmov	d0, r6, r7
 801438c:	f000 fc62 	bl	8014c54 <fabs>
 8014390:	ec51 0b10 	vmov	r0, r1, d0
 8014394:	f1ba 0f00 	cmp.w	sl, #0
 8014398:	d129      	bne.n	80143ee <__ieee754_pow+0x1ee>
 801439a:	b124      	cbz	r4, 80143a6 <__ieee754_pow+0x1a6>
 801439c:	4b2f      	ldr	r3, [pc, #188]	; (801445c <__ieee754_pow+0x25c>)
 801439e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d123      	bne.n	80143ee <__ieee754_pow+0x1ee>
 80143a6:	f1b9 0f00 	cmp.w	r9, #0
 80143aa:	da05      	bge.n	80143b8 <__ieee754_pow+0x1b8>
 80143ac:	4602      	mov	r2, r0
 80143ae:	460b      	mov	r3, r1
 80143b0:	2000      	movs	r0, #0
 80143b2:	492a      	ldr	r1, [pc, #168]	; (801445c <__ieee754_pow+0x25c>)
 80143b4:	f7ec fa22 	bl	80007fc <__aeabi_ddiv>
 80143b8:	2d00      	cmp	r5, #0
 80143ba:	f6bf af40 	bge.w	801423e <__ieee754_pow+0x3e>
 80143be:	9b04      	ldr	r3, [sp, #16]
 80143c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80143c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80143c8:	431c      	orrs	r4, r3
 80143ca:	d108      	bne.n	80143de <__ieee754_pow+0x1de>
 80143cc:	4602      	mov	r2, r0
 80143ce:	460b      	mov	r3, r1
 80143d0:	4610      	mov	r0, r2
 80143d2:	4619      	mov	r1, r3
 80143d4:	f7eb ff30 	bl	8000238 <__aeabi_dsub>
 80143d8:	4602      	mov	r2, r0
 80143da:	460b      	mov	r3, r1
 80143dc:	e78f      	b.n	80142fe <__ieee754_pow+0xfe>
 80143de:	9b04      	ldr	r3, [sp, #16]
 80143e0:	2b01      	cmp	r3, #1
 80143e2:	f47f af2c 	bne.w	801423e <__ieee754_pow+0x3e>
 80143e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143ea:	4619      	mov	r1, r3
 80143ec:	e727      	b.n	801423e <__ieee754_pow+0x3e>
 80143ee:	0feb      	lsrs	r3, r5, #31
 80143f0:	3b01      	subs	r3, #1
 80143f2:	9306      	str	r3, [sp, #24]
 80143f4:	9a06      	ldr	r2, [sp, #24]
 80143f6:	9b04      	ldr	r3, [sp, #16]
 80143f8:	4313      	orrs	r3, r2
 80143fa:	d102      	bne.n	8014402 <__ieee754_pow+0x202>
 80143fc:	4632      	mov	r2, r6
 80143fe:	463b      	mov	r3, r7
 8014400:	e7e6      	b.n	80143d0 <__ieee754_pow+0x1d0>
 8014402:	4b19      	ldr	r3, [pc, #100]	; (8014468 <__ieee754_pow+0x268>)
 8014404:	4598      	cmp	r8, r3
 8014406:	f340 80fb 	ble.w	8014600 <__ieee754_pow+0x400>
 801440a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801440e:	4598      	cmp	r8, r3
 8014410:	4b13      	ldr	r3, [pc, #76]	; (8014460 <__ieee754_pow+0x260>)
 8014412:	dd0c      	ble.n	801442e <__ieee754_pow+0x22e>
 8014414:	429c      	cmp	r4, r3
 8014416:	dc0f      	bgt.n	8014438 <__ieee754_pow+0x238>
 8014418:	f1b9 0f00 	cmp.w	r9, #0
 801441c:	da0f      	bge.n	801443e <__ieee754_pow+0x23e>
 801441e:	2000      	movs	r0, #0
 8014420:	b009      	add	sp, #36	; 0x24
 8014422:	ecbd 8b06 	vpop	{d8-d10}
 8014426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801442a:	f000 bcc2 	b.w	8014db2 <__math_oflow>
 801442e:	429c      	cmp	r4, r3
 8014430:	dbf2      	blt.n	8014418 <__ieee754_pow+0x218>
 8014432:	4b0a      	ldr	r3, [pc, #40]	; (801445c <__ieee754_pow+0x25c>)
 8014434:	429c      	cmp	r4, r3
 8014436:	dd19      	ble.n	801446c <__ieee754_pow+0x26c>
 8014438:	f1b9 0f00 	cmp.w	r9, #0
 801443c:	dcef      	bgt.n	801441e <__ieee754_pow+0x21e>
 801443e:	2000      	movs	r0, #0
 8014440:	b009      	add	sp, #36	; 0x24
 8014442:	ecbd 8b06 	vpop	{d8-d10}
 8014446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444a:	f000 bca9 	b.w	8014da0 <__math_uflow>
 801444e:	bf00      	nop
 8014450:	fff00000 	.word	0xfff00000
 8014454:	7ff00000 	.word	0x7ff00000
 8014458:	433fffff 	.word	0x433fffff
 801445c:	3ff00000 	.word	0x3ff00000
 8014460:	3fefffff 	.word	0x3fefffff
 8014464:	3fe00000 	.word	0x3fe00000
 8014468:	41e00000 	.word	0x41e00000
 801446c:	4b60      	ldr	r3, [pc, #384]	; (80145f0 <__ieee754_pow+0x3f0>)
 801446e:	2200      	movs	r2, #0
 8014470:	f7eb fee2 	bl	8000238 <__aeabi_dsub>
 8014474:	a354      	add	r3, pc, #336	; (adr r3, 80145c8 <__ieee754_pow+0x3c8>)
 8014476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447a:	4604      	mov	r4, r0
 801447c:	460d      	mov	r5, r1
 801447e:	f7ec f893 	bl	80005a8 <__aeabi_dmul>
 8014482:	a353      	add	r3, pc, #332	; (adr r3, 80145d0 <__ieee754_pow+0x3d0>)
 8014484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014488:	4606      	mov	r6, r0
 801448a:	460f      	mov	r7, r1
 801448c:	4620      	mov	r0, r4
 801448e:	4629      	mov	r1, r5
 8014490:	f7ec f88a 	bl	80005a8 <__aeabi_dmul>
 8014494:	4b57      	ldr	r3, [pc, #348]	; (80145f4 <__ieee754_pow+0x3f4>)
 8014496:	4682      	mov	sl, r0
 8014498:	468b      	mov	fp, r1
 801449a:	2200      	movs	r2, #0
 801449c:	4620      	mov	r0, r4
 801449e:	4629      	mov	r1, r5
 80144a0:	f7ec f882 	bl	80005a8 <__aeabi_dmul>
 80144a4:	4602      	mov	r2, r0
 80144a6:	460b      	mov	r3, r1
 80144a8:	a14b      	add	r1, pc, #300	; (adr r1, 80145d8 <__ieee754_pow+0x3d8>)
 80144aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144ae:	f7eb fec3 	bl	8000238 <__aeabi_dsub>
 80144b2:	4622      	mov	r2, r4
 80144b4:	462b      	mov	r3, r5
 80144b6:	f7ec f877 	bl	80005a8 <__aeabi_dmul>
 80144ba:	4602      	mov	r2, r0
 80144bc:	460b      	mov	r3, r1
 80144be:	2000      	movs	r0, #0
 80144c0:	494d      	ldr	r1, [pc, #308]	; (80145f8 <__ieee754_pow+0x3f8>)
 80144c2:	f7eb feb9 	bl	8000238 <__aeabi_dsub>
 80144c6:	4622      	mov	r2, r4
 80144c8:	4680      	mov	r8, r0
 80144ca:	4689      	mov	r9, r1
 80144cc:	462b      	mov	r3, r5
 80144ce:	4620      	mov	r0, r4
 80144d0:	4629      	mov	r1, r5
 80144d2:	f7ec f869 	bl	80005a8 <__aeabi_dmul>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	4640      	mov	r0, r8
 80144dc:	4649      	mov	r1, r9
 80144de:	f7ec f863 	bl	80005a8 <__aeabi_dmul>
 80144e2:	a33f      	add	r3, pc, #252	; (adr r3, 80145e0 <__ieee754_pow+0x3e0>)
 80144e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e8:	f7ec f85e 	bl	80005a8 <__aeabi_dmul>
 80144ec:	4602      	mov	r2, r0
 80144ee:	460b      	mov	r3, r1
 80144f0:	4650      	mov	r0, sl
 80144f2:	4659      	mov	r1, fp
 80144f4:	f7eb fea0 	bl	8000238 <__aeabi_dsub>
 80144f8:	4602      	mov	r2, r0
 80144fa:	460b      	mov	r3, r1
 80144fc:	4680      	mov	r8, r0
 80144fe:	4689      	mov	r9, r1
 8014500:	4630      	mov	r0, r6
 8014502:	4639      	mov	r1, r7
 8014504:	f7eb fe9a 	bl	800023c <__adddf3>
 8014508:	2000      	movs	r0, #0
 801450a:	4632      	mov	r2, r6
 801450c:	463b      	mov	r3, r7
 801450e:	4604      	mov	r4, r0
 8014510:	460d      	mov	r5, r1
 8014512:	f7eb fe91 	bl	8000238 <__aeabi_dsub>
 8014516:	4602      	mov	r2, r0
 8014518:	460b      	mov	r3, r1
 801451a:	4640      	mov	r0, r8
 801451c:	4649      	mov	r1, r9
 801451e:	f7eb fe8b 	bl	8000238 <__aeabi_dsub>
 8014522:	9b04      	ldr	r3, [sp, #16]
 8014524:	9a06      	ldr	r2, [sp, #24]
 8014526:	3b01      	subs	r3, #1
 8014528:	4313      	orrs	r3, r2
 801452a:	4682      	mov	sl, r0
 801452c:	468b      	mov	fp, r1
 801452e:	f040 81e7 	bne.w	8014900 <__ieee754_pow+0x700>
 8014532:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80145e8 <__ieee754_pow+0x3e8>
 8014536:	eeb0 8a47 	vmov.f32	s16, s14
 801453a:	eef0 8a67 	vmov.f32	s17, s15
 801453e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014542:	2600      	movs	r6, #0
 8014544:	4632      	mov	r2, r6
 8014546:	463b      	mov	r3, r7
 8014548:	e9dd 0100 	ldrd	r0, r1, [sp]
 801454c:	f7eb fe74 	bl	8000238 <__aeabi_dsub>
 8014550:	4622      	mov	r2, r4
 8014552:	462b      	mov	r3, r5
 8014554:	f7ec f828 	bl	80005a8 <__aeabi_dmul>
 8014558:	e9dd 2300 	ldrd	r2, r3, [sp]
 801455c:	4680      	mov	r8, r0
 801455e:	4689      	mov	r9, r1
 8014560:	4650      	mov	r0, sl
 8014562:	4659      	mov	r1, fp
 8014564:	f7ec f820 	bl	80005a8 <__aeabi_dmul>
 8014568:	4602      	mov	r2, r0
 801456a:	460b      	mov	r3, r1
 801456c:	4640      	mov	r0, r8
 801456e:	4649      	mov	r1, r9
 8014570:	f7eb fe64 	bl	800023c <__adddf3>
 8014574:	4632      	mov	r2, r6
 8014576:	463b      	mov	r3, r7
 8014578:	4680      	mov	r8, r0
 801457a:	4689      	mov	r9, r1
 801457c:	4620      	mov	r0, r4
 801457e:	4629      	mov	r1, r5
 8014580:	f7ec f812 	bl	80005a8 <__aeabi_dmul>
 8014584:	460b      	mov	r3, r1
 8014586:	4604      	mov	r4, r0
 8014588:	460d      	mov	r5, r1
 801458a:	4602      	mov	r2, r0
 801458c:	4649      	mov	r1, r9
 801458e:	4640      	mov	r0, r8
 8014590:	f7eb fe54 	bl	800023c <__adddf3>
 8014594:	4b19      	ldr	r3, [pc, #100]	; (80145fc <__ieee754_pow+0x3fc>)
 8014596:	4299      	cmp	r1, r3
 8014598:	ec45 4b19 	vmov	d9, r4, r5
 801459c:	4606      	mov	r6, r0
 801459e:	460f      	mov	r7, r1
 80145a0:	468b      	mov	fp, r1
 80145a2:	f340 82f0 	ble.w	8014b86 <__ieee754_pow+0x986>
 80145a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80145aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80145ae:	4303      	orrs	r3, r0
 80145b0:	f000 81e4 	beq.w	801497c <__ieee754_pow+0x77c>
 80145b4:	ec51 0b18 	vmov	r0, r1, d8
 80145b8:	2200      	movs	r2, #0
 80145ba:	2300      	movs	r3, #0
 80145bc:	f7ec fa66 	bl	8000a8c <__aeabi_dcmplt>
 80145c0:	3800      	subs	r0, #0
 80145c2:	bf18      	it	ne
 80145c4:	2001      	movne	r0, #1
 80145c6:	e72b      	b.n	8014420 <__ieee754_pow+0x220>
 80145c8:	60000000 	.word	0x60000000
 80145cc:	3ff71547 	.word	0x3ff71547
 80145d0:	f85ddf44 	.word	0xf85ddf44
 80145d4:	3e54ae0b 	.word	0x3e54ae0b
 80145d8:	55555555 	.word	0x55555555
 80145dc:	3fd55555 	.word	0x3fd55555
 80145e0:	652b82fe 	.word	0x652b82fe
 80145e4:	3ff71547 	.word	0x3ff71547
 80145e8:	00000000 	.word	0x00000000
 80145ec:	bff00000 	.word	0xbff00000
 80145f0:	3ff00000 	.word	0x3ff00000
 80145f4:	3fd00000 	.word	0x3fd00000
 80145f8:	3fe00000 	.word	0x3fe00000
 80145fc:	408fffff 	.word	0x408fffff
 8014600:	4bd5      	ldr	r3, [pc, #852]	; (8014958 <__ieee754_pow+0x758>)
 8014602:	402b      	ands	r3, r5
 8014604:	2200      	movs	r2, #0
 8014606:	b92b      	cbnz	r3, 8014614 <__ieee754_pow+0x414>
 8014608:	4bd4      	ldr	r3, [pc, #848]	; (801495c <__ieee754_pow+0x75c>)
 801460a:	f7eb ffcd 	bl	80005a8 <__aeabi_dmul>
 801460e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014612:	460c      	mov	r4, r1
 8014614:	1523      	asrs	r3, r4, #20
 8014616:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801461a:	4413      	add	r3, r2
 801461c:	9305      	str	r3, [sp, #20]
 801461e:	4bd0      	ldr	r3, [pc, #832]	; (8014960 <__ieee754_pow+0x760>)
 8014620:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014624:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014628:	429c      	cmp	r4, r3
 801462a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801462e:	dd08      	ble.n	8014642 <__ieee754_pow+0x442>
 8014630:	4bcc      	ldr	r3, [pc, #816]	; (8014964 <__ieee754_pow+0x764>)
 8014632:	429c      	cmp	r4, r3
 8014634:	f340 8162 	ble.w	80148fc <__ieee754_pow+0x6fc>
 8014638:	9b05      	ldr	r3, [sp, #20]
 801463a:	3301      	adds	r3, #1
 801463c:	9305      	str	r3, [sp, #20]
 801463e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014642:	2400      	movs	r4, #0
 8014644:	00e3      	lsls	r3, r4, #3
 8014646:	9307      	str	r3, [sp, #28]
 8014648:	4bc7      	ldr	r3, [pc, #796]	; (8014968 <__ieee754_pow+0x768>)
 801464a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801464e:	ed93 7b00 	vldr	d7, [r3]
 8014652:	4629      	mov	r1, r5
 8014654:	ec53 2b17 	vmov	r2, r3, d7
 8014658:	eeb0 9a47 	vmov.f32	s18, s14
 801465c:	eef0 9a67 	vmov.f32	s19, s15
 8014660:	4682      	mov	sl, r0
 8014662:	f7eb fde9 	bl	8000238 <__aeabi_dsub>
 8014666:	4652      	mov	r2, sl
 8014668:	4606      	mov	r6, r0
 801466a:	460f      	mov	r7, r1
 801466c:	462b      	mov	r3, r5
 801466e:	ec51 0b19 	vmov	r0, r1, d9
 8014672:	f7eb fde3 	bl	800023c <__adddf3>
 8014676:	4602      	mov	r2, r0
 8014678:	460b      	mov	r3, r1
 801467a:	2000      	movs	r0, #0
 801467c:	49bb      	ldr	r1, [pc, #748]	; (801496c <__ieee754_pow+0x76c>)
 801467e:	f7ec f8bd 	bl	80007fc <__aeabi_ddiv>
 8014682:	ec41 0b1a 	vmov	d10, r0, r1
 8014686:	4602      	mov	r2, r0
 8014688:	460b      	mov	r3, r1
 801468a:	4630      	mov	r0, r6
 801468c:	4639      	mov	r1, r7
 801468e:	f7eb ff8b 	bl	80005a8 <__aeabi_dmul>
 8014692:	2300      	movs	r3, #0
 8014694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014698:	9302      	str	r3, [sp, #8]
 801469a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801469e:	46ab      	mov	fp, r5
 80146a0:	106d      	asrs	r5, r5, #1
 80146a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80146a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80146aa:	ec41 0b18 	vmov	d8, r0, r1
 80146ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80146b2:	2200      	movs	r2, #0
 80146b4:	4640      	mov	r0, r8
 80146b6:	4649      	mov	r1, r9
 80146b8:	4614      	mov	r4, r2
 80146ba:	461d      	mov	r5, r3
 80146bc:	f7eb ff74 	bl	80005a8 <__aeabi_dmul>
 80146c0:	4602      	mov	r2, r0
 80146c2:	460b      	mov	r3, r1
 80146c4:	4630      	mov	r0, r6
 80146c6:	4639      	mov	r1, r7
 80146c8:	f7eb fdb6 	bl	8000238 <__aeabi_dsub>
 80146cc:	ec53 2b19 	vmov	r2, r3, d9
 80146d0:	4606      	mov	r6, r0
 80146d2:	460f      	mov	r7, r1
 80146d4:	4620      	mov	r0, r4
 80146d6:	4629      	mov	r1, r5
 80146d8:	f7eb fdae 	bl	8000238 <__aeabi_dsub>
 80146dc:	4602      	mov	r2, r0
 80146de:	460b      	mov	r3, r1
 80146e0:	4650      	mov	r0, sl
 80146e2:	4659      	mov	r1, fp
 80146e4:	f7eb fda8 	bl	8000238 <__aeabi_dsub>
 80146e8:	4642      	mov	r2, r8
 80146ea:	464b      	mov	r3, r9
 80146ec:	f7eb ff5c 	bl	80005a8 <__aeabi_dmul>
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	4630      	mov	r0, r6
 80146f6:	4639      	mov	r1, r7
 80146f8:	f7eb fd9e 	bl	8000238 <__aeabi_dsub>
 80146fc:	ec53 2b1a 	vmov	r2, r3, d10
 8014700:	f7eb ff52 	bl	80005a8 <__aeabi_dmul>
 8014704:	ec53 2b18 	vmov	r2, r3, d8
 8014708:	ec41 0b19 	vmov	d9, r0, r1
 801470c:	ec51 0b18 	vmov	r0, r1, d8
 8014710:	f7eb ff4a 	bl	80005a8 <__aeabi_dmul>
 8014714:	a37c      	add	r3, pc, #496	; (adr r3, 8014908 <__ieee754_pow+0x708>)
 8014716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471a:	4604      	mov	r4, r0
 801471c:	460d      	mov	r5, r1
 801471e:	f7eb ff43 	bl	80005a8 <__aeabi_dmul>
 8014722:	a37b      	add	r3, pc, #492	; (adr r3, 8014910 <__ieee754_pow+0x710>)
 8014724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014728:	f7eb fd88 	bl	800023c <__adddf3>
 801472c:	4622      	mov	r2, r4
 801472e:	462b      	mov	r3, r5
 8014730:	f7eb ff3a 	bl	80005a8 <__aeabi_dmul>
 8014734:	a378      	add	r3, pc, #480	; (adr r3, 8014918 <__ieee754_pow+0x718>)
 8014736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473a:	f7eb fd7f 	bl	800023c <__adddf3>
 801473e:	4622      	mov	r2, r4
 8014740:	462b      	mov	r3, r5
 8014742:	f7eb ff31 	bl	80005a8 <__aeabi_dmul>
 8014746:	a376      	add	r3, pc, #472	; (adr r3, 8014920 <__ieee754_pow+0x720>)
 8014748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474c:	f7eb fd76 	bl	800023c <__adddf3>
 8014750:	4622      	mov	r2, r4
 8014752:	462b      	mov	r3, r5
 8014754:	f7eb ff28 	bl	80005a8 <__aeabi_dmul>
 8014758:	a373      	add	r3, pc, #460	; (adr r3, 8014928 <__ieee754_pow+0x728>)
 801475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475e:	f7eb fd6d 	bl	800023c <__adddf3>
 8014762:	4622      	mov	r2, r4
 8014764:	462b      	mov	r3, r5
 8014766:	f7eb ff1f 	bl	80005a8 <__aeabi_dmul>
 801476a:	a371      	add	r3, pc, #452	; (adr r3, 8014930 <__ieee754_pow+0x730>)
 801476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014770:	f7eb fd64 	bl	800023c <__adddf3>
 8014774:	4622      	mov	r2, r4
 8014776:	4606      	mov	r6, r0
 8014778:	460f      	mov	r7, r1
 801477a:	462b      	mov	r3, r5
 801477c:	4620      	mov	r0, r4
 801477e:	4629      	mov	r1, r5
 8014780:	f7eb ff12 	bl	80005a8 <__aeabi_dmul>
 8014784:	4602      	mov	r2, r0
 8014786:	460b      	mov	r3, r1
 8014788:	4630      	mov	r0, r6
 801478a:	4639      	mov	r1, r7
 801478c:	f7eb ff0c 	bl	80005a8 <__aeabi_dmul>
 8014790:	4642      	mov	r2, r8
 8014792:	4604      	mov	r4, r0
 8014794:	460d      	mov	r5, r1
 8014796:	464b      	mov	r3, r9
 8014798:	ec51 0b18 	vmov	r0, r1, d8
 801479c:	f7eb fd4e 	bl	800023c <__adddf3>
 80147a0:	ec53 2b19 	vmov	r2, r3, d9
 80147a4:	f7eb ff00 	bl	80005a8 <__aeabi_dmul>
 80147a8:	4622      	mov	r2, r4
 80147aa:	462b      	mov	r3, r5
 80147ac:	f7eb fd46 	bl	800023c <__adddf3>
 80147b0:	4642      	mov	r2, r8
 80147b2:	4682      	mov	sl, r0
 80147b4:	468b      	mov	fp, r1
 80147b6:	464b      	mov	r3, r9
 80147b8:	4640      	mov	r0, r8
 80147ba:	4649      	mov	r1, r9
 80147bc:	f7eb fef4 	bl	80005a8 <__aeabi_dmul>
 80147c0:	4b6b      	ldr	r3, [pc, #428]	; (8014970 <__ieee754_pow+0x770>)
 80147c2:	2200      	movs	r2, #0
 80147c4:	4606      	mov	r6, r0
 80147c6:	460f      	mov	r7, r1
 80147c8:	f7eb fd38 	bl	800023c <__adddf3>
 80147cc:	4652      	mov	r2, sl
 80147ce:	465b      	mov	r3, fp
 80147d0:	f7eb fd34 	bl	800023c <__adddf3>
 80147d4:	2000      	movs	r0, #0
 80147d6:	4604      	mov	r4, r0
 80147d8:	460d      	mov	r5, r1
 80147da:	4602      	mov	r2, r0
 80147dc:	460b      	mov	r3, r1
 80147de:	4640      	mov	r0, r8
 80147e0:	4649      	mov	r1, r9
 80147e2:	f7eb fee1 	bl	80005a8 <__aeabi_dmul>
 80147e6:	4b62      	ldr	r3, [pc, #392]	; (8014970 <__ieee754_pow+0x770>)
 80147e8:	4680      	mov	r8, r0
 80147ea:	4689      	mov	r9, r1
 80147ec:	2200      	movs	r2, #0
 80147ee:	4620      	mov	r0, r4
 80147f0:	4629      	mov	r1, r5
 80147f2:	f7eb fd21 	bl	8000238 <__aeabi_dsub>
 80147f6:	4632      	mov	r2, r6
 80147f8:	463b      	mov	r3, r7
 80147fa:	f7eb fd1d 	bl	8000238 <__aeabi_dsub>
 80147fe:	4602      	mov	r2, r0
 8014800:	460b      	mov	r3, r1
 8014802:	4650      	mov	r0, sl
 8014804:	4659      	mov	r1, fp
 8014806:	f7eb fd17 	bl	8000238 <__aeabi_dsub>
 801480a:	ec53 2b18 	vmov	r2, r3, d8
 801480e:	f7eb fecb 	bl	80005a8 <__aeabi_dmul>
 8014812:	4622      	mov	r2, r4
 8014814:	4606      	mov	r6, r0
 8014816:	460f      	mov	r7, r1
 8014818:	462b      	mov	r3, r5
 801481a:	ec51 0b19 	vmov	r0, r1, d9
 801481e:	f7eb fec3 	bl	80005a8 <__aeabi_dmul>
 8014822:	4602      	mov	r2, r0
 8014824:	460b      	mov	r3, r1
 8014826:	4630      	mov	r0, r6
 8014828:	4639      	mov	r1, r7
 801482a:	f7eb fd07 	bl	800023c <__adddf3>
 801482e:	4606      	mov	r6, r0
 8014830:	460f      	mov	r7, r1
 8014832:	4602      	mov	r2, r0
 8014834:	460b      	mov	r3, r1
 8014836:	4640      	mov	r0, r8
 8014838:	4649      	mov	r1, r9
 801483a:	f7eb fcff 	bl	800023c <__adddf3>
 801483e:	a33e      	add	r3, pc, #248	; (adr r3, 8014938 <__ieee754_pow+0x738>)
 8014840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014844:	2000      	movs	r0, #0
 8014846:	4604      	mov	r4, r0
 8014848:	460d      	mov	r5, r1
 801484a:	f7eb fead 	bl	80005a8 <__aeabi_dmul>
 801484e:	4642      	mov	r2, r8
 8014850:	ec41 0b18 	vmov	d8, r0, r1
 8014854:	464b      	mov	r3, r9
 8014856:	4620      	mov	r0, r4
 8014858:	4629      	mov	r1, r5
 801485a:	f7eb fced 	bl	8000238 <__aeabi_dsub>
 801485e:	4602      	mov	r2, r0
 8014860:	460b      	mov	r3, r1
 8014862:	4630      	mov	r0, r6
 8014864:	4639      	mov	r1, r7
 8014866:	f7eb fce7 	bl	8000238 <__aeabi_dsub>
 801486a:	a335      	add	r3, pc, #212	; (adr r3, 8014940 <__ieee754_pow+0x740>)
 801486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014870:	f7eb fe9a 	bl	80005a8 <__aeabi_dmul>
 8014874:	a334      	add	r3, pc, #208	; (adr r3, 8014948 <__ieee754_pow+0x748>)
 8014876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487a:	4606      	mov	r6, r0
 801487c:	460f      	mov	r7, r1
 801487e:	4620      	mov	r0, r4
 8014880:	4629      	mov	r1, r5
 8014882:	f7eb fe91 	bl	80005a8 <__aeabi_dmul>
 8014886:	4602      	mov	r2, r0
 8014888:	460b      	mov	r3, r1
 801488a:	4630      	mov	r0, r6
 801488c:	4639      	mov	r1, r7
 801488e:	f7eb fcd5 	bl	800023c <__adddf3>
 8014892:	9a07      	ldr	r2, [sp, #28]
 8014894:	4b37      	ldr	r3, [pc, #220]	; (8014974 <__ieee754_pow+0x774>)
 8014896:	4413      	add	r3, r2
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	f7eb fcce 	bl	800023c <__adddf3>
 80148a0:	4682      	mov	sl, r0
 80148a2:	9805      	ldr	r0, [sp, #20]
 80148a4:	468b      	mov	fp, r1
 80148a6:	f7eb fe15 	bl	80004d4 <__aeabi_i2d>
 80148aa:	9a07      	ldr	r2, [sp, #28]
 80148ac:	4b32      	ldr	r3, [pc, #200]	; (8014978 <__ieee754_pow+0x778>)
 80148ae:	4413      	add	r3, r2
 80148b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148b4:	4606      	mov	r6, r0
 80148b6:	460f      	mov	r7, r1
 80148b8:	4652      	mov	r2, sl
 80148ba:	465b      	mov	r3, fp
 80148bc:	ec51 0b18 	vmov	r0, r1, d8
 80148c0:	f7eb fcbc 	bl	800023c <__adddf3>
 80148c4:	4642      	mov	r2, r8
 80148c6:	464b      	mov	r3, r9
 80148c8:	f7eb fcb8 	bl	800023c <__adddf3>
 80148cc:	4632      	mov	r2, r6
 80148ce:	463b      	mov	r3, r7
 80148d0:	f7eb fcb4 	bl	800023c <__adddf3>
 80148d4:	2000      	movs	r0, #0
 80148d6:	4632      	mov	r2, r6
 80148d8:	463b      	mov	r3, r7
 80148da:	4604      	mov	r4, r0
 80148dc:	460d      	mov	r5, r1
 80148de:	f7eb fcab 	bl	8000238 <__aeabi_dsub>
 80148e2:	4642      	mov	r2, r8
 80148e4:	464b      	mov	r3, r9
 80148e6:	f7eb fca7 	bl	8000238 <__aeabi_dsub>
 80148ea:	ec53 2b18 	vmov	r2, r3, d8
 80148ee:	f7eb fca3 	bl	8000238 <__aeabi_dsub>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
 80148f6:	4650      	mov	r0, sl
 80148f8:	4659      	mov	r1, fp
 80148fa:	e610      	b.n	801451e <__ieee754_pow+0x31e>
 80148fc:	2401      	movs	r4, #1
 80148fe:	e6a1      	b.n	8014644 <__ieee754_pow+0x444>
 8014900:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014950 <__ieee754_pow+0x750>
 8014904:	e617      	b.n	8014536 <__ieee754_pow+0x336>
 8014906:	bf00      	nop
 8014908:	4a454eef 	.word	0x4a454eef
 801490c:	3fca7e28 	.word	0x3fca7e28
 8014910:	93c9db65 	.word	0x93c9db65
 8014914:	3fcd864a 	.word	0x3fcd864a
 8014918:	a91d4101 	.word	0xa91d4101
 801491c:	3fd17460 	.word	0x3fd17460
 8014920:	518f264d 	.word	0x518f264d
 8014924:	3fd55555 	.word	0x3fd55555
 8014928:	db6fabff 	.word	0xdb6fabff
 801492c:	3fdb6db6 	.word	0x3fdb6db6
 8014930:	33333303 	.word	0x33333303
 8014934:	3fe33333 	.word	0x3fe33333
 8014938:	e0000000 	.word	0xe0000000
 801493c:	3feec709 	.word	0x3feec709
 8014940:	dc3a03fd 	.word	0xdc3a03fd
 8014944:	3feec709 	.word	0x3feec709
 8014948:	145b01f5 	.word	0x145b01f5
 801494c:	be3e2fe0 	.word	0xbe3e2fe0
 8014950:	00000000 	.word	0x00000000
 8014954:	3ff00000 	.word	0x3ff00000
 8014958:	7ff00000 	.word	0x7ff00000
 801495c:	43400000 	.word	0x43400000
 8014960:	0003988e 	.word	0x0003988e
 8014964:	000bb679 	.word	0x000bb679
 8014968:	08016d70 	.word	0x08016d70
 801496c:	3ff00000 	.word	0x3ff00000
 8014970:	40080000 	.word	0x40080000
 8014974:	08016d90 	.word	0x08016d90
 8014978:	08016d80 	.word	0x08016d80
 801497c:	a3b3      	add	r3, pc, #716	; (adr r3, 8014c4c <__ieee754_pow+0xa4c>)
 801497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014982:	4640      	mov	r0, r8
 8014984:	4649      	mov	r1, r9
 8014986:	f7eb fc59 	bl	800023c <__adddf3>
 801498a:	4622      	mov	r2, r4
 801498c:	ec41 0b1a 	vmov	d10, r0, r1
 8014990:	462b      	mov	r3, r5
 8014992:	4630      	mov	r0, r6
 8014994:	4639      	mov	r1, r7
 8014996:	f7eb fc4f 	bl	8000238 <__aeabi_dsub>
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	ec51 0b1a 	vmov	r0, r1, d10
 80149a2:	f7ec f891 	bl	8000ac8 <__aeabi_dcmpgt>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	f47f ae04 	bne.w	80145b4 <__ieee754_pow+0x3b4>
 80149ac:	4aa2      	ldr	r2, [pc, #648]	; (8014c38 <__ieee754_pow+0xa38>)
 80149ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80149b2:	4293      	cmp	r3, r2
 80149b4:	f340 8107 	ble.w	8014bc6 <__ieee754_pow+0x9c6>
 80149b8:	151b      	asrs	r3, r3, #20
 80149ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80149be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80149c2:	fa4a fa03 	asr.w	sl, sl, r3
 80149c6:	44da      	add	sl, fp
 80149c8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80149cc:	489b      	ldr	r0, [pc, #620]	; (8014c3c <__ieee754_pow+0xa3c>)
 80149ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80149d2:	4108      	asrs	r0, r1
 80149d4:	ea00 030a 	and.w	r3, r0, sl
 80149d8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80149dc:	f1c1 0114 	rsb	r1, r1, #20
 80149e0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80149e4:	fa4a fa01 	asr.w	sl, sl, r1
 80149e8:	f1bb 0f00 	cmp.w	fp, #0
 80149ec:	f04f 0200 	mov.w	r2, #0
 80149f0:	4620      	mov	r0, r4
 80149f2:	4629      	mov	r1, r5
 80149f4:	bfb8      	it	lt
 80149f6:	f1ca 0a00 	rsblt	sl, sl, #0
 80149fa:	f7eb fc1d 	bl	8000238 <__aeabi_dsub>
 80149fe:	ec41 0b19 	vmov	d9, r0, r1
 8014a02:	4642      	mov	r2, r8
 8014a04:	464b      	mov	r3, r9
 8014a06:	ec51 0b19 	vmov	r0, r1, d9
 8014a0a:	f7eb fc17 	bl	800023c <__adddf3>
 8014a0e:	a37a      	add	r3, pc, #488	; (adr r3, 8014bf8 <__ieee754_pow+0x9f8>)
 8014a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a14:	2000      	movs	r0, #0
 8014a16:	4604      	mov	r4, r0
 8014a18:	460d      	mov	r5, r1
 8014a1a:	f7eb fdc5 	bl	80005a8 <__aeabi_dmul>
 8014a1e:	ec53 2b19 	vmov	r2, r3, d9
 8014a22:	4606      	mov	r6, r0
 8014a24:	460f      	mov	r7, r1
 8014a26:	4620      	mov	r0, r4
 8014a28:	4629      	mov	r1, r5
 8014a2a:	f7eb fc05 	bl	8000238 <__aeabi_dsub>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	460b      	mov	r3, r1
 8014a32:	4640      	mov	r0, r8
 8014a34:	4649      	mov	r1, r9
 8014a36:	f7eb fbff 	bl	8000238 <__aeabi_dsub>
 8014a3a:	a371      	add	r3, pc, #452	; (adr r3, 8014c00 <__ieee754_pow+0xa00>)
 8014a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a40:	f7eb fdb2 	bl	80005a8 <__aeabi_dmul>
 8014a44:	a370      	add	r3, pc, #448	; (adr r3, 8014c08 <__ieee754_pow+0xa08>)
 8014a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4a:	4680      	mov	r8, r0
 8014a4c:	4689      	mov	r9, r1
 8014a4e:	4620      	mov	r0, r4
 8014a50:	4629      	mov	r1, r5
 8014a52:	f7eb fda9 	bl	80005a8 <__aeabi_dmul>
 8014a56:	4602      	mov	r2, r0
 8014a58:	460b      	mov	r3, r1
 8014a5a:	4640      	mov	r0, r8
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	f7eb fbed 	bl	800023c <__adddf3>
 8014a62:	4604      	mov	r4, r0
 8014a64:	460d      	mov	r5, r1
 8014a66:	4602      	mov	r2, r0
 8014a68:	460b      	mov	r3, r1
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	4639      	mov	r1, r7
 8014a6e:	f7eb fbe5 	bl	800023c <__adddf3>
 8014a72:	4632      	mov	r2, r6
 8014a74:	463b      	mov	r3, r7
 8014a76:	4680      	mov	r8, r0
 8014a78:	4689      	mov	r9, r1
 8014a7a:	f7eb fbdd 	bl	8000238 <__aeabi_dsub>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	460b      	mov	r3, r1
 8014a82:	4620      	mov	r0, r4
 8014a84:	4629      	mov	r1, r5
 8014a86:	f7eb fbd7 	bl	8000238 <__aeabi_dsub>
 8014a8a:	4642      	mov	r2, r8
 8014a8c:	4606      	mov	r6, r0
 8014a8e:	460f      	mov	r7, r1
 8014a90:	464b      	mov	r3, r9
 8014a92:	4640      	mov	r0, r8
 8014a94:	4649      	mov	r1, r9
 8014a96:	f7eb fd87 	bl	80005a8 <__aeabi_dmul>
 8014a9a:	a35d      	add	r3, pc, #372	; (adr r3, 8014c10 <__ieee754_pow+0xa10>)
 8014a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa0:	4604      	mov	r4, r0
 8014aa2:	460d      	mov	r5, r1
 8014aa4:	f7eb fd80 	bl	80005a8 <__aeabi_dmul>
 8014aa8:	a35b      	add	r3, pc, #364	; (adr r3, 8014c18 <__ieee754_pow+0xa18>)
 8014aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aae:	f7eb fbc3 	bl	8000238 <__aeabi_dsub>
 8014ab2:	4622      	mov	r2, r4
 8014ab4:	462b      	mov	r3, r5
 8014ab6:	f7eb fd77 	bl	80005a8 <__aeabi_dmul>
 8014aba:	a359      	add	r3, pc, #356	; (adr r3, 8014c20 <__ieee754_pow+0xa20>)
 8014abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac0:	f7eb fbbc 	bl	800023c <__adddf3>
 8014ac4:	4622      	mov	r2, r4
 8014ac6:	462b      	mov	r3, r5
 8014ac8:	f7eb fd6e 	bl	80005a8 <__aeabi_dmul>
 8014acc:	a356      	add	r3, pc, #344	; (adr r3, 8014c28 <__ieee754_pow+0xa28>)
 8014ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad2:	f7eb fbb1 	bl	8000238 <__aeabi_dsub>
 8014ad6:	4622      	mov	r2, r4
 8014ad8:	462b      	mov	r3, r5
 8014ada:	f7eb fd65 	bl	80005a8 <__aeabi_dmul>
 8014ade:	a354      	add	r3, pc, #336	; (adr r3, 8014c30 <__ieee754_pow+0xa30>)
 8014ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae4:	f7eb fbaa 	bl	800023c <__adddf3>
 8014ae8:	4622      	mov	r2, r4
 8014aea:	462b      	mov	r3, r5
 8014aec:	f7eb fd5c 	bl	80005a8 <__aeabi_dmul>
 8014af0:	4602      	mov	r2, r0
 8014af2:	460b      	mov	r3, r1
 8014af4:	4640      	mov	r0, r8
 8014af6:	4649      	mov	r1, r9
 8014af8:	f7eb fb9e 	bl	8000238 <__aeabi_dsub>
 8014afc:	4604      	mov	r4, r0
 8014afe:	460d      	mov	r5, r1
 8014b00:	4602      	mov	r2, r0
 8014b02:	460b      	mov	r3, r1
 8014b04:	4640      	mov	r0, r8
 8014b06:	4649      	mov	r1, r9
 8014b08:	f7eb fd4e 	bl	80005a8 <__aeabi_dmul>
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	ec41 0b19 	vmov	d9, r0, r1
 8014b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b16:	4620      	mov	r0, r4
 8014b18:	4629      	mov	r1, r5
 8014b1a:	f7eb fb8d 	bl	8000238 <__aeabi_dsub>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	460b      	mov	r3, r1
 8014b22:	ec51 0b19 	vmov	r0, r1, d9
 8014b26:	f7eb fe69 	bl	80007fc <__aeabi_ddiv>
 8014b2a:	4632      	mov	r2, r6
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	460d      	mov	r5, r1
 8014b30:	463b      	mov	r3, r7
 8014b32:	4640      	mov	r0, r8
 8014b34:	4649      	mov	r1, r9
 8014b36:	f7eb fd37 	bl	80005a8 <__aeabi_dmul>
 8014b3a:	4632      	mov	r2, r6
 8014b3c:	463b      	mov	r3, r7
 8014b3e:	f7eb fb7d 	bl	800023c <__adddf3>
 8014b42:	4602      	mov	r2, r0
 8014b44:	460b      	mov	r3, r1
 8014b46:	4620      	mov	r0, r4
 8014b48:	4629      	mov	r1, r5
 8014b4a:	f7eb fb75 	bl	8000238 <__aeabi_dsub>
 8014b4e:	4642      	mov	r2, r8
 8014b50:	464b      	mov	r3, r9
 8014b52:	f7eb fb71 	bl	8000238 <__aeabi_dsub>
 8014b56:	460b      	mov	r3, r1
 8014b58:	4602      	mov	r2, r0
 8014b5a:	4939      	ldr	r1, [pc, #228]	; (8014c40 <__ieee754_pow+0xa40>)
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	f7eb fb6b 	bl	8000238 <__aeabi_dsub>
 8014b62:	ec41 0b10 	vmov	d0, r0, r1
 8014b66:	ee10 3a90 	vmov	r3, s1
 8014b6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b72:	da2b      	bge.n	8014bcc <__ieee754_pow+0x9cc>
 8014b74:	4650      	mov	r0, sl
 8014b76:	f000 f877 	bl	8014c68 <scalbn>
 8014b7a:	ec51 0b10 	vmov	r0, r1, d0
 8014b7e:	ec53 2b18 	vmov	r2, r3, d8
 8014b82:	f7ff bbee 	b.w	8014362 <__ieee754_pow+0x162>
 8014b86:	4b2f      	ldr	r3, [pc, #188]	; (8014c44 <__ieee754_pow+0xa44>)
 8014b88:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014b8c:	429e      	cmp	r6, r3
 8014b8e:	f77f af0d 	ble.w	80149ac <__ieee754_pow+0x7ac>
 8014b92:	4b2d      	ldr	r3, [pc, #180]	; (8014c48 <__ieee754_pow+0xa48>)
 8014b94:	440b      	add	r3, r1
 8014b96:	4303      	orrs	r3, r0
 8014b98:	d009      	beq.n	8014bae <__ieee754_pow+0x9ae>
 8014b9a:	ec51 0b18 	vmov	r0, r1, d8
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	f7eb ff73 	bl	8000a8c <__aeabi_dcmplt>
 8014ba6:	3800      	subs	r0, #0
 8014ba8:	bf18      	it	ne
 8014baa:	2001      	movne	r0, #1
 8014bac:	e448      	b.n	8014440 <__ieee754_pow+0x240>
 8014bae:	4622      	mov	r2, r4
 8014bb0:	462b      	mov	r3, r5
 8014bb2:	f7eb fb41 	bl	8000238 <__aeabi_dsub>
 8014bb6:	4642      	mov	r2, r8
 8014bb8:	464b      	mov	r3, r9
 8014bba:	f7eb ff7b 	bl	8000ab4 <__aeabi_dcmpge>
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	f43f aef4 	beq.w	80149ac <__ieee754_pow+0x7ac>
 8014bc4:	e7e9      	b.n	8014b9a <__ieee754_pow+0x99a>
 8014bc6:	f04f 0a00 	mov.w	sl, #0
 8014bca:	e71a      	b.n	8014a02 <__ieee754_pow+0x802>
 8014bcc:	ec51 0b10 	vmov	r0, r1, d0
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	e7d4      	b.n	8014b7e <__ieee754_pow+0x97e>
 8014bd4:	491a      	ldr	r1, [pc, #104]	; (8014c40 <__ieee754_pow+0xa40>)
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	f7ff bb31 	b.w	801423e <__ieee754_pow+0x3e>
 8014bdc:	2000      	movs	r0, #0
 8014bde:	2100      	movs	r1, #0
 8014be0:	f7ff bb2d 	b.w	801423e <__ieee754_pow+0x3e>
 8014be4:	4630      	mov	r0, r6
 8014be6:	4639      	mov	r1, r7
 8014be8:	f7ff bb29 	b.w	801423e <__ieee754_pow+0x3e>
 8014bec:	9204      	str	r2, [sp, #16]
 8014bee:	f7ff bb7b 	b.w	80142e8 <__ieee754_pow+0xe8>
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	f7ff bb65 	b.w	80142c2 <__ieee754_pow+0xc2>
 8014bf8:	00000000 	.word	0x00000000
 8014bfc:	3fe62e43 	.word	0x3fe62e43
 8014c00:	fefa39ef 	.word	0xfefa39ef
 8014c04:	3fe62e42 	.word	0x3fe62e42
 8014c08:	0ca86c39 	.word	0x0ca86c39
 8014c0c:	be205c61 	.word	0xbe205c61
 8014c10:	72bea4d0 	.word	0x72bea4d0
 8014c14:	3e663769 	.word	0x3e663769
 8014c18:	c5d26bf1 	.word	0xc5d26bf1
 8014c1c:	3ebbbd41 	.word	0x3ebbbd41
 8014c20:	af25de2c 	.word	0xaf25de2c
 8014c24:	3f11566a 	.word	0x3f11566a
 8014c28:	16bebd93 	.word	0x16bebd93
 8014c2c:	3f66c16c 	.word	0x3f66c16c
 8014c30:	5555553e 	.word	0x5555553e
 8014c34:	3fc55555 	.word	0x3fc55555
 8014c38:	3fe00000 	.word	0x3fe00000
 8014c3c:	fff00000 	.word	0xfff00000
 8014c40:	3ff00000 	.word	0x3ff00000
 8014c44:	4090cbff 	.word	0x4090cbff
 8014c48:	3f6f3400 	.word	0x3f6f3400
 8014c4c:	652b82fe 	.word	0x652b82fe
 8014c50:	3c971547 	.word	0x3c971547

08014c54 <fabs>:
 8014c54:	ec51 0b10 	vmov	r0, r1, d0
 8014c58:	ee10 2a10 	vmov	r2, s0
 8014c5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c60:	ec43 2b10 	vmov	d0, r2, r3
 8014c64:	4770      	bx	lr
	...

08014c68 <scalbn>:
 8014c68:	b570      	push	{r4, r5, r6, lr}
 8014c6a:	ec55 4b10 	vmov	r4, r5, d0
 8014c6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014c72:	4606      	mov	r6, r0
 8014c74:	462b      	mov	r3, r5
 8014c76:	b999      	cbnz	r1, 8014ca0 <scalbn+0x38>
 8014c78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014c7c:	4323      	orrs	r3, r4
 8014c7e:	d03f      	beq.n	8014d00 <scalbn+0x98>
 8014c80:	4b35      	ldr	r3, [pc, #212]	; (8014d58 <scalbn+0xf0>)
 8014c82:	4629      	mov	r1, r5
 8014c84:	ee10 0a10 	vmov	r0, s0
 8014c88:	2200      	movs	r2, #0
 8014c8a:	f7eb fc8d 	bl	80005a8 <__aeabi_dmul>
 8014c8e:	4b33      	ldr	r3, [pc, #204]	; (8014d5c <scalbn+0xf4>)
 8014c90:	429e      	cmp	r6, r3
 8014c92:	4604      	mov	r4, r0
 8014c94:	460d      	mov	r5, r1
 8014c96:	da10      	bge.n	8014cba <scalbn+0x52>
 8014c98:	a327      	add	r3, pc, #156	; (adr r3, 8014d38 <scalbn+0xd0>)
 8014c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9e:	e01f      	b.n	8014ce0 <scalbn+0x78>
 8014ca0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014ca4:	4291      	cmp	r1, r2
 8014ca6:	d10c      	bne.n	8014cc2 <scalbn+0x5a>
 8014ca8:	ee10 2a10 	vmov	r2, s0
 8014cac:	4620      	mov	r0, r4
 8014cae:	4629      	mov	r1, r5
 8014cb0:	f7eb fac4 	bl	800023c <__adddf3>
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	460d      	mov	r5, r1
 8014cb8:	e022      	b.n	8014d00 <scalbn+0x98>
 8014cba:	460b      	mov	r3, r1
 8014cbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014cc0:	3936      	subs	r1, #54	; 0x36
 8014cc2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014cc6:	4296      	cmp	r6, r2
 8014cc8:	dd0d      	ble.n	8014ce6 <scalbn+0x7e>
 8014cca:	2d00      	cmp	r5, #0
 8014ccc:	a11c      	add	r1, pc, #112	; (adr r1, 8014d40 <scalbn+0xd8>)
 8014cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cd2:	da02      	bge.n	8014cda <scalbn+0x72>
 8014cd4:	a11c      	add	r1, pc, #112	; (adr r1, 8014d48 <scalbn+0xe0>)
 8014cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cda:	a319      	add	r3, pc, #100	; (adr r3, 8014d40 <scalbn+0xd8>)
 8014cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce0:	f7eb fc62 	bl	80005a8 <__aeabi_dmul>
 8014ce4:	e7e6      	b.n	8014cb4 <scalbn+0x4c>
 8014ce6:	1872      	adds	r2, r6, r1
 8014ce8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014cec:	428a      	cmp	r2, r1
 8014cee:	dcec      	bgt.n	8014cca <scalbn+0x62>
 8014cf0:	2a00      	cmp	r2, #0
 8014cf2:	dd08      	ble.n	8014d06 <scalbn+0x9e>
 8014cf4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014cf8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014cfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014d00:	ec45 4b10 	vmov	d0, r4, r5
 8014d04:	bd70      	pop	{r4, r5, r6, pc}
 8014d06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014d0a:	da08      	bge.n	8014d1e <scalbn+0xb6>
 8014d0c:	2d00      	cmp	r5, #0
 8014d0e:	a10a      	add	r1, pc, #40	; (adr r1, 8014d38 <scalbn+0xd0>)
 8014d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d14:	dac0      	bge.n	8014c98 <scalbn+0x30>
 8014d16:	a10e      	add	r1, pc, #56	; (adr r1, 8014d50 <scalbn+0xe8>)
 8014d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d1c:	e7bc      	b.n	8014c98 <scalbn+0x30>
 8014d1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014d22:	3236      	adds	r2, #54	; 0x36
 8014d24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014d28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	4b0c      	ldr	r3, [pc, #48]	; (8014d60 <scalbn+0xf8>)
 8014d30:	2200      	movs	r2, #0
 8014d32:	e7d5      	b.n	8014ce0 <scalbn+0x78>
 8014d34:	f3af 8000 	nop.w
 8014d38:	c2f8f359 	.word	0xc2f8f359
 8014d3c:	01a56e1f 	.word	0x01a56e1f
 8014d40:	8800759c 	.word	0x8800759c
 8014d44:	7e37e43c 	.word	0x7e37e43c
 8014d48:	8800759c 	.word	0x8800759c
 8014d4c:	fe37e43c 	.word	0xfe37e43c
 8014d50:	c2f8f359 	.word	0xc2f8f359
 8014d54:	81a56e1f 	.word	0x81a56e1f
 8014d58:	43500000 	.word	0x43500000
 8014d5c:	ffff3cb0 	.word	0xffff3cb0
 8014d60:	3c900000 	.word	0x3c900000

08014d64 <with_errno>:
 8014d64:	b570      	push	{r4, r5, r6, lr}
 8014d66:	4604      	mov	r4, r0
 8014d68:	460d      	mov	r5, r1
 8014d6a:	4616      	mov	r6, r2
 8014d6c:	f7fb fd7a 	bl	8010864 <__errno>
 8014d70:	4629      	mov	r1, r5
 8014d72:	6006      	str	r6, [r0, #0]
 8014d74:	4620      	mov	r0, r4
 8014d76:	bd70      	pop	{r4, r5, r6, pc}

08014d78 <xflow>:
 8014d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d7a:	4614      	mov	r4, r2
 8014d7c:	461d      	mov	r5, r3
 8014d7e:	b108      	cbz	r0, 8014d84 <xflow+0xc>
 8014d80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014d84:	e9cd 2300 	strd	r2, r3, [sp]
 8014d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	4629      	mov	r1, r5
 8014d90:	f7eb fc0a 	bl	80005a8 <__aeabi_dmul>
 8014d94:	2222      	movs	r2, #34	; 0x22
 8014d96:	b003      	add	sp, #12
 8014d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d9c:	f7ff bfe2 	b.w	8014d64 <with_errno>

08014da0 <__math_uflow>:
 8014da0:	b508      	push	{r3, lr}
 8014da2:	2200      	movs	r2, #0
 8014da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014da8:	f7ff ffe6 	bl	8014d78 <xflow>
 8014dac:	ec41 0b10 	vmov	d0, r0, r1
 8014db0:	bd08      	pop	{r3, pc}

08014db2 <__math_oflow>:
 8014db2:	b508      	push	{r3, lr}
 8014db4:	2200      	movs	r2, #0
 8014db6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014dba:	f7ff ffdd 	bl	8014d78 <xflow>
 8014dbe:	ec41 0b10 	vmov	d0, r0, r1
 8014dc2:	bd08      	pop	{r3, pc}

08014dc4 <__ieee754_sqrt>:
 8014dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc8:	ec55 4b10 	vmov	r4, r5, d0
 8014dcc:	4e67      	ldr	r6, [pc, #412]	; (8014f6c <__ieee754_sqrt+0x1a8>)
 8014dce:	43ae      	bics	r6, r5
 8014dd0:	ee10 0a10 	vmov	r0, s0
 8014dd4:	ee10 2a10 	vmov	r2, s0
 8014dd8:	4629      	mov	r1, r5
 8014dda:	462b      	mov	r3, r5
 8014ddc:	d10d      	bne.n	8014dfa <__ieee754_sqrt+0x36>
 8014dde:	f7eb fbe3 	bl	80005a8 <__aeabi_dmul>
 8014de2:	4602      	mov	r2, r0
 8014de4:	460b      	mov	r3, r1
 8014de6:	4620      	mov	r0, r4
 8014de8:	4629      	mov	r1, r5
 8014dea:	f7eb fa27 	bl	800023c <__adddf3>
 8014dee:	4604      	mov	r4, r0
 8014df0:	460d      	mov	r5, r1
 8014df2:	ec45 4b10 	vmov	d0, r4, r5
 8014df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dfa:	2d00      	cmp	r5, #0
 8014dfc:	dc0b      	bgt.n	8014e16 <__ieee754_sqrt+0x52>
 8014dfe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014e02:	4326      	orrs	r6, r4
 8014e04:	d0f5      	beq.n	8014df2 <__ieee754_sqrt+0x2e>
 8014e06:	b135      	cbz	r5, 8014e16 <__ieee754_sqrt+0x52>
 8014e08:	f7eb fa16 	bl	8000238 <__aeabi_dsub>
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	460b      	mov	r3, r1
 8014e10:	f7eb fcf4 	bl	80007fc <__aeabi_ddiv>
 8014e14:	e7eb      	b.n	8014dee <__ieee754_sqrt+0x2a>
 8014e16:	1509      	asrs	r1, r1, #20
 8014e18:	f000 808d 	beq.w	8014f36 <__ieee754_sqrt+0x172>
 8014e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e20:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e28:	07c9      	lsls	r1, r1, #31
 8014e2a:	bf5c      	itt	pl
 8014e2c:	005b      	lslpl	r3, r3, #1
 8014e2e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014e32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014e36:	bf58      	it	pl
 8014e38:	0052      	lslpl	r2, r2, #1
 8014e3a:	2500      	movs	r5, #0
 8014e3c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014e40:	1076      	asrs	r6, r6, #1
 8014e42:	0052      	lsls	r2, r2, #1
 8014e44:	f04f 0e16 	mov.w	lr, #22
 8014e48:	46ac      	mov	ip, r5
 8014e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014e4e:	eb0c 0001 	add.w	r0, ip, r1
 8014e52:	4298      	cmp	r0, r3
 8014e54:	bfde      	ittt	le
 8014e56:	1a1b      	suble	r3, r3, r0
 8014e58:	eb00 0c01 	addle.w	ip, r0, r1
 8014e5c:	186d      	addle	r5, r5, r1
 8014e5e:	005b      	lsls	r3, r3, #1
 8014e60:	f1be 0e01 	subs.w	lr, lr, #1
 8014e64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014e68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014e6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014e70:	d1ed      	bne.n	8014e4e <__ieee754_sqrt+0x8a>
 8014e72:	4674      	mov	r4, lr
 8014e74:	2720      	movs	r7, #32
 8014e76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014e7a:	4563      	cmp	r3, ip
 8014e7c:	eb01 000e 	add.w	r0, r1, lr
 8014e80:	dc02      	bgt.n	8014e88 <__ieee754_sqrt+0xc4>
 8014e82:	d113      	bne.n	8014eac <__ieee754_sqrt+0xe8>
 8014e84:	4290      	cmp	r0, r2
 8014e86:	d811      	bhi.n	8014eac <__ieee754_sqrt+0xe8>
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	eb00 0e01 	add.w	lr, r0, r1
 8014e8e:	da57      	bge.n	8014f40 <__ieee754_sqrt+0x17c>
 8014e90:	f1be 0f00 	cmp.w	lr, #0
 8014e94:	db54      	blt.n	8014f40 <__ieee754_sqrt+0x17c>
 8014e96:	f10c 0801 	add.w	r8, ip, #1
 8014e9a:	eba3 030c 	sub.w	r3, r3, ip
 8014e9e:	4290      	cmp	r0, r2
 8014ea0:	bf88      	it	hi
 8014ea2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014ea6:	1a12      	subs	r2, r2, r0
 8014ea8:	440c      	add	r4, r1
 8014eaa:	46c4      	mov	ip, r8
 8014eac:	005b      	lsls	r3, r3, #1
 8014eae:	3f01      	subs	r7, #1
 8014eb0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014eb4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014eb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014ebc:	d1dd      	bne.n	8014e7a <__ieee754_sqrt+0xb6>
 8014ebe:	4313      	orrs	r3, r2
 8014ec0:	d01b      	beq.n	8014efa <__ieee754_sqrt+0x136>
 8014ec2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8014f70 <__ieee754_sqrt+0x1ac>
 8014ec6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8014f74 <__ieee754_sqrt+0x1b0>
 8014eca:	e9da 0100 	ldrd	r0, r1, [sl]
 8014ece:	e9db 2300 	ldrd	r2, r3, [fp]
 8014ed2:	f7eb f9b1 	bl	8000238 <__aeabi_dsub>
 8014ed6:	e9da 8900 	ldrd	r8, r9, [sl]
 8014eda:	4602      	mov	r2, r0
 8014edc:	460b      	mov	r3, r1
 8014ede:	4640      	mov	r0, r8
 8014ee0:	4649      	mov	r1, r9
 8014ee2:	f7eb fddd 	bl	8000aa0 <__aeabi_dcmple>
 8014ee6:	b140      	cbz	r0, 8014efa <__ieee754_sqrt+0x136>
 8014ee8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014eec:	e9da 0100 	ldrd	r0, r1, [sl]
 8014ef0:	e9db 2300 	ldrd	r2, r3, [fp]
 8014ef4:	d126      	bne.n	8014f44 <__ieee754_sqrt+0x180>
 8014ef6:	3501      	adds	r5, #1
 8014ef8:	463c      	mov	r4, r7
 8014efa:	106a      	asrs	r2, r5, #1
 8014efc:	0863      	lsrs	r3, r4, #1
 8014efe:	07e9      	lsls	r1, r5, #31
 8014f00:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014f04:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014f08:	bf48      	it	mi
 8014f0a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014f0e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014f12:	461c      	mov	r4, r3
 8014f14:	e76d      	b.n	8014df2 <__ieee754_sqrt+0x2e>
 8014f16:	0ad3      	lsrs	r3, r2, #11
 8014f18:	3815      	subs	r0, #21
 8014f1a:	0552      	lsls	r2, r2, #21
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d0fa      	beq.n	8014f16 <__ieee754_sqrt+0x152>
 8014f20:	02dc      	lsls	r4, r3, #11
 8014f22:	d50a      	bpl.n	8014f3a <__ieee754_sqrt+0x176>
 8014f24:	f1c1 0420 	rsb	r4, r1, #32
 8014f28:	fa22 f404 	lsr.w	r4, r2, r4
 8014f2c:	1e4d      	subs	r5, r1, #1
 8014f2e:	408a      	lsls	r2, r1
 8014f30:	4323      	orrs	r3, r4
 8014f32:	1b41      	subs	r1, r0, r5
 8014f34:	e772      	b.n	8014e1c <__ieee754_sqrt+0x58>
 8014f36:	4608      	mov	r0, r1
 8014f38:	e7f0      	b.n	8014f1c <__ieee754_sqrt+0x158>
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	3101      	adds	r1, #1
 8014f3e:	e7ef      	b.n	8014f20 <__ieee754_sqrt+0x15c>
 8014f40:	46e0      	mov	r8, ip
 8014f42:	e7aa      	b.n	8014e9a <__ieee754_sqrt+0xd6>
 8014f44:	f7eb f97a 	bl	800023c <__adddf3>
 8014f48:	e9da 8900 	ldrd	r8, r9, [sl]
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	460b      	mov	r3, r1
 8014f50:	4640      	mov	r0, r8
 8014f52:	4649      	mov	r1, r9
 8014f54:	f7eb fd9a 	bl	8000a8c <__aeabi_dcmplt>
 8014f58:	b120      	cbz	r0, 8014f64 <__ieee754_sqrt+0x1a0>
 8014f5a:	1ca0      	adds	r0, r4, #2
 8014f5c:	bf08      	it	eq
 8014f5e:	3501      	addeq	r5, #1
 8014f60:	3402      	adds	r4, #2
 8014f62:	e7ca      	b.n	8014efa <__ieee754_sqrt+0x136>
 8014f64:	3401      	adds	r4, #1
 8014f66:	f024 0401 	bic.w	r4, r4, #1
 8014f6a:	e7c6      	b.n	8014efa <__ieee754_sqrt+0x136>
 8014f6c:	7ff00000 	.word	0x7ff00000
 8014f70:	20000218 	.word	0x20000218
 8014f74:	20000220 	.word	0x20000220

08014f78 <__ieee754_log>:
 8014f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f7c:	ec51 0b10 	vmov	r0, r1, d0
 8014f80:	ed2d 8b04 	vpush	{d8-d9}
 8014f84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014f88:	b083      	sub	sp, #12
 8014f8a:	460d      	mov	r5, r1
 8014f8c:	da29      	bge.n	8014fe2 <__ieee754_log+0x6a>
 8014f8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014f92:	4303      	orrs	r3, r0
 8014f94:	ee10 2a10 	vmov	r2, s0
 8014f98:	d10c      	bne.n	8014fb4 <__ieee754_log+0x3c>
 8014f9a:	49cf      	ldr	r1, [pc, #828]	; (80152d8 <__ieee754_log+0x360>)
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	f7eb fc2b 	bl	80007fc <__aeabi_ddiv>
 8014fa6:	ec41 0b10 	vmov	d0, r0, r1
 8014faa:	b003      	add	sp, #12
 8014fac:	ecbd 8b04 	vpop	{d8-d9}
 8014fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb4:	2900      	cmp	r1, #0
 8014fb6:	da05      	bge.n	8014fc4 <__ieee754_log+0x4c>
 8014fb8:	460b      	mov	r3, r1
 8014fba:	f7eb f93d 	bl	8000238 <__aeabi_dsub>
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	e7ee      	b.n	8014fa2 <__ieee754_log+0x2a>
 8014fc4:	4bc5      	ldr	r3, [pc, #788]	; (80152dc <__ieee754_log+0x364>)
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f7eb faee 	bl	80005a8 <__aeabi_dmul>
 8014fcc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014fd0:	460d      	mov	r5, r1
 8014fd2:	4ac3      	ldr	r2, [pc, #780]	; (80152e0 <__ieee754_log+0x368>)
 8014fd4:	4295      	cmp	r5, r2
 8014fd6:	dd06      	ble.n	8014fe6 <__ieee754_log+0x6e>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	460b      	mov	r3, r1
 8014fdc:	f7eb f92e 	bl	800023c <__adddf3>
 8014fe0:	e7e1      	b.n	8014fa6 <__ieee754_log+0x2e>
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	e7f5      	b.n	8014fd2 <__ieee754_log+0x5a>
 8014fe6:	152c      	asrs	r4, r5, #20
 8014fe8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014fec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014ff0:	441c      	add	r4, r3
 8014ff2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8014ff6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8014ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014ffe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8015002:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8015006:	ea42 0105 	orr.w	r1, r2, r5
 801500a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801500e:	2200      	movs	r2, #0
 8015010:	4bb4      	ldr	r3, [pc, #720]	; (80152e4 <__ieee754_log+0x36c>)
 8015012:	f7eb f911 	bl	8000238 <__aeabi_dsub>
 8015016:	1cab      	adds	r3, r5, #2
 8015018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801501c:	2b02      	cmp	r3, #2
 801501e:	4682      	mov	sl, r0
 8015020:	468b      	mov	fp, r1
 8015022:	f04f 0200 	mov.w	r2, #0
 8015026:	dc53      	bgt.n	80150d0 <__ieee754_log+0x158>
 8015028:	2300      	movs	r3, #0
 801502a:	f7eb fd25 	bl	8000a78 <__aeabi_dcmpeq>
 801502e:	b1d0      	cbz	r0, 8015066 <__ieee754_log+0xee>
 8015030:	2c00      	cmp	r4, #0
 8015032:	f000 8122 	beq.w	801527a <__ieee754_log+0x302>
 8015036:	4620      	mov	r0, r4
 8015038:	f7eb fa4c 	bl	80004d4 <__aeabi_i2d>
 801503c:	a390      	add	r3, pc, #576	; (adr r3, 8015280 <__ieee754_log+0x308>)
 801503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015042:	4606      	mov	r6, r0
 8015044:	460f      	mov	r7, r1
 8015046:	f7eb faaf 	bl	80005a8 <__aeabi_dmul>
 801504a:	a38f      	add	r3, pc, #572	; (adr r3, 8015288 <__ieee754_log+0x310>)
 801504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015050:	4604      	mov	r4, r0
 8015052:	460d      	mov	r5, r1
 8015054:	4630      	mov	r0, r6
 8015056:	4639      	mov	r1, r7
 8015058:	f7eb faa6 	bl	80005a8 <__aeabi_dmul>
 801505c:	4602      	mov	r2, r0
 801505e:	460b      	mov	r3, r1
 8015060:	4620      	mov	r0, r4
 8015062:	4629      	mov	r1, r5
 8015064:	e7ba      	b.n	8014fdc <__ieee754_log+0x64>
 8015066:	a38a      	add	r3, pc, #552	; (adr r3, 8015290 <__ieee754_log+0x318>)
 8015068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506c:	4650      	mov	r0, sl
 801506e:	4659      	mov	r1, fp
 8015070:	f7eb fa9a 	bl	80005a8 <__aeabi_dmul>
 8015074:	4602      	mov	r2, r0
 8015076:	460b      	mov	r3, r1
 8015078:	2000      	movs	r0, #0
 801507a:	499b      	ldr	r1, [pc, #620]	; (80152e8 <__ieee754_log+0x370>)
 801507c:	f7eb f8dc 	bl	8000238 <__aeabi_dsub>
 8015080:	4652      	mov	r2, sl
 8015082:	4606      	mov	r6, r0
 8015084:	460f      	mov	r7, r1
 8015086:	465b      	mov	r3, fp
 8015088:	4650      	mov	r0, sl
 801508a:	4659      	mov	r1, fp
 801508c:	f7eb fa8c 	bl	80005a8 <__aeabi_dmul>
 8015090:	4602      	mov	r2, r0
 8015092:	460b      	mov	r3, r1
 8015094:	4630      	mov	r0, r6
 8015096:	4639      	mov	r1, r7
 8015098:	f7eb fa86 	bl	80005a8 <__aeabi_dmul>
 801509c:	4606      	mov	r6, r0
 801509e:	460f      	mov	r7, r1
 80150a0:	b914      	cbnz	r4, 80150a8 <__ieee754_log+0x130>
 80150a2:	4632      	mov	r2, r6
 80150a4:	463b      	mov	r3, r7
 80150a6:	e0a2      	b.n	80151ee <__ieee754_log+0x276>
 80150a8:	4620      	mov	r0, r4
 80150aa:	f7eb fa13 	bl	80004d4 <__aeabi_i2d>
 80150ae:	a374      	add	r3, pc, #464	; (adr r3, 8015280 <__ieee754_log+0x308>)
 80150b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b4:	4680      	mov	r8, r0
 80150b6:	4689      	mov	r9, r1
 80150b8:	f7eb fa76 	bl	80005a8 <__aeabi_dmul>
 80150bc:	a372      	add	r3, pc, #456	; (adr r3, 8015288 <__ieee754_log+0x310>)
 80150be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c2:	4604      	mov	r4, r0
 80150c4:	460d      	mov	r5, r1
 80150c6:	4640      	mov	r0, r8
 80150c8:	4649      	mov	r1, r9
 80150ca:	f7eb fa6d 	bl	80005a8 <__aeabi_dmul>
 80150ce:	e0a7      	b.n	8015220 <__ieee754_log+0x2a8>
 80150d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80150d4:	f7eb f8b2 	bl	800023c <__adddf3>
 80150d8:	4602      	mov	r2, r0
 80150da:	460b      	mov	r3, r1
 80150dc:	4650      	mov	r0, sl
 80150de:	4659      	mov	r1, fp
 80150e0:	f7eb fb8c 	bl	80007fc <__aeabi_ddiv>
 80150e4:	ec41 0b18 	vmov	d8, r0, r1
 80150e8:	4620      	mov	r0, r4
 80150ea:	f7eb f9f3 	bl	80004d4 <__aeabi_i2d>
 80150ee:	ec53 2b18 	vmov	r2, r3, d8
 80150f2:	ec41 0b19 	vmov	d9, r0, r1
 80150f6:	ec51 0b18 	vmov	r0, r1, d8
 80150fa:	f7eb fa55 	bl	80005a8 <__aeabi_dmul>
 80150fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8015102:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8015106:	9301      	str	r3, [sp, #4]
 8015108:	4602      	mov	r2, r0
 801510a:	460b      	mov	r3, r1
 801510c:	4680      	mov	r8, r0
 801510e:	4689      	mov	r9, r1
 8015110:	f7eb fa4a 	bl	80005a8 <__aeabi_dmul>
 8015114:	a360      	add	r3, pc, #384	; (adr r3, 8015298 <__ieee754_log+0x320>)
 8015116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511a:	4606      	mov	r6, r0
 801511c:	460f      	mov	r7, r1
 801511e:	f7eb fa43 	bl	80005a8 <__aeabi_dmul>
 8015122:	a35f      	add	r3, pc, #380	; (adr r3, 80152a0 <__ieee754_log+0x328>)
 8015124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015128:	f7eb f888 	bl	800023c <__adddf3>
 801512c:	4632      	mov	r2, r6
 801512e:	463b      	mov	r3, r7
 8015130:	f7eb fa3a 	bl	80005a8 <__aeabi_dmul>
 8015134:	a35c      	add	r3, pc, #368	; (adr r3, 80152a8 <__ieee754_log+0x330>)
 8015136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513a:	f7eb f87f 	bl	800023c <__adddf3>
 801513e:	4632      	mov	r2, r6
 8015140:	463b      	mov	r3, r7
 8015142:	f7eb fa31 	bl	80005a8 <__aeabi_dmul>
 8015146:	a35a      	add	r3, pc, #360	; (adr r3, 80152b0 <__ieee754_log+0x338>)
 8015148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514c:	f7eb f876 	bl	800023c <__adddf3>
 8015150:	4642      	mov	r2, r8
 8015152:	464b      	mov	r3, r9
 8015154:	f7eb fa28 	bl	80005a8 <__aeabi_dmul>
 8015158:	a357      	add	r3, pc, #348	; (adr r3, 80152b8 <__ieee754_log+0x340>)
 801515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515e:	4680      	mov	r8, r0
 8015160:	4689      	mov	r9, r1
 8015162:	4630      	mov	r0, r6
 8015164:	4639      	mov	r1, r7
 8015166:	f7eb fa1f 	bl	80005a8 <__aeabi_dmul>
 801516a:	a355      	add	r3, pc, #340	; (adr r3, 80152c0 <__ieee754_log+0x348>)
 801516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015170:	f7eb f864 	bl	800023c <__adddf3>
 8015174:	4632      	mov	r2, r6
 8015176:	463b      	mov	r3, r7
 8015178:	f7eb fa16 	bl	80005a8 <__aeabi_dmul>
 801517c:	a352      	add	r3, pc, #328	; (adr r3, 80152c8 <__ieee754_log+0x350>)
 801517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015182:	f7eb f85b 	bl	800023c <__adddf3>
 8015186:	4632      	mov	r2, r6
 8015188:	463b      	mov	r3, r7
 801518a:	f7eb fa0d 	bl	80005a8 <__aeabi_dmul>
 801518e:	460b      	mov	r3, r1
 8015190:	4602      	mov	r2, r0
 8015192:	4649      	mov	r1, r9
 8015194:	4640      	mov	r0, r8
 8015196:	f7eb f851 	bl	800023c <__adddf3>
 801519a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801519e:	9b01      	ldr	r3, [sp, #4]
 80151a0:	3551      	adds	r5, #81	; 0x51
 80151a2:	431d      	orrs	r5, r3
 80151a4:	2d00      	cmp	r5, #0
 80151a6:	4680      	mov	r8, r0
 80151a8:	4689      	mov	r9, r1
 80151aa:	dd48      	ble.n	801523e <__ieee754_log+0x2c6>
 80151ac:	4b4e      	ldr	r3, [pc, #312]	; (80152e8 <__ieee754_log+0x370>)
 80151ae:	2200      	movs	r2, #0
 80151b0:	4650      	mov	r0, sl
 80151b2:	4659      	mov	r1, fp
 80151b4:	f7eb f9f8 	bl	80005a8 <__aeabi_dmul>
 80151b8:	4652      	mov	r2, sl
 80151ba:	465b      	mov	r3, fp
 80151bc:	f7eb f9f4 	bl	80005a8 <__aeabi_dmul>
 80151c0:	4602      	mov	r2, r0
 80151c2:	460b      	mov	r3, r1
 80151c4:	4606      	mov	r6, r0
 80151c6:	460f      	mov	r7, r1
 80151c8:	4640      	mov	r0, r8
 80151ca:	4649      	mov	r1, r9
 80151cc:	f7eb f836 	bl	800023c <__adddf3>
 80151d0:	ec53 2b18 	vmov	r2, r3, d8
 80151d4:	f7eb f9e8 	bl	80005a8 <__aeabi_dmul>
 80151d8:	4680      	mov	r8, r0
 80151da:	4689      	mov	r9, r1
 80151dc:	b964      	cbnz	r4, 80151f8 <__ieee754_log+0x280>
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	4630      	mov	r0, r6
 80151e4:	4639      	mov	r1, r7
 80151e6:	f7eb f827 	bl	8000238 <__aeabi_dsub>
 80151ea:	4602      	mov	r2, r0
 80151ec:	460b      	mov	r3, r1
 80151ee:	4650      	mov	r0, sl
 80151f0:	4659      	mov	r1, fp
 80151f2:	f7eb f821 	bl	8000238 <__aeabi_dsub>
 80151f6:	e6d6      	b.n	8014fa6 <__ieee754_log+0x2e>
 80151f8:	a321      	add	r3, pc, #132	; (adr r3, 8015280 <__ieee754_log+0x308>)
 80151fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fe:	ec51 0b19 	vmov	r0, r1, d9
 8015202:	f7eb f9d1 	bl	80005a8 <__aeabi_dmul>
 8015206:	a320      	add	r3, pc, #128	; (adr r3, 8015288 <__ieee754_log+0x310>)
 8015208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520c:	4604      	mov	r4, r0
 801520e:	460d      	mov	r5, r1
 8015210:	ec51 0b19 	vmov	r0, r1, d9
 8015214:	f7eb f9c8 	bl	80005a8 <__aeabi_dmul>
 8015218:	4642      	mov	r2, r8
 801521a:	464b      	mov	r3, r9
 801521c:	f7eb f80e 	bl	800023c <__adddf3>
 8015220:	4602      	mov	r2, r0
 8015222:	460b      	mov	r3, r1
 8015224:	4630      	mov	r0, r6
 8015226:	4639      	mov	r1, r7
 8015228:	f7eb f806 	bl	8000238 <__aeabi_dsub>
 801522c:	4652      	mov	r2, sl
 801522e:	465b      	mov	r3, fp
 8015230:	f7eb f802 	bl	8000238 <__aeabi_dsub>
 8015234:	4602      	mov	r2, r0
 8015236:	460b      	mov	r3, r1
 8015238:	4620      	mov	r0, r4
 801523a:	4629      	mov	r1, r5
 801523c:	e7d9      	b.n	80151f2 <__ieee754_log+0x27a>
 801523e:	4602      	mov	r2, r0
 8015240:	460b      	mov	r3, r1
 8015242:	4650      	mov	r0, sl
 8015244:	4659      	mov	r1, fp
 8015246:	f7ea fff7 	bl	8000238 <__aeabi_dsub>
 801524a:	ec53 2b18 	vmov	r2, r3, d8
 801524e:	f7eb f9ab 	bl	80005a8 <__aeabi_dmul>
 8015252:	4606      	mov	r6, r0
 8015254:	460f      	mov	r7, r1
 8015256:	2c00      	cmp	r4, #0
 8015258:	f43f af23 	beq.w	80150a2 <__ieee754_log+0x12a>
 801525c:	a308      	add	r3, pc, #32	; (adr r3, 8015280 <__ieee754_log+0x308>)
 801525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015262:	ec51 0b19 	vmov	r0, r1, d9
 8015266:	f7eb f99f 	bl	80005a8 <__aeabi_dmul>
 801526a:	a307      	add	r3, pc, #28	; (adr r3, 8015288 <__ieee754_log+0x310>)
 801526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015270:	4604      	mov	r4, r0
 8015272:	460d      	mov	r5, r1
 8015274:	ec51 0b19 	vmov	r0, r1, d9
 8015278:	e727      	b.n	80150ca <__ieee754_log+0x152>
 801527a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80152d0 <__ieee754_log+0x358>
 801527e:	e694      	b.n	8014faa <__ieee754_log+0x32>
 8015280:	fee00000 	.word	0xfee00000
 8015284:	3fe62e42 	.word	0x3fe62e42
 8015288:	35793c76 	.word	0x35793c76
 801528c:	3dea39ef 	.word	0x3dea39ef
 8015290:	55555555 	.word	0x55555555
 8015294:	3fd55555 	.word	0x3fd55555
 8015298:	df3e5244 	.word	0xdf3e5244
 801529c:	3fc2f112 	.word	0x3fc2f112
 80152a0:	96cb03de 	.word	0x96cb03de
 80152a4:	3fc74664 	.word	0x3fc74664
 80152a8:	94229359 	.word	0x94229359
 80152ac:	3fd24924 	.word	0x3fd24924
 80152b0:	55555593 	.word	0x55555593
 80152b4:	3fe55555 	.word	0x3fe55555
 80152b8:	d078c69f 	.word	0xd078c69f
 80152bc:	3fc39a09 	.word	0x3fc39a09
 80152c0:	1d8e78af 	.word	0x1d8e78af
 80152c4:	3fcc71c5 	.word	0x3fcc71c5
 80152c8:	9997fa04 	.word	0x9997fa04
 80152cc:	3fd99999 	.word	0x3fd99999
	...
 80152d8:	c3500000 	.word	0xc3500000
 80152dc:	43500000 	.word	0x43500000
 80152e0:	7fefffff 	.word	0x7fefffff
 80152e4:	3ff00000 	.word	0x3ff00000
 80152e8:	3fe00000 	.word	0x3fe00000

080152ec <_init>:
 80152ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ee:	bf00      	nop
 80152f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152f2:	bc08      	pop	{r3}
 80152f4:	469e      	mov	lr, r3
 80152f6:	4770      	bx	lr

080152f8 <_fini>:
 80152f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152fa:	bf00      	nop
 80152fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152fe:	bc08      	pop	{r3}
 8015300:	469e      	mov	lr, r3
 8015302:	4770      	bx	lr
