
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b478  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c14c  0800c14c  0001c14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  0800c15c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000098  0800c1ec  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000134  0800c285  00020134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000016c  0800c2ba  0002016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000013dc  20000180  0800c2cb  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  2000155c  0800c2cb  0002155c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 16 .debug_line   0003109e  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   00030388  00000000  00000000  0005124b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000067f8  00000000  00000000  000815d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002a98  00000000  00000000  00087dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb146  00000000  00000000  0008a868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000027b0  00000000  00000000  001859b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002dec7  00000000  00000000  00188160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001b6027  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000b85c  00000000  00000000  001b6078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b5a0 	.word	0x0800b5a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	0800b5a0 	.word	0x0800b5a0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000534:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000536:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000538:	3304      	adds	r3, #4

0800053a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800053e:	d3f9      	bcc.n	8000534 <CopyDataInit>
  bx lr
 8000540:	4770      	bx	lr

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000542:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000544:	3004      	adds	r0, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000546:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>
  bx lr
 800054a:	4770      	bx	lr

0800054c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800054e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f002 ffa2 	bl	8003498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <LoopForever+0x8>)
 8000556:	490c      	ldr	r1, [pc, #48]	; (8000588 <LoopForever+0xc>)
 8000558:	4a0c      	ldr	r2, [pc, #48]	; (800058c <LoopForever+0x10>)
 800055a:	2300      	movs	r3, #0
 800055c:	f7ff ffed 	bl	800053a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <LoopForever+0x14>)
 8000562:	490c      	ldr	r1, [pc, #48]	; (8000594 <LoopForever+0x18>)
 8000564:	2300      	movs	r3, #0
 8000566:	f7ff ffee 	bl	8000546 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800056a:	480b      	ldr	r0, [pc, #44]	; (8000598 <LoopForever+0x1c>)
 800056c:	490b      	ldr	r1, [pc, #44]	; (800059c <LoopForever+0x20>)
 800056e:	2300      	movs	r3, #0
 8000570:	f7ff ffe9 	bl	8000546 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000574:	f009 ffd6 	bl	800a524 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000578:	f001 fc34 	bl	8001de4 <main>

0800057c <LoopForever>:

LoopForever:
  b LoopForever
 800057c:	e7fe      	b.n	800057c <LoopForever>
 800057e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000580:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000584:	20000008 	.word	0x20000008
 8000588:	20000098 	.word	0x20000098
 800058c:	0800c15c 	.word	0x0800c15c
  INIT_BSS _sbss, _ebss
 8000590:	20000180 	.word	0x20000180
 8000594:	2000155c 	.word	0x2000155c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000598:	200301e4 	.word	0x200301e4
 800059c:	20030a67 	.word	0x20030a67

080005a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_IRQHandler>
	...

080005a4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005b2:	4905      	ldr	r1, [pc, #20]	; (80005c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	58000800 	.word	0x58000800

080005cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800061a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000628:	68fb      	ldr	r3, [r7, #12]
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800063a:	f003 f835 	bl	80036a8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800063e:	f003 f839 	bl	80036b4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000642:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000646:	f7ff ffad 	bl	80005a4 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800064a:	f008 ff7f 	bl	800954c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800064e:	f000 f821 	bl	8000694 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000652:	f000 f8c3 	bl	80007dc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000656:	bf00      	nop
}
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <APPD_EnableCPU2+0x34>)
 8000664:	1d3c      	adds	r4, r7, #4
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	c403      	stmia	r4!, {r0, r1}
 8000672:	8022      	strh	r2, [r4, #0]
 8000674:	3402      	adds	r4, #2
 8000676:	0c13      	lsrs	r3, r2, #16
 8000678:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800067a:	f008 fea3 	bl	80093c4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f008 f9ca 	bl	8008a1a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000686:	bf00      	nop
}
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bdb0      	pop	{r4, r5, r7, pc}
 800068e:	bf00      	nop
 8000690:	0800b5b8 	.word	0x0800b5b8

08000694 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	77fb      	strb	r3, [r7, #31]
 80006b8:	e038      	b.n	800072c <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80006ba:	7ffb      	ldrb	r3, [r7, #31]
 80006bc:	4a44      	ldr	r2, [pc, #272]	; (80007d0 <APPD_SetCPU2GpioConfig+0x13c>)
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	4413      	add	r3, r2
 80006c2:	799b      	ldrb	r3, [r3, #6]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d02b      	beq.n	8000720 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80006c8:	7ffb      	ldrb	r3, [r7, #31]
 80006ca:	4a41      	ldr	r2, [pc, #260]	; (80007d0 <APPD_SetCPU2GpioConfig+0x13c>)
 80006cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006d0:	4a40      	ldr	r2, [pc, #256]	; (80007d4 <APPD_SetCPU2GpioConfig+0x140>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d01b      	beq.n	800070e <APPD_SetCPU2GpioConfig+0x7a>
 80006d6:	4a3f      	ldr	r2, [pc, #252]	; (80007d4 <APPD_SetCPU2GpioConfig+0x140>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d823      	bhi.n	8000724 <APPD_SetCPU2GpioConfig+0x90>
 80006dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006e0:	d003      	beq.n	80006ea <APPD_SetCPU2GpioConfig+0x56>
 80006e2:	4a3d      	ldr	r2, [pc, #244]	; (80007d8 <APPD_SetCPU2GpioConfig+0x144>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d009      	beq.n	80006fc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80006e8:	e01c      	b.n	8000724 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80006ea:	7ffb      	ldrb	r3, [r7, #31]
 80006ec:	4a38      	ldr	r2, [pc, #224]	; (80007d0 <APPD_SetCPU2GpioConfig+0x13c>)
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	4413      	add	r3, r2
 80006f2:	889a      	ldrh	r2, [r3, #4]
 80006f4:	8bbb      	ldrh	r3, [r7, #28]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	83bb      	strh	r3, [r7, #28]
          break;
 80006fa:	e014      	b.n	8000726 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4413      	add	r3, r2
 8000704:	889a      	ldrh	r2, [r3, #4]
 8000706:	8b7b      	ldrh	r3, [r7, #26]
 8000708:	4313      	orrs	r3, r2
 800070a:	837b      	strh	r3, [r7, #26]
          break;
 800070c:	e00b      	b.n	8000726 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	4a2f      	ldr	r2, [pc, #188]	; (80007d0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	4413      	add	r3, r2
 8000716:	889a      	ldrh	r2, [r3, #4]
 8000718:	8b3b      	ldrh	r3, [r7, #24]
 800071a:	4313      	orrs	r3, r2
 800071c:	833b      	strh	r3, [r7, #24]
          break;
 800071e:	e002      	b.n	8000726 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000720:	bf00      	nop
 8000722:	e000      	b.n	8000726 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000724:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000726:	7ffb      	ldrb	r3, [r7, #31]
 8000728:	3301      	adds	r3, #1
 800072a:	77fb      	strb	r3, [r7, #31]
 800072c:	7ffb      	ldrb	r3, [r7, #31]
 800072e:	2b25      	cmp	r3, #37	; 0x25
 8000730:	d9c3      	bls.n	80006ba <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800073e:	8bbb      	ldrh	r3, [r7, #28]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d014      	beq.n	800076e <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000744:	8bbb      	ldrh	r3, [r7, #28]
 8000746:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff ff3f 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ff55 	bl	80005fe <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f003 fe2c 	bl	80043b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000760:	8bbb      	ldrh	r3, [r7, #28]
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f003 ff95 	bl	8004698 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800076e:	8b7b      	ldrh	r3, [r7, #26]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d012      	beq.n	800079a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000774:	8b7b      	ldrh	r3, [r7, #26]
 8000776:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff ff27 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800077e:	2002      	movs	r0, #2
 8000780:	f7ff ff3d 	bl	80005fe <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <APPD_SetCPU2GpioConfig+0x144>)
 800078a:	f003 fe15 	bl	80043b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800078e:	8b7b      	ldrh	r3, [r7, #26]
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	4810      	ldr	r0, [pc, #64]	; (80007d8 <APPD_SetCPU2GpioConfig+0x144>)
 8000796:	f003 ff7f 	bl	8004698 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800079a:	8b3b      	ldrh	r3, [r7, #24]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d013      	beq.n	80007c8 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80007a0:	8b3b      	ldrh	r3, [r7, #24]
 80007a2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a4:	2004      	movs	r0, #4
 80007a6:	f7ff ff11 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80007aa:	2004      	movs	r0, #4
 80007ac:	f7ff ff27 	bl	80005fe <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <APPD_SetCPU2GpioConfig+0x140>)
 80007b6:	f003 fdff 	bl	80043b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80007ba:	8b3b      	ldrh	r3, [r7, #24]
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <APPD_SetCPU2GpioConfig+0x140>)
 80007c2:	f003 ff69 	bl	8004698 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
}
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800be70 	.word	0x0800be70
 80007d4:	48000800 	.word	0x48000800
 80007d8:	48000400 	.word	0x48000400

080007dc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80007e0:	bf00      	nop
}
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80007ee:	f001 fba3 	bl	8001f38 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80007f2:	bf00      	nop
}
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	460b      	mov	r3, r1
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000804:	897a      	ldrh	r2, [r7, #10]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	68f9      	ldr	r1, [r7, #12]
 800080a:	2000      	movs	r0, #0
 800080c:	f001 fa3e 	bl	8001c8c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000810:	bf00      	nop
}
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <LL_C2_PWR_SetPowerMode+0x28>)
 8000822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000826:	f023 0207 	bic.w	r2, r3, #7
 800082a:	4905      	ldr	r1, [pc, #20]	; (8000840 <LL_C2_PWR_SetPowerMode+0x28>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	58000400 	.word	0x58000400

08000844 <LL_EXTI_EnableIT_32_63>:
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <LL_EXTI_EnableIT_32_63+0x24>)
 800084e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000852:	4905      	ldr	r1, [pc, #20]	; (8000868 <LL_EXTI_EnableIT_32_63+0x24>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4313      	orrs	r3, r2
 8000858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	58000800 	.word	0x58000800

0800086c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800087a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800087e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000886:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000892:	4313      	orrs	r3, r2
 8000894:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	cafecafe 	.word	0xcafecafe

080008a8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80008b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	608b      	str	r3, [r1, #8]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80008d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80008f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000928:	d101      	bne.n	800092e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800093e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800094e:	d101      	bne.n	8000954 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000950:	2301      	movs	r3, #1
 8000952:	e000      	b.n	8000956 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <LL_AHB3_GRP1_EnableClock>:
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800096e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000984:	68fb      	ldr	r3, [r7, #12]
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <LL_DBGMCU_GetRevisionID+0x18>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	b29b      	uxth	r3, r3
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e0042000 	.word	0xe0042000

080009b0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	041b      	lsls	r3, r3, #16
 80009c2:	431a      	orrs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	431a      	orrs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	605a      	str	r2, [r3, #4]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	041b      	lsls	r3, r3, #16
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	615a      	str	r2, [r3, #20]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	615a      	str	r2, [r3, #20]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	609a      	str	r2, [r3, #8]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	619a      	str	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <LL_LPM_EnableSleep+0x1c>)
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <LL_LPM_EnableSleep+0x1c>)
 8000a7e:	f023 0304 	bic.w	r3, r3, #4
 8000a82:	6113      	str	r3, [r2, #16]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	22ca      	movs	r2, #202	; 0xca
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2253      	movs	r2, #83	; 0x53
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f023 0207 	bic.w	r2, r3, #7
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <MX_APPE_Config+0x18>)
 8000afa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000afe:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000b00:	f000 f82e 	bl	8000b60 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000b04:	f000 f86e 	bl	8000be4 <Config_HSE>

  return;
 8000b08:	bf00      	nop
}
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58004000 	.word	0x58004000

08000b10 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000b14:	f000 f87a 	bl	8000c0c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000b18:	f000 f892 	bl	8000c40 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000b1c:	4908      	ldr	r1, [pc, #32]	; (8000b40 <MX_APPE_Init+0x30>)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 feac 	bl	800187c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000b24:	f7ff fd87 	bl	8000636 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f008 fdc6 	bl	80096bc <UTIL_LPM_SetOffMode>

  Led_Init();
 8000b30:	f000 f9da 	bl	8000ee8 <Led_Init>

  Button_Init();
 8000b34:	f000 f9e8 	bl	8000f08 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000b38:	f000 f890 	bl	8000c5c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b3c:	bf00      	nop
}
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200003c8 	.word	0x200003c8

08000b44 <Init_Smps>:

void Init_Smps(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000b48:	bf00      	nop
}
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <Init_Exti>:

void Init_Exti(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000b56:	2050      	movs	r0, #80	; 0x50
 8000b58:	f7ff fe74 	bl	8000844 <LL_EXTI_EnableIT_32_63>

  return;
 8000b5c:	bf00      	nop
}
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000b64:	f000 f804 	bl	8000b70 <Reset_BackupDomain>

  Reset_IPCC();
 8000b68:	f000 f81a 	bl	8000ba0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000b6c:	bf00      	nop
}
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b74:	f7ff fece 	bl	8000914 <LL_RCC_IsActiveFlag_PINRST>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00d      	beq.n	8000b9a <Reset_BackupDomain+0x2a>
 8000b7e:	f7ff fedc 	bl	800093a <LL_RCC_IsActiveFlag_SFTRST>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d108      	bne.n	8000b9a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b88:	f003 fe60 	bl	800484c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b8c:	f003 fe5e 	bl	800484c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b90:	f7ff fe9e 	bl	80008d0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b94:	f7ff fead 	bl	80008f2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
}
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000ba4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ba8:	f7ff feda 	bl	8000960 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000bac:	213f      	movs	r1, #63	; 0x3f
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <Reset_IPCC+0x40>)
 8000bb0:	f7ff ff44 	bl	8000a3c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000bb4:	213f      	movs	r1, #63	; 0x3f
 8000bb6:	480a      	ldr	r0, [pc, #40]	; (8000be0 <Reset_IPCC+0x40>)
 8000bb8:	f7ff ff4e 	bl	8000a58 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000bbc:	213f      	movs	r1, #63	; 0x3f
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <Reset_IPCC+0x40>)
 8000bc0:	f7ff fef6 	bl	80009b0 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000bc4:	213f      	movs	r1, #63	; 0x3f
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <Reset_IPCC+0x40>)
 8000bc8:	f7ff ff15 	bl	80009f6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000bcc:	213f      	movs	r1, #63	; 0x3f
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <Reset_IPCC+0x40>)
 8000bd0:	f7ff ff00 	bl	80009d4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000bd4:	213f      	movs	r1, #63	; 0x3f
 8000bd6:	4802      	ldr	r0, [pc, #8]	; (8000be0 <Reset_IPCC+0x40>)
 8000bd8:	f7ff ff1f 	bl	8000a1a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000bdc:	bf00      	nop
}
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58000c00 	.word	0x58000c00

08000be4 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f008 fd2c 	bl	8009648 <OTP_Read>
 8000bf0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d005      	beq.n	8000c04 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe35 	bl	800086c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
}
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <System_Init>:

static void System_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000c10:	f7ff ff98 	bl	8000b44 <Init_Smps>

  Init_Exti();
 8000c14:	f7ff ff9d 	bl	8000b52 <Init_Exti>

  Init_Rtc();
 8000c18:	f000 f802 	bl	8000c20 <Init_Rtc>

  return;
 8000c1c:	bf00      	nop
}
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <Init_Rtc+0x1c>)
 8000c26:	f7ff ff42 	bl	8000aae <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <Init_Rtc+0x1c>)
 8000c2e:	f7ff ff4e 	bl	8000ace <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000c32:	4802      	ldr	r0, [pc, #8]	; (8000c3c <Init_Rtc+0x1c>)
 8000c34:	f7ff ff2e 	bl	8000a94 <LL_RTC_EnableWriteProtection>

  return;
 8000c38:	bf00      	nop
}
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40002800 	.word	0x40002800

08000c40 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c48:	f7ff fe2e 	bl	80008a8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c4c:	f008 fd24 	bl	8009698 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c50:	2004      	movs	r0, #4
 8000c52:	f7ff fde1 	bl	8000818 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000c56:	bf00      	nop
}
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c62:	f008 f9f9 	bl	8009058 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <appe_Tl_Init+0x50>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2020      	movs	r0, #32
 8000c6c:	f008 fe52 	bl	8009914 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <appe_Tl_Init+0x54>)
 8000c72:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <appe_Tl_Init+0x58>)
 8000c76:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <appe_Tl_Init+0x5c>)
 8000c7e:	f007 ffa7 	bl	8008bd0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <appe_Tl_Init+0x60>)
 8000c84:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <appe_Tl_Init+0x64>)
 8000c88:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <appe_Tl_Init+0x68>)
 8000c8c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c8e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c92:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 fb1f 	bl	80092dc <TL_MM_Init>

  TL_Enable();
 8000c9e:	f008 f9d5 	bl	800904c <TL_Enable>

  return;
 8000ca2:	bf00      	nop
}
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	08008c09 	.word	0x08008c09
 8000cb0:	20030734 	.word	0x20030734
 8000cb4:	08000cc9 	.word	0x08000cc9
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	2003094c 	.word	0x2003094c
 8000cc0:	20030840 	.word	0x20030840
 8000cc4:	200301f8 	.word	0x200301f8

08000cc8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000cd2:	bf00      	nop
}
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	330b      	adds	r3, #11
 8000cee:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	d860      	bhi.n	8000dc0 <APPE_SysUserEvtRx+0xe0>
 8000cfe:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <APPE_SysUserEvtRx+0x24>)
 8000d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d04:	08000d25 	.word	0x08000d25
 8000d08:	08000d67 	.word	0x08000d67
 8000d0c:	08000d75 	.word	0x08000d75
 8000d10:	08000dc1 	.word	0x08000dc1
 8000d14:	08000d91 	.word	0x08000d91
 8000d18:	08000da1 	.word	0x08000da1
 8000d1c:	08000da9 	.word	0x08000da9
 8000d20:	08000db9 	.word	0x08000db9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f007 fea3 	bl	8008a74 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000d2e:	7b3b      	ldrb	r3, [r7, #12]
 8000d30:	4619      	mov	r1, r3
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	461a      	mov	r2, r3
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	4824      	ldr	r0, [pc, #144]	; (8000dcc <APPE_SysUserEvtRx+0xec>)
 8000d3a:	f009 fc2d 	bl	800a598 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000d3e:	7c3b      	ldrb	r3, [r7, #16]
 8000d40:	4619      	mov	r1, r3
 8000d42:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <APPE_SysUserEvtRx+0xf0>)
 8000d44:	f009 fc28 	bl	800a598 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000d48:	7dbb      	ldrb	r3, [r7, #22]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	7e3b      	ldrb	r3, [r7, #24]
 8000d52:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <APPE_SysUserEvtRx+0xf4>)
 8000d54:	f009 fc20 	bl	800a598 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000d58:	481f      	ldr	r0, [pc, #124]	; (8000dd8 <APPE_SysUserEvtRx+0xf8>)
 8000d5a:	f009 fc1d 	bl	800a598 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f870 	bl	8000e44 <APPE_SysEvtReadyProcessing>
    break;
 8000d64:	e02d      	b.n	8000dc2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <APPE_SysUserEvtRx+0xfc>)
 8000d68:	f009 fc16 	bl	800a598 <iprintf>
    APPE_SysEvtError(pPayload);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f843 	bl	8000df8 <APPE_SysEvtError>
    break;
 8000d72:	e026      	b.n	8000dc2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000d74:	481a      	ldr	r0, [pc, #104]	; (8000de0 <APPE_SysUserEvtRx+0x100>)
 8000d76:	f009 fc95 	bl	800a6a4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d7e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <APPE_SysUserEvtRx+0x104>)
 8000d8a:	f009 fc05 	bl	800a598 <iprintf>
    break;
 8000d8e:	e018      	b.n	8000dc2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <APPE_SysUserEvtRx+0x108>)
 8000d9a:	f009 fbfd 	bl	800a598 <iprintf>
    break;
 8000d9e:	e010      	b.n	8000dc2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <APPE_SysUserEvtRx+0x10c>)
 8000da2:	f009 fbf9 	bl	800a598 <iprintf>
    break;
 8000da6:	e00c      	b.n	8000dc2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	480f      	ldr	r0, [pc, #60]	; (8000df0 <APPE_SysUserEvtRx+0x110>)
 8000db2:	f009 fbf1 	bl	800a598 <iprintf>
    break;
 8000db6:	e004      	b.n	8000dc2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <APPE_SysUserEvtRx+0x114>)
 8000dba:	f009 fbed 	bl	800a598 <iprintf>
    break;
 8000dbe:	e000      	b.n	8000dc2 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000dc0:	bf00      	nop
  }

  return;
 8000dc2:	bf00      	nop
}
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	0800b5d4 	.word	0x0800b5d4
 8000dd0:	0800b5f8 	.word	0x0800b5f8
 8000dd4:	0800b614 	.word	0x0800b614
 8000dd8:	0800b62c 	.word	0x0800b62c
 8000ddc:	0800b64c 	.word	0x0800b64c
 8000de0:	0800b670 	.word	0x0800b670
 8000de4:	0800b6c0 	.word	0x0800b6c0
 8000de8:	0800b6e8 	.word	0x0800b6e8
 8000dec:	0800b724 	.word	0x0800b724
 8000df0:	0800b748 	.word	0x0800b748
 8000df4:	0800b784 	.word	0x0800b784

08000df8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	330b      	adds	r3, #11
 8000e06:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <APPE_SysEvtError+0x40>)
 8000e16:	f009 fbbf 	bl	800a598 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <APPE_SysEvtError+0x44>)
 8000e24:	f009 fc3e 	bl	800a6a4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000e28:	e003      	b.n	8000e32 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <APPE_SysEvtError+0x48>)
 8000e2c:	f009 fc3a 	bl	800a6a4 <puts>
  return;
 8000e30:	bf00      	nop
}
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	0800b7a8 	.word	0x0800b7a8
 8000e3c:	0800b7d8 	.word	0x0800b7d8
 8000e40:	0800b814 	.word	0x0800b814

08000e44 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	330b      	adds	r3, #11
 8000e64:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	3302      	adds	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d11e      	bne.n	8000eb2 <APPE_SysEvtReadyProcessing+0x6e>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000e74:	4818      	ldr	r0, [pc, #96]	; (8000ed8 <APPE_SysEvtReadyProcessing+0x94>)
 8000e76:	f009 fc15 	bl	800a6a4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000e7a:	f7ff fbef 	bl	800065c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000e7e:	230d      	movs	r3, #13
 8000e80:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000e82:	237f      	movs	r3, #127	; 0x7f
 8000e84:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000e86:	f7ff fd85 	bl	8000994 <LL_DBGMCU_GetRevisionID>
 8000e8a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e8e:	4813      	ldr	r0, [pc, #76]	; (8000edc <APPE_SysEvtReadyProcessing+0x98>)
 8000e90:	f009 fb82 	bl	800a598 <iprintf>

    config_param.RevisionID = RevisionID;
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f007 fdd2 	bl	8008a48 <SHCI_C2_Config>

    APP_BLE_Init();
 8000ea4:	f001 fc2c 	bl	8002700 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f008 fc06 	bl	80096bc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000eb0:	e00e      	b.n	8000ed0 <APPE_SysEvtReadyProcessing+0x8c>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d106      	bne.n	8000ec8 <APPE_SysEvtReadyProcessing+0x84>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <APPE_SysEvtReadyProcessing+0x9c>)
 8000ebc:	f009 fb6c 	bl	800a598 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
  return;
 8000ec6:	e003      	b.n	8000ed0 <APPE_SysEvtReadyProcessing+0x8c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <APPE_SysEvtReadyProcessing+0xa0>)
 8000eca:	f009 fb65 	bl	800a598 <iprintf>
  return;
 8000ece:	bf00      	nop
}
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	0800b84c 	.word	0x0800b84c
 8000edc:	0800b868 	.word	0x0800b868
 8000ee0:	0800b88c 	.word	0x0800b88c
 8000ee4:	0800b8c0 	.word	0x0800b8c0

08000ee8 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f002 fa0f 	bl	8003310 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f002 fa0c 	bl	8003310 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f002 fa09 	bl	8003310 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f002 fa40 	bl	8003384 <BSP_LED_On>
#endif

  return;
 8000f04:	bf00      	nop
}
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Button_Init>:

static void Button_Init( void )
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f002 fa52 	bl	80033b8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f14:	2101      	movs	r1, #1
 8000f16:	2001      	movs	r0, #1
 8000f18:	f002 fa4e 	bl	80033b8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f002 fa4a 	bl	80033b8 <BSP_PB_Init>
#endif

  return;
 8000f24:	bf00      	nop
}
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f002 fb96 	bl	8003660 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d00a      	beq.n	8000f58 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000f42:	f002 fba5 	bl	8003690 <HAL_GetTickFreq>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f50:	e002      	b.n	8000f58 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000f52:	f7ff fd8f 	bl	8000a74 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000f56:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000f58:	f002 fb82 	bl	8003660 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f4      	bhi.n	8000f52 <HAL_Delay+0x2a>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	f008 fbcf 	bl	800971c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000f86:	bf00      	nop
}
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	f008 fbbd 	bl	800971c <UTIL_SEQ_Run>

  return;
 8000fa2:	bf00      	nop
}
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2020      	movs	r0, #32
 8000fb6:	f008 fccf 	bl	8009958 <UTIL_SEQ_SetTask>
  return;
 8000fba:	bf00      	nop
}
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f008 fd30 	bl	8009a30 <UTIL_SEQ_SetEvt>
  return;
 8000fd0:	bf00      	nop
}
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f008 fd45 	bl	8009a70 <UTIL_SEQ_WaitEvt>
  return;
 8000fe6:	bf00      	nop
}
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2b10      	cmp	r3, #16
 8000ffc:	d006      	beq.n	800100c <HAL_GPIO_EXTI_Callback+0x1e>
 8000ffe:	2b10      	cmp	r3, #16
 8001000:	dc0d      	bgt.n	800101e <HAL_GPIO_EXTI_Callback+0x30>
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_GPIO_EXTI_Callback+0x24>
 8001006:	2b02      	cmp	r3, #2
 8001008:	d006      	beq.n	8001018 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 800100a:	e008      	b.n	800101e <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 800100c:	f001 fbfb 	bl	8002806 <APP_BLE_Key_Button1_Action>
      break; 
 8001010:	e006      	b.n	8001020 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8001012:	f001 fbff 	bl	8002814 <APP_BLE_Key_Button2_Action>
      break; 
 8001016:	e003      	b.n	8001020 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001018:	f001 fc03 	bl	8002822 <APP_BLE_Key_Button3_Action>
      break;
 800101c:	e000      	b.n	8001020 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 800101e:	bf00      	nop

  }
  return;
 8001020:	bf00      	nop
}
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <LL_EXTI_EnableIT_0_31>:
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <LL_EXTI_EnableIT_0_31+0x24>)
 8001032:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001036:	4905      	ldr	r1, [pc, #20]	; (800104c <LL_EXTI_EnableIT_0_31+0x24>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4313      	orrs	r3, r2
 800103c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	58000800 	.word	0x58000800

08001050 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4904      	ldr	r1, [pc, #16]	; (8001070 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]

}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58000800 	.word	0x58000800

08001074 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <ReadRtcSsrValue+0x3c>)
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	b29b      	uxth	r3, r3
 8001080:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <ReadRtcSsrValue+0x3c>)
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	b29b      	uxth	r3, r3
 8001088:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800108a:	e005      	b.n	8001098 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <ReadRtcSsrValue+0x3c>)
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	b29b      	uxth	r3, r3
 8001096:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d1f5      	bne.n	800108c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80010a0:	683b      	ldr	r3, [r7, #0]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40002800 	.word	0x40002800

080010b4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	460a      	mov	r2, r1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	4613      	mov	r3, r2
 80010c2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80010c4:	79ba      	ldrb	r2, [r7, #6]
 80010c6:	491d      	ldr	r1, [pc, #116]	; (800113c <LinkTimerAfter+0x88>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3315      	adds	r3, #21
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d009      	beq.n	80010f2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	4916      	ldr	r1, [pc, #88]	; (800113c <LinkTimerAfter+0x88>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3314      	adds	r3, #20
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	4911      	ldr	r1, [pc, #68]	; (800113c <LinkTimerAfter+0x88>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	3315      	adds	r3, #21
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <LinkTimerAfter+0x88>)
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3314      	adds	r3, #20
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <LinkTimerAfter+0x88>)
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	3315      	adds	r3, #21
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	701a      	strb	r2, [r3, #0]

  return;
 800112e:	bf00      	nop
}
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000098 	.word	0x20000098

08001140 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <LinkTimerBefore+0xb8>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	79ba      	ldrb	r2, [r7, #6]
 8001158:	429a      	cmp	r2, r3
 800115a:	d032      	beq.n	80011c2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800115c:	79ba      	ldrb	r2, [r7, #6]
 800115e:	4927      	ldr	r1, [pc, #156]	; (80011fc <LinkTimerBefore+0xbc>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	3314      	adds	r3, #20
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	4922      	ldr	r1, [pc, #136]	; (80011fc <LinkTimerBefore+0xbc>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	3315      	adds	r3, #21
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	491d      	ldr	r1, [pc, #116]	; (80011fc <LinkTimerBefore+0xbc>)
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	3315      	adds	r3, #21
 8001194:	79ba      	ldrb	r2, [r7, #6]
 8001196:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001198:	79fa      	ldrb	r2, [r7, #7]
 800119a:	4918      	ldr	r1, [pc, #96]	; (80011fc <LinkTimerBefore+0xbc>)
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	3314      	adds	r3, #20
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80011ac:	79ba      	ldrb	r2, [r7, #6]
 80011ae:	4913      	ldr	r1, [pc, #76]	; (80011fc <LinkTimerBefore+0xbc>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	3314      	adds	r3, #20
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80011c0:	e014      	b.n	80011ec <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <LinkTimerBefore+0xbc>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	3315      	adds	r3, #21
 80011d2:	79ba      	ldrb	r2, [r7, #6]
 80011d4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80011d6:	79ba      	ldrb	r2, [r7, #6]
 80011d8:	4908      	ldr	r1, [pc, #32]	; (80011fc <LinkTimerBefore+0xbc>)
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	440b      	add	r3, r1
 80011e4:	3314      	adds	r3, #20
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	701a      	strb	r2, [r3, #0]
  return;
 80011ea:	bf00      	nop
}
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000128 	.word	0x20000128
 80011fc:	20000098 	.word	0x20000098

08001200 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800120a:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <linkTimer+0x144>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b06      	cmp	r3, #6
 8001212:	d118      	bne.n	8001246 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001214:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <linkTimer+0x144>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <linkTimer+0x148>)
 800121c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800121e:	4a49      	ldr	r2, [pc, #292]	; (8001344 <linkTimer+0x144>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	4949      	ldr	r1, [pc, #292]	; (800134c <linkTimer+0x14c>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3315      	adds	r3, #21
 8001234:	2206      	movs	r2, #6
 8001236:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001238:	4b45      	ldr	r3, [pc, #276]	; (8001350 <linkTimer+0x150>)
 800123a:	f04f 32ff 	mov.w	r2, #4294967295
 800123e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	e078      	b.n	8001338 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001246:	f000 f909 	bl	800145c <ReturnTimeElapsed>
 800124a:	4603      	mov	r3, r0
 800124c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	493e      	ldr	r1, [pc, #248]	; (800134c <linkTimer+0x14c>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	3308      	adds	r3, #8
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	4419      	add	r1, r3
 8001266:	4839      	ldr	r0, [pc, #228]	; (800134c <linkTimer+0x14c>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4403      	add	r3, r0
 8001272:	3308      	adds	r3, #8
 8001274:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	4934      	ldr	r1, [pc, #208]	; (800134c <linkTimer+0x14c>)
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	3308      	adds	r3, #8
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <linkTimer+0x144>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	4a2e      	ldr	r2, [pc, #184]	; (800134c <linkTimer+0x14c>)
 8001294:	460b      	mov	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	440b      	add	r3, r1
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	3308      	adds	r3, #8
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d337      	bcc.n	8001318 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <linkTimer+0x144>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80012ae:	7b7a      	ldrb	r2, [r7, #13]
 80012b0:	4926      	ldr	r1, [pc, #152]	; (800134c <linkTimer+0x14c>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	440b      	add	r3, r1
 80012bc:	3315      	adds	r3, #21
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80012c2:	e013      	b.n	80012ec <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80012c4:	7b7a      	ldrb	r2, [r7, #13]
 80012c6:	4921      	ldr	r1, [pc, #132]	; (800134c <linkTimer+0x14c>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3315      	adds	r3, #21
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80012d8:	7b7a      	ldrb	r2, [r7, #13]
 80012da:	491c      	ldr	r1, [pc, #112]	; (800134c <linkTimer+0x14c>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	3315      	adds	r3, #21
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d00b      	beq.n	800130a <linkTimer+0x10a>
 80012f2:	7b3a      	ldrb	r2, [r7, #12]
 80012f4:	4915      	ldr	r1, [pc, #84]	; (800134c <linkTimer+0x14c>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	3308      	adds	r3, #8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	429a      	cmp	r2, r3
 8001308:	d2dc      	bcs.n	80012c4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800130a:	7b7a      	ldrb	r2, [r7, #13]
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fecf 	bl	80010b4 <LinkTimerAfter>
 8001316:	e00f      	b.n	8001338 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <linkTimer+0x144>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff0c 	bl	8001140 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <linkTimer+0x144>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <linkTimer+0x148>)
 8001330:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <linkTimer+0x144>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001338:	89fb      	ldrh	r3, [r7, #14]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000128 	.word	0x20000128
 8001348:	20000129 	.word	0x20000129
 800134c:	20000098 	.word	0x20000098
 8001350:	2000012c 	.word	0x2000012c

08001354 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	460a      	mov	r2, r1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <UnlinkTimer+0xf8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	429a      	cmp	r2, r3
 800136e:	d111      	bne.n	8001394 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <UnlinkTimer+0xf8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <UnlinkTimer+0xfc>)
 8001378:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800137a:	79fa      	ldrb	r2, [r7, #7]
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <UnlinkTimer+0x100>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3315      	adds	r3, #21
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <UnlinkTimer+0xf8>)
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e03e      	b.n	8001412 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	492f      	ldr	r1, [pc, #188]	; (8001454 <UnlinkTimer+0x100>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	3314      	adds	r3, #20
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	492a      	ldr	r1, [pc, #168]	; (8001454 <UnlinkTimer+0x100>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3315      	adds	r3, #21
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80013bc:	79f9      	ldrb	r1, [r7, #7]
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	4824      	ldr	r0, [pc, #144]	; (8001454 <UnlinkTimer+0x100>)
 80013c2:	460b      	mov	r3, r1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	440b      	add	r3, r1
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4403      	add	r3, r0
 80013cc:	3315      	adds	r3, #21
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2d8      	uxtb	r0, r3
 80013d2:	4920      	ldr	r1, [pc, #128]	; (8001454 <UnlinkTimer+0x100>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3315      	adds	r3, #21
 80013e0:	4602      	mov	r2, r0
 80013e2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d013      	beq.n	8001412 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80013ea:	79f9      	ldrb	r1, [r7, #7]
 80013ec:	7bba      	ldrb	r2, [r7, #14]
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <UnlinkTimer+0x100>)
 80013f0:	460b      	mov	r3, r1
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	440b      	add	r3, r1
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4403      	add	r3, r0
 80013fa:	3314      	adds	r3, #20
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	4914      	ldr	r1, [pc, #80]	; (8001454 <UnlinkTimer+0x100>)
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	3314      	adds	r3, #20
 800140e:	4602      	mov	r2, r0
 8001410:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	490f      	ldr	r1, [pc, #60]	; (8001454 <UnlinkTimer+0x100>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	330c      	adds	r3, #12
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <UnlinkTimer+0xf8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b06      	cmp	r3, #6
 800142e:	d107      	bne.n	8001440 <UnlinkTimer+0xec>
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <UnlinkTimer+0x104>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	601a      	str	r2, [r3, #0]
  }

  return;
 800143e:	bf00      	nop
 8001440:	bf00      	nop
}
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20000128 	.word	0x20000128
 8001450:	20000129 	.word	0x20000129
 8001454:	20000098 	.word	0x20000098
 8001458:	2000012c 	.word	0x2000012c

0800145c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <ReturnTimeElapsed+0x70>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146a:	d026      	beq.n	80014ba <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800146c:	f7ff fe02 	bl	8001074 <ReadRtcSsrValue>
 8001470:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <ReturnTimeElapsed+0x70>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	d805      	bhi.n	8001488 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <ReturnTimeElapsed+0x70>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	e00a      	b.n	800149e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <ReturnTimeElapsed+0x74>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <ReturnTimeElapsed+0x70>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	4413      	add	r3, r2
 800149c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <ReturnTimeElapsed+0x78>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <ReturnTimeElapsed+0x7c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	40d3      	lsrs	r3, r2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	e001      	b.n	80014be <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	b29b      	uxth	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000012c 	.word	0x2000012c
 80014d0:	200001a2 	.word	0x200001a2
 80014d4:	200001a1 	.word	0x200001a1
 80014d8:	200001a0 	.word	0x200001a0

080014dc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80014ec:	f7ff fdc2 	bl	8001074 <ReadRtcSsrValue>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a24      	ldr	r2, [pc, #144]	; (8001584 <RestartWakeupCounter+0xa8>)
 80014f4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f002 fa5f 	bl	80039ba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80014fc:	e03e      	b.n	800157c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d803      	bhi.n	800150c <RestartWakeupCounter+0x30>
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <RestartWakeupCounter+0xac>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d002      	beq.n	8001512 <RestartWakeupCounter+0x36>
      Value -= 1;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	3b01      	subs	r3, #1
 8001510:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001512:	bf00      	nop
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <RestartWakeupCounter+0xb0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f7      	beq.n	8001514 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <RestartWakeupCounter+0xb0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <RestartWakeupCounter+0xb0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001538:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <RestartWakeupCounter+0xb4>)
 800153c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001540:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001542:	2003      	movs	r0, #3
 8001544:	f002 fa47 	bl	80039d6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <RestartWakeupCounter+0xb8>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	88fa      	ldrh	r2, [r7, #6]
 8001552:	4910      	ldr	r1, [pc, #64]	; (8001594 <RestartWakeupCounter+0xb8>)
 8001554:	4313      	orrs	r3, r2
 8001556:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001558:	f7ff fd8c 	bl	8001074 <ReadRtcSsrValue>
 800155c:	4603      	mov	r3, r0
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <RestartWakeupCounter+0xa8>)
 8001560:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <RestartWakeupCounter+0xb0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <RestartWakeupCounter+0xb0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001574:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001576:	f3af 8000 	nop.w
  return ;
 800157a:	bf00      	nop
}
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000012c 	.word	0x2000012c
 8001588:	200001a0 	.word	0x200001a0
 800158c:	2000019c 	.word	0x2000019c
 8001590:	58000800 	.word	0x58000800
 8001594:	40002800 	.word	0x40002800

08001598 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <RescheduleTimerList+0x124>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015aa:	d108      	bne.n	80015be <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80015ac:	bf00      	nop
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <RescheduleTimerList+0x128>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f7      	bne.n	80015ae <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <RescheduleTimerList+0x128>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <RescheduleTimerList+0x128>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015d0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80015d2:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <RescheduleTimerList+0x12c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	493b      	ldr	r1, [pc, #236]	; (80016c8 <RescheduleTimerList+0x130>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	3308      	adds	r3, #8
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80015ec:	f7ff ff36 	bl	800145c <ReturnTimeElapsed>
 80015f0:	4603      	mov	r3, r0
 80015f2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d205      	bcs.n	8001608 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <RescheduleTimerList+0x134>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	e04d      	b.n	80016a4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <RescheduleTimerList+0x138>)
 800160c:	8812      	ldrh	r2, [r2, #0]
 800160e:	b292      	uxth	r2, r2
 8001610:	4413      	add	r3, r2
 8001612:	461a      	mov	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4293      	cmp	r3, r2
 8001618:	d906      	bls.n	8001628 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <RescheduleTimerList+0x138>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <RescheduleTimerList+0x134>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e03d      	b.n	80016a4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	b29a      	uxth	r2, r3
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <RescheduleTimerList+0x134>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001638:	e034      	b.n	80016a4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	4922      	ldr	r1, [pc, #136]	; (80016c8 <RescheduleTimerList+0x130>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3308      	adds	r3, #8
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	429a      	cmp	r2, r3
 8001650:	d20a      	bcs.n	8001668 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	491c      	ldr	r1, [pc, #112]	; (80016c8 <RescheduleTimerList+0x130>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3308      	adds	r3, #8
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e013      	b.n	8001690 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	4917      	ldr	r1, [pc, #92]	; (80016c8 <RescheduleTimerList+0x130>)
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	3308      	adds	r3, #8
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	1ac9      	subs	r1, r1, r3
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <RescheduleTimerList+0x130>)
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4403      	add	r3, r0
 800168c:	3308      	adds	r3, #8
 800168e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <RescheduleTimerList+0x130>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3315      	adds	r3, #21
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d1c7      	bne.n	800163a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80016aa:	89bb      	ldrh	r3, [r7, #12]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff15 	bl	80014dc <RestartWakeupCounter>

  return ;
 80016b2:	bf00      	nop
}
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40002800 	.word	0x40002800
 80016c0:	2000019c 	.word	0x2000019c
 80016c4:	20000128 	.word	0x20000128
 80016c8:	20000098 	.word	0x20000098
 80016cc:	20000130 	.word	0x20000130
 80016d0:	200001a4 	.word	0x200001a4

080016d4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016da:	f3ef 8310 	mrs	r3, PRIMASK
 80016de:	617b      	str	r3, [r7, #20]
  return(result);
 80016e0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016e8:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	22ca      	movs	r2, #202	; 0xca
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2253      	movs	r2, #83	; 0x53
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	4b58      	ldr	r3, [pc, #352]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001710:	4b56      	ldr	r3, [pc, #344]	; (800186c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001718:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800171c:	4954      	ldr	r1, [pc, #336]	; (8001870 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	330c      	adds	r3, #12
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d172      	bne.n	8001818 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001732:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001736:	494e      	ldr	r1, [pc, #312]	; (8001870 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001746:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800174a:	4949      	ldr	r1, [pc, #292]	; (8001870 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3310      	adds	r3, #16
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800175c:	4b45      	ldr	r3, [pc, #276]	; (8001874 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d050      	beq.n	8001808 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001766:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800176a:	4941      	ldr	r1, [pc, #260]	; (8001870 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	330d      	adds	r3, #13
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d126      	bne.n	80017ce <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001784:	2101      	movs	r1, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fde4 	bl	8001354 <UnlinkTimer>
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f383 8810 	msr	PRIMASK, r3
}
 8001796:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001798:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800179c:	4934      	ldr	r1, [pc, #208]	; (8001870 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3304      	adds	r3, #4
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f9d4 	bl	8001b60 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	22ca      	movs	r2, #202	; 0xca
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2253      	movs	r2, #83	; 0x53
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
 80017cc:	e014      	b.n	80017f8 <HW_TS_RTC_Wakeup_Handler+0x124>
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f383 8810 	msr	PRIMASK, r3
}
 80017d8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80017da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f932 	bl	8001a48 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	22ca      	movs	r2, #202	; 0xca
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2253      	movs	r2, #83	; 0x53
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80017f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	4619      	mov	r1, r3
 8001800:	69b8      	ldr	r0, [r7, #24]
 8001802:	f000 fa35 	bl	8001c70 <HW_TS_RTC_Int_AppNot>
 8001806:	e025      	b.n	8001854 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001808:	f7ff fec6 	bl	8001598 <RescheduleTimerList>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f383 8810 	msr	PRIMASK, r3
}
 8001816:	e01d      	b.n	8001854 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001818:	bf00      	nop
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f7      	beq.n	800181a <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800183e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001842:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f383 8810 	msr	PRIMASK, r3
}
 8001852:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	22ff      	movs	r2, #255	; 0xff
 800185c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800185e:	bf00      	nop
}
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000019c 	.word	0x2000019c
 800186c:	20000128 	.word	0x20000128
 8001870:	20000098 	.word	0x20000098
 8001874:	20000130 	.word	0x20000130
 8001878:	58000800 	.word	0x58000800

0800187c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001888:	4a64      	ldr	r2, [pc, #400]	; (8001a1c <HW_TS_Init+0x1a0>)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HW_TS_Init+0x1a0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	22ca      	movs	r2, #202	; 0xca
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
 8001898:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <HW_TS_Init+0x1a0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2253      	movs	r2, #83	; 0x53
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HW_TS_Init+0x1a4>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HW_TS_Init+0x1a4>)
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HW_TS_Init+0x1a4>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f1c3 0304 	rsb	r3, r3, #4
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <HW_TS_Init+0x1a8>)
 80018c2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HW_TS_Init+0x1a4>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018cc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80018d0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	fa92 f2a2 	rbit	r2, r2
 80018d8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d101      	bne.n	80018e8 <HW_TS_Init+0x6c>
  {
    return 32U;
 80018e4:	2220      	movs	r2, #32
 80018e6:	e003      	b.n	80018f0 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	fab2 f282 	clz	r2, r2
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b4b      	ldr	r3, [pc, #300]	; (8001a28 <HW_TS_Init+0x1ac>)
 80018fa:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <HW_TS_Init+0x1a4>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	b29b      	uxth	r3, r3
 8001902:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HW_TS_Init+0x1b0>)
 800190e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HW_TS_Init+0x1b0>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a44      	ldr	r2, [pc, #272]	; (8001a28 <HW_TS_Init+0x1ac>)
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001922:	4a40      	ldr	r2, [pc, #256]	; (8001a24 <HW_TS_Init+0x1a8>)
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	40d3      	lsrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001930:	4293      	cmp	r3, r2
 8001932:	d904      	bls.n	800193e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001934:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <HW_TS_Init+0x1b4>)
 8001936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	e003      	b.n	8001946 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HW_TS_Init+0x1b4>)
 8001944:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001946:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800194a:	f7ff fb81 	bl	8001050 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800194e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001952:	f7ff fb69 	bl	8001028 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d143      	bne.n	80019e4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HW_TS_Init+0x1b8>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HW_TS_Init+0x1bc>)
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800196a:	2300      	movs	r3, #0
 800196c:	77fb      	strb	r3, [r7, #31]
 800196e:	e00c      	b.n	800198a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001970:	7ffa      	ldrb	r2, [r7, #31]
 8001972:	4932      	ldr	r1, [pc, #200]	; (8001a3c <HW_TS_Init+0x1c0>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	330c      	adds	r3, #12
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001984:	7ffb      	ldrb	r3, [r7, #31]
 8001986:	3301      	adds	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	2b05      	cmp	r3, #5
 800198e:	d9ef      	bls.n	8001970 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HW_TS_Init+0x1c4>)
 8001992:	2206      	movs	r2, #6
 8001994:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HW_TS_Init+0x1a0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HW_TS_Init+0x1a0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HW_TS_Init+0x1a0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HW_TS_Init+0x1a0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HW_TS_Init+0x1c8>)
 80019c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80019c8:	2003      	movs	r0, #3
 80019ca:	f002 f804 	bl	80039d6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HW_TS_Init+0x1a0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HW_TS_Init+0x1a0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	e00a      	b.n	80019fa <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HW_TS_Init+0x1a0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f001 ffe0 	bl	80039ba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HW_TS_Init+0x1a0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001a04:	2200      	movs	r2, #0
 8001a06:	2103      	movs	r1, #3
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f001 ff94 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a0e:	2003      	movs	r0, #3
 8001a10:	f001 ffab 	bl	800396a <HAL_NVIC_EnableIRQ>

  return;
 8001a14:	bf00      	nop
}
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000019c 	.word	0x2000019c
 8001a20:	40002800 	.word	0x40002800
 8001a24:	200001a0 	.word	0x200001a0
 8001a28:	200001a1 	.word	0x200001a1
 8001a2c:	200001a2 	.word	0x200001a2
 8001a30:	200001a4 	.word	0x200001a4
 8001a34:	20000130 	.word	0x20000130
 8001a38:	2000012c 	.word	0x2000012c
 8001a3c:	20000098 	.word	0x20000098
 8001a40:	20000128 	.word	0x20000128
 8001a44:	58000800 	.word	0x58000800

08001a48 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a52:	f3ef 8310 	mrs	r3, PRIMASK
 8001a56:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a58:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a60:	2003      	movs	r0, #3
 8001a62:	f001 ff90 	bl	8003986 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HW_TS_Stop+0x100>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	22ca      	movs	r2, #202	; 0xca
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
 8001a70:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <HW_TS_Stop+0x100>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2253      	movs	r2, #83	; 0x53
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	4933      	ldr	r1, [pc, #204]	; (8001b4c <HW_TS_Stop+0x104>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	330c      	adds	r3, #12
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d148      	bne.n	8001b24 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fc5c 	bl	8001354 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HW_TS_Stop+0x108>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d135      	bne.n	8001b14 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HW_TS_Stop+0x10c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab4:	d108      	bne.n	8001ac8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001ab6:	bf00      	nop
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HW_TS_Stop+0x100>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f7      	bne.n	8001ab8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HW_TS_Stop+0x100>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HW_TS_Stop+0x100>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001adc:	bf00      	nop
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HW_TS_Stop+0x100>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f7      	beq.n	8001ade <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HW_TS_Stop+0x100>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HW_TS_Stop+0x100>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b02:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HW_TS_Stop+0x110>)
 8001b06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b0a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f001 ff62 	bl	80039d6 <HAL_NVIC_ClearPendingIRQ>
 8001b12:	e007      	b.n	8001b24 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HW_TS_Stop+0x114>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	7cfa      	ldrb	r2, [r7, #19]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001b20:	f7ff fd3a 	bl	8001598 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HW_TS_Stop+0x100>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	22ff      	movs	r2, #255	; 0xff
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b2e:	2003      	movs	r0, #3
 8001b30:	f001 ff1b 	bl	800396a <HAL_NVIC_EnableIRQ>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f383 8810 	msr	PRIMASK, r3
}
 8001b3e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b40:	bf00      	nop
}
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000019c 	.word	0x2000019c
 8001b4c:	20000098 	.word	0x20000098
 8001b50:	20000128 	.word	0x20000128
 8001b54:	40002800 	.word	0x40002800
 8001b58:	58000800 	.word	0x58000800
 8001b5c:	20000129 	.word	0x20000129

08001b60 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b6c:	79fa      	ldrb	r2, [r7, #7]
 8001b6e:	493c      	ldr	r1, [pc, #240]	; (8001c60 <HW_TS_Start+0x100>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	330c      	adds	r3, #12
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d103      	bne.n	8001b8c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff5e 	bl	8001a48 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001b90:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b92:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b96:	b672      	cpsid	i
}
 8001b98:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f001 fef3 	bl	8003986 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HW_TS_Start+0x104>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	22ca      	movs	r2, #202	; 0xca
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8001baa:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HW_TS_Start+0x104>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2253      	movs	r2, #83	; 0x53
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001bb4:	79fa      	ldrb	r2, [r7, #7]
 8001bb6:	492a      	ldr	r1, [pc, #168]	; (8001c60 <HW_TS_Start+0x100>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	330c      	adds	r3, #12
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001bc8:	79fa      	ldrb	r2, [r7, #7]
 8001bca:	4925      	ldr	r1, [pc, #148]	; (8001c60 <HW_TS_Start+0x100>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001bdc:	79fa      	ldrb	r2, [r7, #7]
 8001bde:	4920      	ldr	r1, [pc, #128]	; (8001c60 <HW_TS_Start+0x100>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	3304      	adds	r3, #4
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fb04 	bl	8001200 <linkTimer>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HW_TS_Start+0x108>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HW_TS_Start+0x10c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	7c7a      	ldrb	r2, [r7, #17]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d002      	beq.n	8001c14 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001c0e:	f7ff fcc3 	bl	8001598 <RescheduleTimerList>
 8001c12:	e013      	b.n	8001c3c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	4912      	ldr	r1, [pc, #72]	; (8001c60 <HW_TS_Start+0x100>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	3308      	adds	r3, #8
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	8a7b      	ldrh	r3, [r7, #18]
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	1ac9      	subs	r1, r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <HW_TS_Start+0x100>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4403      	add	r3, r0
 8001c38:	3308      	adds	r3, #8
 8001c3a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HW_TS_Start+0x104>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c46:	2003      	movs	r0, #3
 8001c48:	f001 fe8f 	bl	800396a <HAL_NVIC_EnableIRQ>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f383 8810 	msr	PRIMASK, r3
}
 8001c56:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c58:	bf00      	nop
}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000098 	.word	0x20000098
 8001c64:	2000019c 	.word	0x2000019c
 8001c68:	20000128 	.word	0x20000128
 8001c6c:	20000129 	.word	0x20000129

08001c70 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4798      	blx	r3

  return;
 8001c82:	bf00      	nop
}
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4603      	mov	r3, r0
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10e      	bne.n	8001cca <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HW_UART_Transmit_DMA+0x80>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HW_UART_Transmit_DMA+0x84>)
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HW_UART_Transmit_DMA+0x88>)
 8001cb6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001cb8:	89bb      	ldrh	r3, [r7, #12]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <HW_UART_Transmit_DMA+0x84>)
 8001cc0:	f004 fde0 	bl	8006884 <HAL_UART_Transmit_DMA>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
            break;
 8001cc8:	e000      	b.n	8001ccc <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001cca:	bf00      	nop
    }

    switch (hal_status)
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d816      	bhi.n	8001d00 <HW_UART_Transmit_DMA+0x74>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HW_UART_Transmit_DMA+0x4c>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cef 	.word	0x08001cef
 8001ce0:	08001cf5 	.word	0x08001cf5
 8001ce4:	08001cfb 	.word	0x08001cfb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	75bb      	strb	r3, [r7, #22]
            break;
 8001cec:	e009      	b.n	8001d02 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75bb      	strb	r3, [r7, #22]
            break;
 8001cf2:	e006      	b.n	8001d02 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	75bb      	strb	r3, [r7, #22]
            break;
 8001cf8:	e003      	b.n	8001d02 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	75bb      	strb	r3, [r7, #22]
            break;
 8001cfe:	e000      	b.n	8001d02 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001d00:	bf00      	nop
    }

    return hw_status;
 8001d02:	7dbb      	ldrb	r3, [r7, #22]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200001a8 	.word	0x200001a8
 8001d10:	20000278 	.word	0x20000278
 8001d14:	40013800 	.word	0x40013800

08001d18 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_UART_TxCpltCallback+0x34>)
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_UART_TxCpltCallback+0x38>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_UART_TxCpltCallback+0x38>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4798      	blx	r3
            }
            break;
 8001d3a:	e001      	b.n	8001d40 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001d40:	bf00      	nop
    }

    return;
 8001d42:	bf00      	nop
}
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	200001a8 	.word	0x200001a8

08001d54 <LL_RCC_LSE_SetDriveCapability>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f023 0218 	bic.w	r2, r3, #24
 8001d68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_AHB1_GRP1_EnableClock>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_AHB2_GRP1_EnableClock>:
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de8:	f001 fbcc 	bl	8003584 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001dec:	f7fe fe82 	bl	8000af4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df0:	f000 f812 	bl	8001e18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001df4:	f000 f86c 	bl	8001ed0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001df8:	f000 f88a 	bl	8001f10 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfc:	f000 f943 	bl	8002086 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e00:	f000 f924 	bl	800204c <MX_DMA_Init>
  MX_RF_Init();
 8001e04:	f000 f8e6 	bl	8001fd4 <MX_RF_Init>
  MX_RTC_Init();
 8001e08:	f000 f8ec 	bl	8001fe4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001e0c:	f7fe fe80 	bl	8000b10 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001e10:	f7ff f8af 	bl	8000f72 <MX_APPE_Process>
 8001e14:	e7fc      	b.n	8001e10 <main+0x2c>
	...

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b09a      	sub	sp, #104	; 0x68
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2248      	movs	r2, #72	; 0x48
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f008 fbae 	bl	800a588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	615a      	str	r2, [r3, #20]
 8001e3c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e3e:	f002 fd05 	bl	800484c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff ff86 	bl	8001d54 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <SystemClock_Config+0xb4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <SystemClock_Config+0xb4>)
 8001e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <SystemClock_Config+0xb4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001e64:	2307      	movs	r3, #7
 8001e66:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e78:	2340      	movs	r3, #64	; 0x40
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 f875 	bl	8004f74 <HAL_RCC_OscConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001e90:	f000 f906 	bl	80020a0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001e94:	236f      	movs	r3, #111	; 0x6f
 8001e96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fbd1 	bl	800565c <HAL_RCC_ClockConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001ec0:	f000 f8ee 	bl	80020a0 <Error_Handler>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3768      	adds	r7, #104	; 0x68
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58000400 	.word	0x58000400

08001ed0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2250      	movs	r2, #80	; 0x50
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f008 fb53 	bl	800a588 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001ee2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ee6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001ee8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 ffec 	bl	8005ed6 <HAL_RCCEx_PeriphCLKConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001f04:	f000 f8cc 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001f08:	bf00      	nop
 8001f0a:	3750      	adds	r7, #80	; 0x50
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <MX_IPCC_Init+0x20>)
 8001f16:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <MX_IPCC_Init+0x24>)
 8001f18:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_IPCC_Init+0x20>)
 8001f1c:	f002 fc10 	bl	8004740 <HAL_IPCC_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001f26:	f000 f8bb 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200001ac 	.word	0x200001ac
 8001f34:	58000c00 	.word	0x58000c00

08001f38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f3e:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <MX_USART1_UART_Init+0x98>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f6e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f82:	4812      	ldr	r0, [pc, #72]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f84:	f004 fc2e 	bl	80067e4 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001f8e:	f000 f887 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f92:	2100      	movs	r1, #0
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f96:	f005 fdf4 	bl	8007b82 <HAL_UARTEx_SetTxFifoThreshold>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001fa0:	f000 f87e 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4809      	ldr	r0, [pc, #36]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001fa8:	f005 fe29 	bl	8007bfe <HAL_UARTEx_SetRxFifoThreshold>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001fb2:	f000 f875 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001fb8:	f005 fdaa 	bl	8007b10 <HAL_UARTEx_DisableFifoMode>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001fc2:	f000 f86d 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000278 	.word	0x20000278
 8001fd0:	40013800 	.word	0x40013800

08001fd4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_RTC_Init+0x60>)
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <MX_RTC_Init+0x64>)
 8001fec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_RTC_Init+0x60>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <MX_RTC_Init+0x60>)
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_RTC_Init+0x60>)
 8001ffc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002000:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MX_RTC_Init+0x60>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_RTC_Init+0x60>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <MX_RTC_Init+0x60>)
 8002010:	2200      	movs	r2, #0
 8002012:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_RTC_Init+0x60>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <MX_RTC_Init+0x60>)
 800201c:	f004 f9e2 	bl	80063e4 <HAL_RTC_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002026:	f000 f83b 	bl	80020a0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_RTC_Init+0x60>)
 8002030:	f004 fac6 	bl	80065c0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800203a:	f000 f831 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200003c8 	.word	0x200003c8
 8002048:	40002800 	.word	0x40002800

0800204c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002050:	2004      	movs	r0, #4
 8002052:	f7ff fe95 	bl	8001d80 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff fe92 	bl	8001d80 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800205c:	2002      	movs	r0, #2
 800205e:	f7ff fe8f 	bl	8001d80 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	210f      	movs	r1, #15
 8002066:	200e      	movs	r0, #14
 8002068:	f001 fc65 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800206c:	200e      	movs	r0, #14
 800206e:	f001 fc7c 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	210f      	movs	r1, #15
 8002076:	203a      	movs	r0, #58	; 0x3a
 8002078:	f001 fc5d 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800207c:	203a      	movs	r0, #58	; 0x3a
 800207e:	f001 fc74 	bl	800396a <HAL_NVIC_EnableIRQ>

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	2004      	movs	r0, #4
 800208c:	f7ff fe91 	bl	8001db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff fe8e 	bl	8001db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2002      	movs	r0, #2
 8002098:	f7ff fe8b 	bl	8001db2 <LL_AHB2_GRP1_EnableClock>

}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_RCC_EnableRTC>:
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_AHB2_GRP1_EnableClock>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_AHB3_GRP1_EnableClock>:
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4313      	orrs	r3, r2
 8002118:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4013      	ands	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_APB1_GRP1_EnableClock>:
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4313      	orrs	r3, r2
 800214a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_APB1_GRP2_EnableClock>:
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4313      	orrs	r3, r2
 800217c:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_APB2_GRP1_EnableClock>:
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021bc:	68fb      	ldr	r3, [r7, #12]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80021ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021d2:	f7ff ff96 	bl	8002102 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	202e      	movs	r0, #46	; 0x2e
 80021dc:	f001 fbab 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80021e0:	202e      	movs	r0, #46	; 0x2e
 80021e2:	f001 fbc2 	bl	800396a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <HAL_IPCC_MspInit+0x44>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d113      	bne.n	8002226 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80021fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002202:	f7ff ff7e 	bl	8002102 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	202c      	movs	r0, #44	; 0x2c
 800220c:	f001 fb93 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002210:	202c      	movs	r0, #44	; 0x2c
 8002212:	f001 fbaa 	bl	800396a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	202d      	movs	r0, #45	; 0x2d
 800221c:	f001 fb8b 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002220:	202d      	movs	r0, #45	; 0x2d
 8002222:	f001 fba2 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	58000c00 	.word	0x58000c00

08002234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0a0      	sub	sp, #128	; 0x80
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	2250      	movs	r2, #80	; 0x50
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f008 f997 	bl	800a588 <memset>
  if(huart->Instance==LPUART1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a68      	ldr	r2, [pc, #416]	; (8002400 <HAL_UART_MspInit+0x1cc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d16e      	bne.n	8002342 <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002264:	2302      	movs	r3, #2
 8002266:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fe30 	bl	8005ed6 <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800227c:	f7ff ff10 	bl	80020a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff ff70 	bl	8002166 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2001      	movs	r0, #1
 8002288:	f7ff ff22 	bl	80020d0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800228c:	230c      	movs	r3, #12
 800228e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800229c:	2308      	movs	r3, #8
 800229e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022a4:	4619      	mov	r1, r3
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022aa:	f002 f885 	bl	80043b8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80022ae:	4b55      	ldr	r3, [pc, #340]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022b0:	4a55      	ldr	r2, [pc, #340]	; (8002408 <HAL_UART_MspInit+0x1d4>)
 80022b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022b6:	2211      	movs	r2, #17
 80022b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ba:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022bc:	2210      	movs	r2, #16
 80022be:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022cc:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d2:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80022d8:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80022e4:	4847      	ldr	r0, [pc, #284]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 80022e6:	f001 fb85 	bl	80039f4 <HAL_DMA_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80022f0:	f7ff fed6 	bl	80020a0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80022f4:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80022f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800230e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002312:	4619      	mov	r1, r3
 8002314:	483b      	ldr	r0, [pc, #236]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 8002316:	f001 fe9f 	bl	8004058 <HAL_DMAEx_ConfigMuxSync>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002320:	f7ff febe 	bl	80020a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a37      	ldr	r2, [pc, #220]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 8002328:	679a      	str	r2, [r3, #120]	; 0x78
 800232a:	4a36      	ldr	r2, [pc, #216]	; (8002404 <HAL_UART_MspInit+0x1d0>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2025      	movs	r0, #37	; 0x25
 8002336:	f001 fafe 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800233a:	2025      	movs	r0, #37	; 0x25
 800233c:	f001 fb15 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002340:	e05a      	b.n	80023f8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_UART_MspInit+0x1d8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d155      	bne.n	80023f8 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800234c:	2301      	movs	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4618      	mov	r0, r3
 800235a:	f003 fdbc 	bl	8005ed6 <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002364:	f7ff fe9c 	bl	80020a0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002368:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800236c:	f7ff ff14 	bl	8002198 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	2002      	movs	r0, #2
 8002372:	f7ff fead 	bl	80020d0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002376:	23c0      	movs	r3, #192	; 0xc0
 8002378:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800237e:	2301      	movs	r3, #1
 8002380:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002386:	2307      	movs	r3, #7
 8002388:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800238e:	4619      	mov	r1, r3
 8002390:	481f      	ldr	r0, [pc, #124]	; (8002410 <HAL_UART_MspInit+0x1dc>)
 8002392:	f002 f811 	bl	80043b8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 8002398:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <HAL_UART_MspInit+0x1e4>)
 800239a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 800239e:	220f      	movs	r2, #15
 80023a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023a4:	2210      	movs	r2, #16
 80023a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023cc:	4811      	ldr	r0, [pc, #68]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023ce:	f001 fb11 	bl	80039f4 <HAL_DMA_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80023d8:	f7ff fe62 	bl	80020a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023e0:	679a      	str	r2, [r3, #120]	; 0x78
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_UART_MspInit+0x1e0>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2024      	movs	r0, #36	; 0x24
 80023ee:	f001 faa2 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f2:	2024      	movs	r0, #36	; 0x24
 80023f4:	f001 fab9 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 80023f8:	bf00      	nop
 80023fa:	3780      	adds	r7, #128	; 0x80
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40008000 	.word	0x40008000
 8002404:	20000308 	.word	0x20000308
 8002408:	40020044 	.word	0x40020044
 800240c:	40013800 	.word	0x40013800
 8002410:	48000400 	.word	0x48000400
 8002414:	20000368 	.word	0x20000368
 8002418:	40020444 	.word	0x40020444

0800241c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b096      	sub	sp, #88	; 0x58
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	2250      	movs	r2, #80	; 0x50
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f008 f8ab 	bl	800a588 <memset>
  if(hrtc->Instance==RTC)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <HAL_RTC_MspInit+0x6c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d120      	bne.n	800247e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800243c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002440:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002448:	f107 0308 	add.w	r3, r7, #8
 800244c:	4618      	mov	r0, r3
 800244e:	f003 fd42 	bl	8005ed6 <HAL_RCCEx_PeriphCLKConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002458:	f7ff fe22 	bl	80020a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800245c:	f7ff fe27 	bl	80020ae <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002460:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002464:	f7ff fe66 	bl	8002134 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	2003      	movs	r0, #3
 800246e:	f001 fa62 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002472:	2003      	movs	r0, #3
 8002474:	f001 fa79 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f004 f95d 	bl	8006738 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3758      	adds	r7, #88	; 0x58
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40002800 	.word	0x40002800

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e0:	f001 f8aa 	bl	8003638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80024ec:	f7ff f8f2 	bl	80016d4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <DMA1_Channel4_IRQHandler+0x10>)
 80024fa:	f001 fc5c 	bl	8003db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000308 	.word	0x20000308

08002508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <USART1_IRQHandler+0x10>)
 800250e:	f004 fa4b 	bl	80069a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000278 	.word	0x20000278

0800251c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <LPUART1_IRQHandler+0x10>)
 8002522:	f004 fa41 	bl	80069a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200001e8 	.word	0x200001e8

08002530 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002534:	f000 fd8e 	bl	8003054 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002540:	f000 fdc0 	bl	80030c4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800254c:	f002 f8d4 	bl	80046f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <DMA2_Channel4_IRQHandler+0x10>)
 800255a:	f001 fc2c 	bl	8003db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000368 	.word	0x20000368

08002568 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800256c:	2010      	movs	r0, #16
 800256e:	f002 f8ab 	bl	80046c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}

08002576 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800257a:	2001      	movs	r0, #1
 800257c:	f002 f8a4 	bl	80046c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002588:	2002      	movs	r0, #2
 800258a:	f002 f89d 	bl	80046c8 <HAL_GPIO_EXTI_IRQHandler>
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}

08002592 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e00a      	b.n	80025ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025a4:	f3af 8000 	nop.w
 80025a8:	4601      	mov	r1, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	60ba      	str	r2, [r7, #8]
 80025b0:	b2ca      	uxtb	r2, r1
 80025b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	dbf0      	blt.n	80025a4 <_read+0x12>
	}

return len;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_close>:
	}
	return len;
}

int _close(int file)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f4:	605a      	str	r2, [r3, #4]
	return 0;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_isatty>:

int _isatty(int file)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
	return 0;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <_sbrk+0x50>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x16>
		heap_end = &end;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <_sbrk+0x50>)
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <_sbrk+0x54>)
 8002648:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <_sbrk+0x50>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <_sbrk+0x50>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	466a      	mov	r2, sp
 800265a:	4293      	cmp	r3, r2
 800265c:	d907      	bls.n	800266e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800265e:	f007 ff5b 	bl	800a518 <__errno>
 8002662:	4603      	mov	r3, r0
 8002664:	220c      	movs	r2, #12
 8002666:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
 800266c:	e006      	b.n	800267c <_sbrk+0x48>
	}

	heap_end += incr;
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <_sbrk+0x50>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <_sbrk+0x50>)
 8002678:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200003ec 	.word	0x200003ec
 8002688:	20001560 	.word	0x20001560

0800268c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002690:	f3bf 8f4f 	dsb	sy
}
 8002694:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <__NVIC_SystemReset+0x24>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800269e:	4904      	ldr	r1, [pc, #16]	; (80026b0 <__NVIC_SystemReset+0x24>)
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_SystemReset+0x28>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80026a6:	f3bf 8f4f 	dsb	sy
}
 80026aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <__NVIC_SystemReset+0x20>
 80026b0:	e000ed00 	.word	0xe000ed00
 80026b4:	05fa0004 	.word	0x05fa0004

080026b8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <LL_FLASH_GetUDN+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	1fff7580 	.word	0x1fff7580

080026d0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <LL_FLASH_GetDeviceID+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	1fff7584 	.word	0x1fff7584

080026e8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <LL_FLASH_GetSTCompanyID+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0a1b      	lsrs	r3, r3, #8
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	1fff7584 	.word	0x1fff7584

08002700 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002700:	b5b0      	push	{r4, r5, r7, lr}
 8002702:	b090      	sub	sp, #64	; 0x40
 8002704:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <APP_BLE_Init+0x88>)
 8002708:	1d3c      	adds	r4, r7, #4
 800270a:	461d      	mov	r5, r3
 800270c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	e895 0003 	ldmia.w	r5, {r0, r1}
 800271c:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002720:	f000 f886 	bl	8002830 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002724:	2101      	movs	r1, #1
 8002726:	2002      	movs	r0, #2
 8002728:	f006 ffc8 	bl	80096bc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <APP_BLE_Init+0x8c>)
 800272e:	2100      	movs	r1, #0
 8002730:	2002      	movs	r0, #2
 8002732:	f007 f8ef 	bl	8009914 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f006 f957 	bl	80089ec <SHCI_C2_BLE_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8002744:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <APP_BLE_Init+0x5e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800274c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002750:	4619      	mov	r1, r3
 8002752:	480f      	ldr	r0, [pc, #60]	; (8002790 <APP_BLE_Init+0x90>)
 8002754:	f007 ff20 	bl	800a598 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002758:	f7ff fca2 	bl	80020a0 <Error_Handler>
 800275c:	e002      	b.n	8002764 <APP_BLE_Init+0x64>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <APP_BLE_Init+0x94>)
 8002760:	f007 ff1a 	bl	800a598 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002764:	f000 f87a 	bl	800285c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002768:	f006 fbe4 	bl	8008f34 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <APP_BLE_Init+0x98>)
 800276e:	2100      	movs	r1, #0
 8002770:	2001      	movs	r0, #1
 8002772:	f007 f8cf 	bl	8009914 <UTIL_SEQ_RegTask>
    APP_DBG_MSG("Eddystone TLM beacon advertise\n\r");
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
 8002776:	4809      	ldr	r0, [pc, #36]	; (800279c <APP_BLE_Init+0x9c>)
 8002778:	f007 ff0e 	bl	800a598 <iprintf>
    IBeacon_Process();
 800277c:	f000 fb38 	bl	8002df0 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8002780:	bf00      	nop
}
 8002782:	3740      	adds	r7, #64	; 0x40
 8002784:	46bd      	mov	sp, r7
 8002786:	bdb0      	pop	{r4, r5, r7, pc}
 8002788:	0800b968 	.word	0x0800b968
 800278c:	080086b9 	.word	0x080086b9
 8002790:	0800b8f4 	.word	0x0800b8f4
 8002794:	0800b92c 	.word	0x0800b92c
 8002798:	08002a95 	.word	0x08002a95
 800279c:	0800b954 	.word	0x0800b954

080027a0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3301      	adds	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2bff      	cmp	r3, #255	; 0xff
 80027b4:	d00e      	beq.n	80027d4 <SVCCTL_App_Notification+0x34>
 80027b6:	2bff      	cmp	r3, #255	; 0xff
 80027b8:	dc19      	bgt.n	80027ee <SVCCTL_App_Notification+0x4e>
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d019      	beq.n	80027f2 <SVCCTL_App_Notification+0x52>
 80027be:	2b3e      	cmp	r3, #62	; 0x3e
 80027c0:	d000      	beq.n	80027c4 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80027c2:	e014      	b.n	80027ee <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3302      	adds	r3, #2
 80027c8:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
          break;
 80027d0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80027d2:	e011      	b.n	80027f8 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3302      	adds	r3, #2
 80027d8:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	f240 4307 	movw	r3, #1031	; 0x407
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d105      	bne.n	80027f6 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80027ea:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80027ec:	e003      	b.n	80027f6 <SVCCTL_App_Notification+0x56>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80027f6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <APP_BLE_Key_Button1_Action>:

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <Ble_Tl_Init+0x20>)
 8002838:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <Ble_Tl_Init+0x24>)
 800283c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800283e:	463b      	mov	r3, r7
 8002840:	4619      	mov	r1, r3
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <Ble_Tl_Init+0x28>)
 8002844:	f005 ff1c 	bl	8008680 <hci_init>

  return;
 8002848:	bf00      	nop
}
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20030028 	.word	0x20030028
 8002854:	08002bfd 	.word	0x08002bfd
 8002858:	08002bc5 	.word	0x08002bc5

0800285c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800285c:	b5b0      	push	{r4, r5, r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af04      	add	r7, sp, #16
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8002862:	2300      	movs	r3, #0
 8002864:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002866:	2392      	movs	r3, #146	; 0x92
 8002868:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800286a:	4873      	ldr	r0, [pc, #460]	; (8002a38 <Ble_Hci_Gap_Gatt_Init+0x1dc>)
 800286c:	f007 ff1a 	bl	800a6a4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8002870:	f005 fe79 	bl	8008566 <hci_reset>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	4619      	mov	r1, r3
 8002882:	486e      	ldr	r0, [pc, #440]	; (8002a3c <Ble_Hci_Gap_Gatt_Init+0x1e0>)
 8002884:	f007 fe88 	bl	800a598 <iprintf>
 8002888:	e002      	b.n	8002890 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800288a:	486d      	ldr	r0, [pc, #436]	; (8002a40 <Ble_Hci_Gap_Gatt_Init+0x1e4>)
 800288c:	f007 ff0a 	bl	800a6a4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8002890:	f000 f932 	bl	8002af8 <BleGetBdAddress>
 8002894:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	2106      	movs	r1, #6
 800289a:	2000      	movs	r0, #0
 800289c:	f005 fd77 	bl	800838e <aci_hal_write_config_data>
 80028a0:	4603      	mov	r3, r0
 80028a2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4865      	ldr	r0, [pc, #404]	; (8002a44 <Ble_Hci_Gap_Gatt_Init+0x1e8>)
 80028b0:	f007 fe72 	bl	800a598 <iprintf>
 80028b4:	e021      	b.n	80028fa <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80028b6:	4864      	ldr	r0, [pc, #400]	; (8002a48 <Ble_Hci_Gap_Gatt_Init+0x1ec>)
 80028b8:	f007 fef4 	bl	800a6a4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	3305      	adds	r3, #5
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	3304      	adds	r3, #4
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461c      	mov	r4, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3303      	adds	r3, #3
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461d      	mov	r5, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	3302      	adds	r3, #2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	3301      	adds	r3, #1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	9101      	str	r1, [sp, #4]
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	462b      	mov	r3, r5
 80028f0:	4622      	mov	r2, r4
 80028f2:	4601      	mov	r1, r0
 80028f4:	4855      	ldr	r0, [pc, #340]	; (8002a4c <Ble_Hci_Gap_Gatt_Init+0x1f0>)
 80028f6:	f007 fe4f 	bl	800a598 <iprintf>
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80028fa:	4a55      	ldr	r2, [pc, #340]	; (8002a50 <Ble_Hci_Gap_Gatt_Init+0x1f4>)
 80028fc:	2110      	movs	r1, #16
 80028fe:	2018      	movs	r0, #24
 8002900:	f005 fd45 	bl	800838e <aci_hal_write_config_data>
 8002904:	4603      	mov	r3, r0
 8002906:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	4619      	mov	r1, r3
 8002912:	4850      	ldr	r0, [pc, #320]	; (8002a54 <Ble_Hci_Gap_Gatt_Init+0x1f8>)
 8002914:	f007 fe40 	bl	800a598 <iprintf>
 8002918:	e002      	b.n	8002920 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800291a:	484f      	ldr	r0, [pc, #316]	; (8002a58 <Ble_Hci_Gap_Gatt_Init+0x1fc>)
 800291c:	f007 fec2 	bl	800a6a4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8002920:	4a4e      	ldr	r2, [pc, #312]	; (8002a5c <Ble_Hci_Gap_Gatt_Init+0x200>)
 8002922:	2110      	movs	r1, #16
 8002924:	2008      	movs	r0, #8
 8002926:	f005 fd32 	bl	800838e <aci_hal_write_config_data>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	4619      	mov	r1, r3
 8002938:	4849      	ldr	r0, [pc, #292]	; (8002a60 <Ble_Hci_Gap_Gatt_Init+0x204>)
 800293a:	f007 fe2d 	bl	800a598 <iprintf>
 800293e:	e002      	b.n	8002946 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8002940:	4848      	ldr	r0, [pc, #288]	; (8002a64 <Ble_Hci_Gap_Gatt_Init+0x208>)
 8002942:	f007 feaf 	bl	800a6a4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002946:	2118      	movs	r1, #24
 8002948:	2001      	movs	r0, #1
 800294a:	f005 fda5 	bl	8008498 <aci_hal_set_tx_power_level>
 800294e:	4603      	mov	r3, r0
 8002950:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	4619      	mov	r1, r3
 800295c:	4842      	ldr	r0, [pc, #264]	; (8002a68 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 800295e:	f007 fe1b 	bl	800a598 <iprintf>
 8002962:	e002      	b.n	800296a <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8002964:	4841      	ldr	r0, [pc, #260]	; (8002a6c <Ble_Hci_Gap_Gatt_Init+0x210>)
 8002966:	f007 fe9d 	bl	800a6a4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800296a:	f005 fc42 	bl	80081f2 <aci_gatt_init>
 800296e:	4603      	mov	r3, r0
 8002970:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	4619      	mov	r1, r3
 800297c:	483c      	ldr	r0, [pc, #240]	; (8002a70 <Ble_Hci_Gap_Gatt_Init+0x214>)
 800297e:	f007 fe0b 	bl	800a598 <iprintf>
 8002982:	e002      	b.n	800298a <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8002984:	483b      	ldr	r0, [pc, #236]	; (8002a74 <Ble_Hci_Gap_Gatt_Init+0x218>)
 8002986:	f007 fe8d 	bl	800a6a4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d035      	beq.n	8002a08 <Ble_Hci_Gap_Gatt_Init+0x1ac>
  {
    const char *name = "BEACON";
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <Ble_Hci_Gap_Gatt_Init+0x21c>)
 800299e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80029a0:	1dba      	adds	r2, r7, #6
 80029a2:	7bf8      	ldrb	r0, [r7, #15]
 80029a4:	1cbb      	adds	r3, r7, #2
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	2207      	movs	r2, #7
 80029b0:	2100      	movs	r1, #0
 80029b2:	f005 faab 	bl	8007f0c <aci_gap_init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	4619      	mov	r1, r3
 80029c4:	482d      	ldr	r0, [pc, #180]	; (8002a7c <Ble_Hci_Gap_Gatt_Init+0x220>)
 80029c6:	f007 fde7 	bl	800a598 <iprintf>
 80029ca:	e002      	b.n	80029d2 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80029cc:	482c      	ldr	r0, [pc, #176]	; (8002a80 <Ble_Hci_Gap_Gatt_Init+0x224>)
 80029ce:	f007 fe69 	bl	800a6a4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80029d2:	88fc      	ldrh	r4, [r7, #6]
 80029d4:	88bd      	ldrh	r5, [r7, #4]
 80029d6:	68b8      	ldr	r0, [r7, #8]
 80029d8:	f7fd fbd2 	bl	8000180 <strlen>
 80029dc:	4603      	mov	r3, r0
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	4629      	mov	r1, r5
 80029ea:	4620      	mov	r0, r4
 80029ec:	f005 fc26 	bl	800823c <aci_gatt_update_char_value>
 80029f0:	4603      	mov	r3, r0
 80029f2:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <Ble_Hci_Gap_Gatt_Init+0x1a6>
    {
      BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Device Name\n");
 80029fa:	4822      	ldr	r0, [pc, #136]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x228>)
 80029fc:	f007 fe52 	bl	800a6a4 <puts>
 8002a00:	e002      	b.n	8002a08 <Ble_Hci_Gap_Gatt_Init+0x1ac>
    }
    else
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
 8002a02:	4821      	ldr	r0, [pc, #132]	; (8002a88 <Ble_Hci_Gap_Gatt_Init+0x22c>)
 8002a04:	f007 fe4e 	bl	800a6a4 <puts>
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8002a08:	88f8      	ldrh	r0, [r7, #6]
 8002a0a:	8879      	ldrh	r1, [r7, #2]
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2302      	movs	r3, #2
 8002a12:	2200      	movs	r2, #0
 8002a14:	f005 fc12 	bl	800823c <aci_gatt_update_char_value>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]
                                   gap_appearance_char_handle,
                                   0,
                                   2,
                                   (uint8_t *)&a_appearance);
  if (ret != BLE_STATUS_SUCCESS)
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <Ble_Hci_Gap_Gatt_Init+0x1ce>
  {
    BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Appearance\n");
 8002a22:	481a      	ldr	r0, [pc, #104]	; (8002a8c <Ble_Hci_Gap_Gatt_Init+0x230>)
 8002a24:	f007 fe3e 	bl	800a6a4 <puts>
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8002a28:	e002      	b.n	8002a30 <Ble_Hci_Gap_Gatt_Init+0x1d4>
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
 8002a2a:	4819      	ldr	r0, [pc, #100]	; (8002a90 <Ble_Hci_Gap_Gatt_Init+0x234>)
 8002a2c:	f007 fe3a 	bl	800a6a4 <puts>
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bdb0      	pop	{r4, r5, r7, pc}
 8002a38:	0800b9a0 	.word	0x0800b9a0
 8002a3c:	0800b9cc 	.word	0x0800b9cc
 8002a40:	0800b9fc 	.word	0x0800b9fc
 8002a44:	0800ba1c 	.word	0x0800ba1c
 8002a48:	0800ba78 	.word	0x0800ba78
 8002a4c:	0800bac4 	.word	0x0800bac4
 8002a50:	0800bfa8 	.word	0x0800bfa8
 8002a54:	0800bb00 	.word	0x0800bb00
 8002a58:	0800bb58 	.word	0x0800bb58
 8002a5c:	0800bfb8 	.word	0x0800bfb8
 8002a60:	0800bba0 	.word	0x0800bba0
 8002a64:	0800bbf8 	.word	0x0800bbf8
 8002a68:	0800bc40 	.word	0x0800bc40
 8002a6c:	0800bc80 	.word	0x0800bc80
 8002a70:	0800bcb0 	.word	0x0800bcb0
 8002a74:	0800bce4 	.word	0x0800bce4
 8002a78:	0800bd08 	.word	0x0800bd08
 8002a7c:	0800bd10 	.word	0x0800bd10
 8002a80:	0800bd40 	.word	0x0800bd40
 8002a84:	0800bd60 	.word	0x0800bd60
 8002a88:	0800bd94 	.word	0x0800bd94
 8002a8c:	0800bdc8 	.word	0x0800bdc8
 8002a90:	0800bdfc 	.word	0x0800bdfc

08002a94 <Beacon_Update>:
static void Beacon_Update(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <Beacon_Update+0x58>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01b      	beq.n	8002ade <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <Beacon_Update+0x58>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <Beacon_Update+0x58>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b07      	cmp	r3, #7
 8002ab6:	d102      	bne.n	8002abe <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8002ab8:	2302      	movs	r3, #2
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e001      	b.n	8002ac2 <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8002ac2:	f001 fb09 	bl	80040d8 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <Beacon_Update+0x5c>)
 8002ac8:	f248 0211 	movw	r2, #32785	; 0x8011
 8002acc:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8002ace:	463a      	mov	r2, r7
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fbab 	bl	8004230 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8002ada:	f001 fb1f 	bl	800411c <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8002ade:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <Beacon_Update+0x60>)
 8002ae4:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 8002ae6:	f7ff fdd1 	bl	800268c <__NVIC_SystemReset>
 8002aea:	bf00      	nop
 8002aec:	200003f6 	.word	0x200003f6
 8002af0:	58004000 	.word	0x58004000
 8002af4:	00010601 	.word	0x00010601

08002af8 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002afe:	f7ff fddb 	bl	80026b8 <LL_FLASH_GetUDN>
 8002b02:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0a:	d023      	beq.n	8002b54 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002b0c:	f7ff fdec 	bl	80026e8 <LL_FLASH_GetSTCompanyID>
 8002b10:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002b12:	f7ff fddd 	bl	80026d0 <LL_FLASH_GetDeviceID>
 8002b16:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <BleGetBdAddress+0x80>)
 8002b1e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <BleGetBdAddress+0x80>)
 8002b28:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <BleGetBdAddress+0x80>)
 8002b30:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <BleGetBdAddress+0x80>)
 8002b38:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <BleGetBdAddress+0x80>)
 8002b42:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <BleGetBdAddress+0x80>)
 8002b4c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <BleGetBdAddress+0x80>)
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e00b      	b.n	8002b6c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f006 fd77 	bl	8009648 <OTP_Read>
 8002b5a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e001      	b.n	8002b6c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <BleGetBdAddress+0x84>)
 8002b6a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8002b6c:	697b      	ldr	r3, [r7, #20]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200003f0 	.word	0x200003f0
 8002b7c:	0800bfa0 	.word	0x0800bfa0

08002b80 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f006 fee4 	bl	8009958 <UTIL_SEQ_SetTask>

  return;
 8002b90:	bf00      	nop
}
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f006 ff45 	bl	8009a30 <UTIL_SEQ_SetEvt>

  return;
 8002ba6:	bf00      	nop
}
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f006 ff5a 	bl	8009a70 <UTIL_SEQ_WaitEvt>

  return;
 8002bbc:	bf00      	nop
}
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f006 f9e4 	bl	8008fa4 <SVCCTL_UserEvtRx>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8002bec:	e003      	b.n	8002bf6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
  return;
 8002bf4:	bf00      	nop
}
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <BLE_StatusNot+0x16>
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d006      	beq.n	8002c1e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8002c10:	e00b      	b.n	8002c2a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002c12:	231f      	movs	r3, #31
 8002c14:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f006 feca 	bl	80099b0 <UTIL_SEQ_PauseTask>
      break;
 8002c1c:	e005      	b.n	8002c2a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002c1e:	231f      	movs	r3, #31
 8002c20:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f006 fee4 	bl	80099f0 <UTIL_SEQ_ResumeTask>
      break;
 8002c28:	bf00      	nop
  }

  return;
 8002c2a:	bf00      	nop
}
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b094      	sub	sp, #80	; 0x50
 8002c38:	af08      	add	r7, sp, #32
 8002c3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	4a67      	ldr	r2, [pc, #412]	; (8002de8 <IBeacon_Init+0x1b4>)
 8002c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c4e:	1092      	asrs	r2, r2, #2
 8002c50:	17db      	asrs	r3, r3, #31
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f005 fca8 	bl	80085ae <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8002c5e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002c60:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002c62:	2300      	movs	r3, #0
 8002c64:	9306      	str	r3, [sp, #24]
 8002c66:	2300      	movs	r3, #0
 8002c68:	9305      	str	r3, [sp, #20]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9304      	str	r3, [sp, #16]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9303      	str	r3, [sp, #12]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9302      	str	r3, [sp, #8]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2003      	movs	r0, #3
 8002c82:	f005 f849 	bl	8007d18 <aci_gap_set_discoverable>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8002c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <IBeacon_Init+0x66>
  {
    return ret;
 8002c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c98:	e0a1      	b.n	8002dde <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8002c9a:	200a      	movs	r0, #10
 8002c9c:	f005 fa55 	bl	800814a <aci_gap_delete_ad_type>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8002ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <IBeacon_Init+0x80>
  {
    return ret;
 8002cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cb2:	e094      	b.n	8002dde <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 8002cb4:	231a      	movs	r3, #26
 8002cb6:	743b      	strb	r3, [r7, #16]
 8002cb8:	23ff      	movs	r3, #255	; 0xff
 8002cba:	747b      	strb	r3, [r7, #17]
 8002cbc:	234c      	movs	r3, #76	; 0x4c
 8002cbe:	74bb      	strb	r3, [r7, #18]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	74fb      	strb	r3, [r7, #19]
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	753b      	strb	r3, [r7, #20]
 8002cc8:	2315      	movs	r3, #21
 8002cca:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002cd2:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ce0:	789b      	ldrb	r3, [r3, #2]
 8002ce2:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002ce8:	78db      	ldrb	r3, [r3, #3]
 8002cea:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002cf0:	791b      	ldrb	r3, [r3, #4]
 8002cf2:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002cf8:	795b      	ldrb	r3, [r3, #5]
 8002cfa:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d00:	799b      	ldrb	r3, [r3, #6]
 8002d02:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d08:	79db      	ldrb	r3, [r3, #7]
 8002d0a:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d10:	7a1b      	ldrb	r3, [r3, #8]
 8002d12:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d18:	7a5b      	ldrb	r3, [r3, #9]
 8002d1a:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d20:	7a9b      	ldrb	r3, [r3, #10]
 8002d22:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d2a:	7adb      	ldrb	r3, [r3, #11]
 8002d2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d34:	7b1b      	ldrb	r3, [r3, #12]
 8002d36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d3e:	7b5b      	ldrb	r3, [r3, #13]
 8002d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d48:	7b9b      	ldrb	r3, [r3, #14]
 8002d4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8002d52:	7bdb      	ldrb	r3, [r3, #15]
 8002d54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002d5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8002d66:	785b      	ldrb	r3, [r3, #1]
 8002d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8002d72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 8002d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <IBeacon_Init+0x1b8>)
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4611      	mov	r1, r2
 8002d92:	8019      	strh	r1, [r3, #0]
 8002d94:	3302      	adds	r3, #2
 8002d96:	0c12      	lsrs	r2, r2, #16
 8002d98:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4619      	mov	r1, r3
 8002da0:	201b      	movs	r0, #27
 8002da2:	f005 f960 	bl	8008066 <aci_gap_update_adv_data>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8002dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <IBeacon_Init+0x186>
  {
    return ret;
 8002db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002db8:	e011      	b.n	8002dde <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f005 f950 	bl	8008066 <aci_gap_update_adv_data>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8002dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <IBeacon_Init+0x1a6>
  {
    return ret;
 8002dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dd8:	e001      	b.n	8002dde <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 8002dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3730      	adds	r7, #48	; 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	66666667 	.word	0x66666667
 8002dec:	0800be30 	.word	0x0800be30

08002df0 <IBeacon_Process>:

void IBeacon_Process(void)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b08d      	sub	sp, #52	; 0x34
 8002df4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <IBeacon_Process+0x4c>)
 8002df8:	f107 0420 	add.w	r4, r7, #32
 8002dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8002e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e06:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 8002e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e0c:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8002e0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e12:	80bb      	strh	r3, [r7, #4]
 8002e14:	f107 0320 	add.w	r3, r7, #32
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	f107 0318 	add.w	r3, r7, #24
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	23c1      	movs	r3, #193	; 0xc1
 8002e28:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff01 	bl	8002c34 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 8002e32:	bf00      	nop
 8002e34:	3734      	adds	r7, #52	; 0x34
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	0800be34 	.word	0x0800be34

08002e40 <LL_PWR_EnableBootC2>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <LL_PWR_EnableBootC2+0x1c>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <LL_PWR_EnableBootC2+0x1c>)
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	60d3      	str	r3, [r2, #12]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	58000400 	.word	0x58000400

08002e60 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002e6a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002e6e:	4905      	ldr	r1, [pc, #20]	; (8002e84 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	58000800 	.word	0x58000800

08002e88 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	620b      	str	r3, [r1, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	58000800 	.word	0x58000800

08002eac <LL_AHB3_GRP1_EnableClock>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f08:	68fb      	ldr	r3, [r7, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_C1_IPCC_EnableIT_TXF>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_C1_IPCC_EnableIT_RXO>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	605a      	str	r2, [r3, #4]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_C1_IPCC_SetFlag_CHx>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4013      	ands	r3, r2
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d101      	bne.n	800301a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	4013      	ands	r3, r2
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d101      	bne.n	8003044 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003058:	2102      	movs	r1, #2
 800305a:	4819      	ldr	r0, [pc, #100]	; (80030c0 <HW_IPCC_Rx_Handler+0x6c>)
 800305c:	f7ff ffe4 	bl	8003028 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HW_IPCC_Rx_Handler+0x26>
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <HW_IPCC_Rx_Handler+0x6c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	43db      	mvns	r3, r3
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003074:	f000 f8da 	bl	800322c <HW_IPCC_SYS_EvtHandler>
 8003078:	e01f      	b.n	80030ba <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800307a:	2101      	movs	r1, #1
 800307c:	4810      	ldr	r0, [pc, #64]	; (80030c0 <HW_IPCC_Rx_Handler+0x6c>)
 800307e:	f7ff ffd3 	bl	8003028 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HW_IPCC_Rx_Handler+0x46>
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HW_IPCC_Rx_Handler+0x6c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003094:	f000 f88e 	bl	80031b4 <HW_IPCC_BLE_EvtHandler>
 8003098:	e00f      	b.n	80030ba <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800309a:	2108      	movs	r1, #8
 800309c:	4808      	ldr	r0, [pc, #32]	; (80030c0 <HW_IPCC_Rx_Handler+0x6c>)
 800309e:	f7ff ffc3 	bl	8003028 <LL_C2_IPCC_IsActiveFlag_CHx>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <HW_IPCC_Rx_Handler+0x68>
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HW_IPCC_Rx_Handler+0x6c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80030b6:	f000 f905 	bl	80032c4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
}
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58000c00 	.word	0x58000c00

080030c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80030c8:	2102      	movs	r1, #2
 80030ca:	481a      	ldr	r0, [pc, #104]	; (8003134 <HW_IPCC_Tx_Handler+0x70>)
 80030cc:	f7ff ff97 	bl	8002ffe <LL_C1_IPCC_IsActiveFlag_CHx>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HW_IPCC_Tx_Handler+0x26>
 80030d6:	4b17      	ldr	r3, [pc, #92]	; (8003134 <HW_IPCC_Tx_Handler+0x70>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	43db      	mvns	r3, r3
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80030e4:	f000 f896 	bl	8003214 <HW_IPCC_SYS_CmdEvtHandler>
 80030e8:	e020      	b.n	800312c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80030ea:	2108      	movs	r1, #8
 80030ec:	4811      	ldr	r0, [pc, #68]	; (8003134 <HW_IPCC_Tx_Handler+0x70>)
 80030ee:	f7ff ff86 	bl	8002ffe <LL_C1_IPCC_IsActiveFlag_CHx>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HW_IPCC_Tx_Handler+0x48>
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HW_IPCC_Tx_Handler+0x70>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003106:	f000 f8bf 	bl	8003288 <HW_IPCC_MM_FreeBufHandler>
 800310a:	e00f      	b.n	800312c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800310c:	2120      	movs	r1, #32
 800310e:	4809      	ldr	r0, [pc, #36]	; (8003134 <HW_IPCC_Tx_Handler+0x70>)
 8003110:	f7ff ff75 	bl	8002ffe <LL_C1_IPCC_IsActiveFlag_CHx>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HW_IPCC_Tx_Handler+0x6a>
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HW_IPCC_Tx_Handler+0x70>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	43db      	mvns	r3, r3
 8003120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003128:	f000 f850 	bl	80031cc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800312c:	bf00      	nop
 800312e:	bf00      	nop
}
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	58000c00 	.word	0x58000c00

08003138 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800313c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003140:	f7ff fecd 	bl	8002ede <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003144:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003148:	f7ff fe9e 	bl	8002e88 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800314c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003150:	f7ff fe86 	bl	8002e60 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003154:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003156:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003158:	f7ff fe72 	bl	8002e40 <LL_PWR_EnableBootC2>

  return;
 800315c:	bf00      	nop
}
 800315e:	bd80      	pop	{r7, pc}

08003160 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003164:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003168:	f7ff fea0 	bl	8002eac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800316c:	4806      	ldr	r0, [pc, #24]	; (8003188 <HW_IPCC_Init+0x28>)
 800316e:	f7ff fee2 	bl	8002f36 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <HW_IPCC_Init+0x28>)
 8003174:	f7ff fecf 	bl	8002f16 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003178:	202c      	movs	r0, #44	; 0x2c
 800317a:	f000 fbf6 	bl	800396a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800317e:	202d      	movs	r0, #45	; 0x2d
 8003180:	f000 fbf3 	bl	800396a <HAL_NVIC_EnableIRQ>

  return;
 8003184:	bf00      	nop
}
 8003186:	bd80      	pop	{r7, pc}
 8003188:	58000c00 	.word	0x58000c00

0800318c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003190:	2101      	movs	r1, #1
 8003192:	4802      	ldr	r0, [pc, #8]	; (800319c <HW_IPCC_BLE_Init+0x10>)
 8003194:	f7ff ff04 	bl	8002fa0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003198:	bf00      	nop
}
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58000c00 	.word	0x58000c00

080031a0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80031a4:	2101      	movs	r1, #1
 80031a6:	4802      	ldr	r0, [pc, #8]	; (80031b0 <HW_IPCC_BLE_SendCmd+0x10>)
 80031a8:	f7ff ff1a 	bl	8002fe0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80031ac:	bf00      	nop
}
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	58000c00 	.word	0x58000c00

080031b4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80031b8:	f005 ffd8 	bl	800916c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80031bc:	2101      	movs	r1, #1
 80031be:	4802      	ldr	r0, [pc, #8]	; (80031c8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80031c0:	f7ff ff00 	bl	8002fc4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80031c4:	bf00      	nop
}
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	58000c00 	.word	0x58000c00

080031cc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80031d0:	2120      	movs	r1, #32
 80031d2:	4803      	ldr	r0, [pc, #12]	; (80031e0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80031d4:	f7ff fed2 	bl	8002f7c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80031d8:	f005 fff8 	bl	80091cc <HW_IPCC_BLE_AclDataAckNot>

  return;
 80031dc:	bf00      	nop
}
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58000c00 	.word	0x58000c00

080031e4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80031e8:	2102      	movs	r1, #2
 80031ea:	4802      	ldr	r0, [pc, #8]	; (80031f4 <HW_IPCC_SYS_Init+0x10>)
 80031ec:	f7ff fed8 	bl	8002fa0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80031f0:	bf00      	nop
}
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	58000c00 	.word	0x58000c00

080031f8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80031fc:	2102      	movs	r1, #2
 80031fe:	4804      	ldr	r0, [pc, #16]	; (8003210 <HW_IPCC_SYS_SendCmd+0x18>)
 8003200:	f7ff feee 	bl	8002fe0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003204:	2102      	movs	r1, #2
 8003206:	4802      	ldr	r0, [pc, #8]	; (8003210 <HW_IPCC_SYS_SendCmd+0x18>)
 8003208:	f7ff fea5 	bl	8002f56 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800320c:	bf00      	nop
}
 800320e:	bd80      	pop	{r7, pc}
 8003210:	58000c00 	.word	0x58000c00

08003214 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003218:	2102      	movs	r1, #2
 800321a:	4803      	ldr	r0, [pc, #12]	; (8003228 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800321c:	f7ff feae 	bl	8002f7c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003220:	f006 f824 	bl	800926c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003224:	bf00      	nop
}
 8003226:	bd80      	pop	{r7, pc}
 8003228:	58000c00 	.word	0x58000c00

0800322c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003230:	f006 f832 	bl	8009298 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003234:	2102      	movs	r1, #2
 8003236:	4802      	ldr	r0, [pc, #8]	; (8003240 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003238:	f7ff fec4 	bl	8002fc4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800323c:	bf00      	nop
}
 800323e:	bd80      	pop	{r7, pc}
 8003240:	58000c00 	.word	0x58000c00

08003244 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800324c:	2108      	movs	r1, #8
 800324e:	480c      	ldr	r0, [pc, #48]	; (8003280 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003250:	f7ff fed5 	bl	8002ffe <LL_C1_IPCC_IsActiveFlag_CHx>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003260:	2108      	movs	r1, #8
 8003262:	4807      	ldr	r0, [pc, #28]	; (8003280 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003264:	f7ff fe77 	bl	8002f56 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003268:	e006      	b.n	8003278 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800326e:	2108      	movs	r1, #8
 8003270:	4803      	ldr	r0, [pc, #12]	; (8003280 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003272:	f7ff feb5 	bl	8002fe0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003276:	bf00      	nop
}
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	58000c00 	.word	0x58000c00
 8003284:	200003f8 	.word	0x200003f8

08003288 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800328c:	2108      	movs	r1, #8
 800328e:	4806      	ldr	r0, [pc, #24]	; (80032a8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003290:	f7ff fe74 	bl	8002f7c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800329a:	2108      	movs	r1, #8
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800329e:	f7ff fe9f 	bl	8002fe0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80032a2:	bf00      	nop
}
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	58000c00 	.word	0x58000c00
 80032ac:	200003f8 	.word	0x200003f8

080032b0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80032b4:	2108      	movs	r1, #8
 80032b6:	4802      	ldr	r0, [pc, #8]	; (80032c0 <HW_IPCC_TRACES_Init+0x10>)
 80032b8:	f7ff fe72 	bl	8002fa0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80032bc:	bf00      	nop
}
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	58000c00 	.word	0x58000c00

080032c4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80032c8:	f006 f88e 	bl	80093e8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80032cc:	2108      	movs	r1, #8
 80032ce:	4802      	ldr	r0, [pc, #8]	; (80032d8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80032d0:	f7ff fe78 	bl	8002fc4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80032d4:	bf00      	nop
}
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	58000c00 	.word	0x58000c00

080032dc <LL_AHB2_GRP1_EnableClock>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003300:	68fb      	ldr	r3, [r7, #12]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800331a:	f107 030c 	add.w	r3, r7, #12
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800332a:	2002      	movs	r0, #2
 800332c:	f7ff ffd6 	bl	80032dc <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <BSP_LED_Init+0x6c>)
 8003334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003338:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333a:	2301      	movs	r3, #1
 800333c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003342:	2302      	movs	r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <BSP_LED_Init+0x70>)
 800334a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334e:	f107 020c 	add.w	r2, r7, #12
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f001 f82f 	bl	80043b8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <BSP_LED_Init+0x70>)
 800335e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4a05      	ldr	r2, [pc, #20]	; (800337c <BSP_LED_Init+0x6c>)
 8003366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800336a:	2200      	movs	r2, #0
 800336c:	4619      	mov	r1, r3
 800336e:	f001 f993 	bl	8004698 <HAL_GPIO_WritePin>
}
 8003372:	bf00      	nop
 8003374:	3720      	adds	r7, #32
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	0800bfc8 	.word	0x0800bfc8
 8003380:	20000008 	.word	0x20000008

08003384 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <BSP_LED_On+0x2c>)
 8003392:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <BSP_LED_On+0x30>)
 800339a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800339e:	2201      	movs	r2, #1
 80033a0:	4619      	mov	r1, r3
 80033a2:	f001 f979 	bl	8004698 <HAL_GPIO_WritePin>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000008 	.word	0x20000008
 80033b4:	0800bfc8 	.word	0x0800bfc8

080033b8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	460a      	mov	r2, r1
 80033c2:	71fb      	strb	r3, [r7, #7]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <BSP_PB_Init+0x2e>
 80033de:	2004      	movs	r0, #4
 80033e0:	f7ff ff7c 	bl	80032dc <LL_AHB2_GRP1_EnableClock>
 80033e4:	e00c      	b.n	8003400 <BSP_PB_Init+0x48>
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d103      	bne.n	80033f4 <BSP_PB_Init+0x3c>
 80033ec:	2008      	movs	r0, #8
 80033ee:	f7ff ff75 	bl	80032dc <LL_AHB2_GRP1_EnableClock>
 80033f2:	e005      	b.n	8003400 <BSP_PB_Init+0x48>
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d102      	bne.n	8003400 <BSP_PB_Init+0x48>
 80033fa:	2008      	movs	r0, #8
 80033fc:	f7ff ff6e 	bl	80032dc <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003400:	79bb      	ldrb	r3, [r7, #6]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d117      	bne.n	8003436 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <BSP_PB_Init+0xd4>)
 800340a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800340e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003414:	2301      	movs	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003418:	2302      	movs	r3, #2
 800341a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <BSP_PB_Init+0xd8>)
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	f107 020c 	add.w	r2, r7, #12
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f000 ffc4 	bl	80043b8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003430:	2001      	movs	r0, #1
 8003432:	f7fd fd79 	bl	8000f28 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d123      	bne.n	8003484 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <BSP_PB_Init+0xd4>)
 8003440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003444:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800344a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800344e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <BSP_PB_Init+0xd8>)
 8003454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003458:	f107 020c 	add.w	r2, r7, #12
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f000 ffaa 	bl	80043b8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <BSP_PB_Init+0xdc>)
 8003468:	5cd3      	ldrb	r3, [r2, r3]
 800346a:	b25b      	sxtb	r3, r3
 800346c:	2200      	movs	r2, #0
 800346e:	210f      	movs	r1, #15
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fa60 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	4a06      	ldr	r2, [pc, #24]	; (8003494 <BSP_PB_Init+0xdc>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	b25b      	sxtb	r3, r3
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fa73 	bl	800396a <HAL_NVIC_EnableIRQ>
  }
}
 8003484:	bf00      	nop
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	0800bfd0 	.word	0x0800bfd0
 8003490:	20000014 	.word	0x20000014
 8003494:	0800bfd8 	.word	0x0800bfd8

08003498 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800349c:	4b26      	ldr	r3, [pc, #152]	; (8003538 <SystemInit+0xa0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <SystemInit+0xa0>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	4a23      	ldr	r2, [pc, #140]	; (8003538 <SystemInit+0xa0>)
 80034aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80034b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80034ca:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <SystemInit+0xa4>)
 80034d8:	4013      	ands	r3, r2
 80034da:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e8:	f023 0305 	bic.w	r3, r3, #5
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <SystemInit+0xa8>)
 800350a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <SystemInit+0xa8>)
 8003512:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00
 800353c:	faf6fefb 	.word	0xfaf6fefb
 8003540:	22041000 	.word	0x22041000

08003544 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6053      	str	r3, [r2, #4]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e0042000 	.word	0xe0042000

08003564 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800356e:	f043 0302 	orr.w	r3, r3, #2
 8003572:	6053      	str	r3, [r2, #4]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e0042000 	.word	0xe0042000

08003584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_Init+0x3c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <HAL_Init+0x3c>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800359a:	2003      	movs	r0, #3
 800359c:	f000 f9c0 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035a0:	2000      	movs	r0, #0
 80035a2:	f000 f80f 	bl	80035c4 <HAL_InitTick>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	71fb      	strb	r3, [r7, #7]
 80035b0:	e001      	b.n	80035b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035b2:	f7fe fe0a 	bl	80021ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035b6:	79fb      	ldrb	r3, [r7, #7]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	58004000 	.word	0x58004000

080035c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_InitTick+0x6c>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d024      	beq.n	8003622 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035d8:	f002 f9ec 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_InitTick+0x6c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f9d6 	bl	80039a2 <HAL_SYSTICK_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10f      	bne.n	800361c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d809      	bhi.n	8003616 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003602:	2200      	movs	r2, #0
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	f04f 30ff 	mov.w	r0, #4294967295
 800360a:	f000 f994 	bl	8003936 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_InitTick+0x70>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e007      	b.n	8003626 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e004      	b.n	8003626 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e001      	b.n	8003626 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000028 	.word	0x20000028
 8003634:	20000024 	.word	0x20000024

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000028 	.word	0x20000028
 800365c:	200003fc 	.word	0x200003fc

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	200003fc 	.word	0x200003fc

08003678 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_GetTickPrio+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000024 	.word	0x20000024

08003690 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_GetTickFreq+0x14>)
 8003696:	781b      	ldrb	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000028 	.word	0x20000028

080036a8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80036ac:	f7ff ff4a 	bl	8003544 <LL_DBGMCU_EnableDBGSleepMode>
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80036b8:	f7ff ff54 	bl	8003564 <LL_DBGMCU_EnableDBGStopMode>
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}

080036c0 <__NVIC_SetPriorityGrouping>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f2:	4a04      	ldr	r2, [pc, #16]	; (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60d3      	str	r3, [r2, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <__NVIC_GetPriorityGrouping>:
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <__NVIC_GetPriorityGrouping+0x18>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f003 0307 	and.w	r3, r3, #7
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_EnableIRQ>:
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	2b00      	cmp	r3, #0
 8003734:	db0b      	blt.n	800374e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	f003 021f 	and.w	r2, r3, #31
 800373c:	4907      	ldr	r1, [pc, #28]	; (800375c <__NVIC_EnableIRQ+0x38>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2001      	movs	r0, #1
 8003746:	fa00 f202 	lsl.w	r2, r0, r2
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100

08003760 <__NVIC_DisableIRQ>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	2b00      	cmp	r3, #0
 8003770:	db12      	blt.n	8003798 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	490a      	ldr	r1, [pc, #40]	; (80037a4 <__NVIC_DisableIRQ+0x44>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2001      	movs	r0, #1
 8003782:	fa00 f202 	lsl.w	r2, r0, r2
 8003786:	3320      	adds	r3, #32
 8003788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800378c:	f3bf 8f4f 	dsb	sy
}
 8003790:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003792:	f3bf 8f6f 	isb	sy
}
 8003796:	bf00      	nop
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPendingIRQ>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db0c      	blt.n	80037d4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4907      	ldr	r1, [pc, #28]	; (80037e0 <__NVIC_SetPendingIRQ+0x38>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	3340      	adds	r3, #64	; 0x40
 80037d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100

080037e4 <__NVIC_ClearPendingIRQ>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db0c      	blt.n	8003810 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	4907      	ldr	r1, [pc, #28]	; (800381c <__NVIC_ClearPendingIRQ+0x38>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2001      	movs	r0, #1
 8003806:	fa00 f202 	lsl.w	r2, r0, r2
 800380a:	3360      	adds	r3, #96	; 0x60
 800380c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000e100 	.word	0xe000e100

08003820 <__NVIC_SetPriority>:
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db0a      	blt.n	800384a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	490c      	ldr	r1, [pc, #48]	; (800386c <__NVIC_SetPriority+0x4c>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003848:	e00a      	b.n	8003860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4908      	ldr	r1, [pc, #32]	; (8003870 <__NVIC_SetPriority+0x50>)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3b04      	subs	r3, #4
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	440b      	add	r3, r1
 800385e:	761a      	strb	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <NVIC_EncodePriority>:
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f1c3 0307 	rsb	r3, r3, #7
 800388e:	2b04      	cmp	r3, #4
 8003890:	bf28      	it	cs
 8003892:	2304      	movcs	r3, #4
 8003894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	2b06      	cmp	r3, #6
 800389c:	d902      	bls.n	80038a4 <NVIC_EncodePriority+0x30>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3b03      	subs	r3, #3
 80038a2:	e000      	b.n	80038a6 <NVIC_EncodePriority+0x32>
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43d9      	mvns	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	4313      	orrs	r3, r2
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff8e 	bl	8003820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fec9 	bl	80036c0 <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003944:	f7ff fee0 	bl	8003708 <__NVIC_GetPriorityGrouping>
 8003948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff90 	bl	8003874 <NVIC_EncodePriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5f 	bl	8003820 <__NVIC_SetPriority>
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fed3 	bl	8003724 <__NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fee3 	bl	8003760 <__NVIC_DisableIRQ>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff96 	bl	80038dc <SysTick_Config>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff feed 	bl	80037a8 <__NVIC_SetPendingIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fefd 	bl	80037e4 <__NVIC_ClearPendingIRQ>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e08e      	b.n	8003b24 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_DMA_Init+0x138>)
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d80f      	bhi.n	8003a32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <HAL_DMA_Init+0x13c>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a45      	ldr	r2, [pc, #276]	; (8003b34 <HAL_DMA_Init+0x140>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <HAL_DMA_Init+0x144>)
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a30:	e00e      	b.n	8003a50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <HAL_DMA_Init+0x148>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a3d      	ldr	r2, [pc, #244]	; (8003b34 <HAL_DMA_Init+0x140>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	009a      	lsls	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <HAL_DMA_Init+0x14c>)
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa74 	bl	8003f90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab0:	d102      	bne.n	8003ab8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ace:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_DMA_Init+0x106>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d80c      	bhi.n	8003afa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fa93 	bl	800400c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	e008      	b.n	8003b0c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40020407 	.word	0x40020407
 8003b30:	bffdfff8 	.word	0xbffdfff8
 8003b34:	cccccccd 	.word	0xcccccccd
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	bffdfbf8 	.word	0xbffdfbf8
 8003b40:	40020400 	.word	0x40020400

08003b44 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Start_IT+0x20>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e066      	b.n	8003c32 <HAL_DMA_Start_IT+0xee>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d155      	bne.n	8003c24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f9b9 	bl	8003f14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 020e 	orr.w	r2, r2, #14
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00f      	b.n	8003bdc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 020a 	orr.w	r2, r2, #10
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e005      	b.n	8003c30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e04f      	b.n	8003cec <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d008      	beq.n	8003c6a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e040      	b.n	8003cec <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 020e 	bic.w	r2, r2, #14
 8003c78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f003 021c 	and.w	r2, r3, #28
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d005      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2204      	movs	r2, #4
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
 8003d1a:	e047      	b.n	8003dac <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 020e 	bic.w	r2, r2, #14
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 021c 	and.w	r2, r3, #28
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
    }
  }
  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 031c 	and.w	r3, r3, #28
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d026      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x7a>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d021      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0204 	bic.w	r2, r2, #4
 8003e08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f003 021c 	and.w	r2, r3, #28
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2104      	movs	r1, #4
 8003e18:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d071      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e2e:	e06c      	b.n	8003f0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	f003 031c 	and.w	r3, r3, #28
 8003e38:	2202      	movs	r2, #2
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d02e      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xec>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d029      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 020a 	bic.w	r2, r2, #10
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f003 021c 	and.w	r2, r3, #28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	2102      	movs	r1, #2
 8003e82:	fa01 f202 	lsl.w	r2, r1, r2
 8003e86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d038      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ea0:	e033      	b.n	8003f0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f003 031c 	and.w	r3, r3, #28
 8003eaa:	2208      	movs	r2, #8
 8003eac:	409a      	lsls	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02a      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x156>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d025      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 020e 	bic.w	r2, r2, #14
 8003ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	f003 021c 	and.w	r2, r3, #28
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	2101      	movs	r1, #1
 8003ede:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
}
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 021c 	and.w	r2, r3, #28
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d108      	bne.n	8003f74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f72:	e007      	b.n	8003f84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	60da      	str	r2, [r3, #12]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d80a      	bhi.n	8003fba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	089b      	lsrs	r3, r3, #2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fb0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6493      	str	r3, [r2, #72]	; 0x48
 8003fb8:	e007      	b.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	009a      	lsls	r2, r3, #2
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3b08      	subs	r3, #8
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fe0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40020407 	.word	0x40020407
 8004000:	4002081c 	.word	0x4002081c
 8004004:	cccccccd 	.word	0xcccccccd
 8004008:	40020880 	.word	0x40020880

0800400c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800401c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004030:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b01      	subs	r3, #1
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2201      	movs	r2, #1
 800403c:	409a      	lsls	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	1000823f 	.word	0x1000823f
 8004054:	40020940 	.word	0x40020940

08004058 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d12b      	bne.n	80040c6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_DMAEx_ConfigMuxSync+0x24>
 8004078:	2302      	movs	r3, #2
 800407a:	e025      	b.n	80040c8 <HAL_DMAEx_ConfigMuxSync+0x70>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 800408c:	4013      	ands	r3, r2
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	6811      	ldr	r1, [r2, #0]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	3a01      	subs	r2, #1
 8004098:	04d2      	lsls	r2, r2, #19
 800409a:	4311      	orrs	r1, r2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	6852      	ldr	r2, [r2, #4]
 80040a0:	4311      	orrs	r1, r2
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	7a12      	ldrb	r2, [r2, #8]
 80040a6:	0412      	lsls	r2, r2, #16
 80040a8:	4311      	orrs	r1, r2
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	7a52      	ldrb	r2, [r2, #9]
 80040ae:	0252      	lsls	r2, r2, #9
 80040b0:	4311      	orrs	r1, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000fdff 	.word	0xe000fdff

080040d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_FLASH_Unlock+0x38>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da0b      	bge.n	8004102 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_FLASH_Unlock+0x38>)
 80040ec:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_FLASH_Unlock+0x3c>)
 80040ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_FLASH_Unlock+0x38>)
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <HAL_FLASH_Unlock+0x40>)
 80040f4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_FLASH_Unlock+0x38>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da01      	bge.n	8004102 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004102:	79fb      	ldrb	r3, [r7, #7]
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	58004000 	.word	0x58004000
 8004114:	45670123 	.word	0x45670123
 8004118:	cdef89ab 	.word	0xcdef89ab

0800411c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_FLASH_Lock+0x30>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_FLASH_Lock+0x30>)
 800412c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004130:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_FLASH_Lock+0x30>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db01      	blt.n	800413e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800413e:	79fb      	ldrb	r3, [r7, #7]
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	58004000 	.word	0x58004000

08004150 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7ff fa82 	bl	8003660 <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800415e:	e009      	b.n	8004174 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004160:	f7ff fa7e 	bl	8003660 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d801      	bhi.n	8004174 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e054      	b.n	800421e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004174:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d0ee      	beq.n	8004160 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004192:	4b25      	ldr	r3, [pc, #148]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 8004194:	2201      	movs	r2, #1
 8004196:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 80041a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041a8:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <FLASH_WaitForLastOperation+0x86>
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80041d0:	4915      	ldr	r1, [pc, #84]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	618b      	str	r3, [r1, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <FLASH_WaitForLastOperation+0x9a>
 80041e0:	4a11      	ldr	r2, [pc, #68]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80041e8:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80041f0:	4a0e      	ldr	r2, [pc, #56]	; (800422c <FLASH_WaitForLastOperation+0xdc>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e011      	b.n	800421e <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80041fa:	f7ff fa31 	bl	8003660 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d801      	bhi.n	800420e <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e007      	b.n	800421e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <FLASH_WaitForLastOperation+0xd8>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800421a:	d0ee      	beq.n	80041fa <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58004000 	.word	0x58004000
 800422c:	20000400 	.word	0x20000400

08004230 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_FLASHEx_Erase+0x9c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_FLASHEx_Erase+0x16>
 8004242:	2302      	movs	r3, #2
 8004244:	e03d      	b.n	80042c2 <HAL_FLASHEx_Erase+0x92>
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <HAL_FLASHEx_Erase+0x9c>)
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800424c:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <HAL_FLASHEx_Erase+0x9c>)
 800424e:	2200      	movs	r2, #0
 8004250:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004256:	f7ff ff7b 	bl	8004150 <FLASH_WaitForLastOperation>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d12a      	bne.n	80042ba <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d124      	bne.n	80042b6 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	f04f 32ff 	mov.w	r2, #4294967295
 8004272:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	e012      	b.n	80042a2 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800427c:	68b8      	ldr	r0, [r7, #8]
 800427e:	f000 f827 	bl	80042d0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004286:	f7ff ff63 	bl	8004150 <FLASH_WaitForLastOperation>
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	601a      	str	r2, [r3, #0]
          break;
 800429a:	e00a      	b.n	80042b2 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	3301      	adds	r3, #1
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	4413      	add	r3, r2
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d3e4      	bcc.n	800427c <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80042b2:	f000 f86f 	bl	8004394 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80042b6:	f000 f825 	bl	8004304 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <HAL_FLASHEx_Erase+0x9c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000400 	.word	0x20000400

080042d0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <FLASH_PageErase+0x30>)
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	4a06      	ldr	r2, [pc, #24]	; (8004300 <FLASH_PageErase+0x30>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6153      	str	r3, [r2, #20]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	58004000 	.word	0x58004000

08004304 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <FLASH_FlushCaches+0x8c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d117      	bne.n	8004346 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <FLASH_FlushCaches+0x8c>)
 800431c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004320:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004322:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a17      	ldr	r2, [pc, #92]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004338:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <FLASH_FlushCaches+0x8c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004344:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004352:	d117      	bne.n	8004384 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <FLASH_FlushCaches+0x8c>)
 800435a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <FLASH_FlushCaches+0x8c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <FLASH_FlushCaches+0x8c>)
 8004372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004376:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <FLASH_FlushCaches+0x8c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <FLASH_FlushCaches+0x8c>)
 800437e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004382:	6013      	str	r3, [r2, #0]
  }
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	58004000 	.word	0x58004000

08004394 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <FLASH_AcknowledgePageErase+0x20>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <FLASH_AcknowledgePageErase+0x20>)
 800439e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043a2:	f023 0302 	bic.w	r3, r3, #2
 80043a6:	6153      	str	r3, [r2, #20]
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	58004000 	.word	0x58004000

080043b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043c6:	e14c      	b.n	8004662 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2101      	movs	r1, #1
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	4013      	ands	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 813e 	beq.w	800465c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d005      	beq.n	80043f8 <HAL_GPIO_Init+0x40>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d130      	bne.n	800445a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	2203      	movs	r2, #3
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800442e:	2201      	movs	r2, #1
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 0201 	and.w	r2, r3, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b03      	cmp	r3, #3
 8004464:	d017      	beq.n	8004496 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	2203      	movs	r2, #3
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4013      	ands	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d123      	bne.n	80044ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	08da      	lsrs	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3208      	adds	r2, #8
 80044aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	220f      	movs	r2, #15
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	08da      	lsrs	r2, r3, #3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3208      	adds	r2, #8
 80044e4:	6939      	ldr	r1, [r7, #16]
 80044e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2203      	movs	r2, #3
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4013      	ands	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0203 	and.w	r2, r3, #3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8098 	beq.w	800465c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800452c:	4a54      	ldr	r2, [pc, #336]	; (8004680 <HAL_GPIO_Init+0x2c8>)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	3302      	adds	r3, #2
 8004534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	220f      	movs	r2, #15
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004556:	d019      	beq.n	800458c <HAL_GPIO_Init+0x1d4>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a4a      	ldr	r2, [pc, #296]	; (8004684 <HAL_GPIO_Init+0x2cc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_GPIO_Init+0x1d0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a49      	ldr	r2, [pc, #292]	; (8004688 <HAL_GPIO_Init+0x2d0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00d      	beq.n	8004584 <HAL_GPIO_Init+0x1cc>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a48      	ldr	r2, [pc, #288]	; (800468c <HAL_GPIO_Init+0x2d4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <HAL_GPIO_Init+0x1c8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a47      	ldr	r2, [pc, #284]	; (8004690 <HAL_GPIO_Init+0x2d8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_GPIO_Init+0x1c4>
 8004578:	2304      	movs	r3, #4
 800457a:	e008      	b.n	800458e <HAL_GPIO_Init+0x1d6>
 800457c:	2307      	movs	r3, #7
 800457e:	e006      	b.n	800458e <HAL_GPIO_Init+0x1d6>
 8004580:	2303      	movs	r3, #3
 8004582:	e004      	b.n	800458e <HAL_GPIO_Init+0x1d6>
 8004584:	2302      	movs	r3, #2
 8004586:	e002      	b.n	800458e <HAL_GPIO_Init+0x1d6>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_GPIO_Init+0x1d6>
 800458c:	2300      	movs	r3, #0
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	f002 0203 	and.w	r2, r2, #3
 8004594:	0092      	lsls	r2, r2, #2
 8004596:	4093      	lsls	r3, r2
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800459e:	4938      	ldr	r1, [pc, #224]	; (8004680 <HAL_GPIO_Init+0x2c8>)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3302      	adds	r3, #2
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045d0:	4a30      	ldr	r2, [pc, #192]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045fa:	4a26      	ldr	r2, [pc, #152]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004600:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 8004602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800462e:	4b19      	ldr	r3, [pc, #100]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 8004630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	43db      	mvns	r3, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004654:	4a0f      	ldr	r2, [pc, #60]	; (8004694 <HAL_GPIO_Init+0x2dc>)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	3301      	adds	r3, #1
 8004660:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f aeab 	bne.w	80043c8 <HAL_GPIO_Init+0x10>
  }
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40010000 	.word	0x40010000
 8004684:	48000400 	.word	0x48000400
 8004688:	48000800 	.word	0x48000800
 800468c:	48000c00 	.word	0x48000c00
 8004690:	48001000 	.word	0x48001000
 8004694:	58000800 	.word	0x58000800

08004698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	807b      	strh	r3, [r7, #2]
 80046a4:	4613      	mov	r3, r2
 80046a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046a8:	787b      	ldrb	r3, [r7, #1]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ae:	887a      	ldrh	r2, [r7, #2]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046b4:	e002      	b.n	80046bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046b6:	887a      	ldrh	r2, [r7, #2]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d006      	beq.n	80046ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc fc81 	bl	8000fee <HAL_GPIO_EXTI_Callback>
  }
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	58000800 	.word	0x58000800

080046f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_HSEM_IRQHandler+0x30>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004704:	4b08      	ldr	r3, [pc, #32]	; (8004728 <HAL_HSEM_IRQHandler+0x30>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	43db      	mvns	r3, r3
 800470c:	4906      	ldr	r1, [pc, #24]	; (8004728 <HAL_HSEM_IRQHandler+0x30>)
 800470e:	4013      	ands	r3, r2
 8004710:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004712:	4a05      	ldr	r2, [pc, #20]	; (8004728 <HAL_HSEM_IRQHandler+0x30>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f807 	bl	800472c <HAL_HSEM_FreeCallback>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	58001500 	.word	0x58001500

0800472c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01e      	beq.n	8004790 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <HAL_IPCC_Init+0x60>)
 8004754:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fd42 	bl	80021ec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f000 f85b 	bl	8004824 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f82c 	bl	80047d8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800478e:	e001      	b.n	8004794 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	58000c00 	.word	0x58000c00

080047a4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	4613      	mov	r3, r2
 80047ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e00f      	b.n	8004806 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <IPCC_SetDefaultCallbacks+0x44>)
 80047f0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3306      	adds	r3, #6
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	4a08      	ldr	r2, [pc, #32]	; (8004820 <IPCC_SetDefaultCallbacks+0x48>)
 80047fe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3301      	adds	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b05      	cmp	r3, #5
 800480a:	d9ec      	bls.n	80047e6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	080047a5 	.word	0x080047a5
 8004820:	080047bf 	.word	0x080047bf

08004824 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004838:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	223f      	movs	r2, #63	; 0x3f
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	58000400 	.word	0x58000400

0800486c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_PWREx_GetVoltageRange+0x18>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	58000400 	.word	0x58000400

08004888 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489a:	d101      	bne.n	80048a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_RCC_HSE_Enable>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <LL_RCC_HSE_Disable>:
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80048ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
}
 80048de:	bf00      	nop
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <LL_RCC_HSE_IsReady>:
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80048ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048fa:	d101      	bne.n	8004900 <LL_RCC_HSE_IsReady+0x18>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <LL_RCC_HSE_IsReady+0x1a>
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <LL_RCC_HSI_Enable>:
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800491a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <LL_RCC_HSI_Disable>:
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800492e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493c:	6013      	str	r3, [r2, #0]
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_RCC_HSI_IsReady>:
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d101      	bne.n	8004960 <LL_RCC_HSI_IsReady+0x18>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <LL_RCC_HSI_IsReady+0x1a>
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_RCC_HSI_SetCalibTrimming>:
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004986:	4313      	orrs	r3, r2
 8004988:	604b      	str	r3, [r1, #4]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_HSI48_Enable>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_RCC_HSI48_Disable>:
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_RCC_HSI48_IsReady>:
{
 80049da:	b480      	push	{r7}
 80049dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d101      	bne.n	80049f2 <LL_RCC_HSI48_IsReady+0x18>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <LL_RCC_HSI48_IsReady+0x1a>
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_LSE_Enable>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_RCC_LSE_Disable>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_LSE_EnableBypass>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_RCC_LSE_DisableBypass>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a74:	f023 0304 	bic.w	r3, r3, #4
 8004a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <LL_RCC_LSE_IsReady>:
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d101      	bne.n	8004a9e <LL_RCC_LSE_IsReady+0x18>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <LL_RCC_LSE_IsReady+0x1a>
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_RCC_LSI1_Enable>:
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ac2:	bf00      	nop
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_RCC_LSI1_Disable>:
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_RCC_LSI1_IsReady>:
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d101      	bne.n	8004b06 <LL_RCC_LSI1_IsReady+0x18>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <LL_RCC_LSI1_IsReady+0x1a>
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_RCC_LSI2_Enable>:
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b22:	f043 0304 	orr.w	r3, r3, #4
 8004b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b2a:	bf00      	nop
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_RCC_LSI2_Disable>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <LL_RCC_LSI2_IsReady>:
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d101      	bne.n	8004b6e <LL_RCC_LSI2_IsReady+0x18>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <LL_RCC_LSI2_IsReady+0x1a>
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_RCC_LSI2_SetTrimming>:
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_RCC_MSI_Enable>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <LL_RCC_MSI_Disable>:
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	6013      	str	r3, [r2, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_MSI_IsReady>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d101      	bne.n	8004bfa <LL_RCC_MSI_IsReady+0x16>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <LL_RCC_MSI_IsReady+0x18>
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <LL_RCC_MSI_SetRange>:
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_RCC_MSI_GetRange>:
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2bb0      	cmp	r3, #176	; 0xb0
 8004c44:	d901      	bls.n	8004c4a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004c46:	23b0      	movs	r3, #176	; 0xb0
 8004c48:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004c4a:	687b      	ldr	r3, [r7, #4]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c72:	4313      	orrs	r3, r2
 8004c74:	604b      	str	r3, [r1, #4]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_RCC_SetSysClkSource>:
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f023 0203 	bic.w	r2, r3, #3
 8004c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_GetSysClkSource>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_RCC_SetAHBPrescaler>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_C2_RCC_SetAHBPrescaler>:
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <LL_RCC_SetAHB4Prescaler>:
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d26:	f023 020f 	bic.w	r2, r3, #15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_SetAPB1Prescaler>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	608b      	str	r3, [r1, #8]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <LL_RCC_SetAPB2Prescaler>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_RCC_GetAHBPrescaler>:
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_RCC_GetAHB4Prescaler>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_GetAPB1Prescaler>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_GetAPB2Prescaler>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <LL_RCC_PLL_Enable>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	6013      	str	r3, [r2, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <LL_RCC_PLL_Disable>:
{
 8004e16:	b480      	push	{r7}
 8004e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e28:	6013      	str	r3, [r2, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_RCC_PLL_IsReady>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e46:	d101      	bne.n	8004e4c <LL_RCC_PLL_IsReady+0x18>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <LL_RCC_PLL_IsReady+0x1a>
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_RCC_PLL_GetN>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_PLL_GetR>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_RCC_PLL_GetDivider>:
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <LL_RCC_PLL_GetMainSource>:
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0303 	and.w	r3, r3, #3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_IsActiveFlag_HPRE>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d101      	bne.n	8004ed2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004ede:	b480      	push	{r7}
 8004ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef2:	d101      	bne.n	8004ef8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f18:	d101      	bne.n	8004f1e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f3c:	d101      	bne.n	8004f42 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f60:	d101      	bne.n	8004f66 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b08d      	sub	sp, #52	; 0x34
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e363      	b.n	800564e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 808d 	beq.w	80050ae <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f94:	f7ff fe89 	bl	8004caa <LL_RCC_GetSysClkSource>
 8004f98:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f9a:	f7ff ff82 	bl	8004ea2 <LL_RCC_PLL_GetMainSource>
 8004f9e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x3e>
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b0c      	cmp	r3, #12
 8004faa:	d147      	bne.n	800503c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d144      	bne.n	800503c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e347      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004fc2:	f7ff fe34 	bl	8004c2e <LL_RCC_MSI_GetRange>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	d914      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fd2f 	bl	8005a34 <RCC_SetFlashLatencyFromMSIRange>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e336      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fe0e 	bl	8004c06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fe32 	bl	8004c58 <LL_RCC_MSI_SetCalibTrimming>
 8004ff4:	e013      	b.n	800501e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fe03 	bl	8004c06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fe27 	bl	8004c58 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fd10 	bl	8005a34 <RCC_SetFlashLatencyFromMSIRange>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e317      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800501e:	f000 fcc9 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8005022:	4603      	mov	r3, r0
 8005024:	4aa4      	ldr	r2, [pc, #656]	; (80052b8 <HAL_RCC_OscConfig+0x344>)
 8005026:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005028:	4ba4      	ldr	r3, [pc, #656]	; (80052bc <HAL_RCC_OscConfig+0x348>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fac9 	bl	80035c4 <HAL_InitTick>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d039      	beq.n	80050ac <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e308      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01e      	beq.n	8005082 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005044:	f7ff fdb0 	bl	8004ba8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005048:	f7fe fb0a 	bl	8003660 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005050:	f7fe fb06 	bl	8003660 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e2f5      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005062:	f7ff fdbf 	bl	8004be4 <LL_RCC_MSI_IsReady>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f1      	beq.n	8005050 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fdc8 	bl	8004c06 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fdec 	bl	8004c58 <LL_RCC_MSI_SetCalibTrimming>
 8005080:	e015      	b.n	80050ae <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005082:	f7ff fda0 	bl	8004bc6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005086:	f7fe faeb 	bl	8003660 <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800508e:	f7fe fae7 	bl	8003660 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e2d6      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80050a0:	f7ff fda0 	bl	8004be4 <LL_RCC_MSI_IsReady>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f1      	bne.n	800508e <HAL_RCC_OscConfig+0x11a>
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050ac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d047      	beq.n	800514a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ba:	f7ff fdf6 	bl	8004caa <LL_RCC_GetSysClkSource>
 80050be:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c0:	f7ff feef 	bl	8004ea2 <LL_RCC_PLL_GetMainSource>
 80050c4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_OscConfig+0x164>
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d108      	bne.n	80050e4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d105      	bne.n	80050e4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d134      	bne.n	800514a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e2b4      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d102      	bne.n	80050f4 <HAL_RCC_OscConfig+0x180>
 80050ee:	f7ff fbdd 	bl	80048ac <LL_RCC_HSE_Enable>
 80050f2:	e001      	b.n	80050f8 <HAL_RCC_OscConfig+0x184>
 80050f4:	f7ff fbe9 	bl	80048ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fe faae 	bl	8003660 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fe faaa 	bl	8003660 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e299      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800511a:	f7ff fbe5 	bl	80048e8 <LL_RCC_HSE_IsReady>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f1      	beq.n	8005108 <HAL_RCC_OscConfig+0x194>
 8005124:	e011      	b.n	800514a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005126:	f7fe fa9b 	bl	8003660 <HAL_GetTick>
 800512a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800512e:	f7fe fa97 	bl	8003660 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b64      	cmp	r3, #100	; 0x64
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e286      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005140:	f7ff fbd2 	bl	80048e8 <LL_RCC_HSE_IsReady>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f1      	bne.n	800512e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04c      	beq.n	80051f0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005156:	f7ff fda8 	bl	8004caa <LL_RCC_GetSysClkSource>
 800515a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800515c:	f7ff fea1 	bl	8004ea2 <LL_RCC_PLL_GetMainSource>
 8005160:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d005      	beq.n	8005174 <HAL_RCC_OscConfig+0x200>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d10e      	bne.n	800518c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d10b      	bne.n	800518c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e266      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fbf1 	bl	800496c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800518a:	e031      	b.n	80051f0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d019      	beq.n	80051c8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005194:	f7ff fbba 	bl	800490c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fe fa62 	bl	8003660 <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fe fa5e 	bl	8003660 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e24d      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80051b2:	f7ff fbc9 	bl	8004948 <LL_RCC_HSI_IsReady>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f1      	beq.n	80051a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fbd3 	bl	800496c <LL_RCC_HSI_SetCalibTrimming>
 80051c6:	e013      	b.n	80051f0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c8:	f7ff fbaf 	bl	800492a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fe fa48 	bl	8003660 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d4:	f7fe fa44 	bl	8003660 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e233      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80051e6:	f7ff fbaf 	bl	8004948 <LL_RCC_HSI_IsReady>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f1      	bne.n	80051d4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80a3 	beq.w	8005350 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d076      	beq.n	8005300 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d046      	beq.n	80052ac <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800521e:	f7ff fc66 	bl	8004aee <LL_RCC_LSI1_IsReady>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d113      	bne.n	8005250 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005228:	f7ff fc3f 	bl	8004aaa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800522c:	f7fe fa18 	bl	8003660 <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005234:	f7fe fa14 	bl	8003660 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e203      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005246:	f7ff fc52 	bl	8004aee <LL_RCC_LSI1_IsReady>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f1      	beq.n	8005234 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005250:	f7ff fc5f 	bl	8004b12 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fe fa04 	bl	8003660 <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800525c:	f7fe fa00 	bl	8003660 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b03      	cmp	r3, #3
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e1ef      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800526e:	f7ff fc72 	bl	8004b56 <LL_RCC_LSI2_IsReady>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f1      	beq.n	800525c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fc7c 	bl	8004b7a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005282:	f7ff fc23 	bl	8004acc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fe f9eb 	bl	8003660 <HAL_GetTick>
 800528a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800528e:	f7fe f9e7 	bl	8003660 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1d6      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80052a0:	f7ff fc25 	bl	8004aee <LL_RCC_LSI1_IsReady>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f1      	bne.n	800528e <HAL_RCC_OscConfig+0x31a>
 80052aa:	e051      	b.n	8005350 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80052ac:	f7ff fbfd 	bl	8004aaa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fe f9d6 	bl	8003660 <HAL_GetTick>
 80052b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80052b6:	e00c      	b.n	80052d2 <HAL_RCC_OscConfig+0x35e>
 80052b8:	20000020 	.word	0x20000020
 80052bc:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052c0:	f7fe f9ce 	bl	8003660 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e1bd      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80052d2:	f7ff fc0c 	bl	8004aee <LL_RCC_LSI1_IsReady>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f1      	beq.n	80052c0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80052dc:	f7ff fc2a 	bl	8004b34 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80052e2:	f7fe f9bd 	bl	8003660 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1ac      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80052f4:	f7ff fc2f 	bl	8004b56 <LL_RCC_LSI2_IsReady>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f1      	bne.n	80052e2 <HAL_RCC_OscConfig+0x36e>
 80052fe:	e027      	b.n	8005350 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005300:	f7ff fc18 	bl	8004b34 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7fe f9ac 	bl	8003660 <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800530c:	f7fe f9a8 	bl	8003660 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b03      	cmp	r3, #3
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e197      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800531e:	f7ff fc1a 	bl	8004b56 <LL_RCC_LSI2_IsReady>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f1      	bne.n	800530c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005328:	f7ff fbd0 	bl	8004acc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fe f998 	bl	8003660 <HAL_GetTick>
 8005330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005334:	f7fe f994 	bl	8003660 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e183      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005346:	f7ff fbd2 	bl	8004aee <LL_RCC_LSI1_IsReady>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f1      	bne.n	8005334 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d05b      	beq.n	8005414 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535c:	4ba7      	ldr	r3, [pc, #668]	; (80055fc <HAL_RCC_OscConfig+0x688>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d114      	bne.n	8005392 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005368:	f7ff fa70 	bl	800484c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536c:	f7fe f978 	bl	8003660 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005374:	f7fe f974 	bl	8003660 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e163      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005386:	4b9d      	ldr	r3, [pc, #628]	; (80055fc <HAL_RCC_OscConfig+0x688>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d102      	bne.n	80053a0 <HAL_RCC_OscConfig+0x42c>
 800539a:	f7ff fb30 	bl	80049fe <LL_RCC_LSE_Enable>
 800539e:	e00c      	b.n	80053ba <HAL_RCC_OscConfig+0x446>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d104      	bne.n	80053b2 <HAL_RCC_OscConfig+0x43e>
 80053a8:	f7ff fb4b 	bl	8004a42 <LL_RCC_LSE_EnableBypass>
 80053ac:	f7ff fb27 	bl	80049fe <LL_RCC_LSE_Enable>
 80053b0:	e003      	b.n	80053ba <HAL_RCC_OscConfig+0x446>
 80053b2:	f7ff fb35 	bl	8004a20 <LL_RCC_LSE_Disable>
 80053b6:	f7ff fb55 	bl	8004a64 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d014      	beq.n	80053ec <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c2:	f7fe f94d 	bl	8003660 <HAL_GetTick>
 80053c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fe f949 	bl	8003660 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e136      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80053e0:	f7ff fb51 	bl	8004a86 <LL_RCC_LSE_IsReady>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ef      	beq.n	80053ca <HAL_RCC_OscConfig+0x456>
 80053ea:	e013      	b.n	8005414 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ec:	f7fe f938 	bl	8003660 <HAL_GetTick>
 80053f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80053f2:	e00a      	b.n	800540a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f4:	f7fe f934 	bl	8003660 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e121      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800540a:	f7ff fb3c 	bl	8004a86 <LL_RCC_LSE_IsReady>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ef      	bne.n	80053f4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02c      	beq.n	800547a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	d014      	beq.n	8005452 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005428:	f7ff fab5 	bl	8004996 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7fe f918 	bl	8003660 <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005434:	f7fe f914 	bl	8003660 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e103      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005446:	f7ff fac8 	bl	80049da <LL_RCC_HSI48_IsReady>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f1      	beq.n	8005434 <HAL_RCC_OscConfig+0x4c0>
 8005450:	e013      	b.n	800547a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005452:	f7ff fab1 	bl	80049b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005456:	f7fe f903 	bl	8003660 <HAL_GetTick>
 800545a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800545e:	f7fe f8ff 	bl	8003660 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0ee      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005470:	f7ff fab3 	bl	80049da <LL_RCC_HSI48_IsReady>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f1      	bne.n	800545e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80e4 	beq.w	800564c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005484:	f7ff fc11 	bl	8004caa <LL_RCC_GetSysClkSource>
 8005488:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	2b02      	cmp	r3, #2
 8005498:	f040 80b4 	bne.w	8005604 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0203 	and.w	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d123      	bne.n	80054f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d11c      	bne.n	80054f2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d114      	bne.n	80054f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d10d      	bne.n	80054f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d106      	bne.n	80054f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d05d      	beq.n	80055ae <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d058      	beq.n	80055aa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e0a1      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800550a:	f7ff fc84 	bl	8004e16 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800550e:	f7fe f8a7 	bl	8003660 <HAL_GetTick>
 8005512:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005516:	f7fe f8a3 	bl	8003660 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e092      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ef      	bne.n	8005516 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	4b30      	ldr	r3, [pc, #192]	; (8005600 <HAL_RCC_OscConfig+0x68c>)
 800553e:	4013      	ands	r3, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005548:	4311      	orrs	r1, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800554e:	0212      	lsls	r2, r2, #8
 8005550:	4311      	orrs	r1, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005556:	4311      	orrs	r1, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800555c:	4311      	orrs	r1, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005562:	430a      	orrs	r2, r1
 8005564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005568:	4313      	orrs	r3, r2
 800556a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800556c:	f7ff fc44 	bl	8004df8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005580:	f7fe f86e 	bl	8003660 <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005588:	f7fe f86a 	bl	8003660 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e059      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0ef      	beq.n	8005588 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055a8:	e050      	b.n	800564c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e04f      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d147      	bne.n	800564c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055bc:	f7ff fc1c 	bl	8004df8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055d0:	f7fe f846 	bl	8003660 <HAL_GetTick>
 80055d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe f842 	bl	8003660 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e031      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0ef      	beq.n	80055d8 <HAL_RCC_OscConfig+0x664>
 80055f8:	e028      	b.n	800564c <HAL_RCC_OscConfig+0x6d8>
 80055fa:	bf00      	nop
 80055fc:	58000400 	.word	0x58000400
 8005600:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b0c      	cmp	r3, #12
 8005608:	d01e      	beq.n	8005648 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560a:	f7ff fc04 	bl	8004e16 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560e:	f7fe f827 	bl	8003660 <HAL_GetTick>
 8005612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005616:	f7fe f823 	bl	8003660 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e012      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ef      	bne.n	8005616 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_OscConfig+0x6e4>)
 8005642:	4013      	ands	r3, r2
 8005644:	60cb      	str	r3, [r1, #12]
 8005646:	e001      	b.n	800564c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3734      	adds	r7, #52	; 0x34
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	bf00      	nop
 8005658:	eefefffc 	.word	0xeefefffc

0800565c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e12d      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005670:	4b98      	ldr	r3, [pc, #608]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d91b      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b95      	ldr	r3, [pc, #596]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 0207 	bic.w	r2, r3, #7
 8005686:	4993      	ldr	r1, [pc, #588]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568e:	f7fd ffe7 	bl	8003660 <HAL_GetTick>
 8005692:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005696:	f7fd ffe3 	bl	8003660 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e111      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a8:	4b8a      	ldr	r3, [pc, #552]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d1ef      	bne.n	8005696 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fafb 	bl	8004cc2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056cc:	f7fd ffc8 	bl	8003660 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056d4:	f7fd ffc4 	bl	8003660 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0f2      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80056e6:	f7ff fbe8 	bl	8004eba <LL_RCC_IsActiveFlag_HPRE>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f1      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d016      	beq.n	800572a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff faf2 	bl	8004cea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005706:	f7fd ffab 	bl	8003660 <HAL_GetTick>
 800570a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800570e:	f7fd ffa7 	bl	8003660 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e0d5      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005720:	f7ff fbdd 	bl	8004ede <LL_RCC_IsActiveFlag_C2HPRE>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f1      	beq.n	800570e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff faeb 	bl	8004d16 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005740:	f7fd ff8e 	bl	8003660 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005748:	f7fd ff8a 	bl	8003660 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e0b8      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800575a:	f7ff fbd3 	bl	8004f04 <LL_RCC_IsActiveFlag_SHDHPRE>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f1      	beq.n	8005748 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d016      	beq.n	800579e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fae5 	bl	8004d44 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800577a:	f7fd ff71 	bl	8003660 <HAL_GetTick>
 800577e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005780:	e008      	b.n	8005794 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005782:	f7fd ff6d 	bl	8003660 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e09b      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005794:	f7ff fbc9 	bl	8004f2a <LL_RCC_IsActiveFlag_PPRE1>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f1      	beq.n	8005782 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fadb 	bl	8004d6c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057b6:	f7fd ff53 	bl	8003660 <HAL_GetTick>
 80057ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057be:	f7fd ff4f 	bl	8003660 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e07d      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057d0:	f7ff fbbd 	bl	8004f4e <LL_RCC_IsActiveFlag_PPRE2>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f1      	beq.n	80057be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d043      	beq.n	800586e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d106      	bne.n	80057fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80057ee:	f7ff f87b 	bl	80048e8 <LL_RCC_HSE_IsReady>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d11e      	bne.n	8005836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e067      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d106      	bne.n	8005812 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005804:	f7ff fb16 	bl	8004e34 <LL_RCC_PLL_IsReady>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d113      	bne.n	8005836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e05c      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800581a:	f7ff f9e3 	bl	8004be4 <LL_RCC_MSI_IsReady>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d108      	bne.n	8005836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e051      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005828:	f7ff f88e 	bl	8004948 <LL_RCC_HSI_IsReady>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e04a      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fa21 	bl	8004c82 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005840:	f7fd ff0e 	bl	8003660 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	e00a      	b.n	800585e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005848:	f7fd ff0a 	bl	8003660 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e036      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	f7ff fa24 	bl	8004caa <LL_RCC_GetSysClkSource>
 8005862:	4602      	mov	r2, r0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	429a      	cmp	r2, r3
 800586c:	d1ec      	bne.n	8005848 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800586e:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d21b      	bcs.n	80058b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 0207 	bic.w	r2, r3, #7
 8005884:	4913      	ldr	r1, [pc, #76]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588c:	f7fd fee8 	bl	8003660 <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005894:	f7fd fee4 	bl	8003660 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e012      	b.n	80058cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <HAL_RCC_ClockConfig+0x278>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d1ef      	bne.n	8005894 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058b4:	f000 f87e 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80058b8:	4603      	mov	r3, r0
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <HAL_RCC_ClockConfig+0x27c>)
 80058bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80058be:	f7fd fedb 	bl	8003678 <HAL_GetTickPrio>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fd fe7d 	bl	80035c4 <HAL_InitTick>
 80058ca:	4603      	mov	r3, r0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	58004000 	.word	0x58004000
 80058d8:	20000020 	.word	0x20000020

080058dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058e2:	f7ff f9e2 	bl	8004caa <LL_RCC_GetSysClkSource>
 80058e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80058ee:	f7ff f99e 	bl	8004c2e <LL_RCC_MSI_GetRange>
 80058f2:	4603      	mov	r3, r0
 80058f4:	091b      	lsrs	r3, r3, #4
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	4a2b      	ldr	r2, [pc, #172]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e04b      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b04      	cmp	r3, #4
 8005908:	d102      	bne.n	8005910 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800590a:	4b28      	ldr	r3, [pc, #160]	; (80059ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e045      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b08      	cmp	r3, #8
 8005914:	d10a      	bne.n	800592c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005916:	f7fe ffb7 	bl	8004888 <LL_RCC_HSE_IsEnabledDiv2>
 800591a:	4603      	mov	r3, r0
 800591c:	2b01      	cmp	r3, #1
 800591e:	d102      	bne.n	8005926 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005920:	4b22      	ldr	r3, [pc, #136]	; (80059ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e03a      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005926:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e037      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800592c:	f7ff fab9 	bl	8004ea2 <LL_RCC_PLL_GetMainSource>
 8005930:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d003      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x64>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d003      	beq.n	8005946 <HAL_RCC_GetSysClockFreq+0x6a>
 800593e:	e00d      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005940:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005942:	60bb      	str	r3, [r7, #8]
        break;
 8005944:	e015      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005946:	f7fe ff9f 	bl	8004888 <LL_RCC_HSE_IsEnabledDiv2>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d102      	bne.n	8005956 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005952:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005954:	e00d      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005956:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005958:	60bb      	str	r3, [r7, #8]
        break;
 800595a:	e00a      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800595c:	f7ff f967 	bl	8004c2e <LL_RCC_MSI_GetRange>
 8005960:	4603      	mov	r3, r0
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	4a0f      	ldr	r2, [pc, #60]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596e:	60bb      	str	r3, [r7, #8]
        break;
 8005970:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005972:	f7ff fa71 	bl	8004e58 <LL_RCC_PLL_GetN>
 8005976:	4602      	mov	r2, r0
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	fb03 f402 	mul.w	r4, r3, r2
 800597e:	f7ff fa84 	bl	8004e8a <LL_RCC_PLL_GetDivider>
 8005982:	4603      	mov	r3, r0
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	3301      	adds	r3, #1
 8005988:	fbb4 f4f3 	udiv	r4, r4, r3
 800598c:	f7ff fa71 	bl	8004e72 <LL_RCC_PLL_GetR>
 8005990:	4603      	mov	r3, r0
 8005992:	0f5b      	lsrs	r3, r3, #29
 8005994:	3301      	adds	r3, #1
 8005996:	fbb4 f3f3 	udiv	r3, r4, r3
 800599a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800599c:	68fb      	ldr	r3, [r7, #12]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd90      	pop	{r4, r7, pc}
 80059a6:	bf00      	nop
 80059a8:	0800c03c 	.word	0x0800c03c
 80059ac:	00f42400 	.word	0x00f42400
 80059b0:	01e84800 	.word	0x01e84800

080059b4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b4:	b598      	push	{r3, r4, r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80059b8:	f7ff ff90 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 80059bc:	4604      	mov	r4, r0
 80059be:	f7ff f9e9 	bl	8004d94 <LL_RCC_GetAHBPrescaler>
 80059c2:	4603      	mov	r3, r0
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	4a03      	ldr	r2, [pc, #12]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80059cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd98      	pop	{r3, r4, r7, pc}
 80059d8:	0800bfdc 	.word	0x0800bfdc

080059dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059dc:	b598      	push	{r3, r4, r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80059e0:	f7ff ffe8 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059e4:	4604      	mov	r4, r0
 80059e6:	f7ff f9ef 	bl	8004dc8 <LL_RCC_GetAPB1Prescaler>
 80059ea:	4603      	mov	r3, r0
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd98      	pop	{r3, r4, r7, pc}
 8005a04:	0800c01c 	.word	0x0800c01c

08005a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a08:	b598      	push	{r3, r4, r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005a0c:	f7ff ffd2 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 8005a10:	4604      	mov	r4, r0
 8005a12:	f7ff f9e5 	bl	8004de0 <LL_RCC_GetAPB2Prescaler>
 8005a16:	4603      	mov	r3, r0
 8005a18:	0adb      	lsrs	r3, r3, #11
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	bd98      	pop	{r3, r4, r7, pc}
 8005a30:	0800c01c 	.word	0x0800c01c

08005a34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2bb0      	cmp	r3, #176	; 0xb0
 8005a40:	d903      	bls.n	8005a4a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e007      	b.n	8005a5a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005a5a:	f7ff f9a7 	bl	8004dac <LL_RCC_GetAHB4Prescaler>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	0c9c      	lsrs	r4, r3, #18
 8005a7e:	f7fe fef5 	bl	800486c <HAL_PWREx_GetVoltageRange>
 8005a82:	4603      	mov	r3, r0
 8005a84:	4619      	mov	r1, r3
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 f80c 	bl	8005aa4 <RCC_SetFlashLatency>
 8005a8c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd90      	pop	{r4, r7, pc}
 8005a96:	bf00      	nop
 8005a98:	0800c03c 	.word	0x0800c03c
 8005a9c:	0800bfdc 	.word	0x0800bfdc
 8005aa0:	431bde83 	.word	0x431bde83

08005aa4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005aa4:	b590      	push	{r4, r7, lr}
 8005aa6:	b093      	sub	sp, #76	; 0x4c
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005aae:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <RCC_SetFlashLatency+0xe8>)
 8005ab0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005aba:	4a35      	ldr	r2, [pc, #212]	; (8005b90 <RCC_SetFlashLatency+0xec>)
 8005abc:	f107 031c 	add.w	r3, r7, #28
 8005ac0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ac2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005ac6:	4b33      	ldr	r3, [pc, #204]	; (8005b94 <RCC_SetFlashLatency+0xf0>)
 8005ac8:	f107 040c 	add.w	r4, r7, #12
 8005acc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005adc:	d11a      	bne.n	8005b14 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ae2:	e013      	b.n	8005b0c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	3348      	adds	r3, #72	; 0x48
 8005aea:	443b      	add	r3, r7
 8005aec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d807      	bhi.n	8005b06 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	3348      	adds	r3, #72	; 0x48
 8005afc:	443b      	add	r3, r7
 8005afe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b04:	e020      	b.n	8005b48 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b08:	3301      	adds	r3, #1
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d9e8      	bls.n	8005ae4 <RCC_SetFlashLatency+0x40>
 8005b12:	e019      	b.n	8005b48 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b18:	e013      	b.n	8005b42 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	3348      	adds	r3, #72	; 0x48
 8005b20:	443b      	add	r3, r7
 8005b22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d807      	bhi.n	8005b3c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	3348      	adds	r3, #72	; 0x48
 8005b32:	443b      	add	r3, r7
 8005b34:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b3a:	e005      	b.n	8005b48 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	3301      	adds	r3, #1
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d9e8      	bls.n	8005b1a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <RCC_SetFlashLatency+0xf4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f023 0207 	bic.w	r2, r3, #7
 8005b50:	4911      	ldr	r1, [pc, #68]	; (8005b98 <RCC_SetFlashLatency+0xf4>)
 8005b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b58:	f7fd fd82 	bl	8003660 <HAL_GetTick>
 8005b5c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b5e:	e008      	b.n	8005b72 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b60:	f7fd fd7e 	bl	8003660 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e007      	b.n	8005b82 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b72:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <RCC_SetFlashLatency+0xf4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d1ef      	bne.n	8005b60 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	374c      	adds	r7, #76	; 0x4c
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd90      	pop	{r4, r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	0800be44 	.word	0x0800be44
 8005b90:	0800be54 	.word	0x0800be54
 8005b94:	0800be60 	.word	0x0800be60
 8005b98:	58004000 	.word	0x58004000

08005b9c <LL_RCC_LSE_IsEnabled>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <LL_RCC_LSE_IsEnabled+0x18>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <LL_RCC_LSE_IsEnabled+0x1a>
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LL_RCC_LSE_IsReady>:
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d101      	bne.n	8005bd8 <LL_RCC_LSE_IsReady+0x18>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <LL_RCC_LSE_IsReady+0x1a>
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_SetRFWKPClockSource>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_RCC_SetSMPSClockSource>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	f023 0203 	bic.w	r2, r3, #3
 8005c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <LL_RCC_SetSMPSPrescaler>:
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_SetUSARTClockSource>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f023 0203 	bic.w	r2, r3, #3
 8005c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_SetLPUARTClockSource>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_RCC_SetI2CClockSource>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	091b      	lsrs	r3, r3, #4
 8005ccc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_RCC_SetLPTIMClockSource>:
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	401a      	ands	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <LL_RCC_SetSAIClockSource>:
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <LL_RCC_SetRNGClockSource>:
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <LL_RCC_SetCLK48ClockSource>:
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <LL_RCC_SetUSBClockSource>:
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff ffe3 	bl	8005d7e <LL_RCC_SetCLK48ClockSource>
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <LL_RCC_SetADCClockSource>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <LL_RCC_SetRTCClockSource>:
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <LL_RCC_GetRTCClockSource>:
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <LL_RCC_ForceBackupDomainReset>:
{
 8005e32:	b480      	push	{r7}
 8005e34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e4a:	bf00      	nop
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <LL_RCC_PLLSAI1_Enable>:
{
 8005e76:	b480      	push	{r7}
 8005e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e88:	6013      	str	r3, [r2, #0]
}
 8005e8a:	bf00      	nop
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <LL_RCC_PLLSAI1_Disable>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ea6:	6013      	str	r3, [r2, #0]
}
 8005ea8:	bf00      	nop
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <LL_RCC_PLLSAI1_IsReady>:
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec4:	d101      	bne.n	8005eca <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b088      	sub	sp, #32
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005ede:	2300      	movs	r3, #0
 8005ee0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d034      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005efa:	d021      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005efc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f00:	d81b      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f06:	d01d      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005f08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f0c:	d815      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f16:	d110      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f26:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f28:	e00d      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f947 	bl	80061c2 <RCCEx_PLLSAI1_ConfigNP>
 8005f34:	4603      	mov	r3, r0
 8005f36:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f38:	e005      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	77fb      	strb	r3, [r7, #31]
        break;
 8005f3e:	e002      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f46:	7ffb      	ldrb	r3, [r7, #31]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fee8 	bl	8005d26 <LL_RCC_SetSAIClockSource>
 8005f56:	e001      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	7ffb      	ldrb	r3, [r7, #31]
 8005f5a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d046      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005f68:	f7ff ff56 	bl	8005e18 <LL_RCC_GetRTCClockSource>
 8005f6c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d03c      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f78:	f7fe fc68 	bl	800484c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff ff30 	bl	8005dec <LL_RCC_SetRTCClockSource>
 8005f8c:	e02e      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005f98:	f7ff ff4b 	bl	8005e32 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005f9c:	f7ff ff5a 	bl	8005e54 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005fb8:	f7ff fdf0 	bl	8005b9c <LL_RCC_LSE_IsEnabled>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d114      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fc2:	f7fd fb4d 	bl	8003660 <HAL_GetTick>
 8005fc6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005fc8:	e00b      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fca:	f7fd fb49 	bl	8003660 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d902      	bls.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	77fb      	strb	r3, [r7, #31]
              break;
 8005fe0:	e004      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005fe2:	f7ff fded 	bl	8005bc0 <LL_RCC_LSE_IsReady>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d1ee      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005fec:	7ffb      	ldrb	r3, [r7, #31]
 8005fee:	77bb      	strb	r3, [r7, #30]
 8005ff0:	e001      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	7ffb      	ldrb	r3, [r7, #31]
 8005ff4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fe2a 	bl	8005c60 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d004      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff fe35 	bl	8005c8c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b00      	cmp	r3, #0
 800602c:	d004      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fe5d 	bl	8005cf2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fe52 	bl	8005cf2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fe2a 	bl	8005cb8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fe1f 	bl	8005cb8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d022      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fe8d 	bl	8005daa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006098:	d107      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060b2:	d10b      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f8dd 	bl	8006278 <RCCEx_PLLSAI1_ConfigNQ>
 80060be:	4603      	mov	r3, r0
 80060c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80060c2:	7ffb      	ldrb	r3, [r7, #31]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80060c8:	7ffb      	ldrb	r3, [r7, #31]
 80060ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d02b      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e0:	d008      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ea:	d003      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fe2a 	bl	8005d52 <LL_RCC_SetRNGClockSource>
 80060fe:	e00a      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	2000      	movs	r0, #0
 800610c:	f7ff fe21 	bl	8005d52 <LL_RCC_SetRNGClockSource>
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fe34 	bl	8005d7e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800611e:	d107      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800612e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006138:	2b00      	cmp	r3, #0
 800613a:	d022      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fe3d 	bl	8005dc0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800614e:	d107      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006168:	d10b      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f8dd 	bl	800632e <RCCEx_PLLSAI1_ConfigNR>
 8006174:	4603      	mov	r3, r0
 8006176:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006178:	7ffb      	ldrb	r3, [r7, #31]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800617e:	7ffb      	ldrb	r3, [r7, #31]
 8006180:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fd26 	bl	8005be4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fd45 	bl	8005c38 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fd2c 	bl	8005c10 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80061b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80061ce:	f7ff fe61 	bl	8005e94 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061d2:	f7fd fa45 	bl	8003660 <HAL_GetTick>
 80061d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061d8:	e009      	b.n	80061ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061da:	f7fd fa41 	bl	8003660 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d902      	bls.n	80061ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e004      	b.n	80061f8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061ee:	f7ff fe60 	bl	8005eb2 <LL_RCC_PLLSAI1_IsReady>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d137      	bne.n	800626e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006212:	4313      	orrs	r3, r2
 8006214:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006228:	4313      	orrs	r3, r2
 800622a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800622c:	f7ff fe23 	bl	8005e76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006230:	f7fd fa16 	bl	8003660 <HAL_GetTick>
 8006234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006236:	e009      	b.n	800624c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006238:	f7fd fa12 	bl	8003660 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d902      	bls.n	800624c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	73fb      	strb	r3, [r7, #15]
        break;
 800624a:	e004      	b.n	8006256 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800624c:	f7ff fe31 	bl	8005eb2 <LL_RCC_PLLSAI1_IsReady>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d1f0      	bne.n	8006238 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d108      	bne.n	800626e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626a:	4313      	orrs	r3, r2
 800626c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006284:	f7ff fe06 	bl	8005e94 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006288:	f7fd f9ea 	bl	8003660 <HAL_GetTick>
 800628c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800628e:	e009      	b.n	80062a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006290:	f7fd f9e6 	bl	8003660 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d902      	bls.n	80062a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	73fb      	strb	r3, [r7, #15]
      break;
 80062a2:	e004      	b.n	80062ae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062a4:	f7ff fe05 	bl	8005eb2 <LL_RCC_PLLSAI1_IsReady>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d137      	bne.n	8006324 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80062b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c8:	4313      	orrs	r3, r2
 80062ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80062cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062de:	4313      	orrs	r3, r2
 80062e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062e2:	f7ff fdc8 	bl	8005e76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e6:	f7fd f9bb 	bl	8003660 <HAL_GetTick>
 80062ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062ec:	e009      	b.n	8006302 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062ee:	f7fd f9b7 	bl	8003660 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d902      	bls.n	8006302 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	73fb      	strb	r3, [r7, #15]
        break;
 8006300:	e004      	b.n	800630c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006302:	f7ff fdd6 	bl	8005eb2 <LL_RCC_PLLSAI1_IsReady>
 8006306:	4603      	mov	r3, r0
 8006308:	2b01      	cmp	r3, #1
 800630a:	d1f0      	bne.n	80062ee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d108      	bne.n	8006324 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006320:	4313      	orrs	r3, r2
 8006322:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800633a:	f7ff fdab 	bl	8005e94 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800633e:	f7fd f98f 	bl	8003660 <HAL_GetTick>
 8006342:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006344:	e009      	b.n	800635a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006346:	f7fd f98b 	bl	8003660 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d902      	bls.n	800635a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	73fb      	strb	r3, [r7, #15]
      break;
 8006358:	e004      	b.n	8006364 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800635a:	f7ff fdaa 	bl	8005eb2 <LL_RCC_PLLSAI1_IsReady>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f0      	bne.n	8006346 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d137      	bne.n	80063da <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800637e:	4313      	orrs	r3, r2
 8006380:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006394:	4313      	orrs	r3, r2
 8006396:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006398:	f7ff fd6d 	bl	8005e76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639c:	f7fd f960 	bl	8003660 <HAL_GetTick>
 80063a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063a2:	e009      	b.n	80063b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063a4:	f7fd f95c 	bl	8003660 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d902      	bls.n	80063b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	73fb      	strb	r3, [r7, #15]
        break;
 80063b6:	e004      	b.n	80063c2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063b8:	f7ff fd7b 	bl	8005eb2 <LL_RCC_PLLSAI1_IsReady>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d1f0      	bne.n	80063a4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063cc:	691a      	ldr	r2, [r3, #16]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d6:	4313      	orrs	r3, r2
 80063d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e090      	b.n	8006518 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fc f806 	bl	800241c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	22ca      	movs	r2, #202	; 0xca
 800641e:	625a      	str	r2, [r3, #36]	; 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2253      	movs	r2, #83	; 0x53
 8006426:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f89f 	bl	800656c <RTC_EnterInitMode>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	22ff      	movs	r2, #255	; 0xff
 800643a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2204      	movs	r2, #4
 8006440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e067      	b.n	8006518 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6899      	ldr	r1, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68d2      	ldr	r2, [r2, #12]
 8006482:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6919      	ldr	r1, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	041a      	lsls	r2, r3, #16
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064a6:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0203 	bic.w	r2, r2, #3
 80064b6:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69da      	ldr	r2, [r3, #28]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d113      	bne.n	8006506 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f81e 	bl	8006520 <HAL_RTC_WaitForSynchro>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00d      	beq.n	8006506 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	22ff      	movs	r2, #255	; 0xff
 80064f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2204      	movs	r2, #4
 80064f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e008      	b.n	8006518 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006516:	2300      	movs	r3, #0
  }
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006536:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006538:	f7fd f892 	bl	8003660 <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800653e:	e009      	b.n	8006554 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006540:	f7fd f88e 	bl	8003660 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654e:	d901      	bls.n	8006554 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e007      	b.n	8006564 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ee      	beq.n	8006540 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800658c:	f7fd f868 	bl	8003660 <HAL_GetTick>
 8006590:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006592:	e009      	b.n	80065a8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006594:	f7fd f864 	bl	8003660 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a2:	d901      	bls.n	80065a8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e007      	b.n	80065b8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0ee      	beq.n	8006594 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e0a8      	b.n	800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	22ca      	movs	r2, #202	; 0xca
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2253      	movs	r2, #83	; 0x53
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d020      	beq.n	800664a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006608:	f7fd f82a 	bl	8003660 <HAL_GetTick>
 800660c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800660e:	e015      	b.n	800663c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006610:	f7fd f826 	bl	8003660 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800661e:	d90d      	bls.n	800663c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	22ff      	movs	r2, #255	; 0xff
 8006626:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2203      	movs	r2, #3
 800662c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e077      	b.n	800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e2      	bne.n	8006610 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006658:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800666a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800666c:	f7fc fff8 	bl	8003660 <HAL_GetTick>
 8006670:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006672:	e015      	b.n	80066a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006674:	f7fc fff4 	bl	8003660 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006682:	d90d      	bls.n	80066a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	22ff      	movs	r2, #255	; 0xff
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2203      	movs	r2, #3
 8006690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e045      	b.n	800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0e2      	beq.n	8006674 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0207 	bic.w	r2, r2, #7
 80066c4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6899      	ldr	r1, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80066d6:	4b17      	ldr	r3, [pc, #92]	; (8006734 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a12      	ldr	r2, [pc, #72]	; (8006734 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066f0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006700:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006710:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	22ff      	movs	r2, #255	; 0xff
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	58000800 	.word	0x58000800

08006738 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_RTCEx_EnableBypassShadow+0x16>
 800674a:	2302      	movs	r3, #2
 800674c:	e024      	b.n	8006798 <HAL_RTCEx_EnableBypassShadow+0x60>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	22ca      	movs	r2, #202	; 0xca
 8006764:	625a      	str	r2, [r3, #36]	; 0x24
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2253      	movs	r2, #83	; 0x53
 800676c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0220 	orr.w	r2, r2, #32
 800677c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	22ff      	movs	r2, #255	; 0xff
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_RCC_GetUSARTClockSource>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80067ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4013      	ands	r3, r2
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <LL_RCC_GetLPUARTClockSource>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80067cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4013      	ands	r3, r2
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e042      	b.n	800687c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fb fd13 	bl	8002234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2224      	movs	r2, #36	; 0x24
 8006812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0201 	bic.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fbf6 	bl	8007018 <UART_SetConfig>
 800682c:	4603      	mov	r3, r0
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e022      	b.n	800687c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fe10 	bl	8007464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fe97 	bl	80075a8 <UART_CheckIdleState>
 800687a:	4603      	mov	r3, r0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006898:	2b20      	cmp	r3, #32
 800689a:	d17a      	bne.n	8006992 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_UART_Transmit_DMA+0x24>
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e073      	b.n	8006994 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_UART_Transmit_DMA+0x36>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e06c      	b.n	8006994 <HAL_UART_Transmit_DMA+0x110>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2221      	movs	r2, #33	; 0x21
 80068e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d02c      	beq.n	800694a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f4:	4a29      	ldr	r2, [pc, #164]	; (800699c <HAL_UART_Transmit_DMA+0x118>)
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068fc:	4a28      	ldr	r2, [pc, #160]	; (80069a0 <HAL_UART_Transmit_DMA+0x11c>)
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006904:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <HAL_UART_Transmit_DMA+0x120>)
 8006906:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690c:	2200      	movs	r2, #0
 800690e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006918:	4619      	mov	r1, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3328      	adds	r3, #40	; 0x28
 8006920:	461a      	mov	r2, r3
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	f7fd f90e 	bl	8003b44 <HAL_DMA_Start_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00d      	beq.n	800694a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2210      	movs	r2, #16
 8006932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e024      	b.n	8006994 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2240      	movs	r2, #64	; 0x40
 8006950:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	613b      	str	r3, [r7, #16]
   return(result);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697a:	623a      	str	r2, [r7, #32]
 800697c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	69f9      	ldr	r1, [r7, #28]
 8006980:	6a3a      	ldr	r2, [r7, #32]
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	61bb      	str	r3, [r7, #24]
   return(result);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3728      	adds	r7, #40	; 0x28
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	0800791d 	.word	0x0800791d
 80069a0:	080079b7 	.word	0x080079b7
 80069a4:	080079d3 	.word	0x080079d3

080069a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b0ba      	sub	sp, #232	; 0xe8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80069d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80069d6:	4013      	ands	r3, r2
 80069d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80069dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11b      	bne.n	8006a1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d015      	beq.n	8006a1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 82d6 	beq.w	8006fbe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
      }
      return;
 8006a1a:	e2d0      	b.n	8006fbe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 811f 	beq.w	8006c64 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a2a:	4b8b      	ldr	r3, [pc, #556]	; (8006c58 <HAL_UART_IRQHandler+0x2b0>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a36:	4b89      	ldr	r3, [pc, #548]	; (8006c5c <HAL_UART_IRQHandler+0x2b4>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8112 	beq.w	8006c64 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d011      	beq.n	8006a70 <HAL_UART_IRQHandler+0xc8>
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a66:	f043 0201 	orr.w	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d011      	beq.n	8006aa0 <HAL_UART_IRQHandler+0xf8>
 8006a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a96:	f043 0204 	orr.w	r2, r3, #4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d011      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x128>
 8006aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2204      	movs	r2, #4
 8006abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac6:	f043 0202 	orr.w	r2, r3, #2
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d017      	beq.n	8006b0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ae8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006aec:	4b5a      	ldr	r3, [pc, #360]	; (8006c58 <HAL_UART_IRQHandler+0x2b0>)
 8006aee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2208      	movs	r2, #8
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b02:	f043 0208 	orr.w	r2, r3, #8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d012      	beq.n	8006b3e <HAL_UART_IRQHandler+0x196>
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b34:	f043 0220 	orr.w	r2, r3, #32
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 823c 	beq.w	8006fc2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d013      	beq.n	8006b7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d005      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d04f      	beq.n	8006c42 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fe54 	bl	8007850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d141      	bne.n	8006c3a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1d9      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d013      	beq.n	8006c32 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c0e:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <HAL_UART_IRQHandler+0x2b8>)
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fd f86e 	bl	8003cf8 <HAL_DMA_Abort_IT>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d017      	beq.n	8006c52 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	e00f      	b.n	8006c52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9da 	bl	8006fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	e00b      	b.n	8006c52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9d6 	bl	8006fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c40:	e007      	b.n	8006c52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9d2 	bl	8006fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006c50:	e1b7      	b.n	8006fc2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c52:	bf00      	nop
    return;
 8006c54:	e1b5      	b.n	8006fc2 <HAL_UART_IRQHandler+0x61a>
 8006c56:	bf00      	nop
 8006c58:	10000001 	.word	0x10000001
 8006c5c:	04000120 	.word	0x04000120
 8006c60:	08007a53 	.word	0x08007a53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	f040 814a 	bne.w	8006f02 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c72:	f003 0310 	and.w	r3, r3, #16
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8143 	beq.w	8006f02 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 813c 	beq.w	8006f02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2210      	movs	r2, #16
 8006c90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	f040 80b5 	bne.w	8006e0c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006cae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8187 	beq.w	8006fc6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	f080 817f 	bcs.w	8006fc6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8086 	bne.w	8006df0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1da      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e1      	bne.n	8006d2e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3308      	adds	r3, #8
 8006d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e3      	bne.n	8006d6a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc0:	f023 0310 	bic.w	r3, r3, #16
 8006dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e4      	bne.n	8006db0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fc ff25 	bl	8003c3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f8fb 	bl	8007000 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e0a:	e0dc      	b.n	8006fc6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 80ce 	beq.w	8006fca <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 80c9 	beq.w	8006fca <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e4      	bne.n	8006e38 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e96:	633a      	str	r2, [r7, #48]	; 0x30
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e1      	bne.n	8006e6e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0310 	bic.w	r3, r3, #16
 8006ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	69b9      	ldr	r1, [r7, #24]
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	617b      	str	r3, [r7, #20]
   return(result);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e4      	bne.n	8006ebe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f880 	bl	8007000 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f00:	e063      	b.n	8006fca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00e      	beq.n	8006f2c <HAL_UART_IRQHandler+0x584>
 8006f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fdd5 	bl	8007ad4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f2a:	e051      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d014      	beq.n	8006f62 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d105      	bne.n	8006f50 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d03a      	beq.n	8006fce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
    }
    return;
 8006f60:	e035      	b.n	8006fce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <HAL_UART_IRQHandler+0x5da>
 8006f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fd7f 	bl	8007a7e <UART_EndTransmit_IT>
    return;
 8006f80:	e026      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x5fa>
 8006f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fdae 	bl	8007afc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fa0:	e016      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d010      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x628>
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da0c      	bge.n	8006fd0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fd96 	bl	8007ae8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fbc:	e008      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
      return;
 8006fbe:	bf00      	nop
 8006fc0:	e006      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
    return;
 8006fc2:	bf00      	nop
 8006fc4:	e004      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
      return;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
      return;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_UART_IRQHandler+0x628>
    return;
 8006fce:	bf00      	nop
  }
}
 8006fd0:	37e8      	adds	r7, #232	; 0xe8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800701c:	b08c      	sub	sp, #48	; 0x30
 800701e:	af00      	add	r7, sp, #0
 8007020:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	431a      	orrs	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	431a      	orrs	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	4313      	orrs	r3, r2
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4baf      	ldr	r3, [pc, #700]	; (8007304 <UART_SetConfig+0x2ec>)
 8007048:	4013      	ands	r3, r2
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007050:	430b      	orrs	r3, r1
 8007052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4aa4      	ldr	r2, [pc, #656]	; (8007308 <UART_SetConfig+0x2f0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	4313      	orrs	r3, r2
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800708e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007098:	430b      	orrs	r3, r1
 800709a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	f023 010f 	bic.w	r1, r3, #15
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a95      	ldr	r2, [pc, #596]	; (800730c <UART_SetConfig+0x2f4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d125      	bne.n	8007108 <UART_SetConfig+0xf0>
 80070bc:	2003      	movs	r0, #3
 80070be:	f7ff fb71 	bl	80067a4 <LL_RCC_GetUSARTClockSource>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d81b      	bhi.n	8007100 <UART_SetConfig+0xe8>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0xb8>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070e1 	.word	0x080070e1
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	080070f9 	.word	0x080070f9
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e6:	e042      	b.n	800716e <UART_SetConfig+0x156>
 80070e8:	2302      	movs	r3, #2
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e03e      	b.n	800716e <UART_SetConfig+0x156>
 80070f0:	2304      	movs	r3, #4
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f6:	e03a      	b.n	800716e <UART_SetConfig+0x156>
 80070f8:	2308      	movs	r3, #8
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fe:	e036      	b.n	800716e <UART_SetConfig+0x156>
 8007100:	2310      	movs	r3, #16
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e032      	b.n	800716e <UART_SetConfig+0x156>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a7e      	ldr	r2, [pc, #504]	; (8007308 <UART_SetConfig+0x2f0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d12a      	bne.n	8007168 <UART_SetConfig+0x150>
 8007112:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007116:	f7ff fb55 	bl	80067c4 <LL_RCC_GetLPUARTClockSource>
 800711a:	4603      	mov	r3, r0
 800711c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007120:	d01a      	beq.n	8007158 <UART_SetConfig+0x140>
 8007122:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007126:	d81b      	bhi.n	8007160 <UART_SetConfig+0x148>
 8007128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712c:	d00c      	beq.n	8007148 <UART_SetConfig+0x130>
 800712e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007132:	d815      	bhi.n	8007160 <UART_SetConfig+0x148>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <UART_SetConfig+0x128>
 8007138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713c:	d008      	beq.n	8007150 <UART_SetConfig+0x138>
 800713e:	e00f      	b.n	8007160 <UART_SetConfig+0x148>
 8007140:	2300      	movs	r3, #0
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007146:	e012      	b.n	800716e <UART_SetConfig+0x156>
 8007148:	2302      	movs	r3, #2
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714e:	e00e      	b.n	800716e <UART_SetConfig+0x156>
 8007150:	2304      	movs	r3, #4
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007156:	e00a      	b.n	800716e <UART_SetConfig+0x156>
 8007158:	2308      	movs	r3, #8
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715e:	e006      	b.n	800716e <UART_SetConfig+0x156>
 8007160:	2310      	movs	r3, #16
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e002      	b.n	800716e <UART_SetConfig+0x156>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a65      	ldr	r2, [pc, #404]	; (8007308 <UART_SetConfig+0x2f0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	f040 8097 	bne.w	80072a8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800717a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800717e:	2b08      	cmp	r3, #8
 8007180:	d823      	bhi.n	80071ca <UART_SetConfig+0x1b2>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x170>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071cb 	.word	0x080071cb
 8007190:	080071b5 	.word	0x080071b5
 8007194:	080071cb 	.word	0x080071cb
 8007198:	080071bb 	.word	0x080071bb
 800719c:	080071cb 	.word	0x080071cb
 80071a0:	080071cb 	.word	0x080071cb
 80071a4:	080071cb 	.word	0x080071cb
 80071a8:	080071c3 	.word	0x080071c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ac:	f7fe fc16 	bl	80059dc <HAL_RCC_GetPCLK1Freq>
 80071b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071b2:	e010      	b.n	80071d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b4:	4b56      	ldr	r3, [pc, #344]	; (8007310 <UART_SetConfig+0x2f8>)
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071b8:	e00d      	b.n	80071d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ba:	f7fe fb8f 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 80071be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071c0:	e009      	b.n	80071d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c8:	e005      	b.n	80071d6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 812a 	beq.w	8007432 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	4a4c      	ldr	r2, [pc, #304]	; (8007314 <UART_SetConfig+0x2fc>)
 80071e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d305      	bcc.n	800720e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	429a      	cmp	r2, r3
 800720c:	d903      	bls.n	8007216 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007214:	e10d      	b.n	8007432 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2200      	movs	r2, #0
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	60fa      	str	r2, [r7, #12]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	4a3c      	ldr	r2, [pc, #240]	; (8007314 <UART_SetConfig+0x2fc>)
 8007224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007228:	b29b      	uxth	r3, r3
 800722a:	2200      	movs	r2, #0
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007238:	f7f8 fffa 	bl	8000230 <__aeabi_uldivmod>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	020b      	lsls	r3, r1, #8
 800724e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007252:	0202      	lsls	r2, r0, #8
 8007254:	6979      	ldr	r1, [r7, #20]
 8007256:	6849      	ldr	r1, [r1, #4]
 8007258:	0849      	lsrs	r1, r1, #1
 800725a:	2000      	movs	r0, #0
 800725c:	460c      	mov	r4, r1
 800725e:	4605      	mov	r5, r0
 8007260:	eb12 0804 	adds.w	r8, r2, r4
 8007264:	eb43 0905 	adc.w	r9, r3, r5
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	469a      	mov	sl, r3
 8007270:	4693      	mov	fp, r2
 8007272:	4652      	mov	r2, sl
 8007274:	465b      	mov	r3, fp
 8007276:	4640      	mov	r0, r8
 8007278:	4649      	mov	r1, r9
 800727a:	f7f8 ffd9 	bl	8000230 <__aeabi_uldivmod>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4613      	mov	r3, r2
 8007284:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800728c:	d308      	bcc.n	80072a0 <UART_SetConfig+0x288>
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007294:	d204      	bcs.n	80072a0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	e0c8      	b.n	8007432 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072a6:	e0c4      	b.n	8007432 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b0:	d16d      	bne.n	800738e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80072b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072b6:	3b01      	subs	r3, #1
 80072b8:	2b07      	cmp	r3, #7
 80072ba:	d82d      	bhi.n	8007318 <UART_SetConfig+0x300>
 80072bc:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0x2ac>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	08007319 	.word	0x08007319
 80072d0:	080072f3 	.word	0x080072f3
 80072d4:	08007319 	.word	0x08007319
 80072d8:	08007319 	.word	0x08007319
 80072dc:	08007319 	.word	0x08007319
 80072e0:	080072fb 	.word	0x080072fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e4:	f7fe fb90 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 80072e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072ea:	e01b      	b.n	8007324 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <UART_SetConfig+0x2f8>)
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072f0:	e018      	b.n	8007324 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f2:	f7fe faf3 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072f8:	e014      	b.n	8007324 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007300:	e010      	b.n	8007324 <UART_SetConfig+0x30c>
 8007302:	bf00      	nop
 8007304:	cfff69f3 	.word	0xcfff69f3
 8007308:	40008000 	.word	0x40008000
 800730c:	40013800 	.word	0x40013800
 8007310:	00f42400 	.word	0x00f42400
 8007314:	0800c07c 	.word	0x0800c07c
      default:
        pclk = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007322:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8083 	beq.w	8007432 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	4a4a      	ldr	r2, [pc, #296]	; (800745c <UART_SetConfig+0x444>)
 8007332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007336:	461a      	mov	r2, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	fbb3 f3f2 	udiv	r3, r3, r2
 800733e:	005a      	lsls	r2, r3, #1
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	441a      	add	r2, r3
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007350:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	2b0f      	cmp	r3, #15
 8007356:	d916      	bls.n	8007386 <UART_SetConfig+0x36e>
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800735e:	d212      	bcs.n	8007386 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f023 030f 	bic.w	r3, r3, #15
 8007368:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	b29b      	uxth	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	b29a      	uxth	r2, r3
 8007376:	8bfb      	ldrh	r3, [r7, #30]
 8007378:	4313      	orrs	r3, r2
 800737a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	8bfa      	ldrh	r2, [r7, #30]
 8007382:	60da      	str	r2, [r3, #12]
 8007384:	e055      	b.n	8007432 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800738c:	e051      	b.n	8007432 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800738e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007392:	3b01      	subs	r3, #1
 8007394:	2b07      	cmp	r3, #7
 8007396:	d822      	bhi.n	80073de <UART_SetConfig+0x3c6>
 8007398:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <UART_SetConfig+0x388>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	080073c1 	.word	0x080073c1
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073df 	.word	0x080073df
 80073ac:	080073cf 	.word	0x080073cf
 80073b0:	080073df 	.word	0x080073df
 80073b4:	080073df 	.word	0x080073df
 80073b8:	080073df 	.word	0x080073df
 80073bc:	080073d7 	.word	0x080073d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073c0:	f7fe fb22 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 80073c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073c6:	e010      	b.n	80073ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c8:	4b25      	ldr	r3, [pc, #148]	; (8007460 <UART_SetConfig+0x448>)
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073cc:	e00d      	b.n	80073ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ce:	f7fe fa85 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 80073d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073d4:	e009      	b.n	80073ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073dc:	e005      	b.n	80073ea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073e8:	bf00      	nop
    }

    if (pclk != 0U)
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d020      	beq.n	8007432 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	4a19      	ldr	r2, [pc, #100]	; (800745c <UART_SetConfig+0x444>)
 80073f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	085b      	lsrs	r3, r3, #1
 8007408:	441a      	add	r2, r3
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007412:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	2b0f      	cmp	r3, #15
 8007418:	d908      	bls.n	800742c <UART_SetConfig+0x414>
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007420:	d204      	bcs.n	800742c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6a3a      	ldr	r2, [r7, #32]
 8007428:	60da      	str	r2, [r3, #12]
 800742a:	e002      	b.n	8007432 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2201      	movs	r2, #1
 8007436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2201      	movs	r2, #1
 800743e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2200      	movs	r2, #0
 8007446:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2200      	movs	r2, #0
 800744c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800744e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007452:	4618      	mov	r0, r3
 8007454:	3730      	adds	r7, #48	; 0x30
 8007456:	46bd      	mov	sp, r7
 8007458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745c:	0800c07c 	.word	0x0800c07c
 8007460:	00f42400 	.word	0x00f42400

08007464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01a      	beq.n	800757a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007562:	d10a      	bne.n	800757a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
  }
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075b8:	f7fc f852 	bl	8003660 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d10e      	bne.n	80075ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f82f 	bl	800763e <UART_WaitOnFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e025      	b.n	8007636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d10e      	bne.n	8007616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f819 	bl	800763e <UART_WaitOnFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e00f      	b.n	8007636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b09c      	sub	sp, #112	; 0x70
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	603b      	str	r3, [r7, #0]
 800764a:	4613      	mov	r3, r2
 800764c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764e:	e0a9      	b.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	f000 80a5 	beq.w	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765a:	f7fc f801 	bl	8003660 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007666:	429a      	cmp	r2, r3
 8007668:	d302      	bcc.n	8007670 <UART_WaitOnFlagUntilTimeout+0x32>
 800766a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800766c:	2b00      	cmp	r3, #0
 800766e:	d140      	bne.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800767e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007684:	667b      	str	r3, [r7, #100]	; 0x64
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800769c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	663b      	str	r3, [r7, #96]	; 0x60
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80076c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e069      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d051      	beq.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800770a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800770e:	d149      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007718:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800772e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
 800773a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800773e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e6      	bne.n	800771a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	613b      	str	r3, [r7, #16]
   return(result);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	66bb      	str	r3, [r7, #104]	; 0x68
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800776c:	623a      	str	r2, [r7, #32]
 800776e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	69f9      	ldr	r1, [r7, #28]
 8007772:	6a3a      	ldr	r2, [r7, #32]
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	61bb      	str	r3, [r7, #24]
   return(result);
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e5      	bne.n	800774c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e010      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69da      	ldr	r2, [r3, #28]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4013      	ands	r3, r2
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	429a      	cmp	r2, r3
 80077c0:	f43f af46 	beq.w	8007650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3770      	adds	r7, #112	; 0x70
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b08f      	sub	sp, #60	; 0x3c
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e6      	bne.n	80077d6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60bb      	str	r3, [r7, #8]
   return(result);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800781e:	633b      	str	r3, [r7, #48]	; 0x30
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007828:	61ba      	str	r2, [r7, #24]
 800782a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6979      	ldr	r1, [r7, #20]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	613b      	str	r3, [r7, #16]
   return(result);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e5      	bne.n	8007808 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007844:	bf00      	nop
 8007846:	373c      	adds	r7, #60	; 0x3c
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b095      	sub	sp, #84	; 0x54
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007876:	643b      	str	r3, [r7, #64]	; 0x40
 8007878:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800787c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e6      	bne.n	8007858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	61fb      	str	r3, [r7, #28]
   return(result);
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a0:	f023 0301 	bic.w	r3, r3, #1
 80078a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3308      	adds	r3, #8
 80078ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e3      	bne.n	800788a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d118      	bne.n	80078fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0310 	bic.w	r3, r3, #16
 80078de:	647b      	str	r3, [r7, #68]	; 0x44
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6979      	ldr	r1, [r7, #20]
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	613b      	str	r3, [r7, #16]
   return(result);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007910:	bf00      	nop
 8007912:	3754      	adds	r7, #84	; 0x54
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b090      	sub	sp, #64	; 0x40
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d137      	bne.n	80079a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793a:	2200      	movs	r2, #0
 800793c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	623b      	str	r3, [r7, #32]
   return(result);
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007956:	63bb      	str	r3, [r7, #56]	; 0x38
 8007958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007960:	633a      	str	r2, [r7, #48]	; 0x30
 8007962:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e5      	bne.n	8007940 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	60fb      	str	r3, [r7, #12]
   return(result);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
 800798a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	69b9      	ldr	r1, [r7, #24]
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	617b      	str	r3, [r7, #20]
   return(result);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e6      	bne.n	8007974 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079a6:	e002      	b.n	80079ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80079a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079aa:	f7fa f9b5 	bl	8001d18 <HAL_UART_TxCpltCallback>
}
 80079ae:	bf00      	nop
 80079b0:	3740      	adds	r7, #64	; 0x40
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff fb07 	bl	8006fd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b80      	cmp	r3, #128	; 0x80
 80079fc:	d109      	bne.n	8007a12 <UART_DMAError+0x40>
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b21      	cmp	r3, #33	; 0x21
 8007a02:	d106      	bne.n	8007a12 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007a0c:	6978      	ldr	r0, [r7, #20]
 8007a0e:	f7ff fede 	bl	80077ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d109      	bne.n	8007a34 <UART_DMAError+0x62>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b22      	cmp	r3, #34	; 0x22
 8007a24:	d106      	bne.n	8007a34 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007a2e:	6978      	ldr	r0, [r7, #20]
 8007a30:	f7ff ff0e 	bl	8007850 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3a:	f043 0210 	orr.w	r2, r3, #16
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a44:	6978      	ldr	r0, [r7, #20]
 8007a46:	f7ff fad1 	bl	8006fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a4a:	bf00      	nop
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fabb 	bl	8006fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9a:	61fb      	str	r3, [r7, #28]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6979      	ldr	r1, [r7, #20]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e6      	bne.n	8007a86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fa f926 	bl	8001d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007acc:	bf00      	nop
 8007ace:	3720      	adds	r7, #32
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e027      	b.n	8007b76 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2224      	movs	r2, #36	; 0x24
 8007b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e02d      	b.n	8007bf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2224      	movs	r2, #36	; 0x24
 8007ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 0201 	bic.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f850 	bl	8007c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c12:	2302      	movs	r3, #2
 8007c14:	e02d      	b.n	8007c72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2224      	movs	r2, #36	; 0x24
 8007c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f812 	bl	8007c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d108      	bne.n	8007c9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c9c:	e031      	b.n	8007d02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	0e5b      	lsrs	r3, r3, #25
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	0f5b      	lsrs	r3, r3, #29
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	7b3a      	ldrb	r2, [r7, #12]
 8007cca:	4911      	ldr	r1, [pc, #68]	; (8007d10 <UARTEx_SetNbDataToProcess+0x94>)
 8007ccc:	5c8a      	ldrb	r2, [r1, r2]
 8007cce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cd2:	7b3a      	ldrb	r2, [r7, #12]
 8007cd4:	490f      	ldr	r1, [pc, #60]	; (8007d14 <UARTEx_SetNbDataToProcess+0x98>)
 8007cd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	7b7a      	ldrb	r2, [r7, #13]
 8007ce8:	4909      	ldr	r1, [pc, #36]	; (8007d10 <UARTEx_SetNbDataToProcess+0x94>)
 8007cea:	5c8a      	ldrb	r2, [r1, r2]
 8007cec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cf0:	7b7a      	ldrb	r2, [r7, #13]
 8007cf2:	4908      	ldr	r1, [pc, #32]	; (8007d14 <UARTEx_SetNbDataToProcess+0x98>)
 8007cf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d02:	bf00      	nop
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	0800c094 	.word	0x0800c094
 8007d14:	0800c09c 	.word	0x0800c09c

08007d18 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007d18:	b5b0      	push	{r4, r5, r7, lr}
 8007d1a:	b0ce      	sub	sp, #312	; 0x138
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4605      	mov	r5, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	4610      	mov	r0, r2
 8007d24:	4619      	mov	r1, r3
 8007d26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d2a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007d2e:	462a      	mov	r2, r5
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d42:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007d46:	4602      	mov	r2, r0
 8007d48:	801a      	strh	r2, [r3, #0]
 8007d4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d4e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007d52:	460a      	mov	r2, r1
 8007d54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007d5e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007d62:	3308      	adds	r3, #8
 8007d64:	f107 0210 	add.w	r2, r7, #16
 8007d68:	4413      	add	r3, r2
 8007d6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007d6e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007d72:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007d76:	4413      	add	r3, r2
 8007d78:	3309      	adds	r3, #9
 8007d7a:	f107 0210 	add.w	r2, r7, #16
 8007d7e:	4413      	add	r3, r2
 8007d80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d88:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d9a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007d9e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007daa:	3301      	adds	r3, #1
 8007dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007db4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007db8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007dbc:	8812      	ldrh	r2, [r2, #0]
 8007dbe:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dc6:	3302      	adds	r3, #2
 8007dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007dcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dd0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007dd4:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8007dd8:	8812      	ldrh	r2, [r2, #0]
 8007dda:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007dde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007de2:	3302      	adds	r3, #2
 8007de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007df0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007df4:	7812      	ldrb	r2, [r2, #0]
 8007df6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e06:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007e0a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e10:	3301      	adds	r3, #1
 8007e12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e1a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007e1e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007e20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e24:	3301      	adds	r3, #1
 8007e26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007e2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e2e:	3308      	adds	r3, #8
 8007e30:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007e34:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fdb7 	bl	80089ac <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007e3e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007e42:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e46:	4413      	add	r3, r2
 8007e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007e4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e50:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007e54:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007e60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e64:	3301      	adds	r3, #1
 8007e66:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007e6a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fd9c 	bl	80089ac <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007e74:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007e78:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e86:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007e8a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e90:	3302      	adds	r3, #2
 8007e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007e9e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eae:	2218      	movs	r2, #24
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fd8a 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007eb8:	233f      	movs	r3, #63	; 0x3f
 8007eba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007ebe:	2383      	movs	r3, #131	; 0x83
 8007ec0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ec4:	f107 0310 	add.w	r3, r7, #16
 8007ec8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ed0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ed4:	f107 030f 	add.w	r3, r7, #15
 8007ed8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fc33 	bl	8008754 <hci_send_req>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da01      	bge.n	8007ef8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007ef4:	23ff      	movs	r3, #255	; 0xff
 8007ef6:	e004      	b.n	8007f02 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007ef8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007efc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f00:	781b      	ldrb	r3, [r3, #0]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bdb0      	pop	{r4, r5, r7, pc}

08007f0c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007f0c:	b590      	push	{r4, r7, lr}
 8007f0e:	b0cd      	sub	sp, #308	; 0x134
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f1c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f26:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	701a      	strb	r2, [r3, #0]
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f36:	4602      	mov	r2, r0
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007f42:	460a      	mov	r2, r1
 8007f44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007f46:	f107 0310 	add.w	r3, r7, #16
 8007f4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	2207      	movs	r2, #7
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fd38 	bl	80089cc <Osal_MemSet>
  int index_input = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f6a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007f6e:	7812      	ldrb	r2, [r2, #0]
 8007f70:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f76:	3301      	adds	r3, #1
 8007f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f84:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f90:	3301      	adds	r3, #1
 8007f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f9e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007fa2:	7812      	ldrb	r2, [r2, #0]
 8007fa4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007faa:	3301      	adds	r3, #1
 8007fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fb4:	2218      	movs	r2, #24
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fd07 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fbe:	233f      	movs	r3, #63	; 0x3f
 8007fc0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007fc4:	238a      	movs	r3, #138	; 0x8a
 8007fc6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fca:	f107 0310 	add.w	r3, r7, #16
 8007fce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007fda:	f107 0308 	add.w	r3, r7, #8
 8007fde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007fe2:	2307      	movs	r3, #7
 8007fe4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fe8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fbb0 	bl	8008754 <hci_send_req>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da01      	bge.n	8007ffe <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007ffa:	23ff      	movs	r3, #255	; 0xff
 8007ffc:	e02e      	b.n	800805c <aci_gap_init+0x150>
  if ( resp.Status )
 8007ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008002:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d005      	beq.n	8008018 <aci_gap_init+0x10c>
    return resp.Status;
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	e021      	b.n	800805c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008020:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008024:	b29a      	uxth	r2, r3
 8008026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008036:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800803a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800803e:	b29a      	uxth	r2, r3
 8008040:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008044:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800804e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008052:	b29a      	uxth	r2, r3
 8008054:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008058:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008062:	46bd      	mov	sp, r7
 8008064:	bd90      	pop	{r4, r7, pc}

08008066 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b0cc      	sub	sp, #304	; 0x130
 800806a:	af00      	add	r7, sp, #0
 800806c:	4602      	mov	r2, r0
 800806e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008076:	6019      	str	r1, [r3, #0]
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008080:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008082:	f107 0310 	add.w	r3, r7, #16
 8008086:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800808a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008092:	2200      	movs	r2, #0
 8008094:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800809c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80080a8:	7812      	ldrb	r2, [r2, #0]
 80080aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080b0:	3301      	adds	r3, #1
 80080b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80080b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ba:	1c58      	adds	r0, r3, #1
 80080bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ce:	6819      	ldr	r1, [r3, #0]
 80080d0:	f000 fc6c 	bl	80089ac <Osal_MemCpy>
  index_input += AdvDataLen;
 80080d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080e2:	4413      	add	r3, r2
 80080e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080ec:	2218      	movs	r2, #24
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fc6b 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 80080f6:	233f      	movs	r3, #63	; 0x3f
 80080f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80080fc:	238e      	movs	r3, #142	; 0x8e
 80080fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008102:	f107 0310 	add.w	r3, r7, #16
 8008106:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800810a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800810e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008112:	f107 030f 	add.w	r3, r7, #15
 8008116:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800811a:	2301      	movs	r3, #1
 800811c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008120:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fb14 	bl	8008754 <hci_send_req>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	da01      	bge.n	8008136 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008132:	23ff      	movs	r3, #255	; 0xff
 8008134:	e004      	b.n	8008140 <aci_gap_update_adv_data+0xda>
  return status;
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800813e:	781b      	ldrb	r3, [r3, #0]
}
 8008140:	4618      	mov	r0, r3
 8008142:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b0cc      	sub	sp, #304	; 0x130
 800814e:	af00      	add	r7, sp, #0
 8008150:	4602      	mov	r2, r0
 8008152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008156:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800815a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 800815c:	f107 0310 	add.w	r3, r7, #16
 8008160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008168:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8008176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800817e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008182:	7812      	ldrb	r2, [r2, #0]
 8008184:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008186:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800818a:	3301      	adds	r3, #1
 800818c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008190:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008194:	2218      	movs	r2, #24
 8008196:	2100      	movs	r1, #0
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fc17 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800819e:	233f      	movs	r3, #63	; 0x3f
 80081a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 80081a4:	238f      	movs	r3, #143	; 0x8f
 80081a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081aa:	f107 0310 	add.w	r3, r7, #16
 80081ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081ba:	f107 030f 	add.w	r3, r7, #15
 80081be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fac0 	bl	8008754 <hci_send_req>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da01      	bge.n	80081de <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 80081da:	23ff      	movs	r3, #255	; 0xff
 80081dc:	e004      	b.n	80081e8 <aci_gap_delete_ad_type+0x9e>
  return status;
 80081de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80081e6:	781b      	ldrb	r3, [r3, #0]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b088      	sub	sp, #32
 80081f6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081fc:	f107 0308 	add.w	r3, r7, #8
 8008200:	2218      	movs	r2, #24
 8008202:	2100      	movs	r1, #0
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fbe1 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800820a:	233f      	movs	r3, #63	; 0x3f
 800820c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800820e:	f240 1301 	movw	r3, #257	; 0x101
 8008212:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008214:	1dfb      	adds	r3, r7, #7
 8008216:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008218:	2301      	movs	r3, #1
 800821a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800821c:	f107 0308 	add.w	r3, r7, #8
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fa96 	bl	8008754 <hci_send_req>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	da01      	bge.n	8008232 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800822e:	23ff      	movs	r3, #255	; 0xff
 8008230:	e000      	b.n	8008234 <aci_gatt_init+0x42>
  return status;
 8008232:	79fb      	ldrb	r3, [r7, #7]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3720      	adds	r7, #32
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800823c:	b5b0      	push	{r4, r5, r7, lr}
 800823e:	b0cc      	sub	sp, #304	; 0x130
 8008240:	af00      	add	r7, sp, #0
 8008242:	4605      	mov	r5, r0
 8008244:	460c      	mov	r4, r1
 8008246:	4610      	mov	r0, r2
 8008248:	4619      	mov	r1, r3
 800824a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008252:	462a      	mov	r2, r5
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825e:	4622      	mov	r2, r4
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800826a:	4602      	mov	r2, r0
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008276:	460a      	mov	r2, r1
 8008278:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800827a:	f107 0310 	add.w	r3, r7, #16
 800827e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008286:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008298:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800829c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80082a0:	8812      	ldrh	r2, [r2, #0]
 80082a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082a8:	3302      	adds	r3, #2
 80082aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80082ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80082ba:	8812      	ldrh	r2, [r2, #0]
 80082bc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80082be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082c2:	3302      	adds	r3, #2
 80082c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082d0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80082d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082dc:	3301      	adds	r3, #1
 80082de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80082e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082ea:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80082ee:	7812      	ldrb	r2, [r2, #0]
 80082f0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80082f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082f6:	3301      	adds	r3, #1
 80082f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80082fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008300:	1d98      	adds	r0, r3, #6
 8008302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008306:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008312:	f000 fb4b 	bl	80089ac <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008324:	4413      	add	r3, r2
 8008326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800832a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800832e:	2218      	movs	r2, #24
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fb4a 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008338:	233f      	movs	r3, #63	; 0x3f
 800833a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800833e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008342:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008346:	f107 0310 	add.w	r3, r7, #16
 800834a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800834e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008352:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008356:	f107 030f 	add.w	r3, r7, #15
 800835a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800835e:	2301      	movs	r3, #1
 8008360:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008364:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f9f2 	bl	8008754 <hci_send_req>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	da01      	bge.n	800837a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008376:	23ff      	movs	r3, #255	; 0xff
 8008378:	e004      	b.n	8008384 <aci_gatt_update_char_value+0x148>
  return status;
 800837a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008382:	781b      	ldrb	r3, [r3, #0]
}
 8008384:	4618      	mov	r0, r3
 8008386:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800838a:	46bd      	mov	sp, r7
 800838c:	bdb0      	pop	{r4, r5, r7, pc}

0800838e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b0cc      	sub	sp, #304	; 0x130
 8008392:	af00      	add	r7, sp, #0
 8008394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80083a6:	4602      	mov	r2, r0
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083b2:	460a      	mov	r2, r1
 80083b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80083b6:	f107 0310 	add.w	r3, r7, #16
 80083ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80083d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083d8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80083dc:	7812      	ldrb	r2, [r2, #0]
 80083de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083e4:	3301      	adds	r3, #1
 80083e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80083ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80083fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083fe:	3301      	adds	r3, #1
 8008400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008408:	1c98      	adds	r0, r3, #2
 800840a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008412:	781a      	ldrb	r2, [r3, #0]
 8008414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800841c:	6819      	ldr	r1, [r3, #0]
 800841e:	f000 fac5 	bl	80089ac <Osal_MemCpy>
  index_input += Length;
 8008422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008426:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008430:	4413      	add	r3, r2
 8008432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800843a:	2218      	movs	r2, #24
 800843c:	2100      	movs	r1, #0
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fac4 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008444:	233f      	movs	r3, #63	; 0x3f
 8008446:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800844a:	230c      	movs	r3, #12
 800844c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800845c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008460:	f107 030f 	add.w	r3, r7, #15
 8008464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008468:	2301      	movs	r3, #1
 800846a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800846e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f96d 	bl	8008754 <hci_send_req>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	da01      	bge.n	8008484 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008480:	23ff      	movs	r3, #255	; 0xff
 8008482:	e004      	b.n	800848e <aci_hal_write_config_data+0x100>
  return status;
 8008484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008488:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800848c:	781b      	ldrb	r3, [r3, #0]
}
 800848e:	4618      	mov	r0, r3
 8008490:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b0cc      	sub	sp, #304	; 0x130
 800849c:	af00      	add	r7, sp, #0
 800849e:	4602      	mov	r2, r0
 80084a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80084b2:	460a      	mov	r2, r1
 80084b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80084b6:	f107 0310 	add.w	r3, r7, #16
 80084ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80084be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80084d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084d8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084e4:	3301      	adds	r3, #1
 80084e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80084ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80084f6:	7812      	ldrb	r2, [r2, #0]
 80084f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084fe:	3301      	adds	r3, #1
 8008500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008504:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008508:	2218      	movs	r2, #24
 800850a:	2100      	movs	r1, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fa5d 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008512:	233f      	movs	r3, #63	; 0x3f
 8008514:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008518:	230f      	movs	r3, #15
 800851a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800851e:	f107 0310 	add.w	r3, r7, #16
 8008522:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800852a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800852e:	f107 030f 	add.w	r3, r7, #15
 8008532:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008536:	2301      	movs	r3, #1
 8008538:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800853c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008540:	2100      	movs	r1, #0
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f906 	bl	8008754 <hci_send_req>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	da01      	bge.n	8008552 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800854e:	23ff      	movs	r3, #255	; 0xff
 8008550:	e004      	b.n	800855c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800855a:	781b      	ldrb	r3, [r3, #0]
}
 800855c:	4618      	mov	r0, r3
 800855e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b088      	sub	sp, #32
 800856a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	2218      	movs	r2, #24
 8008576:	2100      	movs	r1, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fa27 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x03;
 800857e:	2303      	movs	r3, #3
 8008580:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008582:	2303      	movs	r3, #3
 8008584:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008586:	1dfb      	adds	r3, r7, #7
 8008588:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800858a:	2301      	movs	r3, #1
 800858c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	2100      	movs	r1, #0
 8008594:	4618      	mov	r0, r3
 8008596:	f000 f8dd 	bl	8008754 <hci_send_req>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	da01      	bge.n	80085a4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80085a0:	23ff      	movs	r3, #255	; 0xff
 80085a2:	e000      	b.n	80085a6 <hci_reset+0x40>
  return status;
 80085a4:	79fb      	ldrb	r3, [r7, #7]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b0cc      	sub	sp, #304	; 0x130
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	4602      	mov	r2, r0
 80085b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085be:	6019      	str	r1, [r3, #0]
 80085c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80085c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80085ca:	f107 0310 	add.w	r3, r7, #16
 80085ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 80085e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80085f0:	7812      	ldrb	r2, [r2, #0]
 80085f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80085f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085f8:	3301      	adds	r3, #1
 80085fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 80085fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008602:	1c58      	adds	r0, r3, #1
 8008604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860c:	221f      	movs	r2, #31
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	f000 f9cc 	bl	80089ac <Osal_MemCpy>
  index_input += 31;
 8008614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008618:	331f      	adds	r3, #31
 800861a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800861e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008622:	2218      	movs	r2, #24
 8008624:	2100      	movs	r1, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f000 f9d0 	bl	80089cc <Osal_MemSet>
  rq.ogf = 0x08;
 800862c:	2308      	movs	r3, #8
 800862e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8008632:	2309      	movs	r3, #9
 8008634:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008638:	f107 0310 	add.w	r3, r7, #16
 800863c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008640:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008644:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008648:	f107 030f 	add.w	r3, r7, #15
 800864c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008650:	2301      	movs	r3, #1
 8008652:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800865a:	2100      	movs	r1, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f879 	bl	8008754 <hci_send_req>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	da01      	bge.n	800866c <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008668:	23ff      	movs	r3, #255	; 0xff
 800866a:	e004      	b.n	8008676 <hci_le_set_scan_response_data+0xc8>
  return status;
 800866c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008670:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008674:	781b      	ldrb	r3, [r3, #0]
}
 8008676:	4618      	mov	r0, r3
 8008678:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	4a08      	ldr	r2, [pc, #32]	; (80086b0 <hci_init+0x30>)
 8008690:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008692:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <hci_init+0x34>)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008698:	4806      	ldr	r0, [pc, #24]	; (80086b4 <hci_init+0x34>)
 800869a:	f000 f973 	bl	8008984 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f8d4 	bl	8008850 <TlInit>

  return;
 80086a8:	bf00      	nop
}
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20000440 	.word	0x20000440
 80086b4:	20000418 	.word	0x20000418

080086b8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80086be:	4822      	ldr	r0, [pc, #136]	; (8008748 <hci_user_evt_proc+0x90>)
 80086c0:	f001 fa7a 	bl	8009bb8 <LST_is_empty>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d12b      	bne.n	8008722 <hci_user_evt_proc+0x6a>
 80086ca:	4b20      	ldr	r3, [pc, #128]	; (800874c <hci_user_evt_proc+0x94>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d027      	beq.n	8008722 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80086d2:	f107 030c 	add.w	r3, r7, #12
 80086d6:	4619      	mov	r1, r3
 80086d8:	481b      	ldr	r0, [pc, #108]	; (8008748 <hci_user_evt_proc+0x90>)
 80086da:	f001 fafc 	bl	8009cd6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80086de:	4b1c      	ldr	r3, [pc, #112]	; (8008750 <hci_user_evt_proc+0x98>)
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80086ea:	2301      	movs	r3, #1
 80086ec:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80086ee:	4b18      	ldr	r3, [pc, #96]	; (8008750 <hci_user_evt_proc+0x98>)
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	1d3a      	adds	r2, r7, #4
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80086f8:	793a      	ldrb	r2, [r7, #4]
 80086fa:	4b14      	ldr	r3, [pc, #80]	; (800874c <hci_user_evt_proc+0x94>)
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e002      	b.n	8008706 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008700:	4b12      	ldr	r3, [pc, #72]	; (800874c <hci_user_evt_proc+0x94>)
 8008702:	2201      	movs	r2, #1
 8008704:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008706:	4b11      	ldr	r3, [pc, #68]	; (800874c <hci_user_evt_proc+0x94>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fe1f 	bl	8009354 <TL_MM_EvtDone>
 8008716:	e004      	b.n	8008722 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4619      	mov	r1, r3
 800871c:	480a      	ldr	r0, [pc, #40]	; (8008748 <hci_user_evt_proc+0x90>)
 800871e:	f001 fa6d 	bl	8009bfc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008722:	4809      	ldr	r0, [pc, #36]	; (8008748 <hci_user_evt_proc+0x90>)
 8008724:	f001 fa48 	bl	8009bb8 <LST_is_empty>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d107      	bne.n	800873e <hci_user_evt_proc+0x86>
 800872e:	4b07      	ldr	r3, [pc, #28]	; (800874c <hci_user_evt_proc+0x94>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008736:	4804      	ldr	r0, [pc, #16]	; (8008748 <hci_user_evt_proc+0x90>)
 8008738:	f7fa fa22 	bl	8002b80 <hci_notify_asynch_evt>
  }


  return;
 800873c:	bf00      	nop
 800873e:	bf00      	nop
}
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000138 	.word	0x20000138
 800874c:	20000144 	.word	0x20000144
 8008750:	20000418 	.word	0x20000418

08008754 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008760:	2000      	movs	r0, #0
 8008762:	f000 f8cb 	bl	80088fc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008766:	2300      	movs	r3, #0
 8008768:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	b21b      	sxth	r3, r3
 8008770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008774:	b21a      	sxth	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	029b      	lsls	r3, r3, #10
 800877c:	b21b      	sxth	r3, r3
 800877e:	4313      	orrs	r3, r2
 8008780:	b21b      	sxth	r3, r3
 8008782:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	b2d9      	uxtb	r1, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	8bbb      	ldrh	r3, [r7, #28]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f88d 	bl	80088b0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008796:	e04e      	b.n	8008836 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008798:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800879c:	f7fa fa07 	bl	8002bae <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80087a0:	e043      	b.n	800882a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80087a2:	f107 030c 	add.w	r3, r7, #12
 80087a6:	4619      	mov	r1, r3
 80087a8:	4828      	ldr	r0, [pc, #160]	; (800884c <hci_send_req+0xf8>)
 80087aa:	f001 fa94 	bl	8009cd6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	7a5b      	ldrb	r3, [r3, #9]
 80087b2:	2b0f      	cmp	r3, #15
 80087b4:	d114      	bne.n	80087e0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	330b      	adds	r3, #11
 80087ba:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	885b      	ldrh	r3, [r3, #2]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	8bba      	ldrh	r2, [r7, #28]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d104      	bne.n	80087d2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	7812      	ldrb	r2, [r2, #0]
 80087d0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d027      	beq.n	800882a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80087da:	2301      	movs	r3, #1
 80087dc:	77fb      	strb	r3, [r7, #31]
 80087de:	e024      	b.n	800882a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	330b      	adds	r3, #11
 80087e4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	8bba      	ldrh	r2, [r7, #28]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d114      	bne.n	800881e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	7a9b      	ldrb	r3, [r3, #10]
 80087f8:	3b03      	subs	r3, #3
 80087fa:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695a      	ldr	r2, [r3, #20]
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	429a      	cmp	r2, r3
 8008804:	bfa8      	it	ge
 8008806:	461a      	movge	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6918      	ldr	r0, [r3, #16]
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	1cd9      	adds	r1, r3, #3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	461a      	mov	r2, r3
 800881a:	f001 fea7 	bl	800a56c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008826:	2301      	movs	r3, #1
 8008828:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800882a:	4808      	ldr	r0, [pc, #32]	; (800884c <hci_send_req+0xf8>)
 800882c:	f001 f9c4 	bl	8009bb8 <LST_is_empty>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0b5      	beq.n	80087a2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008836:	7ffb      	ldrb	r3, [r7, #31]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0ad      	beq.n	8008798 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800883c:	2001      	movs	r0, #1
 800883e:	f000 f85d 	bl	80088fc <NotifyCmdStatus>

  return 0;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000438 	.word	0x20000438

08008850 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008858:	480f      	ldr	r0, [pc, #60]	; (8008898 <TlInit+0x48>)
 800885a:	f001 f99d 	bl	8009b98 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800885e:	4a0f      	ldr	r2, [pc, #60]	; (800889c <TlInit+0x4c>)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008864:	480e      	ldr	r0, [pc, #56]	; (80088a0 <TlInit+0x50>)
 8008866:	f001 f997 	bl	8009b98 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800886a:	4b0e      	ldr	r3, [pc, #56]	; (80088a4 <TlInit+0x54>)
 800886c:	2201      	movs	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008870:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <TlInit+0x58>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800887c:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <TlInit+0x5c>)
 800887e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008880:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <TlInit+0x58>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f107 0208 	add.w	r2, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
  }

  return;
 800888c:	bf00      	nop
 800888e:	bf00      	nop
}
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000438 	.word	0x20000438
 800889c:	20000140 	.word	0x20000140
 80088a0:	20000138 	.word	0x20000138
 80088a4:	20000144 	.word	0x20000144
 80088a8:	20000418 	.word	0x20000418
 80088ac:	0800893d 	.word	0x0800893d

080088b0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	603a      	str	r2, [r7, #0]
 80088ba:	80fb      	strh	r3, [r7, #6]
 80088bc:	460b      	mov	r3, r1
 80088be:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <SendCmd+0x44>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80088ca:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <SendCmd+0x44>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	797a      	ldrb	r2, [r7, #5]
 80088d0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80088d2:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <SendCmd+0x44>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	330c      	adds	r3, #12
 80088d8:	797a      	ldrb	r2, [r7, #5]
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 fe45 	bl	800a56c <memcpy>

  hciContext.io.Send(0,0);
 80088e2:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <SendCmd+0x48>)
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2100      	movs	r1, #0
 80088e8:	2000      	movs	r0, #0
 80088ea:	4798      	blx	r3

  return;
 80088ec:	bf00      	nop
}
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20000140 	.word	0x20000140
 80088f8:	20000418 	.word	0x20000418

080088fc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d108      	bne.n	800891e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <NotifyCmdStatus+0x3c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00d      	beq.n	8008930 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008914:	4b08      	ldr	r3, [pc, #32]	; (8008938 <NotifyCmdStatus+0x3c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2000      	movs	r0, #0
 800891a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800891c:	e008      	b.n	8008930 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800891e:	4b06      	ldr	r3, [pc, #24]	; (8008938 <NotifyCmdStatus+0x3c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008926:	4b04      	ldr	r3, [pc, #16]	; (8008938 <NotifyCmdStatus+0x3c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2001      	movs	r0, #1
 800892c:	4798      	blx	r3
  return;
 800892e:	bf00      	nop
 8008930:	bf00      	nop
}
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20000440 	.word	0x20000440

0800893c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7a5b      	ldrb	r3, [r3, #9]
 8008948:	2b0f      	cmp	r3, #15
 800894a:	d003      	beq.n	8008954 <TlEvtReceived+0x18>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7a5b      	ldrb	r3, [r3, #9]
 8008950:	2b0e      	cmp	r3, #14
 8008952:	d107      	bne.n	8008964 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4809      	ldr	r0, [pc, #36]	; (800897c <TlEvtReceived+0x40>)
 8008958:	f001 f976 	bl	8009c48 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800895c:	2000      	movs	r0, #0
 800895e:	f7fa f91b 	bl	8002b98 <hci_cmd_resp_release>
 8008962:	e006      	b.n	8008972 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4806      	ldr	r0, [pc, #24]	; (8008980 <TlEvtReceived+0x44>)
 8008968:	f001 f96e 	bl	8009c48 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800896c:	4804      	ldr	r0, [pc, #16]	; (8008980 <TlEvtReceived+0x44>)
 800896e:	f7fa f907 	bl	8002b80 <hci_notify_asynch_evt>
  }

  return;
 8008972:	bf00      	nop
}
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000438 	.word	0x20000438
 8008980:	20000138 	.word	0x20000138

08008984 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a05      	ldr	r2, [pc, #20]	; (80089a4 <hci_register_io_bus+0x20>)
 8008990:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a04      	ldr	r2, [pc, #16]	; (80089a8 <hci_register_io_bus+0x24>)
 8008996:	611a      	str	r2, [r3, #16]

  return;
 8008998:	bf00      	nop
}
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	080090cd 	.word	0x080090cd
 80089a8:	08009135 	.word	0x08009135

080089ac <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f001 fdd5 	bl	800a56c <memcpy>
 80089c2:	4603      	mov	r3, r0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f001 fdd3 	bl	800a588 <memset>
 80089e2:	4603      	mov	r3, r0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80089f4:	f107 030c 	add.w	r3, r7, #12
 80089f8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	212c      	movs	r1, #44	; 0x2c
 8008a04:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008a08:	f000 f94c 	bl	8008ca4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	330b      	adds	r3, #11
 8008a10:	78db      	ldrb	r3, [r3, #3]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3720      	adds	r7, #32
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b088      	sub	sp, #32
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008a22:	f107 030c 	add.w	r3, r7, #12
 8008a26:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	210f      	movs	r1, #15
 8008a32:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008a36:	f000 f935 	bl	8008ca4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	330b      	adds	r3, #11
 8008a3e:	78db      	ldrb	r3, [r3, #3]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008a50:	f107 030c 	add.w	r3, r7, #12
 8008a54:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	210e      	movs	r1, #14
 8008a5c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008a60:	f000 f920 	bl	8008ca4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	330b      	adds	r3, #11
 8008a68:	78db      	ldrb	r3, [r3, #3]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b08b      	sub	sp, #44	; 0x2c
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008a9c:	4b4a      	ldr	r3, [pc, #296]	; (8008bc8 <SHCI_GetWirelessFwInfo+0x154>)
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008aa4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008aae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a44      	ldr	r2, [pc, #272]	; (8008bcc <SHCI_GetWirelessFwInfo+0x158>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d10f      	bne.n	8008ae0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	e01a      	b.n	8008b16 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008ae8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008aec:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	0e1b      	lsrs	r3, r3, #24
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	0c1b      	lsrs	r3, r3, #16
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	0a1b      	lsrs	r3, r3, #8
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	091b      	lsrs	r3, r3, #4
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	0e1b      	lsrs	r3, r3, #24
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	0e1b      	lsrs	r3, r3, #24
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	0e1b      	lsrs	r3, r3, #24
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	0c1b      	lsrs	r3, r3, #16
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	372c      	adds	r7, #44	; 0x2c
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	58004000 	.word	0x58004000
 8008bcc:	a94656b9 	.word	0xa94656b9

08008bd0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	4a08      	ldr	r2, [pc, #32]	; (8008c00 <shci_init+0x30>)
 8008be0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <shci_init+0x34>)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008be8:	4806      	ldr	r0, [pc, #24]	; (8008c04 <shci_init+0x34>)
 8008bea:	f000 f911 	bl	8008e10 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 f894 	bl	8008d20 <TlInit>

  return;
 8008bf8:	bf00      	nop
}
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000464 	.word	0x20000464
 8008c04:	20000444 	.word	0x20000444

08008c08 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008c0e:	4822      	ldr	r0, [pc, #136]	; (8008c98 <shci_user_evt_proc+0x90>)
 8008c10:	f000 ffd2 	bl	8009bb8 <LST_is_empty>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d12b      	bne.n	8008c72 <shci_user_evt_proc+0x6a>
 8008c1a:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <shci_user_evt_proc+0x94>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d027      	beq.n	8008c72 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008c22:	f107 030c 	add.w	r3, r7, #12
 8008c26:	4619      	mov	r1, r3
 8008c28:	481b      	ldr	r0, [pc, #108]	; (8008c98 <shci_user_evt_proc+0x90>)
 8008c2a:	f001 f854 	bl	8009cd6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008c2e:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <shci_user_evt_proc+0x98>)
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00c      	beq.n	8008c50 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008c3e:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <shci_user_evt_proc+0x98>)
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	1d3a      	adds	r2, r7, #4
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008c48:	793a      	ldrb	r2, [r7, #4]
 8008c4a:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <shci_user_evt_proc+0x94>)
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008c50:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <shci_user_evt_proc+0x94>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008c56:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <shci_user_evt_proc+0x94>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fb77 	bl	8009354 <TL_MM_EvtDone>
 8008c66:	e004      	b.n	8008c72 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	480a      	ldr	r0, [pc, #40]	; (8008c98 <shci_user_evt_proc+0x90>)
 8008c6e:	f000 ffc5 	bl	8009bfc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008c72:	4809      	ldr	r0, [pc, #36]	; (8008c98 <shci_user_evt_proc+0x90>)
 8008c74:	f000 ffa0 	bl	8009bb8 <LST_is_empty>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d107      	bne.n	8008c8e <shci_user_evt_proc+0x86>
 8008c7e:	4b07      	ldr	r3, [pc, #28]	; (8008c9c <shci_user_evt_proc+0x94>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008c86:	4804      	ldr	r0, [pc, #16]	; (8008c98 <shci_user_evt_proc+0x90>)
 8008c88:	f7f8 f98f 	bl	8000faa <shci_notify_asynch_evt>
  }


  return;
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
}
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	2000016c 	.word	0x2000016c
 8008c9c:	2000017c 	.word	0x2000017c
 8008ca0:	20000444 	.word	0x20000444

08008ca4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60ba      	str	r2, [r7, #8]
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	4603      	mov	r3, r0
 8008cb0:	81fb      	strh	r3, [r7, #14]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f000 f864 	bl	8008d84 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008cbc:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <shci_send+0x74>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	89fa      	ldrh	r2, [r7, #14]
 8008cc2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <shci_send+0x74>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	7b7a      	ldrb	r2, [r7, #13]
 8008ccc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008cce:	4b12      	ldr	r3, [pc, #72]	; (8008d18 <shci_send+0x74>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	330c      	adds	r3, #12
 8008cd4:	7b7a      	ldrb	r2, [r7, #13]
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 fc47 	bl	800a56c <memcpy>

  shciContext.io.Send(0,0);
 8008cde:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <shci_send+0x78>)
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008ce8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008cec:	f7f8 f974 	bl	8000fd8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f103 0008 	add.w	r0, r3, #8
 8008cf6:	4b08      	ldr	r3, [pc, #32]	; (8008d18 <shci_send+0x74>)
 8008cf8:	6819      	ldr	r1, [r3, #0]
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <shci_send+0x74>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	789b      	ldrb	r3, [r3, #2]
 8008d00:	3303      	adds	r3, #3
 8008d02:	461a      	mov	r2, r3
 8008d04:	f001 fc32 	bl	800a56c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f000 f83b 	bl	8008d84 <Cmd_SetStatus>

  return;
 8008d0e:	bf00      	nop
}
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000178 	.word	0x20000178
 8008d1c:	20000444 	.word	0x20000444

08008d20 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008d28:	4a10      	ldr	r2, [pc, #64]	; (8008d6c <TlInit+0x4c>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008d2e:	4810      	ldr	r0, [pc, #64]	; (8008d70 <TlInit+0x50>)
 8008d30:	f000 ff32 	bl	8009b98 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008d34:	2001      	movs	r0, #1
 8008d36:	f000 f825 	bl	8008d84 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <TlInit+0x54>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <TlInit+0x58>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00c      	beq.n	8008d62 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <TlInit+0x5c>)
 8008d4e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <TlInit+0x60>)
 8008d52:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008d54:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <TlInit+0x58>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f107 020c 	add.w	r2, r7, #12
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
  }

  return;
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
}
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000178 	.word	0x20000178
 8008d70:	2000016c 	.word	0x2000016c
 8008d74:	2000017c 	.word	0x2000017c
 8008d78:	20000444 	.word	0x20000444
 8008d7c:	08008dd5 	.word	0x08008dd5
 8008d80:	08008ded 	.word	0x08008ded

08008d84 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10b      	bne.n	8008dac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <Cmd_SetStatus+0x48>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <Cmd_SetStatus+0x48>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2000      	movs	r0, #0
 8008da2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008da4:	4b0a      	ldr	r3, [pc, #40]	; (8008dd0 <Cmd_SetStatus+0x4c>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008daa:	e00b      	b.n	8008dc4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008dac:	4b08      	ldr	r3, [pc, #32]	; (8008dd0 <Cmd_SetStatus+0x4c>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008db2:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <Cmd_SetStatus+0x48>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d004      	beq.n	8008dc4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008dba:	4b04      	ldr	r3, [pc, #16]	; (8008dcc <Cmd_SetStatus+0x48>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	4798      	blx	r3
  return;
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
}
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000464 	.word	0x20000464
 8008dd0:	20000174 	.word	0x20000174

08008dd4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f7f8 f8f0 	bl	8000fc2 <shci_cmd_resp_release>

  return;
 8008de2:	bf00      	nop
}
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4805      	ldr	r0, [pc, #20]	; (8008e0c <TlUserEvtReceived+0x20>)
 8008df8:	f000 ff26 	bl	8009c48 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008dfc:	4803      	ldr	r0, [pc, #12]	; (8008e0c <TlUserEvtReceived+0x20>)
 8008dfe:	f7f8 f8d4 	bl	8000faa <shci_notify_asynch_evt>

  return;
 8008e02:	bf00      	nop
}
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	2000016c 	.word	0x2000016c

08008e10 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a05      	ldr	r2, [pc, #20]	; (8008e30 <shci_register_io_bus+0x20>)
 8008e1c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a04      	ldr	r2, [pc, #16]	; (8008e34 <shci_register_io_bus+0x24>)
 8008e22:	611a      	str	r2, [r3, #16]

  return;
 8008e24:	bf00      	nop
}
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	080091e1 	.word	0x080091e1
 8008e34:	08009235 	.word	0x08009235

08008e38 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	af00      	add	r7, sp, #0
  return;
 8008e3c:	bf00      	nop
}
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008e46:	b480      	push	{r7}
 8008e48:	af00      	add	r7, sp, #0
  return;
 8008e4a:	bf00      	nop
}
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
  return;
 8008e58:	bf00      	nop
}
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008e62:	b480      	push	{r7}
 8008e64:	af00      	add	r7, sp, #0
  return;
 8008e66:	bf00      	nop
}
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
  return;
 8008e74:	bf00      	nop
}
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008e7e:	b480      	push	{r7}
 8008e80:	af00      	add	r7, sp, #0
  return;
 8008e82:	bf00      	nop
}
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
  return;
 8008e90:	bf00      	nop
}
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	af00      	add	r7, sp, #0
  return;
 8008e9e:	bf00      	nop
}
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  return;
 8008eac:	bf00      	nop
}
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	af00      	add	r7, sp, #0
  return;
 8008eba:	bf00      	nop
}
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
  return;
 8008ec8:	bf00      	nop
}
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	af00      	add	r7, sp, #0
  return;
 8008ed6:	bf00      	nop
}
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  return;
 8008ee4:	bf00      	nop
}
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008eee:	b480      	push	{r7}
 8008ef0:	af00      	add	r7, sp, #0
  return;
 8008ef2:	bf00      	nop
}
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return;
 8008f00:	bf00      	nop
}
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	af00      	add	r7, sp, #0
  return;
 8008f0e:	bf00      	nop
}
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  return;
 8008f1c:	bf00      	nop
}
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8008f26:	b480      	push	{r7}
 8008f28:	af00      	add	r7, sp, #0
  return;
 8008f2a:	bf00      	nop
}
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008f38:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <SVCCTL_Init+0x18>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008f3e:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <SVCCTL_Init+0x1c>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008f44:	f000 f806 	bl	8008f54 <SVCCTL_SvcInit>

  return;
 8008f48:	bf00      	nop
}
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	20000148 	.word	0x20000148
 8008f50:	20000168 	.word	0x20000168

08008f54 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  BAS_Init();
 8008f58:	f7ff ff6e 	bl	8008e38 <BAS_Init>

  BLS_Init();
 8008f5c:	f7ff ff73 	bl	8008e46 <BLS_Init>

  CRS_STM_Init();
 8008f60:	f7ff ff78 	bl	8008e54 <CRS_STM_Init>

  DIS_Init();
 8008f64:	f7ff ff7d 	bl	8008e62 <DIS_Init>

  EDS_STM_Init();
 8008f68:	f7ff ff82 	bl	8008e70 <EDS_STM_Init>

  HIDS_Init();
 8008f6c:	f7ff ff87 	bl	8008e7e <HIDS_Init>

  HRS_Init();
 8008f70:	f7ff ff8c 	bl	8008e8c <HRS_Init>

  HTS_Init();
 8008f74:	f7ff ff91 	bl	8008e9a <HTS_Init>

  IAS_Init();
 8008f78:	f7ff ff96 	bl	8008ea8 <IAS_Init>

  LLS_Init();
 8008f7c:	f7ff ff9b 	bl	8008eb6 <LLS_Init>

  TPS_Init();
 8008f80:	f7ff ffa0 	bl	8008ec4 <TPS_Init>

  MOTENV_STM_Init();
 8008f84:	f7ff ffa5 	bl	8008ed2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008f88:	f7ff ffaa 	bl	8008ee0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008f8c:	f7ff ffaf 	bl	8008eee <ZDD_STM_Init>

  OTAS_STM_Init();
 8008f90:	f7ff ffb4 	bl	8008efc <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008f94:	f7ff ffc0 	bl	8008f18 <BVOPUS_STM_Init>

  MESH_Init();
 8008f98:	f7ff ffb7 	bl	8008f0a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008f9c:	f7ff ffc3 	bl	8008f26 <SVCCTL_InitCustomSvc>
  
  return;
 8008fa0:	bf00      	nop
}
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2bff      	cmp	r3, #255	; 0xff
 8008fbc:	d125      	bne.n	800900a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fd2:	d118      	bne.n	8009006 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	757b      	strb	r3, [r7, #21]
 8008fd8:	e00d      	b.n	8008ff6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008fda:	7d7b      	ldrb	r3, [r7, #21]
 8008fdc:	4a1a      	ldr	r2, [pc, #104]	; (8009048 <SVCCTL_UserEvtRx+0xa4>)
 8008fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d108      	bne.n	8009002 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008ff0:	7d7b      	ldrb	r3, [r7, #21]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	757b      	strb	r3, [r7, #21]
 8008ff6:	4b14      	ldr	r3, [pc, #80]	; (8009048 <SVCCTL_UserEvtRx+0xa4>)
 8008ff8:	7f1b      	ldrb	r3, [r3, #28]
 8008ffa:	7d7a      	ldrb	r2, [r7, #21]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d3ec      	bcc.n	8008fda <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009000:	e002      	b.n	8009008 <SVCCTL_UserEvtRx+0x64>
              break;
 8009002:	bf00      	nop
          break;
 8009004:	e000      	b.n	8009008 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009006:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009008:	e000      	b.n	800900c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800900a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d00f      	beq.n	8009032 <SVCCTL_UserEvtRx+0x8e>
 8009012:	2b02      	cmp	r3, #2
 8009014:	dc10      	bgt.n	8009038 <SVCCTL_UserEvtRx+0x94>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <SVCCTL_UserEvtRx+0x7c>
 800901a:	2b01      	cmp	r3, #1
 800901c:	d006      	beq.n	800902c <SVCCTL_UserEvtRx+0x88>
 800901e:	e00b      	b.n	8009038 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7f9 fbbd 	bl	80027a0 <SVCCTL_App_Notification>
 8009026:	4603      	mov	r3, r0
 8009028:	75bb      	strb	r3, [r7, #22]
      break;
 800902a:	e008      	b.n	800903e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800902c:	2301      	movs	r3, #1
 800902e:	75bb      	strb	r3, [r7, #22]
      break;
 8009030:	e005      	b.n	800903e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009032:	2300      	movs	r3, #0
 8009034:	75bb      	strb	r3, [r7, #22]
      break;
 8009036:	e002      	b.n	800903e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009038:	2301      	movs	r3, #1
 800903a:	75bb      	strb	r3, [r7, #22]
      break;
 800903c:	bf00      	nop
  }

  return (return_status);
 800903e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20000148 	.word	0x20000148

0800904c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009050:	f7fa f872 	bl	8003138 <HW_IPCC_Enable>

  return;
 8009054:	bf00      	nop
}
 8009056:	bd80      	pop	{r7, pc}

08009058 <TL_Init>:


void TL_Init( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800905c:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <TL_Init+0x48>)
 800905e:	4a11      	ldr	r2, [pc, #68]	; (80090a4 <TL_Init+0x4c>)
 8009060:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009062:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <TL_Init+0x48>)
 8009064:	4a10      	ldr	r2, [pc, #64]	; (80090a8 <TL_Init+0x50>)
 8009066:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009068:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <TL_Init+0x48>)
 800906a:	4a10      	ldr	r2, [pc, #64]	; (80090ac <TL_Init+0x54>)
 800906c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800906e:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <TL_Init+0x48>)
 8009070:	4a0f      	ldr	r2, [pc, #60]	; (80090b0 <TL_Init+0x58>)
 8009072:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009074:	4b0a      	ldr	r3, [pc, #40]	; (80090a0 <TL_Init+0x48>)
 8009076:	4a0f      	ldr	r2, [pc, #60]	; (80090b4 <TL_Init+0x5c>)
 8009078:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800907a:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <TL_Init+0x48>)
 800907c:	4a0e      	ldr	r2, [pc, #56]	; (80090b8 <TL_Init+0x60>)
 800907e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <TL_Init+0x48>)
 8009082:	4a0e      	ldr	r2, [pc, #56]	; (80090bc <TL_Init+0x64>)
 8009084:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009086:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <TL_Init+0x48>)
 8009088:	4a0d      	ldr	r2, [pc, #52]	; (80090c0 <TL_Init+0x68>)
 800908a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800908c:	4b04      	ldr	r3, [pc, #16]	; (80090a0 <TL_Init+0x48>)
 800908e:	4a0d      	ldr	r2, [pc, #52]	; (80090c4 <TL_Init+0x6c>)
 8009090:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009092:	4b03      	ldr	r3, [pc, #12]	; (80090a0 <TL_Init+0x48>)
 8009094:	4a0c      	ldr	r2, [pc, #48]	; (80090c8 <TL_Init+0x70>)
 8009096:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009098:	f7fa f862 	bl	8003160 <HW_IPCC_Init>

  return;
 800909c:	bf00      	nop
}
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20030000 	.word	0x20030000
 80090a4:	20030134 	.word	0x20030134
 80090a8:	20030154 	.word	0x20030154
 80090ac:	20030164 	.word	0x20030164
 80090b0:	20030174 	.word	0x20030174
 80090b4:	2003017c 	.word	0x2003017c
 80090b8:	20030184 	.word	0x20030184
 80090bc:	2003018c 	.word	0x2003018c
 80090c0:	200301a8 	.word	0x200301a8
 80090c4:	200301ac 	.word	0x200301ac
 80090c8:	200301b8 	.word	0x200301b8

080090cc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80090d8:	4811      	ldr	r0, [pc, #68]	; (8009120 <TL_BLE_Init+0x54>)
 80090da:	f000 fd5d 	bl	8009b98 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80090de:	4b11      	ldr	r3, [pc, #68]	; (8009124 <TL_BLE_Init+0x58>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <TL_BLE_Init+0x5c>)
 80090f8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a08      	ldr	r2, [pc, #32]	; (8009120 <TL_BLE_Init+0x54>)
 80090fe:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009100:	f7fa f844 	bl	800318c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a08      	ldr	r2, [pc, #32]	; (800912c <TL_BLE_Init+0x60>)
 800910a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a07      	ldr	r2, [pc, #28]	; (8009130 <TL_BLE_Init+0x64>)
 8009112:	6013      	str	r3, [r2, #0]

  return 0;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	200301d4 	.word	0x200301d4
 8009124:	20030000 	.word	0x20030000
 8009128:	20030a58 	.word	0x20030a58
 800912c:	20000470 	.word	0x20000470
 8009130:	20000474 	.word	0x20000474

08009134 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009140:	4b09      	ldr	r3, [pc, #36]	; (8009168 <TL_BLE_SendCmd+0x34>)
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2201      	movs	r2, #1
 8009148:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800914a:	4b07      	ldr	r3, [pc, #28]	; (8009168 <TL_BLE_SendCmd+0x34>)
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4619      	mov	r1, r3
 8009152:	2001      	movs	r0, #1
 8009154:	f000 f96c 	bl	8009430 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009158:	f7fa f822 	bl	80031a0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20030000 	.word	0x20030000

0800916c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009172:	e01c      	b.n	80091ae <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009174:	1d3b      	adds	r3, r7, #4
 8009176:	4619      	mov	r1, r3
 8009178:	4812      	ldr	r0, [pc, #72]	; (80091c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800917a:	f000 fdac 	bl	8009cd6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	7a5b      	ldrb	r3, [r3, #9]
 8009182:	2b0f      	cmp	r3, #15
 8009184:	d003      	beq.n	800918e <HW_IPCC_BLE_RxEvtNot+0x22>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	7a5b      	ldrb	r3, [r3, #9]
 800918a:	2b0e      	cmp	r3, #14
 800918c:	d105      	bne.n	800919a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4619      	mov	r1, r3
 8009192:	2002      	movs	r0, #2
 8009194:	f000 f94c 	bl	8009430 <OutputDbgTrace>
 8009198:	e004      	b.n	80091a4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4619      	mov	r1, r3
 800919e:	2003      	movs	r0, #3
 80091a0:	f000 f946 	bl	8009430 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80091a4:	4b08      	ldr	r3, [pc, #32]	; (80091c8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	4610      	mov	r0, r2
 80091ac:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80091ae:	4805      	ldr	r0, [pc, #20]	; (80091c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80091b0:	f000 fd02 	bl	8009bb8 <LST_is_empty>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0dc      	beq.n	8009174 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80091ba:	bf00      	nop
}
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200301d4 	.word	0x200301d4
 80091c8:	20000470 	.word	0x20000470

080091cc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4798      	blx	r3

  return;
 80091d6:	bf00      	nop
}
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	20000474 	.word	0x20000474

080091e0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80091ec:	480d      	ldr	r0, [pc, #52]	; (8009224 <TL_SYS_Init+0x44>)
 80091ee:	f000 fcd3 	bl	8009b98 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80091f2:	4b0d      	ldr	r3, [pc, #52]	; (8009228 <TL_SYS_Init+0x48>)
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4a08      	ldr	r2, [pc, #32]	; (8009224 <TL_SYS_Init+0x44>)
 8009204:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009206:	f7f9 ffed 	bl	80031e4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a07      	ldr	r2, [pc, #28]	; (800922c <TL_SYS_Init+0x4c>)
 8009210:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	4a06      	ldr	r2, [pc, #24]	; (8009230 <TL_SYS_Init+0x50>)
 8009218:	6013      	str	r3, [r2, #0]

  return 0;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200301dc 	.word	0x200301dc
 8009228:	20030000 	.word	0x20030000
 800922c:	20000478 	.word	0x20000478
 8009230:	2000047c 	.word	0x2000047c

08009234 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009240:	4b09      	ldr	r3, [pc, #36]	; (8009268 <TL_SYS_SendCmd+0x34>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2210      	movs	r2, #16
 8009248:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <TL_SYS_SendCmd+0x34>)
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4619      	mov	r1, r3
 8009252:	2004      	movs	r0, #4
 8009254:	f000 f8ec 	bl	8009430 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009258:	f7f9 ffce 	bl	80031f8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20030000 	.word	0x20030000

0800926c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4619      	mov	r1, r3
 8009278:	2005      	movs	r0, #5
 800927a:	f000 f8d9 	bl	8009430 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800927e:	4b05      	ldr	r3, [pc, #20]	; (8009294 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a03      	ldr	r2, [pc, #12]	; (8009290 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009284:	68d2      	ldr	r2, [r2, #12]
 8009286:	6812      	ldr	r2, [r2, #0]
 8009288:	4610      	mov	r0, r2
 800928a:	4798      	blx	r3

  return;
 800928c:	bf00      	nop
}
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20030000 	.word	0x20030000
 8009294:	20000478 	.word	0x20000478

08009298 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800929e:	e00e      	b.n	80092be <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80092a0:	1d3b      	adds	r3, r7, #4
 80092a2:	4619      	mov	r1, r3
 80092a4:	480b      	ldr	r0, [pc, #44]	; (80092d4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80092a6:	f000 fd16 	bl	8009cd6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4619      	mov	r1, r3
 80092ae:	2006      	movs	r0, #6
 80092b0:	f000 f8be 	bl	8009430 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80092b4:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <HW_IPCC_SYS_EvtNot+0x40>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	4610      	mov	r0, r2
 80092bc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80092be:	4805      	ldr	r0, [pc, #20]	; (80092d4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80092c0:	f000 fc7a 	bl	8009bb8 <LST_is_empty>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0ea      	beq.n	80092a0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80092ca:	bf00      	nop
}
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200301dc 	.word	0x200301dc
 80092d8:	2000047c 	.word	0x2000047c

080092dc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80092e4:	4817      	ldr	r0, [pc, #92]	; (8009344 <TL_MM_Init+0x68>)
 80092e6:	f000 fc57 	bl	8009b98 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80092ea:	4817      	ldr	r0, [pc, #92]	; (8009348 <TL_MM_Init+0x6c>)
 80092ec:	f000 fc54 	bl	8009b98 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80092f0:	4b16      	ldr	r3, [pc, #88]	; (800934c <TL_MM_Init+0x70>)
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	4a16      	ldr	r2, [pc, #88]	; (8009350 <TL_MM_Init+0x74>)
 80092f6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80092f8:	4b15      	ldr	r3, [pc, #84]	; (8009350 <TL_MM_Init+0x74>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6892      	ldr	r2, [r2, #8]
 8009300:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <TL_MM_Init+0x74>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	68d2      	ldr	r2, [r2, #12]
 800930a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800930c:	4b10      	ldr	r3, [pc, #64]	; (8009350 <TL_MM_Init+0x74>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a0c      	ldr	r2, [pc, #48]	; (8009344 <TL_MM_Init+0x68>)
 8009312:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009314:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <TL_MM_Init+0x74>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6812      	ldr	r2, [r2, #0]
 800931c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800931e:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <TL_MM_Init+0x74>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6852      	ldr	r2, [r2, #4]
 8009326:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009328:	4b09      	ldr	r3, [pc, #36]	; (8009350 <TL_MM_Init+0x74>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6912      	ldr	r2, [r2, #16]
 8009330:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009332:	4b07      	ldr	r3, [pc, #28]	; (8009350 <TL_MM_Init+0x74>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6952      	ldr	r2, [r2, #20]
 800933a:	619a      	str	r2, [r3, #24]

  return;
 800933c:	bf00      	nop
}
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200301c4 	.word	0x200301c4
 8009348:	20000468 	.word	0x20000468
 800934c:	20030000 	.word	0x20030000
 8009350:	20000480 	.word	0x20000480

08009354 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	4807      	ldr	r0, [pc, #28]	; (800937c <TL_MM_EvtDone+0x28>)
 8009360:	f000 fc72 	bl	8009c48 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	2000      	movs	r0, #0
 8009368:	f000 f862 	bl	8009430 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800936c:	4804      	ldr	r0, [pc, #16]	; (8009380 <TL_MM_EvtDone+0x2c>)
 800936e:	f7f9 ff69 	bl	8003244 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009372:	bf00      	nop
}
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000468 	.word	0x20000468
 8009380:	08009385 	.word	0x08009385

08009384 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800938a:	e00c      	b.n	80093a6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800938c:	1d3b      	adds	r3, r7, #4
 800938e:	4619      	mov	r1, r3
 8009390:	480a      	ldr	r0, [pc, #40]	; (80093bc <SendFreeBuf+0x38>)
 8009392:	f000 fca0 	bl	8009cd6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009396:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <SendFreeBuf+0x3c>)
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 fc51 	bl	8009c48 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80093a6:	4805      	ldr	r0, [pc, #20]	; (80093bc <SendFreeBuf+0x38>)
 80093a8:	f000 fc06 	bl	8009bb8 <LST_is_empty>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0ec      	beq.n	800938c <SendFreeBuf+0x8>
  }

  return;
 80093b2:	bf00      	nop
}
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000468 	.word	0x20000468
 80093c0:	20030000 	.word	0x20030000

080093c4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80093c8:	4805      	ldr	r0, [pc, #20]	; (80093e0 <TL_TRACES_Init+0x1c>)
 80093ca:	f000 fbe5 	bl	8009b98 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <TL_TRACES_Init+0x20>)
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	4a03      	ldr	r2, [pc, #12]	; (80093e0 <TL_TRACES_Init+0x1c>)
 80093d4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80093d6:	f7f9 ff6b 	bl	80032b0 <HW_IPCC_TRACES_Init>

  return;
 80093da:	bf00      	nop
}
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200301cc 	.word	0x200301cc
 80093e4:	20030000 	.word	0x20030000

080093e8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80093ee:	e008      	b.n	8009402 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80093f0:	1d3b      	adds	r3, r7, #4
 80093f2:	4619      	mov	r1, r3
 80093f4:	4808      	ldr	r0, [pc, #32]	; (8009418 <HW_IPCC_TRACES_EvtNot+0x30>)
 80093f6:	f000 fc6e 	bl	8009cd6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 f80d 	bl	800941c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009402:	4805      	ldr	r0, [pc, #20]	; (8009418 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009404:	f000 fbd8 	bl	8009bb8 <LST_is_empty>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800940e:	bf00      	nop
}
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200301cc 	.word	0x200301cc

0800941c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800943c:	79fb      	ldrb	r3, [r7, #7]
 800943e:	2b06      	cmp	r3, #6
 8009440:	d845      	bhi.n	80094ce <OutputDbgTrace+0x9e>
 8009442:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <OutputDbgTrace+0x18>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009465 	.word	0x08009465
 800944c:	08009489 	.word	0x08009489
 8009450:	0800948f 	.word	0x0800948f
 8009454:	080094a3 	.word	0x080094a3
 8009458:	080094af 	.word	0x080094af
 800945c:	080094b5 	.word	0x080094b5
 8009460:	080094c3 	.word	0x080094c3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	7a5b      	ldrb	r3, [r3, #9]
 800946c:	2bff      	cmp	r3, #255	; 0xff
 800946e:	d005      	beq.n	800947c <OutputDbgTrace+0x4c>
 8009470:	2bff      	cmp	r3, #255	; 0xff
 8009472:	dc05      	bgt.n	8009480 <OutputDbgTrace+0x50>
 8009474:	2b0e      	cmp	r3, #14
 8009476:	d005      	beq.n	8009484 <OutputDbgTrace+0x54>
 8009478:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800947a:	e001      	b.n	8009480 <OutputDbgTrace+0x50>
          break;
 800947c:	bf00      	nop
 800947e:	e027      	b.n	80094d0 <OutputDbgTrace+0xa0>
          break;
 8009480:	bf00      	nop
 8009482:	e025      	b.n	80094d0 <OutputDbgTrace+0xa0>
          break;
 8009484:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009486:	e023      	b.n	80094d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800948c:	e020      	b.n	80094d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	7a5b      	ldrb	r3, [r3, #9]
 8009496:	2b0e      	cmp	r3, #14
 8009498:	d001      	beq.n	800949e <OutputDbgTrace+0x6e>
 800949a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800949c:	e000      	b.n	80094a0 <OutputDbgTrace+0x70>
          break;
 800949e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80094a0:	e016      	b.n	80094d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	7a5b      	ldrb	r3, [r3, #9]
 80094aa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80094ac:	e010      	b.n	80094d0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80094b2:	e00d      	b.n	80094d0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	7a5b      	ldrb	r3, [r3, #9]
 80094bc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80094be:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80094c0:	e006      	b.n	80094d0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	7a5b      	ldrb	r3, [r3, #9]
 80094ca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80094cc:	e000      	b.n	80094d0 <OutputDbgTrace+0xa0>

    default:
      break;
 80094ce:	bf00      	nop
  }

  return;
 80094d0:	bf00      	nop
}
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e2:	f3ef 8310 	mrs	r3, PRIMASK
 80094e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80094e8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80094ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ec:	b672      	cpsid	i
}
 80094ee:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80094f0:	1cbb      	adds	r3, r7, #2
 80094f2:	4619      	mov	r1, r3
 80094f4:	4812      	ldr	r0, [pc, #72]	; (8009540 <DbgTrace_TxCpltCallback+0x64>)
 80094f6:	f000 fe66 	bl	800a1c6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80094fa:	1cbb      	adds	r3, r7, #2
 80094fc:	4619      	mov	r1, r3
 80094fe:	4810      	ldr	r0, [pc, #64]	; (8009540 <DbgTrace_TxCpltCallback+0x64>)
 8009500:	f000 ff52 	bl	800a3a8 <CircularQueue_Sense>
 8009504:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00c      	beq.n	8009526 <DbgTrace_TxCpltCallback+0x4a>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f383 8810 	msr	PRIMASK, r3
}
 8009516:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009518:	887b      	ldrh	r3, [r7, #2]
 800951a:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <DbgTrace_TxCpltCallback+0x68>)
 800951c:	4619      	mov	r1, r3
 800951e:	6938      	ldr	r0, [r7, #16]
 8009520:	f7f7 f969 	bl	80007f6 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009524:	e008      	b.n	8009538 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009526:	4b08      	ldr	r3, [pc, #32]	; (8009548 <DbgTrace_TxCpltCallback+0x6c>)
 8009528:	2201      	movs	r2, #1
 800952a:	701a      	strb	r2, [r3, #0]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f383 8810 	msr	PRIMASK, r3
}
 8009536:	bf00      	nop
}
 8009538:	bf00      	nop
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000484 	.word	0x20000484
 8009544:	080094dd 	.word	0x080094dd
 8009548:	20000029 	.word	0x20000029

0800954c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009552:	f7f7 f94a 	bl	80007ea <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009556:	2302      	movs	r3, #2
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	2300      	movs	r3, #0
 800955c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009560:	4903      	ldr	r1, [pc, #12]	; (8009570 <DbgTraceInit+0x24>)
 8009562:	4804      	ldr	r0, [pc, #16]	; (8009574 <DbgTraceInit+0x28>)
 8009564:	f000 fbd6 	bl	8009d14 <CircularQueue_Init>
#endif 
#endif
  return;
 8009568:	bf00      	nop
}
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200004a4 	.word	0x200004a4
 8009574:	20000484 	.word	0x20000484

08009578 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 f805 	bl	8009598 <DbgTraceWrite>
 800958e:	4603      	mov	r3, r0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08a      	sub	sp, #40	; 0x28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a8:	f3ef 8310 	mrs	r3, PRIMASK
 80095ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80095ae:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80095b0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b8:	d102      	bne.n	80095c0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
 80095be:	e037      	b.n	8009630 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d006      	beq.n	80095d4 <DbgTraceWrite+0x3c>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d003      	beq.n	80095d4 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
 80095d2:	e02d      	b.n	8009630 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d02a      	beq.n	8009630 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80095de:	b672      	cpsid	i
}
 80095e0:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	2301      	movs	r3, #1
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	4814      	ldr	r0, [pc, #80]	; (800963c <DbgTraceWrite+0xa4>)
 80095ec:	f000 fbc4 	bl	8009d78 <CircularQueue_Add>
 80095f0:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d015      	beq.n	8009624 <DbgTraceWrite+0x8c>
 80095f8:	4b11      	ldr	r3, [pc, #68]	; (8009640 <DbgTraceWrite+0xa8>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d010      	beq.n	8009624 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009602:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <DbgTraceWrite+0xa8>)
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f383 8810 	msr	PRIMASK, r3
}
 8009612:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	b29b      	uxth	r3, r3
 8009618:	4a0a      	ldr	r2, [pc, #40]	; (8009644 <DbgTraceWrite+0xac>)
 800961a:	4619      	mov	r1, r3
 800961c:	69f8      	ldr	r0, [r7, #28]
 800961e:	f7f7 f8ea 	bl	80007f6 <DbgOutputTraces>
 8009622:	e005      	b.n	8009630 <DbgTraceWrite+0x98>
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f383 8810 	msr	PRIMASK, r3
}
 800962e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009632:	4618      	mov	r0, r3
 8009634:	3728      	adds	r7, #40	; 0x28
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000484 	.word	0x20000484
 8009640:	20000029 	.word	0x20000029
 8009644:	080094dd 	.word	0x080094dd

08009648 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009652:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <OTP_Read+0x48>)
 8009654:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009656:	e002      	b.n	800965e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3b08      	subs	r3, #8
 800965c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3307      	adds	r3, #7
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	79fa      	ldrb	r2, [r7, #7]
 8009666:	429a      	cmp	r2, r3
 8009668:	d003      	beq.n	8009672 <OTP_Read+0x2a>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4a09      	ldr	r2, [pc, #36]	; (8009694 <OTP_Read+0x4c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d1f2      	bne.n	8009658 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3307      	adds	r3, #7
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	79fa      	ldrb	r2, [r7, #7]
 800967a:	429a      	cmp	r2, r3
 800967c:	d001      	beq.n	8009682 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800967e:	2300      	movs	r3, #0
 8009680:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009682:	68fb      	ldr	r3, [r7, #12]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	1fff73f8 	.word	0x1fff73f8
 8009694:	1fff7000 	.word	0x1fff7000

08009698 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <UTIL_LPM_Init+0x1c>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80096a2:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <UTIL_LPM_Init+0x20>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80096a8:	bf00      	nop
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	200014a4 	.word	0x200014a4
 80096b8:	200014a8 	.word	0x200014a8

080096bc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096c8:	f3ef 8310 	mrs	r3, PRIMASK
 80096cc:	613b      	str	r3, [r7, #16]
  return(result);
 80096ce:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80096d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096d2:	b672      	cpsid	i
}
 80096d4:	bf00      	nop
  
  switch(state)
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d008      	beq.n	80096ee <UTIL_LPM_SetOffMode+0x32>
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d10e      	bne.n	80096fe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80096e0:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <UTIL_LPM_SetOffMode+0x5c>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	4a0b      	ldr	r2, [pc, #44]	; (8009718 <UTIL_LPM_SetOffMode+0x5c>)
 80096ea:	6013      	str	r3, [r2, #0]
      break;
 80096ec:	e008      	b.n	8009700 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	43da      	mvns	r2, r3
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <UTIL_LPM_SetOffMode+0x5c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4013      	ands	r3, r2
 80096f8:	4a07      	ldr	r2, [pc, #28]	; (8009718 <UTIL_LPM_SetOffMode+0x5c>)
 80096fa:	6013      	str	r3, [r2, #0]
      break;
 80096fc:	e000      	b.n	8009700 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80096fe:	bf00      	nop
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f383 8810 	msr	PRIMASK, r3
}
 800970a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800970c:	bf00      	nop
 800970e:	371c      	adds	r7, #28
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	200014a8 	.word	0x200014a8

0800971c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b090      	sub	sp, #64	; 0x40
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009724:	4b73      	ldr	r3, [pc, #460]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800972a:	4b72      	ldr	r3, [pc, #456]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4013      	ands	r3, r2
 8009732:	4a70      	ldr	r2, [pc, #448]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 8009734:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009736:	4b70      	ldr	r3, [pc, #448]	; (80098f8 <UTIL_SEQ_Run+0x1dc>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800973c:	4b6f      	ldr	r3, [pc, #444]	; (80098fc <UTIL_SEQ_Run+0x1e0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009742:	4b6f      	ldr	r3, [pc, #444]	; (8009900 <UTIL_SEQ_Run+0x1e4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009748:	4b6e      	ldr	r3, [pc, #440]	; (8009904 <UTIL_SEQ_Run+0x1e8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800974e:	e08d      	b.n	800986c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009754:	e002      	b.n	800975c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009758:	3301      	adds	r3, #1
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800975c:	4a6a      	ldr	r2, [pc, #424]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 800975e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009760:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	401a      	ands	r2, r3
 8009768:	4b62      	ldr	r3, [pc, #392]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4013      	ands	r3, r2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0f1      	beq.n	8009756 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009772:	4a65      	ldr	r2, [pc, #404]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 8009774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009776:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	401a      	ands	r2, r3
 800977e:	4b5d      	ldr	r3, [pc, #372]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4013      	ands	r3, r2
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009786:	4a60      	ldr	r2, [pc, #384]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 8009788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	4413      	add	r3, r2
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	4013      	ands	r3, r2
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009798:	4a5b      	ldr	r2, [pc, #364]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 800979a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	4413      	add	r3, r2
 80097a0:	f04f 32ff 	mov.w	r2, #4294967295
 80097a4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80097a6:	4a58      	ldr	r2, [pc, #352]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 80097a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	4413      	add	r3, r2
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	4013      	ands	r3, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f9b3 	bl	8009b20 <SEQ_BitPosition>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	4b53      	ldr	r3, [pc, #332]	; (800990c <UTIL_SEQ_Run+0x1f0>)
 80097c0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80097c2:	4a51      	ldr	r2, [pc, #324]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 80097c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	4413      	add	r3, r2
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	4b4f      	ldr	r3, [pc, #316]	; (800990c <UTIL_SEQ_Run+0x1f0>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2101      	movs	r1, #1
 80097d2:	fa01 f303 	lsl.w	r3, r1, r3
 80097d6:	43db      	mvns	r3, r3
 80097d8:	401a      	ands	r2, r3
 80097da:	494b      	ldr	r1, [pc, #300]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 80097dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	440b      	add	r3, r1
 80097e2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e4:	f3ef 8310 	mrs	r3, PRIMASK
 80097e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80097ea:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80097ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80097ee:	b672      	cpsid	i
}
 80097f0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80097f2:	4b46      	ldr	r3, [pc, #280]	; (800990c <UTIL_SEQ_Run+0x1f0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2201      	movs	r2, #1
 80097f8:	fa02 f303 	lsl.w	r3, r2, r3
 80097fc:	43da      	mvns	r2, r3
 80097fe:	4b3e      	ldr	r3, [pc, #248]	; (80098f8 <UTIL_SEQ_Run+0x1dc>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4013      	ands	r3, r2
 8009804:	4a3c      	ldr	r2, [pc, #240]	; (80098f8 <UTIL_SEQ_Run+0x1dc>)
 8009806:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009808:	2302      	movs	r3, #2
 800980a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800980c:	e013      	b.n	8009836 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800980e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009810:	3b01      	subs	r3, #1
 8009812:	4a3d      	ldr	r2, [pc, #244]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 8009814:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009818:	4b3c      	ldr	r3, [pc, #240]	; (800990c <UTIL_SEQ_Run+0x1f0>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2201      	movs	r2, #1
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	43da      	mvns	r2, r3
 8009824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009826:	3b01      	subs	r3, #1
 8009828:	400a      	ands	r2, r1
 800982a:	4937      	ldr	r1, [pc, #220]	; (8009908 <UTIL_SEQ_Run+0x1ec>)
 800982c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009832:	3b01      	subs	r3, #1
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e8      	bne.n	800980e <UTIL_SEQ_Run+0xf2>
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f383 8810 	msr	PRIMASK, r3
}
 8009846:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009848:	4b30      	ldr	r3, [pc, #192]	; (800990c <UTIL_SEQ_Run+0x1f0>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a30      	ldr	r2, [pc, #192]	; (8009910 <UTIL_SEQ_Run+0x1f4>)
 800984e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009852:	4798      	blx	r3
    local_taskset = TaskSet;
 8009854:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <UTIL_SEQ_Run+0x1dc>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800985a:	4b28      	ldr	r3, [pc, #160]	; (80098fc <UTIL_SEQ_Run+0x1e0>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009860:	4b27      	ldr	r3, [pc, #156]	; (8009900 <UTIL_SEQ_Run+0x1e4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009866:	4b27      	ldr	r3, [pc, #156]	; (8009904 <UTIL_SEQ_Run+0x1e8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800986c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	401a      	ands	r2, r3
 8009872:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <UTIL_SEQ_Run+0x16c>
 800987c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009880:	4013      	ands	r3, r2
 8009882:	2b00      	cmp	r3, #0
 8009884:	f43f af64 	beq.w	8009750 <UTIL_SEQ_Run+0x34>
  }
  //HAL_Delay(200);
  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009888:	4b20      	ldr	r3, [pc, #128]	; (800990c <UTIL_SEQ_Run+0x1f0>)
 800988a:	f04f 32ff 	mov.w	r2, #4294967295
 800988e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009890:	f000 f938 	bl	8009b04 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009894:	f3ef 8310 	mrs	r3, PRIMASK
 8009898:	613b      	str	r3, [r7, #16]
  return(result);
 800989a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800989c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800989e:	b672      	cpsid	i
}
 80098a0:	bf00      	nop
  local_taskset = TaskSet;
 80098a2:	4b15      	ldr	r3, [pc, #84]	; (80098f8 <UTIL_SEQ_Run+0x1dc>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80098a8:	4b14      	ldr	r3, [pc, #80]	; (80098fc <UTIL_SEQ_Run+0x1e0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80098ae:	4b14      	ldr	r3, [pc, #80]	; (8009900 <UTIL_SEQ_Run+0x1e4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80098b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	401a      	ands	r2, r3
 80098ba:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4013      	ands	r3, r2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d107      	bne.n	80098d4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80098c4:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <UTIL_SEQ_Run+0x1e8>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80098d0:	f7f7 fb57 	bl	8000f82 <UTIL_SEQ_Idle>
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f383 8810 	msr	PRIMASK, r3
}
 80098de:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80098e0:	f000 f917 	bl	8009b12 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80098e4:	4a03      	ldr	r2, [pc, #12]	; (80098f4 <UTIL_SEQ_Run+0x1d8>)
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	6013      	str	r3, [r2, #0]

  return;
 80098ea:	bf00      	nop
}
 80098ec:	3740      	adds	r7, #64	; 0x40
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20000030 	.word	0x20000030
 80098f8:	200014ac 	.word	0x200014ac
 80098fc:	200014b0 	.word	0x200014b0
 8009900:	2000002c 	.word	0x2000002c
 8009904:	200014b4 	.word	0x200014b4
 8009908:	2000153c 	.word	0x2000153c
 800990c:	200014b8 	.word	0x200014b8
 8009910:	200014bc 	.word	0x200014bc

08009914 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009920:	f3ef 8310 	mrs	r3, PRIMASK
 8009924:	617b      	str	r3, [r7, #20]
  return(result);
 8009926:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800992a:	b672      	cpsid	i
}
 800992c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 f8f6 	bl	8009b20 <SEQ_BitPosition>
 8009934:	4603      	mov	r3, r0
 8009936:	4619      	mov	r1, r3
 8009938:	4a06      	ldr	r2, [pc, #24]	; (8009954 <UTIL_SEQ_RegTask+0x40>)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	f383 8810 	msr	PRIMASK, r3
}
 800994a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800994c:	bf00      	nop
}
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	200014bc 	.word	0x200014bc

08009958 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009962:	f3ef 8310 	mrs	r3, PRIMASK
 8009966:	60fb      	str	r3, [r7, #12]
  return(result);
 8009968:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800996a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800996c:	b672      	cpsid	i
}
 800996e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009970:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <UTIL_SEQ_SetTask+0x50>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4313      	orrs	r3, r2
 8009978:	4a0b      	ldr	r2, [pc, #44]	; (80099a8 <UTIL_SEQ_SetTask+0x50>)
 800997a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800997c:	4a0b      	ldr	r2, [pc, #44]	; (80099ac <UTIL_SEQ_SetTask+0x54>)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	431a      	orrs	r2, r3
 8009988:	4908      	ldr	r1, [pc, #32]	; (80099ac <UTIL_SEQ_SetTask+0x54>)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f383 8810 	msr	PRIMASK, r3
}
 800999a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800999c:	bf00      	nop
}
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	200014ac 	.word	0x200014ac
 80099ac:	2000153c 	.word	0x2000153c

080099b0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099b8:	f3ef 8310 	mrs	r3, PRIMASK
 80099bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80099be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80099c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099c2:	b672      	cpsid	i
}
 80099c4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	43da      	mvns	r2, r3
 80099ca:	4b08      	ldr	r3, [pc, #32]	; (80099ec <UTIL_SEQ_PauseTask+0x3c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4013      	ands	r3, r2
 80099d0:	4a06      	ldr	r2, [pc, #24]	; (80099ec <UTIL_SEQ_PauseTask+0x3c>)
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f383 8810 	msr	PRIMASK, r3
}
 80099de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80099e0:	bf00      	nop
}
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	2000002c 	.word	0x2000002c

080099f0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f8:	f3ef 8310 	mrs	r3, PRIMASK
 80099fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80099fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a02:	b672      	cpsid	i
}
 8009a04:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <UTIL_SEQ_ResumeTask+0x3c>)
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	4a07      	ldr	r2, [pc, #28]	; (8009a2c <UTIL_SEQ_ResumeTask+0x3c>)
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f383 8810 	msr	PRIMASK, r3
}
 8009a1c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009a1e:	bf00      	nop
}
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	2000002c 	.word	0x2000002c

08009a30 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a38:	f3ef 8310 	mrs	r3, PRIMASK
 8009a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009a40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a42:	b672      	cpsid	i
}
 8009a44:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <UTIL_SEQ_SetEvt+0x3c>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	4a07      	ldr	r2, [pc, #28]	; (8009a6c <UTIL_SEQ_SetEvt+0x3c>)
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f383 8810 	msr	PRIMASK, r3
}
 8009a5c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009a5e:	bf00      	nop
}
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	200014b0 	.word	0x200014b0

08009a70 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009a78:	4b1f      	ldr	r3, [pc, #124]	; (8009af8 <UTIL_SEQ_WaitEvt+0x88>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009a7e:	4b1e      	ldr	r3, [pc, #120]	; (8009af8 <UTIL_SEQ_WaitEvt+0x88>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a86:	d102      	bne.n	8009a8e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61fb      	str	r3, [r7, #28]
 8009a8c:	e005      	b.n	8009a9a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009a8e:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <UTIL_SEQ_WaitEvt+0x88>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2201      	movs	r2, #1
 8009a94:	fa02 f303 	lsl.w	r3, r2, r3
 8009a98:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009a9a:	4b18      	ldr	r3, [pc, #96]	; (8009afc <UTIL_SEQ_WaitEvt+0x8c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009aa0:	4a16      	ldr	r2, [pc, #88]	; (8009afc <UTIL_SEQ_WaitEvt+0x8c>)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009aa6:	e003      	b.n	8009ab0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	69f8      	ldr	r0, [r7, #28]
 8009aac:	f7f7 fa70 	bl	8000f90 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009ab0:	4b13      	ldr	r3, [pc, #76]	; (8009b00 <UTIL_SEQ_WaitEvt+0x90>)
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0f5      	beq.n	8009aa8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009abc:	4a0e      	ldr	r2, [pc, #56]	; (8009af8 <UTIL_SEQ_WaitEvt+0x88>)
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ac8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009acc:	b672      	cpsid	i
}
 8009ace:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	43da      	mvns	r2, r3
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <UTIL_SEQ_WaitEvt+0x90>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	4a09      	ldr	r2, [pc, #36]	; (8009b00 <UTIL_SEQ_WaitEvt+0x90>)
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f383 8810 	msr	PRIMASK, r3
}
 8009ae8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009aea:	4a04      	ldr	r2, [pc, #16]	; (8009afc <UTIL_SEQ_WaitEvt+0x8c>)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	6013      	str	r3, [r2, #0]
  return;
 8009af0:	bf00      	nop
}
 8009af2:	3720      	adds	r7, #32
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	200014b8 	.word	0x200014b8
 8009afc:	200014b4 	.word	0x200014b4
 8009b00:	200014b0 	.word	0x200014b0

08009b04 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009b08:	bf00      	nop
}
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009b12:	b480      	push	{r7}
 8009b14:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009b16:	bf00      	nop
}
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	0c1b      	lsrs	r3, r3, #16
 8009b34:	041b      	lsls	r3, r3, #16
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <SEQ_BitPosition+0x24>
 8009b3a:	2310      	movs	r3, #16
 8009b3c:	73fb      	strb	r3, [r7, #15]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d105      	bne.n	8009b5a <SEQ_BitPosition+0x3a>
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	3308      	adds	r3, #8
 8009b52:	73fb      	strb	r3, [r7, #15]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d105      	bne.n	8009b70 <SEQ_BitPosition+0x50>
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	3304      	adds	r3, #4
 8009b68:	73fb      	strb	r3, [r7, #15]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	011b      	lsls	r3, r3, #4
 8009b6e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	0f1b      	lsrs	r3, r3, #28
 8009b74:	4a07      	ldr	r2, [pc, #28]	; (8009b94 <SEQ_BitPosition+0x74>)
 8009b76:	5cd2      	ldrb	r2, [r2, r3]
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	f1c3 031f 	rsb	r3, r3, #31
 8009b84:	b2db      	uxtb	r3, r3
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	0800c0a4 	.word	0x0800c0a4

08009b98 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	605a      	str	r2, [r3, #4]
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bca:	b672      	cpsid	i
}
 8009bcc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d102      	bne.n	8009bde <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	75fb      	strb	r3, [r7, #23]
 8009bdc:	e001      	b.n	8009be2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	75fb      	strb	r3, [r7, #23]
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	f383 8810 	msr	PRIMASK, r3
}
 8009bec:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c06:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c10:	b672      	cpsid	i
}
 8009c12:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	605a      	str	r2, [r3, #4]
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f383 8810 	msr	PRIMASK, r3
}
 8009c3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009c3c:	bf00      	nop
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c52:	f3ef 8310 	mrs	r3, PRIMASK
 8009c56:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c58:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c5c:	b672      	cpsid	i
}
 8009c5e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f383 8810 	msr	PRIMASK, r3
}
 8009c86:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009c88:	bf00      	nop
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ca6:	b672      	cpsid	i
}
 8009ca8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	6852      	ldr	r2, [r2, #4]
 8009cbc:	605a      	str	r2, [r3, #4]
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f383 8810 	msr	PRIMASK, r3
}
 8009cc8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009cca:	bf00      	nop
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b086      	sub	sp, #24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ce8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cea:	b672      	cpsid	i
}
 8009cec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff ffca 	bl	8009c94 <LST_remove_node>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f383 8810 	msr	PRIMASK, r3
}
 8009d0a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d0c:	bf00      	nop
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	887a      	ldrh	r2, [r7, #2]
 8009d4a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	7e3a      	ldrb	r2, [r7, #24]
 8009d50:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009d52:	7e3b      	ldrb	r3, [r7, #24]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d006      	beq.n	8009d6a <CircularQueue_Init+0x56>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	891b      	ldrh	r3, [r3, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	e000      	b.n	8009d6c <CircularQueue_Init+0x58>
  }
  return 0;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08e      	sub	sp, #56	; 0x38
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009d88:	2300      	movs	r3, #0
 8009d8a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009d90:	2300      	movs	r3, #0
 8009d92:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009d94:	2300      	movs	r3, #0
 8009d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d98:	2300      	movs	r3, #0
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009da0:	2300      	movs	r3, #0
 8009da2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	891b      	ldrh	r3, [r3, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <CircularQueue_Add+0x38>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e000      	b.n	8009db2 <CircularQueue_Add+0x3a>
 8009db0:	2300      	movs	r3, #0
 8009db2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d02a      	beq.n	8009e12 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	891b      	ldrh	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d123      	bne.n	8009e0c <CircularQueue_Add+0x94>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6819      	ldr	r1, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	1c58      	adds	r0, r3, #1
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4298      	cmp	r0, r3
 8009de2:	d306      	bcc.n	8009df2 <CircularQueue_Add+0x7a>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6918      	ldr	r0, [r3, #16]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	1ac3      	subs	r3, r0, r3
 8009dee:	3301      	adds	r3, #1
 8009df0:	e002      	b.n	8009df8 <CircularQueue_Add+0x80>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	3301      	adds	r3, #1
 8009df8:	440b      	add	r3, r1
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	4413      	add	r3, r2
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3302      	adds	r3, #2
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	e001      	b.n	8009e10 <CircularQueue_Add+0x98>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	891b      	ldrh	r3, [r3, #8]
 8009e10:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	891b      	ldrh	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	891b      	ldrh	r3, [r3, #8]
 8009e1e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d307      	bcc.n	8009e3c <CircularQueue_Add+0xc4>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6919      	ldr	r1, [r3, #16]
 8009e34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e36:	440b      	add	r3, r1
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	e000      	b.n	8009e3e <CircularQueue_Add+0xc6>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009e40:	88fa      	ldrh	r2, [r7, #6]
 8009e42:	7ffb      	ldrb	r3, [r7, #31]
 8009e44:	4413      	add	r3, r2
 8009e46:	461a      	mov	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	fb02 f303 	mul.w	r3, r2, r3
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d80b      	bhi.n	8009e6c <CircularQueue_Add+0xf4>
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	7ffb      	ldrb	r3, [r7, #31]
 8009e58:	4413      	add	r3, r2
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e62:	fb01 f202 	mul.w	r2, r1, r2
 8009e66:	1a9b      	subs	r3, r3, r2
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	e000      	b.n	8009e6e <CircularQueue_Add+0xf6>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009e70:	7dfa      	ldrb	r2, [r7, #23]
 8009e72:	7ffb      	ldrb	r3, [r7, #31]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	bf8c      	ite	hi
 8009e78:	2301      	movhi	r3, #1
 8009e7a:	2300      	movls	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009e80:	7fbb      	ldrb	r3, [r7, #30]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <CircularQueue_Add+0x120>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7f1b      	ldrb	r3, [r3, #28]
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <CircularQueue_Add+0x120>
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	e000      	b.n	8009e9a <CircularQueue_Add+0x122>
 8009e98:	8bbb      	ldrh	r3, [r7, #28]
 8009e9a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009e9c:	7fbb      	ldrb	r3, [r7, #30]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d008      	beq.n	8009eb4 <CircularQueue_Add+0x13c>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	7f1b      	ldrb	r3, [r3, #28]
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <CircularQueue_Add+0x13c>
 8009eae:	7ffb      	ldrb	r3, [r7, #31]
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	e000      	b.n	8009eb6 <CircularQueue_Add+0x13e>
 8009eb4:	8bbb      	ldrh	r3, [r7, #28]
 8009eb6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009eb8:	88fb      	ldrh	r3, [r7, #6]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 817e 	beq.w	800a1bc <CircularQueue_Add+0x444>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	695a      	ldr	r2, [r3, #20]
 8009ec4:	88f9      	ldrh	r1, [r7, #6]
 8009ec6:	7ffb      	ldrb	r3, [r7, #31]
 8009ec8:	440b      	add	r3, r1
 8009eca:	4619      	mov	r1, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	fb01 f303 	mul.w	r3, r1, r3
 8009ed2:	441a      	add	r2, r3
 8009ed4:	8bbb      	ldrh	r3, [r7, #28]
 8009ed6:	441a      	add	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	f200 816d 	bhi.w	800a1bc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ee6:	e14a      	b.n	800a17e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	691a      	ldr	r2, [r3, #16]
 8009eec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009eee:	441a      	add	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d307      	bcc.n	8009f08 <CircularQueue_Add+0x190>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009efe:	441a      	add	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	e003      	b.n	8009f10 <CircularQueue_Add+0x198>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f0e:	4413      	add	r3, r2
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	891b      	ldrh	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d130      	bne.n	8009f84 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	1c59      	adds	r1, r3, #1
 8009f2a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f2c:	4413      	add	r3, r2
 8009f2e:	88fa      	ldrh	r2, [r7, #6]
 8009f30:	b2d2      	uxtb	r2, r2
 8009f32:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d304      	bcc.n	8009f48 <CircularQueue_Add+0x1d0>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	e000      	b.n	8009f4a <CircularQueue_Add+0x1d2>
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009f4c:	88fb      	ldrh	r3, [r7, #6]
 8009f4e:	0a1b      	lsrs	r3, r3, #8
 8009f50:	b298      	uxth	r0, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	1c59      	adds	r1, r3, #1
 8009f5a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f5c:	4413      	add	r3, r2
 8009f5e:	b2c2      	uxtb	r2, r0
 8009f60:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d304      	bcc.n	8009f76 <CircularQueue_Add+0x1fe>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	e000      	b.n	8009f78 <CircularQueue_Add+0x200>
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	1c9a      	adds	r2, r3, #2
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6859      	ldr	r1, [r3, #4]
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	1acb      	subs	r3, r1, r3
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	bf28      	it	cs
 8009f92:	4613      	movcs	r3, r2
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d007      	beq.n	8009fae <CircularQueue_Add+0x236>
 8009f9e:	88fb      	ldrh	r3, [r7, #6]
 8009fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d225      	bcs.n	8009ff2 <CircularQueue_Add+0x27a>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	7f1b      	ldrb	r3, [r3, #28]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d121      	bne.n	8009ff2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	18d0      	adds	r0, r2, r3
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fba:	fb02 f303 	mul.w	r3, r2, r3
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f000 fad1 	bl	800a56c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	695a      	ldr	r2, [r3, #20]
 8009fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd0:	441a      	add	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009fde:	88fa      	ldrh	r2, [r7, #6]
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009fe6:	7ffb      	ldrb	r3, [r7, #31]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	88fb      	ldrh	r3, [r7, #6]
 8009fec:	4413      	add	r3, r2
 8009fee:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009ff0:	e0a4      	b.n	800a13c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80a1 	beq.w	800a13c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	7f1b      	ldrb	r3, [r3, #28]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d03a      	beq.n	800a07c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	891b      	ldrh	r3, [r3, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10d      	bne.n	800a02a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	3b02      	subs	r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	22ff      	movs	r2, #255	; 0xff
 800a01a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	3b01      	subs	r3, #1
 800a024:	4413      	add	r3, r2
 800a026:	22ff      	movs	r2, #255	; 0xff
 800a028:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	695a      	ldr	r2, [r3, #20]
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a03e:	2300      	movs	r3, #0
 800a040:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	891b      	ldrh	r3, [r3, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d16f      	bne.n	800a12a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	1c59      	adds	r1, r3, #1
 800a052:	6339      	str	r1, [r7, #48]	; 0x30
 800a054:	4413      	add	r3, r2
 800a056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a058:	b2d2      	uxtb	r2, r2
 800a05a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	0a18      	lsrs	r0, r3, #8
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	1c59      	adds	r1, r3, #1
 800a068:	6339      	str	r1, [r7, #48]	; 0x30
 800a06a:	4413      	add	r3, r2
 800a06c:	b2c2      	uxtb	r2, r0
 800a06e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	1c9a      	adds	r2, r3, #2
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	615a      	str	r2, [r3, #20]
 800a07a:	e056      	b.n	800a12a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	7f1b      	ldrb	r3, [r3, #28]
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d050      	beq.n	800a12a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	891b      	ldrh	r3, [r3, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d14a      	bne.n	800a126 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	3b02      	subs	r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a09c:	b2d2      	uxtb	r2, r2
 800a09e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	0a19      	lsrs	r1, r3, #8
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	4413      	add	r3, r2
 800a0ae:	b2ca      	uxtb	r2, r1
 800a0b0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	18d0      	adds	r0, r2, r3
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	f000 fa4f 	bl	800a56c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	695a      	ldr	r2, [r3, #20]
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	441a      	add	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a0de:	88fa      	ldrh	r2, [r7, #6]
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fa:	1c59      	adds	r1, r3, #1
 800a0fc:	6339      	str	r1, [r7, #48]	; 0x30
 800a0fe:	4413      	add	r3, r2
 800a100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	0a18      	lsrs	r0, r3, #8
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	1c59      	adds	r1, r3, #1
 800a112:	6339      	str	r1, [r7, #48]	; 0x30
 800a114:	4413      	add	r3, r2
 800a116:	b2c2      	uxtb	r2, r0
 800a118:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	1c9a      	adds	r2, r3, #2
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	615a      	str	r2, [r3, #20]
 800a124:	e001      	b.n	800a12a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a126:	2300      	movs	r3, #0
 800a128:	e049      	b.n	800a1be <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a12a:	7ffb      	ldrb	r3, [r7, #31]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	b29b      	uxth	r3, r3
 800a132:	4413      	add	r3, r2
 800a134:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d015      	beq.n	800a16e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	18d0      	adds	r0, r2, r3
 800a14a:	88fb      	ldrh	r3, [r7, #6]
 800a14c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a14e:	fb03 f202 	mul.w	r2, r3, r2
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	4413      	add	r3, r2
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	4413      	add	r3, r2
 800a15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a15c:	4619      	mov	r1, r3
 800a15e:	f000 fa05 	bl	800a56c <memcpy>
        q->byteCount += NbBytesToCopy;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	695a      	ldr	r2, [r3, #20]
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	441a      	add	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	3301      	adds	r3, #1
 800a17c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	f4ff aeb0 	bcc.w	8009ee8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6919      	ldr	r1, [r3, #16]
 800a190:	7ffb      	ldrb	r3, [r7, #31]
 800a192:	4419      	add	r1, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4299      	cmp	r1, r3
 800a19a:	d307      	bcc.n	800a1ac <CircularQueue_Add+0x434>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6919      	ldr	r1, [r3, #16]
 800a1a0:	7ffb      	ldrb	r3, [r7, #31]
 800a1a2:	4419      	add	r1, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	1acb      	subs	r3, r1, r3
 800a1aa:	e003      	b.n	800a1b4 <CircularQueue_Add+0x43c>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6919      	ldr	r1, [r3, #16]
 800a1b0:	7ffb      	ldrb	r3, [r7, #31]
 800a1b2:	440b      	add	r3, r1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	e000      	b.n	800a1be <CircularQueue_Add+0x446>
    return NULL;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3738      	adds	r7, #56	; 0x38
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	891b      	ldrh	r3, [r3, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <CircularQueue_Remove+0x1e>
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e000      	b.n	800a1e6 <CircularQueue_Remove+0x20>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80cc 	beq.w	800a38e <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	891b      	ldrh	r3, [r3, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d121      	bne.n	800a242 <CircularQueue_Remove+0x7c>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	4413      	add	r3, r2
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6819      	ldr	r1, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	1c58      	adds	r0, r3, #1
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	4298      	cmp	r0, r3
 800a21c:	d306      	bcc.n	800a22c <CircularQueue_Remove+0x66>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68d8      	ldr	r0, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	1ac3      	subs	r3, r0, r3
 800a228:	3301      	adds	r3, #1
 800a22a:	e002      	b.n	800a232 <CircularQueue_Remove+0x6c>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	3301      	adds	r3, #1
 800a232:	440b      	add	r3, r1
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b29b      	uxth	r3, r3
 800a238:	021b      	lsls	r3, r3, #8
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	4413      	add	r3, r2
 800a23e:	b29b      	uxth	r3, r3
 800a240:	e001      	b.n	800a246 <CircularQueue_Remove+0x80>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	891b      	ldrh	r3, [r3, #8]
 800a246:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7f1b      	ldrb	r3, [r3, #28]
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d057      	beq.n	800a304 <CircularQueue_Remove+0x13e>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7f1b      	ldrb	r3, [r3, #28]
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d151      	bne.n	800a304 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a260:	897b      	ldrh	r3, [r7, #10]
 800a262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a266:	4293      	cmp	r3, r2
 800a268:	d103      	bne.n	800a272 <CircularQueue_Remove+0xac>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	891b      	ldrh	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d012      	beq.n	800a298 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d942      	bls.n	800a304 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	891b      	ldrh	r3, [r3, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d03e      	beq.n	800a304 <CircularQueue_Remove+0x13e>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	8912      	ldrh	r2, [r2, #8]
 800a294:	4293      	cmp	r3, r2
 800a296:	d235      	bcs.n	800a304 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	695a      	ldr	r2, [r3, #20]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68d9      	ldr	r1, [r3, #12]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	1acb      	subs	r3, r1, r3
 800a2a6:	441a      	add	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	891b      	ldrh	r3, [r3, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d121      	bne.n	800a2fe <CircularQueue_Remove+0x138>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6819      	ldr	r1, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	1c58      	adds	r0, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	4298      	cmp	r0, r3
 800a2d8:	d306      	bcc.n	800a2e8 <CircularQueue_Remove+0x122>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68d8      	ldr	r0, [r3, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	1ac3      	subs	r3, r0, r3
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	e002      	b.n	800a2ee <CircularQueue_Remove+0x128>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	440b      	add	r3, r1
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4413      	add	r3, r2
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	e001      	b.n	800a302 <CircularQueue_Remove+0x13c>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	891b      	ldrh	r3, [r3, #8]
 800a302:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68d9      	ldr	r1, [r3, #12]
 800a30c:	7a7b      	ldrb	r3, [r7, #9]
 800a30e:	4419      	add	r1, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	4299      	cmp	r1, r3
 800a316:	d307      	bcc.n	800a328 <CircularQueue_Remove+0x162>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68d9      	ldr	r1, [r3, #12]
 800a31c:	7a7b      	ldrb	r3, [r7, #9]
 800a31e:	4419      	add	r1, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	1acb      	subs	r3, r1, r3
 800a326:	e003      	b.n	800a330 <CircularQueue_Remove+0x16a>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68d9      	ldr	r1, [r3, #12]
 800a32c:	7a7b      	ldrb	r3, [r7, #9]
 800a32e:	440b      	add	r3, r1
 800a330:	4413      	add	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	8979      	ldrh	r1, [r7, #10]
 800a33a:	7a7a      	ldrb	r2, [r7, #9]
 800a33c:	440a      	add	r2, r1
 800a33e:	1a9a      	subs	r2, r3, r2
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d01b      	beq.n	800a384 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	897b      	ldrh	r3, [r7, #10]
 800a352:	441a      	add	r2, r3
 800a354:	7a7b      	ldrb	r3, [r7, #9]
 800a356:	441a      	add	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d309      	bcc.n	800a374 <CircularQueue_Remove+0x1ae>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	897b      	ldrh	r3, [r7, #10]
 800a366:	441a      	add	r2, r3
 800a368:	7a7b      	ldrb	r3, [r7, #9]
 800a36a:	441a      	add	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	e005      	b.n	800a380 <CircularQueue_Remove+0x1ba>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	897b      	ldrh	r3, [r7, #10]
 800a37a:	441a      	add	r2, r3
 800a37c:	7a7b      	ldrb	r3, [r7, #9]
 800a37e:	4413      	add	r3, r2
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	1e5a      	subs	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	897a      	ldrh	r2, [r7, #10]
 800a398:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a39a:	68fb      	ldr	r3, [r7, #12]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	891b      	ldrh	r3, [r3, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <CircularQueue_Sense+0x1e>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e000      	b.n	800a3c8 <CircularQueue_Sense+0x20>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 8090 	beq.w	800a4fc <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	891b      	ldrh	r3, [r3, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d121      	bne.n	800a42e <CircularQueue_Sense+0x86>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6819      	ldr	r1, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	1c58      	adds	r0, r3, #1
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	4298      	cmp	r0, r3
 800a408:	d306      	bcc.n	800a418 <CircularQueue_Sense+0x70>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68d8      	ldr	r0, [r3, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	1ac3      	subs	r3, r0, r3
 800a414:	3301      	adds	r3, #1
 800a416:	e002      	b.n	800a41e <CircularQueue_Sense+0x76>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	3301      	adds	r3, #1
 800a41e:	440b      	add	r3, r1
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	b29b      	uxth	r3, r3
 800a424:	021b      	lsls	r3, r3, #8
 800a426:	b29b      	uxth	r3, r3
 800a428:	4413      	add	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	e001      	b.n	800a432 <CircularQueue_Sense+0x8a>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	891b      	ldrh	r3, [r3, #8]
 800a432:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7f1b      	ldrb	r3, [r3, #28]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d048      	beq.n	800a4d2 <CircularQueue_Sense+0x12a>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7f1b      	ldrb	r3, [r3, #28]
 800a444:	f003 0302 	and.w	r3, r3, #2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d142      	bne.n	800a4d2 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a44c:	8a7b      	ldrh	r3, [r7, #18]
 800a44e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a452:	4293      	cmp	r3, r2
 800a454:	d103      	bne.n	800a45e <CircularQueue_Sense+0xb6>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	891b      	ldrh	r3, [r3, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d012      	beq.n	800a484 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a466:	429a      	cmp	r2, r3
 800a468:	d933      	bls.n	800a4d2 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	891b      	ldrh	r3, [r3, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d02f      	beq.n	800a4d2 <CircularQueue_Sense+0x12a>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	8912      	ldrh	r2, [r2, #8]
 800a480:	4293      	cmp	r3, r2
 800a482:	d226      	bcs.n	800a4d2 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	891b      	ldrh	r3, [r3, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d11d      	bne.n	800a4cc <CircularQueue_Sense+0x124>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6819      	ldr	r1, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	1c58      	adds	r0, r3, #1
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	4298      	cmp	r0, r3
 800a4aa:	d305      	bcc.n	800a4b8 <CircularQueue_Sense+0x110>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	1ac3      	subs	r3, r0, r3
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	e001      	b.n	800a4bc <CircularQueue_Sense+0x114>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	440b      	add	r3, r1
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	e001      	b.n	800a4d0 <CircularQueue_Sense+0x128>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	891b      	ldrh	r3, [r3, #8]
 800a4d0:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	7af9      	ldrb	r1, [r7, #11]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4419      	add	r1, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	4299      	cmp	r1, r3
 800a4e2:	d306      	bcc.n	800a4f2 <CircularQueue_Sense+0x14a>
 800a4e4:	7af9      	ldrb	r1, [r7, #11]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4419      	add	r1, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	1acb      	subs	r3, r1, r3
 800a4f0:	e002      	b.n	800a4f8 <CircularQueue_Sense+0x150>
 800a4f2:	7af9      	ldrb	r1, [r7, #11]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	440b      	add	r3, r1
 800a4f8:	4413      	add	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	8a7a      	ldrh	r2, [r7, #18]
 800a506:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a508:	697b      	ldr	r3, [r7, #20]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
	...

0800a518 <__errno>:
 800a518:	4b01      	ldr	r3, [pc, #4]	; (800a520 <__errno+0x8>)
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	20000034 	.word	0x20000034

0800a524 <__libc_init_array>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4d0d      	ldr	r5, [pc, #52]	; (800a55c <__libc_init_array+0x38>)
 800a528:	4c0d      	ldr	r4, [pc, #52]	; (800a560 <__libc_init_array+0x3c>)
 800a52a:	1b64      	subs	r4, r4, r5
 800a52c:	10a4      	asrs	r4, r4, #2
 800a52e:	2600      	movs	r6, #0
 800a530:	42a6      	cmp	r6, r4
 800a532:	d109      	bne.n	800a548 <__libc_init_array+0x24>
 800a534:	4d0b      	ldr	r5, [pc, #44]	; (800a564 <__libc_init_array+0x40>)
 800a536:	4c0c      	ldr	r4, [pc, #48]	; (800a568 <__libc_init_array+0x44>)
 800a538:	f001 f832 	bl	800b5a0 <_init>
 800a53c:	1b64      	subs	r4, r4, r5
 800a53e:	10a4      	asrs	r4, r4, #2
 800a540:	2600      	movs	r6, #0
 800a542:	42a6      	cmp	r6, r4
 800a544:	d105      	bne.n	800a552 <__libc_init_array+0x2e>
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54c:	4798      	blx	r3
 800a54e:	3601      	adds	r6, #1
 800a550:	e7ee      	b.n	800a530 <__libc_init_array+0xc>
 800a552:	f855 3b04 	ldr.w	r3, [r5], #4
 800a556:	4798      	blx	r3
 800a558:	3601      	adds	r6, #1
 800a55a:	e7f2      	b.n	800a542 <__libc_init_array+0x1e>
 800a55c:	0800c154 	.word	0x0800c154
 800a560:	0800c154 	.word	0x0800c154
 800a564:	0800c154 	.word	0x0800c154
 800a568:	0800c158 	.word	0x0800c158

0800a56c <memcpy>:
 800a56c:	440a      	add	r2, r1
 800a56e:	4291      	cmp	r1, r2
 800a570:	f100 33ff 	add.w	r3, r0, #4294967295
 800a574:	d100      	bne.n	800a578 <memcpy+0xc>
 800a576:	4770      	bx	lr
 800a578:	b510      	push	{r4, lr}
 800a57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a582:	4291      	cmp	r1, r2
 800a584:	d1f9      	bne.n	800a57a <memcpy+0xe>
 800a586:	bd10      	pop	{r4, pc}

0800a588 <memset>:
 800a588:	4402      	add	r2, r0
 800a58a:	4603      	mov	r3, r0
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d100      	bne.n	800a592 <memset+0xa>
 800a590:	4770      	bx	lr
 800a592:	f803 1b01 	strb.w	r1, [r3], #1
 800a596:	e7f9      	b.n	800a58c <memset+0x4>

0800a598 <iprintf>:
 800a598:	b40f      	push	{r0, r1, r2, r3}
 800a59a:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <iprintf+0x2c>)
 800a59c:	b513      	push	{r0, r1, r4, lr}
 800a59e:	681c      	ldr	r4, [r3, #0]
 800a5a0:	b124      	cbz	r4, 800a5ac <iprintf+0x14>
 800a5a2:	69a3      	ldr	r3, [r4, #24]
 800a5a4:	b913      	cbnz	r3, 800a5ac <iprintf+0x14>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 fa5e 	bl	800aa68 <__sinit>
 800a5ac:	ab05      	add	r3, sp, #20
 800a5ae:	9a04      	ldr	r2, [sp, #16]
 800a5b0:	68a1      	ldr	r1, [r4, #8]
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 fc67 	bl	800ae88 <_vfiprintf_r>
 800a5ba:	b002      	add	sp, #8
 800a5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c0:	b004      	add	sp, #16
 800a5c2:	4770      	bx	lr
 800a5c4:	20000034 	.word	0x20000034

0800a5c8 <_puts_r>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	460e      	mov	r6, r1
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	b118      	cbz	r0, 800a5d8 <_puts_r+0x10>
 800a5d0:	6983      	ldr	r3, [r0, #24]
 800a5d2:	b90b      	cbnz	r3, 800a5d8 <_puts_r+0x10>
 800a5d4:	f000 fa48 	bl	800aa68 <__sinit>
 800a5d8:	69ab      	ldr	r3, [r5, #24]
 800a5da:	68ac      	ldr	r4, [r5, #8]
 800a5dc:	b913      	cbnz	r3, 800a5e4 <_puts_r+0x1c>
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f000 fa42 	bl	800aa68 <__sinit>
 800a5e4:	4b2c      	ldr	r3, [pc, #176]	; (800a698 <_puts_r+0xd0>)
 800a5e6:	429c      	cmp	r4, r3
 800a5e8:	d120      	bne.n	800a62c <_puts_r+0x64>
 800a5ea:	686c      	ldr	r4, [r5, #4]
 800a5ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ee:	07db      	lsls	r3, r3, #31
 800a5f0:	d405      	bmi.n	800a5fe <_puts_r+0x36>
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	0598      	lsls	r0, r3, #22
 800a5f6:	d402      	bmi.n	800a5fe <_puts_r+0x36>
 800a5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5fa:	f000 fad3 	bl	800aba4 <__retarget_lock_acquire_recursive>
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	0719      	lsls	r1, r3, #28
 800a602:	d51d      	bpl.n	800a640 <_puts_r+0x78>
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	b1db      	cbz	r3, 800a640 <_puts_r+0x78>
 800a608:	3e01      	subs	r6, #1
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a610:	3b01      	subs	r3, #1
 800a612:	60a3      	str	r3, [r4, #8]
 800a614:	bb39      	cbnz	r1, 800a666 <_puts_r+0x9e>
 800a616:	2b00      	cmp	r3, #0
 800a618:	da38      	bge.n	800a68c <_puts_r+0xc4>
 800a61a:	4622      	mov	r2, r4
 800a61c:	210a      	movs	r1, #10
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 f848 	bl	800a6b4 <__swbuf_r>
 800a624:	3001      	adds	r0, #1
 800a626:	d011      	beq.n	800a64c <_puts_r+0x84>
 800a628:	250a      	movs	r5, #10
 800a62a:	e011      	b.n	800a650 <_puts_r+0x88>
 800a62c:	4b1b      	ldr	r3, [pc, #108]	; (800a69c <_puts_r+0xd4>)
 800a62e:	429c      	cmp	r4, r3
 800a630:	d101      	bne.n	800a636 <_puts_r+0x6e>
 800a632:	68ac      	ldr	r4, [r5, #8]
 800a634:	e7da      	b.n	800a5ec <_puts_r+0x24>
 800a636:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <_puts_r+0xd8>)
 800a638:	429c      	cmp	r4, r3
 800a63a:	bf08      	it	eq
 800a63c:	68ec      	ldreq	r4, [r5, #12]
 800a63e:	e7d5      	b.n	800a5ec <_puts_r+0x24>
 800a640:	4621      	mov	r1, r4
 800a642:	4628      	mov	r0, r5
 800a644:	f000 f888 	bl	800a758 <__swsetup_r>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d0dd      	beq.n	800a608 <_puts_r+0x40>
 800a64c:	f04f 35ff 	mov.w	r5, #4294967295
 800a650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a652:	07da      	lsls	r2, r3, #31
 800a654:	d405      	bmi.n	800a662 <_puts_r+0x9a>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	059b      	lsls	r3, r3, #22
 800a65a:	d402      	bmi.n	800a662 <_puts_r+0x9a>
 800a65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a65e:	f000 faa2 	bl	800aba6 <__retarget_lock_release_recursive>
 800a662:	4628      	mov	r0, r5
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	2b00      	cmp	r3, #0
 800a668:	da04      	bge.n	800a674 <_puts_r+0xac>
 800a66a:	69a2      	ldr	r2, [r4, #24]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	dc06      	bgt.n	800a67e <_puts_r+0xb6>
 800a670:	290a      	cmp	r1, #10
 800a672:	d004      	beq.n	800a67e <_puts_r+0xb6>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	6022      	str	r2, [r4, #0]
 800a67a:	7019      	strb	r1, [r3, #0]
 800a67c:	e7c5      	b.n	800a60a <_puts_r+0x42>
 800a67e:	4622      	mov	r2, r4
 800a680:	4628      	mov	r0, r5
 800a682:	f000 f817 	bl	800a6b4 <__swbuf_r>
 800a686:	3001      	adds	r0, #1
 800a688:	d1bf      	bne.n	800a60a <_puts_r+0x42>
 800a68a:	e7df      	b.n	800a64c <_puts_r+0x84>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	250a      	movs	r5, #10
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	6022      	str	r2, [r4, #0]
 800a694:	701d      	strb	r5, [r3, #0]
 800a696:	e7db      	b.n	800a650 <_puts_r+0x88>
 800a698:	0800c0d8 	.word	0x0800c0d8
 800a69c:	0800c0f8 	.word	0x0800c0f8
 800a6a0:	0800c0b8 	.word	0x0800c0b8

0800a6a4 <puts>:
 800a6a4:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <puts+0xc>)
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	f7ff bf8d 	b.w	800a5c8 <_puts_r>
 800a6ae:	bf00      	nop
 800a6b0:	20000034 	.word	0x20000034

0800a6b4 <__swbuf_r>:
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b6:	460e      	mov	r6, r1
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	b118      	cbz	r0, 800a6c6 <__swbuf_r+0x12>
 800a6be:	6983      	ldr	r3, [r0, #24]
 800a6c0:	b90b      	cbnz	r3, 800a6c6 <__swbuf_r+0x12>
 800a6c2:	f000 f9d1 	bl	800aa68 <__sinit>
 800a6c6:	4b21      	ldr	r3, [pc, #132]	; (800a74c <__swbuf_r+0x98>)
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d12b      	bne.n	800a724 <__swbuf_r+0x70>
 800a6cc:	686c      	ldr	r4, [r5, #4]
 800a6ce:	69a3      	ldr	r3, [r4, #24]
 800a6d0:	60a3      	str	r3, [r4, #8]
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	071a      	lsls	r2, r3, #28
 800a6d6:	d52f      	bpl.n	800a738 <__swbuf_r+0x84>
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	b36b      	cbz	r3, 800a738 <__swbuf_r+0x84>
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	6820      	ldr	r0, [r4, #0]
 800a6e0:	1ac0      	subs	r0, r0, r3
 800a6e2:	6963      	ldr	r3, [r4, #20]
 800a6e4:	b2f6      	uxtb	r6, r6
 800a6e6:	4283      	cmp	r3, r0
 800a6e8:	4637      	mov	r7, r6
 800a6ea:	dc04      	bgt.n	800a6f6 <__swbuf_r+0x42>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 f926 	bl	800a940 <_fflush_r>
 800a6f4:	bb30      	cbnz	r0, 800a744 <__swbuf_r+0x90>
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	60a3      	str	r3, [r4, #8]
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	6022      	str	r2, [r4, #0]
 800a702:	701e      	strb	r6, [r3, #0]
 800a704:	6963      	ldr	r3, [r4, #20]
 800a706:	3001      	adds	r0, #1
 800a708:	4283      	cmp	r3, r0
 800a70a:	d004      	beq.n	800a716 <__swbuf_r+0x62>
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	07db      	lsls	r3, r3, #31
 800a710:	d506      	bpl.n	800a720 <__swbuf_r+0x6c>
 800a712:	2e0a      	cmp	r6, #10
 800a714:	d104      	bne.n	800a720 <__swbuf_r+0x6c>
 800a716:	4621      	mov	r1, r4
 800a718:	4628      	mov	r0, r5
 800a71a:	f000 f911 	bl	800a940 <_fflush_r>
 800a71e:	b988      	cbnz	r0, 800a744 <__swbuf_r+0x90>
 800a720:	4638      	mov	r0, r7
 800a722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <__swbuf_r+0x9c>)
 800a726:	429c      	cmp	r4, r3
 800a728:	d101      	bne.n	800a72e <__swbuf_r+0x7a>
 800a72a:	68ac      	ldr	r4, [r5, #8]
 800a72c:	e7cf      	b.n	800a6ce <__swbuf_r+0x1a>
 800a72e:	4b09      	ldr	r3, [pc, #36]	; (800a754 <__swbuf_r+0xa0>)
 800a730:	429c      	cmp	r4, r3
 800a732:	bf08      	it	eq
 800a734:	68ec      	ldreq	r4, [r5, #12]
 800a736:	e7ca      	b.n	800a6ce <__swbuf_r+0x1a>
 800a738:	4621      	mov	r1, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 f80c 	bl	800a758 <__swsetup_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	d0cb      	beq.n	800a6dc <__swbuf_r+0x28>
 800a744:	f04f 37ff 	mov.w	r7, #4294967295
 800a748:	e7ea      	b.n	800a720 <__swbuf_r+0x6c>
 800a74a:	bf00      	nop
 800a74c:	0800c0d8 	.word	0x0800c0d8
 800a750:	0800c0f8 	.word	0x0800c0f8
 800a754:	0800c0b8 	.word	0x0800c0b8

0800a758 <__swsetup_r>:
 800a758:	4b32      	ldr	r3, [pc, #200]	; (800a824 <__swsetup_r+0xcc>)
 800a75a:	b570      	push	{r4, r5, r6, lr}
 800a75c:	681d      	ldr	r5, [r3, #0]
 800a75e:	4606      	mov	r6, r0
 800a760:	460c      	mov	r4, r1
 800a762:	b125      	cbz	r5, 800a76e <__swsetup_r+0x16>
 800a764:	69ab      	ldr	r3, [r5, #24]
 800a766:	b913      	cbnz	r3, 800a76e <__swsetup_r+0x16>
 800a768:	4628      	mov	r0, r5
 800a76a:	f000 f97d 	bl	800aa68 <__sinit>
 800a76e:	4b2e      	ldr	r3, [pc, #184]	; (800a828 <__swsetup_r+0xd0>)
 800a770:	429c      	cmp	r4, r3
 800a772:	d10f      	bne.n	800a794 <__swsetup_r+0x3c>
 800a774:	686c      	ldr	r4, [r5, #4]
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a77c:	0719      	lsls	r1, r3, #28
 800a77e:	d42c      	bmi.n	800a7da <__swsetup_r+0x82>
 800a780:	06dd      	lsls	r5, r3, #27
 800a782:	d411      	bmi.n	800a7a8 <__swsetup_r+0x50>
 800a784:	2309      	movs	r3, #9
 800a786:	6033      	str	r3, [r6, #0]
 800a788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	f04f 30ff 	mov.w	r0, #4294967295
 800a792:	e03e      	b.n	800a812 <__swsetup_r+0xba>
 800a794:	4b25      	ldr	r3, [pc, #148]	; (800a82c <__swsetup_r+0xd4>)
 800a796:	429c      	cmp	r4, r3
 800a798:	d101      	bne.n	800a79e <__swsetup_r+0x46>
 800a79a:	68ac      	ldr	r4, [r5, #8]
 800a79c:	e7eb      	b.n	800a776 <__swsetup_r+0x1e>
 800a79e:	4b24      	ldr	r3, [pc, #144]	; (800a830 <__swsetup_r+0xd8>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	bf08      	it	eq
 800a7a4:	68ec      	ldreq	r4, [r5, #12]
 800a7a6:	e7e6      	b.n	800a776 <__swsetup_r+0x1e>
 800a7a8:	0758      	lsls	r0, r3, #29
 800a7aa:	d512      	bpl.n	800a7d2 <__swsetup_r+0x7a>
 800a7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ae:	b141      	cbz	r1, 800a7c2 <__swsetup_r+0x6a>
 800a7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7b4:	4299      	cmp	r1, r3
 800a7b6:	d002      	beq.n	800a7be <__swsetup_r+0x66>
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f000 fa5b 	bl	800ac74 <_free_r>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7c8:	81a3      	strh	r3, [r4, #12]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	6063      	str	r3, [r4, #4]
 800a7ce:	6923      	ldr	r3, [r4, #16]
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f043 0308 	orr.w	r3, r3, #8
 800a7d8:	81a3      	strh	r3, [r4, #12]
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	b94b      	cbnz	r3, 800a7f2 <__swsetup_r+0x9a>
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e8:	d003      	beq.n	800a7f2 <__swsetup_r+0x9a>
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f000 fa01 	bl	800abf4 <__smakebuf_r>
 800a7f2:	89a0      	ldrh	r0, [r4, #12]
 800a7f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7f8:	f010 0301 	ands.w	r3, r0, #1
 800a7fc:	d00a      	beq.n	800a814 <__swsetup_r+0xbc>
 800a7fe:	2300      	movs	r3, #0
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	6963      	ldr	r3, [r4, #20]
 800a804:	425b      	negs	r3, r3
 800a806:	61a3      	str	r3, [r4, #24]
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	b943      	cbnz	r3, 800a81e <__swsetup_r+0xc6>
 800a80c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a810:	d1ba      	bne.n	800a788 <__swsetup_r+0x30>
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	0781      	lsls	r1, r0, #30
 800a816:	bf58      	it	pl
 800a818:	6963      	ldrpl	r3, [r4, #20]
 800a81a:	60a3      	str	r3, [r4, #8]
 800a81c:	e7f4      	b.n	800a808 <__swsetup_r+0xb0>
 800a81e:	2000      	movs	r0, #0
 800a820:	e7f7      	b.n	800a812 <__swsetup_r+0xba>
 800a822:	bf00      	nop
 800a824:	20000034 	.word	0x20000034
 800a828:	0800c0d8 	.word	0x0800c0d8
 800a82c:	0800c0f8 	.word	0x0800c0f8
 800a830:	0800c0b8 	.word	0x0800c0b8

0800a834 <__sflush_r>:
 800a834:	898a      	ldrh	r2, [r1, #12]
 800a836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83a:	4605      	mov	r5, r0
 800a83c:	0710      	lsls	r0, r2, #28
 800a83e:	460c      	mov	r4, r1
 800a840:	d458      	bmi.n	800a8f4 <__sflush_r+0xc0>
 800a842:	684b      	ldr	r3, [r1, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dc05      	bgt.n	800a854 <__sflush_r+0x20>
 800a848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	dc02      	bgt.n	800a854 <__sflush_r+0x20>
 800a84e:	2000      	movs	r0, #0
 800a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a856:	2e00      	cmp	r6, #0
 800a858:	d0f9      	beq.n	800a84e <__sflush_r+0x1a>
 800a85a:	2300      	movs	r3, #0
 800a85c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a860:	682f      	ldr	r7, [r5, #0]
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	d032      	beq.n	800a8cc <__sflush_r+0x98>
 800a866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	075a      	lsls	r2, r3, #29
 800a86c:	d505      	bpl.n	800a87a <__sflush_r+0x46>
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	1ac0      	subs	r0, r0, r3
 800a872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a874:	b10b      	cbz	r3, 800a87a <__sflush_r+0x46>
 800a876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a878:	1ac0      	subs	r0, r0, r3
 800a87a:	2300      	movs	r3, #0
 800a87c:	4602      	mov	r2, r0
 800a87e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a880:	6a21      	ldr	r1, [r4, #32]
 800a882:	4628      	mov	r0, r5
 800a884:	47b0      	blx	r6
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	d106      	bne.n	800a89a <__sflush_r+0x66>
 800a88c:	6829      	ldr	r1, [r5, #0]
 800a88e:	291d      	cmp	r1, #29
 800a890:	d82c      	bhi.n	800a8ec <__sflush_r+0xb8>
 800a892:	4a2a      	ldr	r2, [pc, #168]	; (800a93c <__sflush_r+0x108>)
 800a894:	40ca      	lsrs	r2, r1
 800a896:	07d6      	lsls	r6, r2, #31
 800a898:	d528      	bpl.n	800a8ec <__sflush_r+0xb8>
 800a89a:	2200      	movs	r2, #0
 800a89c:	6062      	str	r2, [r4, #4]
 800a89e:	04d9      	lsls	r1, r3, #19
 800a8a0:	6922      	ldr	r2, [r4, #16]
 800a8a2:	6022      	str	r2, [r4, #0]
 800a8a4:	d504      	bpl.n	800a8b0 <__sflush_r+0x7c>
 800a8a6:	1c42      	adds	r2, r0, #1
 800a8a8:	d101      	bne.n	800a8ae <__sflush_r+0x7a>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	b903      	cbnz	r3, 800a8b0 <__sflush_r+0x7c>
 800a8ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8b2:	602f      	str	r7, [r5, #0]
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d0ca      	beq.n	800a84e <__sflush_r+0x1a>
 800a8b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8bc:	4299      	cmp	r1, r3
 800a8be:	d002      	beq.n	800a8c6 <__sflush_r+0x92>
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 f9d7 	bl	800ac74 <_free_r>
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a8ca:	e7c1      	b.n	800a850 <__sflush_r+0x1c>
 800a8cc:	6a21      	ldr	r1, [r4, #32]
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b0      	blx	r6
 800a8d4:	1c41      	adds	r1, r0, #1
 800a8d6:	d1c7      	bne.n	800a868 <__sflush_r+0x34>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0c4      	beq.n	800a868 <__sflush_r+0x34>
 800a8de:	2b1d      	cmp	r3, #29
 800a8e0:	d001      	beq.n	800a8e6 <__sflush_r+0xb2>
 800a8e2:	2b16      	cmp	r3, #22
 800a8e4:	d101      	bne.n	800a8ea <__sflush_r+0xb6>
 800a8e6:	602f      	str	r7, [r5, #0]
 800a8e8:	e7b1      	b.n	800a84e <__sflush_r+0x1a>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	e7ad      	b.n	800a850 <__sflush_r+0x1c>
 800a8f4:	690f      	ldr	r7, [r1, #16]
 800a8f6:	2f00      	cmp	r7, #0
 800a8f8:	d0a9      	beq.n	800a84e <__sflush_r+0x1a>
 800a8fa:	0793      	lsls	r3, r2, #30
 800a8fc:	680e      	ldr	r6, [r1, #0]
 800a8fe:	bf08      	it	eq
 800a900:	694b      	ldreq	r3, [r1, #20]
 800a902:	600f      	str	r7, [r1, #0]
 800a904:	bf18      	it	ne
 800a906:	2300      	movne	r3, #0
 800a908:	eba6 0807 	sub.w	r8, r6, r7
 800a90c:	608b      	str	r3, [r1, #8]
 800a90e:	f1b8 0f00 	cmp.w	r8, #0
 800a912:	dd9c      	ble.n	800a84e <__sflush_r+0x1a>
 800a914:	6a21      	ldr	r1, [r4, #32]
 800a916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a918:	4643      	mov	r3, r8
 800a91a:	463a      	mov	r2, r7
 800a91c:	4628      	mov	r0, r5
 800a91e:	47b0      	blx	r6
 800a920:	2800      	cmp	r0, #0
 800a922:	dc06      	bgt.n	800a932 <__sflush_r+0xfe>
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92a:	81a3      	strh	r3, [r4, #12]
 800a92c:	f04f 30ff 	mov.w	r0, #4294967295
 800a930:	e78e      	b.n	800a850 <__sflush_r+0x1c>
 800a932:	4407      	add	r7, r0
 800a934:	eba8 0800 	sub.w	r8, r8, r0
 800a938:	e7e9      	b.n	800a90e <__sflush_r+0xda>
 800a93a:	bf00      	nop
 800a93c:	20400001 	.word	0x20400001

0800a940 <_fflush_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	690b      	ldr	r3, [r1, #16]
 800a944:	4605      	mov	r5, r0
 800a946:	460c      	mov	r4, r1
 800a948:	b913      	cbnz	r3, 800a950 <_fflush_r+0x10>
 800a94a:	2500      	movs	r5, #0
 800a94c:	4628      	mov	r0, r5
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	b118      	cbz	r0, 800a95a <_fflush_r+0x1a>
 800a952:	6983      	ldr	r3, [r0, #24]
 800a954:	b90b      	cbnz	r3, 800a95a <_fflush_r+0x1a>
 800a956:	f000 f887 	bl	800aa68 <__sinit>
 800a95a:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <_fflush_r+0x6c>)
 800a95c:	429c      	cmp	r4, r3
 800a95e:	d11b      	bne.n	800a998 <_fflush_r+0x58>
 800a960:	686c      	ldr	r4, [r5, #4]
 800a962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0ef      	beq.n	800a94a <_fflush_r+0xa>
 800a96a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a96c:	07d0      	lsls	r0, r2, #31
 800a96e:	d404      	bmi.n	800a97a <_fflush_r+0x3a>
 800a970:	0599      	lsls	r1, r3, #22
 800a972:	d402      	bmi.n	800a97a <_fflush_r+0x3a>
 800a974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a976:	f000 f915 	bl	800aba4 <__retarget_lock_acquire_recursive>
 800a97a:	4628      	mov	r0, r5
 800a97c:	4621      	mov	r1, r4
 800a97e:	f7ff ff59 	bl	800a834 <__sflush_r>
 800a982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a984:	07da      	lsls	r2, r3, #31
 800a986:	4605      	mov	r5, r0
 800a988:	d4e0      	bmi.n	800a94c <_fflush_r+0xc>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	059b      	lsls	r3, r3, #22
 800a98e:	d4dd      	bmi.n	800a94c <_fflush_r+0xc>
 800a990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a992:	f000 f908 	bl	800aba6 <__retarget_lock_release_recursive>
 800a996:	e7d9      	b.n	800a94c <_fflush_r+0xc>
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <_fflush_r+0x70>)
 800a99a:	429c      	cmp	r4, r3
 800a99c:	d101      	bne.n	800a9a2 <_fflush_r+0x62>
 800a99e:	68ac      	ldr	r4, [r5, #8]
 800a9a0:	e7df      	b.n	800a962 <_fflush_r+0x22>
 800a9a2:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <_fflush_r+0x74>)
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	bf08      	it	eq
 800a9a8:	68ec      	ldreq	r4, [r5, #12]
 800a9aa:	e7da      	b.n	800a962 <_fflush_r+0x22>
 800a9ac:	0800c0d8 	.word	0x0800c0d8
 800a9b0:	0800c0f8 	.word	0x0800c0f8
 800a9b4:	0800c0b8 	.word	0x0800c0b8

0800a9b8 <std>:
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	b510      	push	{r4, lr}
 800a9bc:	4604      	mov	r4, r0
 800a9be:	e9c0 3300 	strd	r3, r3, [r0]
 800a9c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9c6:	6083      	str	r3, [r0, #8]
 800a9c8:	8181      	strh	r1, [r0, #12]
 800a9ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a9cc:	81c2      	strh	r2, [r0, #14]
 800a9ce:	6183      	str	r3, [r0, #24]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	2208      	movs	r2, #8
 800a9d4:	305c      	adds	r0, #92	; 0x5c
 800a9d6:	f7ff fdd7 	bl	800a588 <memset>
 800a9da:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <std+0x38>)
 800a9dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <std+0x3c>)
 800a9e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9e2:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <std+0x40>)
 800a9e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9e6:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <std+0x44>)
 800a9e8:	6224      	str	r4, [r4, #32]
 800a9ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a9ec:	bd10      	pop	{r4, pc}
 800a9ee:	bf00      	nop
 800a9f0:	0800b431 	.word	0x0800b431
 800a9f4:	0800b453 	.word	0x0800b453
 800a9f8:	0800b48b 	.word	0x0800b48b
 800a9fc:	0800b4af 	.word	0x0800b4af

0800aa00 <_cleanup_r>:
 800aa00:	4901      	ldr	r1, [pc, #4]	; (800aa08 <_cleanup_r+0x8>)
 800aa02:	f000 b8af 	b.w	800ab64 <_fwalk_reent>
 800aa06:	bf00      	nop
 800aa08:	0800a941 	.word	0x0800a941

0800aa0c <__sfmoreglue>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	2268      	movs	r2, #104	; 0x68
 800aa10:	1e4d      	subs	r5, r1, #1
 800aa12:	4355      	muls	r5, r2
 800aa14:	460e      	mov	r6, r1
 800aa16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa1a:	f000 f997 	bl	800ad4c <_malloc_r>
 800aa1e:	4604      	mov	r4, r0
 800aa20:	b140      	cbz	r0, 800aa34 <__sfmoreglue+0x28>
 800aa22:	2100      	movs	r1, #0
 800aa24:	e9c0 1600 	strd	r1, r6, [r0]
 800aa28:	300c      	adds	r0, #12
 800aa2a:	60a0      	str	r0, [r4, #8]
 800aa2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa30:	f7ff fdaa 	bl	800a588 <memset>
 800aa34:	4620      	mov	r0, r4
 800aa36:	bd70      	pop	{r4, r5, r6, pc}

0800aa38 <__sfp_lock_acquire>:
 800aa38:	4801      	ldr	r0, [pc, #4]	; (800aa40 <__sfp_lock_acquire+0x8>)
 800aa3a:	f000 b8b3 	b.w	800aba4 <__retarget_lock_acquire_recursive>
 800aa3e:	bf00      	nop
 800aa40:	2000154d 	.word	0x2000154d

0800aa44 <__sfp_lock_release>:
 800aa44:	4801      	ldr	r0, [pc, #4]	; (800aa4c <__sfp_lock_release+0x8>)
 800aa46:	f000 b8ae 	b.w	800aba6 <__retarget_lock_release_recursive>
 800aa4a:	bf00      	nop
 800aa4c:	2000154d 	.word	0x2000154d

0800aa50 <__sinit_lock_acquire>:
 800aa50:	4801      	ldr	r0, [pc, #4]	; (800aa58 <__sinit_lock_acquire+0x8>)
 800aa52:	f000 b8a7 	b.w	800aba4 <__retarget_lock_acquire_recursive>
 800aa56:	bf00      	nop
 800aa58:	2000154e 	.word	0x2000154e

0800aa5c <__sinit_lock_release>:
 800aa5c:	4801      	ldr	r0, [pc, #4]	; (800aa64 <__sinit_lock_release+0x8>)
 800aa5e:	f000 b8a2 	b.w	800aba6 <__retarget_lock_release_recursive>
 800aa62:	bf00      	nop
 800aa64:	2000154e 	.word	0x2000154e

0800aa68 <__sinit>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	f7ff fff0 	bl	800aa50 <__sinit_lock_acquire>
 800aa70:	69a3      	ldr	r3, [r4, #24]
 800aa72:	b11b      	cbz	r3, 800aa7c <__sinit+0x14>
 800aa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa78:	f7ff bff0 	b.w	800aa5c <__sinit_lock_release>
 800aa7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa80:	6523      	str	r3, [r4, #80]	; 0x50
 800aa82:	4b13      	ldr	r3, [pc, #76]	; (800aad0 <__sinit+0x68>)
 800aa84:	4a13      	ldr	r2, [pc, #76]	; (800aad4 <__sinit+0x6c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa8a:	42a3      	cmp	r3, r4
 800aa8c:	bf04      	itt	eq
 800aa8e:	2301      	moveq	r3, #1
 800aa90:	61a3      	streq	r3, [r4, #24]
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 f820 	bl	800aad8 <__sfp>
 800aa98:	6060      	str	r0, [r4, #4]
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 f81c 	bl	800aad8 <__sfp>
 800aaa0:	60a0      	str	r0, [r4, #8]
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 f818 	bl	800aad8 <__sfp>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	60e0      	str	r0, [r4, #12]
 800aaac:	2104      	movs	r1, #4
 800aaae:	6860      	ldr	r0, [r4, #4]
 800aab0:	f7ff ff82 	bl	800a9b8 <std>
 800aab4:	68a0      	ldr	r0, [r4, #8]
 800aab6:	2201      	movs	r2, #1
 800aab8:	2109      	movs	r1, #9
 800aaba:	f7ff ff7d 	bl	800a9b8 <std>
 800aabe:	68e0      	ldr	r0, [r4, #12]
 800aac0:	2202      	movs	r2, #2
 800aac2:	2112      	movs	r1, #18
 800aac4:	f7ff ff78 	bl	800a9b8 <std>
 800aac8:	2301      	movs	r3, #1
 800aaca:	61a3      	str	r3, [r4, #24]
 800aacc:	e7d2      	b.n	800aa74 <__sinit+0xc>
 800aace:	bf00      	nop
 800aad0:	0800c0b4 	.word	0x0800c0b4
 800aad4:	0800aa01 	.word	0x0800aa01

0800aad8 <__sfp>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	4607      	mov	r7, r0
 800aadc:	f7ff ffac 	bl	800aa38 <__sfp_lock_acquire>
 800aae0:	4b1e      	ldr	r3, [pc, #120]	; (800ab5c <__sfp+0x84>)
 800aae2:	681e      	ldr	r6, [r3, #0]
 800aae4:	69b3      	ldr	r3, [r6, #24]
 800aae6:	b913      	cbnz	r3, 800aaee <__sfp+0x16>
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff ffbd 	bl	800aa68 <__sinit>
 800aaee:	3648      	adds	r6, #72	; 0x48
 800aaf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	d503      	bpl.n	800ab00 <__sfp+0x28>
 800aaf8:	6833      	ldr	r3, [r6, #0]
 800aafa:	b30b      	cbz	r3, 800ab40 <__sfp+0x68>
 800aafc:	6836      	ldr	r6, [r6, #0]
 800aafe:	e7f7      	b.n	800aaf0 <__sfp+0x18>
 800ab00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab04:	b9d5      	cbnz	r5, 800ab3c <__sfp+0x64>
 800ab06:	4b16      	ldr	r3, [pc, #88]	; (800ab60 <__sfp+0x88>)
 800ab08:	60e3      	str	r3, [r4, #12]
 800ab0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab0e:	6665      	str	r5, [r4, #100]	; 0x64
 800ab10:	f000 f847 	bl	800aba2 <__retarget_lock_init_recursive>
 800ab14:	f7ff ff96 	bl	800aa44 <__sfp_lock_release>
 800ab18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab20:	6025      	str	r5, [r4, #0]
 800ab22:	61a5      	str	r5, [r4, #24]
 800ab24:	2208      	movs	r2, #8
 800ab26:	4629      	mov	r1, r5
 800ab28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab2c:	f7ff fd2c 	bl	800a588 <memset>
 800ab30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab38:	4620      	mov	r0, r4
 800ab3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3c:	3468      	adds	r4, #104	; 0x68
 800ab3e:	e7d9      	b.n	800aaf4 <__sfp+0x1c>
 800ab40:	2104      	movs	r1, #4
 800ab42:	4638      	mov	r0, r7
 800ab44:	f7ff ff62 	bl	800aa0c <__sfmoreglue>
 800ab48:	4604      	mov	r4, r0
 800ab4a:	6030      	str	r0, [r6, #0]
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d1d5      	bne.n	800aafc <__sfp+0x24>
 800ab50:	f7ff ff78 	bl	800aa44 <__sfp_lock_release>
 800ab54:	230c      	movs	r3, #12
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	e7ee      	b.n	800ab38 <__sfp+0x60>
 800ab5a:	bf00      	nop
 800ab5c:	0800c0b4 	.word	0x0800c0b4
 800ab60:	ffff0001 	.word	0xffff0001

0800ab64 <_fwalk_reent>:
 800ab64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab68:	4606      	mov	r6, r0
 800ab6a:	4688      	mov	r8, r1
 800ab6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab70:	2700      	movs	r7, #0
 800ab72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab76:	f1b9 0901 	subs.w	r9, r9, #1
 800ab7a:	d505      	bpl.n	800ab88 <_fwalk_reent+0x24>
 800ab7c:	6824      	ldr	r4, [r4, #0]
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	d1f7      	bne.n	800ab72 <_fwalk_reent+0xe>
 800ab82:	4638      	mov	r0, r7
 800ab84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab88:	89ab      	ldrh	r3, [r5, #12]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d907      	bls.n	800ab9e <_fwalk_reent+0x3a>
 800ab8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab92:	3301      	adds	r3, #1
 800ab94:	d003      	beq.n	800ab9e <_fwalk_reent+0x3a>
 800ab96:	4629      	mov	r1, r5
 800ab98:	4630      	mov	r0, r6
 800ab9a:	47c0      	blx	r8
 800ab9c:	4307      	orrs	r7, r0
 800ab9e:	3568      	adds	r5, #104	; 0x68
 800aba0:	e7e9      	b.n	800ab76 <_fwalk_reent+0x12>

0800aba2 <__retarget_lock_init_recursive>:
 800aba2:	4770      	bx	lr

0800aba4 <__retarget_lock_acquire_recursive>:
 800aba4:	4770      	bx	lr

0800aba6 <__retarget_lock_release_recursive>:
 800aba6:	4770      	bx	lr

0800aba8 <__swhatbuf_r>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	460e      	mov	r6, r1
 800abac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb0:	2900      	cmp	r1, #0
 800abb2:	b096      	sub	sp, #88	; 0x58
 800abb4:	4614      	mov	r4, r2
 800abb6:	461d      	mov	r5, r3
 800abb8:	da08      	bge.n	800abcc <__swhatbuf_r+0x24>
 800abba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	061a      	lsls	r2, r3, #24
 800abc4:	d410      	bmi.n	800abe8 <__swhatbuf_r+0x40>
 800abc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abca:	e00e      	b.n	800abea <__swhatbuf_r+0x42>
 800abcc:	466a      	mov	r2, sp
 800abce:	f000 fc95 	bl	800b4fc <_fstat_r>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	dbf1      	blt.n	800abba <__swhatbuf_r+0x12>
 800abd6:	9a01      	ldr	r2, [sp, #4]
 800abd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abe0:	425a      	negs	r2, r3
 800abe2:	415a      	adcs	r2, r3
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	e7ee      	b.n	800abc6 <__swhatbuf_r+0x1e>
 800abe8:	2340      	movs	r3, #64	; 0x40
 800abea:	2000      	movs	r0, #0
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	b016      	add	sp, #88	; 0x58
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abf4 <__smakebuf_r>:
 800abf4:	898b      	ldrh	r3, [r1, #12]
 800abf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abf8:	079d      	lsls	r5, r3, #30
 800abfa:	4606      	mov	r6, r0
 800abfc:	460c      	mov	r4, r1
 800abfe:	d507      	bpl.n	800ac10 <__smakebuf_r+0x1c>
 800ac00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	2301      	movs	r3, #1
 800ac0a:	6163      	str	r3, [r4, #20]
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	ab01      	add	r3, sp, #4
 800ac12:	466a      	mov	r2, sp
 800ac14:	f7ff ffc8 	bl	800aba8 <__swhatbuf_r>
 800ac18:	9900      	ldr	r1, [sp, #0]
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f000 f895 	bl	800ad4c <_malloc_r>
 800ac22:	b948      	cbnz	r0, 800ac38 <__smakebuf_r+0x44>
 800ac24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac28:	059a      	lsls	r2, r3, #22
 800ac2a:	d4ef      	bmi.n	800ac0c <__smakebuf_r+0x18>
 800ac2c:	f023 0303 	bic.w	r3, r3, #3
 800ac30:	f043 0302 	orr.w	r3, r3, #2
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	e7e3      	b.n	800ac00 <__smakebuf_r+0xc>
 800ac38:	4b0d      	ldr	r3, [pc, #52]	; (800ac70 <__smakebuf_r+0x7c>)
 800ac3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	6020      	str	r0, [r4, #0]
 800ac40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	9b00      	ldr	r3, [sp, #0]
 800ac48:	6163      	str	r3, [r4, #20]
 800ac4a:	9b01      	ldr	r3, [sp, #4]
 800ac4c:	6120      	str	r0, [r4, #16]
 800ac4e:	b15b      	cbz	r3, 800ac68 <__smakebuf_r+0x74>
 800ac50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 fc63 	bl	800b520 <_isatty_r>
 800ac5a:	b128      	cbz	r0, 800ac68 <__smakebuf_r+0x74>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	f023 0303 	bic.w	r3, r3, #3
 800ac62:	f043 0301 	orr.w	r3, r3, #1
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	89a0      	ldrh	r0, [r4, #12]
 800ac6a:	4305      	orrs	r5, r0
 800ac6c:	81a5      	strh	r5, [r4, #12]
 800ac6e:	e7cd      	b.n	800ac0c <__smakebuf_r+0x18>
 800ac70:	0800aa01 	.word	0x0800aa01

0800ac74 <_free_r>:
 800ac74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac76:	2900      	cmp	r1, #0
 800ac78:	d044      	beq.n	800ad04 <_free_r+0x90>
 800ac7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac7e:	9001      	str	r0, [sp, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f1a1 0404 	sub.w	r4, r1, #4
 800ac86:	bfb8      	it	lt
 800ac88:	18e4      	addlt	r4, r4, r3
 800ac8a:	f000 fc6b 	bl	800b564 <__malloc_lock>
 800ac8e:	4a1e      	ldr	r2, [pc, #120]	; (800ad08 <_free_r+0x94>)
 800ac90:	9801      	ldr	r0, [sp, #4]
 800ac92:	6813      	ldr	r3, [r2, #0]
 800ac94:	b933      	cbnz	r3, 800aca4 <_free_r+0x30>
 800ac96:	6063      	str	r3, [r4, #4]
 800ac98:	6014      	str	r4, [r2, #0]
 800ac9a:	b003      	add	sp, #12
 800ac9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aca0:	f000 bc66 	b.w	800b570 <__malloc_unlock>
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	d908      	bls.n	800acba <_free_r+0x46>
 800aca8:	6825      	ldr	r5, [r4, #0]
 800acaa:	1961      	adds	r1, r4, r5
 800acac:	428b      	cmp	r3, r1
 800acae:	bf01      	itttt	eq
 800acb0:	6819      	ldreq	r1, [r3, #0]
 800acb2:	685b      	ldreq	r3, [r3, #4]
 800acb4:	1949      	addeq	r1, r1, r5
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	e7ed      	b.n	800ac96 <_free_r+0x22>
 800acba:	461a      	mov	r2, r3
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	b10b      	cbz	r3, 800acc4 <_free_r+0x50>
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	d9fa      	bls.n	800acba <_free_r+0x46>
 800acc4:	6811      	ldr	r1, [r2, #0]
 800acc6:	1855      	adds	r5, r2, r1
 800acc8:	42a5      	cmp	r5, r4
 800acca:	d10b      	bne.n	800ace4 <_free_r+0x70>
 800accc:	6824      	ldr	r4, [r4, #0]
 800acce:	4421      	add	r1, r4
 800acd0:	1854      	adds	r4, r2, r1
 800acd2:	42a3      	cmp	r3, r4
 800acd4:	6011      	str	r1, [r2, #0]
 800acd6:	d1e0      	bne.n	800ac9a <_free_r+0x26>
 800acd8:	681c      	ldr	r4, [r3, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	6053      	str	r3, [r2, #4]
 800acde:	4421      	add	r1, r4
 800ace0:	6011      	str	r1, [r2, #0]
 800ace2:	e7da      	b.n	800ac9a <_free_r+0x26>
 800ace4:	d902      	bls.n	800acec <_free_r+0x78>
 800ace6:	230c      	movs	r3, #12
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	e7d6      	b.n	800ac9a <_free_r+0x26>
 800acec:	6825      	ldr	r5, [r4, #0]
 800acee:	1961      	adds	r1, r4, r5
 800acf0:	428b      	cmp	r3, r1
 800acf2:	bf04      	itt	eq
 800acf4:	6819      	ldreq	r1, [r3, #0]
 800acf6:	685b      	ldreq	r3, [r3, #4]
 800acf8:	6063      	str	r3, [r4, #4]
 800acfa:	bf04      	itt	eq
 800acfc:	1949      	addeq	r1, r1, r5
 800acfe:	6021      	streq	r1, [r4, #0]
 800ad00:	6054      	str	r4, [r2, #4]
 800ad02:	e7ca      	b.n	800ac9a <_free_r+0x26>
 800ad04:	b003      	add	sp, #12
 800ad06:	bd30      	pop	{r4, r5, pc}
 800ad08:	20001550 	.word	0x20001550

0800ad0c <sbrk_aligned>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	4e0e      	ldr	r6, [pc, #56]	; (800ad48 <sbrk_aligned+0x3c>)
 800ad10:	460c      	mov	r4, r1
 800ad12:	6831      	ldr	r1, [r6, #0]
 800ad14:	4605      	mov	r5, r0
 800ad16:	b911      	cbnz	r1, 800ad1e <sbrk_aligned+0x12>
 800ad18:	f000 fb7a 	bl	800b410 <_sbrk_r>
 800ad1c:	6030      	str	r0, [r6, #0]
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4628      	mov	r0, r5
 800ad22:	f000 fb75 	bl	800b410 <_sbrk_r>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	d00a      	beq.n	800ad40 <sbrk_aligned+0x34>
 800ad2a:	1cc4      	adds	r4, r0, #3
 800ad2c:	f024 0403 	bic.w	r4, r4, #3
 800ad30:	42a0      	cmp	r0, r4
 800ad32:	d007      	beq.n	800ad44 <sbrk_aligned+0x38>
 800ad34:	1a21      	subs	r1, r4, r0
 800ad36:	4628      	mov	r0, r5
 800ad38:	f000 fb6a 	bl	800b410 <_sbrk_r>
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d101      	bne.n	800ad44 <sbrk_aligned+0x38>
 800ad40:	f04f 34ff 	mov.w	r4, #4294967295
 800ad44:	4620      	mov	r0, r4
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	20001554 	.word	0x20001554

0800ad4c <_malloc_r>:
 800ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad50:	1ccd      	adds	r5, r1, #3
 800ad52:	f025 0503 	bic.w	r5, r5, #3
 800ad56:	3508      	adds	r5, #8
 800ad58:	2d0c      	cmp	r5, #12
 800ad5a:	bf38      	it	cc
 800ad5c:	250c      	movcc	r5, #12
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	4607      	mov	r7, r0
 800ad62:	db01      	blt.n	800ad68 <_malloc_r+0x1c>
 800ad64:	42a9      	cmp	r1, r5
 800ad66:	d905      	bls.n	800ad74 <_malloc_r+0x28>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	4630      	mov	r0, r6
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	4e2e      	ldr	r6, [pc, #184]	; (800ae30 <_malloc_r+0xe4>)
 800ad76:	f000 fbf5 	bl	800b564 <__malloc_lock>
 800ad7a:	6833      	ldr	r3, [r6, #0]
 800ad7c:	461c      	mov	r4, r3
 800ad7e:	bb34      	cbnz	r4, 800adce <_malloc_r+0x82>
 800ad80:	4629      	mov	r1, r5
 800ad82:	4638      	mov	r0, r7
 800ad84:	f7ff ffc2 	bl	800ad0c <sbrk_aligned>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	d14d      	bne.n	800ae2a <_malloc_r+0xde>
 800ad8e:	6834      	ldr	r4, [r6, #0]
 800ad90:	4626      	mov	r6, r4
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	d140      	bne.n	800ae18 <_malloc_r+0xcc>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	eb04 0803 	add.w	r8, r4, r3
 800ada0:	f000 fb36 	bl	800b410 <_sbrk_r>
 800ada4:	4580      	cmp	r8, r0
 800ada6:	d13a      	bne.n	800ae1e <_malloc_r+0xd2>
 800ada8:	6821      	ldr	r1, [r4, #0]
 800adaa:	3503      	adds	r5, #3
 800adac:	1a6d      	subs	r5, r5, r1
 800adae:	f025 0503 	bic.w	r5, r5, #3
 800adb2:	3508      	adds	r5, #8
 800adb4:	2d0c      	cmp	r5, #12
 800adb6:	bf38      	it	cc
 800adb8:	250c      	movcc	r5, #12
 800adba:	4629      	mov	r1, r5
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7ff ffa5 	bl	800ad0c <sbrk_aligned>
 800adc2:	3001      	adds	r0, #1
 800adc4:	d02b      	beq.n	800ae1e <_malloc_r+0xd2>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	442b      	add	r3, r5
 800adca:	6023      	str	r3, [r4, #0]
 800adcc:	e00e      	b.n	800adec <_malloc_r+0xa0>
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	1b52      	subs	r2, r2, r5
 800add2:	d41e      	bmi.n	800ae12 <_malloc_r+0xc6>
 800add4:	2a0b      	cmp	r2, #11
 800add6:	d916      	bls.n	800ae06 <_malloc_r+0xba>
 800add8:	1961      	adds	r1, r4, r5
 800adda:	42a3      	cmp	r3, r4
 800addc:	6025      	str	r5, [r4, #0]
 800adde:	bf18      	it	ne
 800ade0:	6059      	strne	r1, [r3, #4]
 800ade2:	6863      	ldr	r3, [r4, #4]
 800ade4:	bf08      	it	eq
 800ade6:	6031      	streq	r1, [r6, #0]
 800ade8:	5162      	str	r2, [r4, r5]
 800adea:	604b      	str	r3, [r1, #4]
 800adec:	4638      	mov	r0, r7
 800adee:	f104 060b 	add.w	r6, r4, #11
 800adf2:	f000 fbbd 	bl	800b570 <__malloc_unlock>
 800adf6:	f026 0607 	bic.w	r6, r6, #7
 800adfa:	1d23      	adds	r3, r4, #4
 800adfc:	1af2      	subs	r2, r6, r3
 800adfe:	d0b6      	beq.n	800ad6e <_malloc_r+0x22>
 800ae00:	1b9b      	subs	r3, r3, r6
 800ae02:	50a3      	str	r3, [r4, r2]
 800ae04:	e7b3      	b.n	800ad6e <_malloc_r+0x22>
 800ae06:	6862      	ldr	r2, [r4, #4]
 800ae08:	42a3      	cmp	r3, r4
 800ae0a:	bf0c      	ite	eq
 800ae0c:	6032      	streq	r2, [r6, #0]
 800ae0e:	605a      	strne	r2, [r3, #4]
 800ae10:	e7ec      	b.n	800adec <_malloc_r+0xa0>
 800ae12:	4623      	mov	r3, r4
 800ae14:	6864      	ldr	r4, [r4, #4]
 800ae16:	e7b2      	b.n	800ad7e <_malloc_r+0x32>
 800ae18:	4634      	mov	r4, r6
 800ae1a:	6876      	ldr	r6, [r6, #4]
 800ae1c:	e7b9      	b.n	800ad92 <_malloc_r+0x46>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	4638      	mov	r0, r7
 800ae24:	f000 fba4 	bl	800b570 <__malloc_unlock>
 800ae28:	e7a1      	b.n	800ad6e <_malloc_r+0x22>
 800ae2a:	6025      	str	r5, [r4, #0]
 800ae2c:	e7de      	b.n	800adec <_malloc_r+0xa0>
 800ae2e:	bf00      	nop
 800ae30:	20001550 	.word	0x20001550

0800ae34 <__sfputc_r>:
 800ae34:	6893      	ldr	r3, [r2, #8]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	b410      	push	{r4}
 800ae3c:	6093      	str	r3, [r2, #8]
 800ae3e:	da08      	bge.n	800ae52 <__sfputc_r+0x1e>
 800ae40:	6994      	ldr	r4, [r2, #24]
 800ae42:	42a3      	cmp	r3, r4
 800ae44:	db01      	blt.n	800ae4a <__sfputc_r+0x16>
 800ae46:	290a      	cmp	r1, #10
 800ae48:	d103      	bne.n	800ae52 <__sfputc_r+0x1e>
 800ae4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae4e:	f7ff bc31 	b.w	800a6b4 <__swbuf_r>
 800ae52:	6813      	ldr	r3, [r2, #0]
 800ae54:	1c58      	adds	r0, r3, #1
 800ae56:	6010      	str	r0, [r2, #0]
 800ae58:	7019      	strb	r1, [r3, #0]
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <__sfputs_r>:
 800ae62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae64:	4606      	mov	r6, r0
 800ae66:	460f      	mov	r7, r1
 800ae68:	4614      	mov	r4, r2
 800ae6a:	18d5      	adds	r5, r2, r3
 800ae6c:	42ac      	cmp	r4, r5
 800ae6e:	d101      	bne.n	800ae74 <__sfputs_r+0x12>
 800ae70:	2000      	movs	r0, #0
 800ae72:	e007      	b.n	800ae84 <__sfputs_r+0x22>
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	463a      	mov	r2, r7
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7ff ffda 	bl	800ae34 <__sfputc_r>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d1f3      	bne.n	800ae6c <__sfputs_r+0xa>
 800ae84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae88 <_vfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	b09d      	sub	sp, #116	; 0x74
 800ae90:	4614      	mov	r4, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	4606      	mov	r6, r0
 800ae96:	b118      	cbz	r0, 800aea0 <_vfiprintf_r+0x18>
 800ae98:	6983      	ldr	r3, [r0, #24]
 800ae9a:	b90b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x18>
 800ae9c:	f7ff fde4 	bl	800aa68 <__sinit>
 800aea0:	4b89      	ldr	r3, [pc, #548]	; (800b0c8 <_vfiprintf_r+0x240>)
 800aea2:	429d      	cmp	r5, r3
 800aea4:	d11b      	bne.n	800aede <_vfiprintf_r+0x56>
 800aea6:	6875      	ldr	r5, [r6, #4]
 800aea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeaa:	07d9      	lsls	r1, r3, #31
 800aeac:	d405      	bmi.n	800aeba <_vfiprintf_r+0x32>
 800aeae:	89ab      	ldrh	r3, [r5, #12]
 800aeb0:	059a      	lsls	r2, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_vfiprintf_r+0x32>
 800aeb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb6:	f7ff fe75 	bl	800aba4 <__retarget_lock_acquire_recursive>
 800aeba:	89ab      	ldrh	r3, [r5, #12]
 800aebc:	071b      	lsls	r3, r3, #28
 800aebe:	d501      	bpl.n	800aec4 <_vfiprintf_r+0x3c>
 800aec0:	692b      	ldr	r3, [r5, #16]
 800aec2:	b9eb      	cbnz	r3, 800af00 <_vfiprintf_r+0x78>
 800aec4:	4629      	mov	r1, r5
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff fc46 	bl	800a758 <__swsetup_r>
 800aecc:	b1c0      	cbz	r0, 800af00 <_vfiprintf_r+0x78>
 800aece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aed0:	07dc      	lsls	r4, r3, #31
 800aed2:	d50e      	bpl.n	800aef2 <_vfiprintf_r+0x6a>
 800aed4:	f04f 30ff 	mov.w	r0, #4294967295
 800aed8:	b01d      	add	sp, #116	; 0x74
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	4b7b      	ldr	r3, [pc, #492]	; (800b0cc <_vfiprintf_r+0x244>)
 800aee0:	429d      	cmp	r5, r3
 800aee2:	d101      	bne.n	800aee8 <_vfiprintf_r+0x60>
 800aee4:	68b5      	ldr	r5, [r6, #8]
 800aee6:	e7df      	b.n	800aea8 <_vfiprintf_r+0x20>
 800aee8:	4b79      	ldr	r3, [pc, #484]	; (800b0d0 <_vfiprintf_r+0x248>)
 800aeea:	429d      	cmp	r5, r3
 800aeec:	bf08      	it	eq
 800aeee:	68f5      	ldreq	r5, [r6, #12]
 800aef0:	e7da      	b.n	800aea8 <_vfiprintf_r+0x20>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	0598      	lsls	r0, r3, #22
 800aef6:	d4ed      	bmi.n	800aed4 <_vfiprintf_r+0x4c>
 800aef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefa:	f7ff fe54 	bl	800aba6 <__retarget_lock_release_recursive>
 800aefe:	e7e9      	b.n	800aed4 <_vfiprintf_r+0x4c>
 800af00:	2300      	movs	r3, #0
 800af02:	9309      	str	r3, [sp, #36]	; 0x24
 800af04:	2320      	movs	r3, #32
 800af06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af0e:	2330      	movs	r3, #48	; 0x30
 800af10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0d4 <_vfiprintf_r+0x24c>
 800af14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af18:	f04f 0901 	mov.w	r9, #1
 800af1c:	4623      	mov	r3, r4
 800af1e:	469a      	mov	sl, r3
 800af20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af24:	b10a      	cbz	r2, 800af2a <_vfiprintf_r+0xa2>
 800af26:	2a25      	cmp	r2, #37	; 0x25
 800af28:	d1f9      	bne.n	800af1e <_vfiprintf_r+0x96>
 800af2a:	ebba 0b04 	subs.w	fp, sl, r4
 800af2e:	d00b      	beq.n	800af48 <_vfiprintf_r+0xc0>
 800af30:	465b      	mov	r3, fp
 800af32:	4622      	mov	r2, r4
 800af34:	4629      	mov	r1, r5
 800af36:	4630      	mov	r0, r6
 800af38:	f7ff ff93 	bl	800ae62 <__sfputs_r>
 800af3c:	3001      	adds	r0, #1
 800af3e:	f000 80aa 	beq.w	800b096 <_vfiprintf_r+0x20e>
 800af42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af44:	445a      	add	r2, fp
 800af46:	9209      	str	r2, [sp, #36]	; 0x24
 800af48:	f89a 3000 	ldrb.w	r3, [sl]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 80a2 	beq.w	800b096 <_vfiprintf_r+0x20e>
 800af52:	2300      	movs	r3, #0
 800af54:	f04f 32ff 	mov.w	r2, #4294967295
 800af58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af5c:	f10a 0a01 	add.w	sl, sl, #1
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	9307      	str	r3, [sp, #28]
 800af64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af68:	931a      	str	r3, [sp, #104]	; 0x68
 800af6a:	4654      	mov	r4, sl
 800af6c:	2205      	movs	r2, #5
 800af6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af72:	4858      	ldr	r0, [pc, #352]	; (800b0d4 <_vfiprintf_r+0x24c>)
 800af74:	f7f5 f90c 	bl	8000190 <memchr>
 800af78:	9a04      	ldr	r2, [sp, #16]
 800af7a:	b9d8      	cbnz	r0, 800afb4 <_vfiprintf_r+0x12c>
 800af7c:	06d1      	lsls	r1, r2, #27
 800af7e:	bf44      	itt	mi
 800af80:	2320      	movmi	r3, #32
 800af82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af86:	0713      	lsls	r3, r2, #28
 800af88:	bf44      	itt	mi
 800af8a:	232b      	movmi	r3, #43	; 0x2b
 800af8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af90:	f89a 3000 	ldrb.w	r3, [sl]
 800af94:	2b2a      	cmp	r3, #42	; 0x2a
 800af96:	d015      	beq.n	800afc4 <_vfiprintf_r+0x13c>
 800af98:	9a07      	ldr	r2, [sp, #28]
 800af9a:	4654      	mov	r4, sl
 800af9c:	2000      	movs	r0, #0
 800af9e:	f04f 0c0a 	mov.w	ip, #10
 800afa2:	4621      	mov	r1, r4
 800afa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa8:	3b30      	subs	r3, #48	; 0x30
 800afaa:	2b09      	cmp	r3, #9
 800afac:	d94e      	bls.n	800b04c <_vfiprintf_r+0x1c4>
 800afae:	b1b0      	cbz	r0, 800afde <_vfiprintf_r+0x156>
 800afb0:	9207      	str	r2, [sp, #28]
 800afb2:	e014      	b.n	800afde <_vfiprintf_r+0x156>
 800afb4:	eba0 0308 	sub.w	r3, r0, r8
 800afb8:	fa09 f303 	lsl.w	r3, r9, r3
 800afbc:	4313      	orrs	r3, r2
 800afbe:	9304      	str	r3, [sp, #16]
 800afc0:	46a2      	mov	sl, r4
 800afc2:	e7d2      	b.n	800af6a <_vfiprintf_r+0xe2>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	1d19      	adds	r1, r3, #4
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	9103      	str	r1, [sp, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bfbb      	ittet	lt
 800afd0:	425b      	neglt	r3, r3
 800afd2:	f042 0202 	orrlt.w	r2, r2, #2
 800afd6:	9307      	strge	r3, [sp, #28]
 800afd8:	9307      	strlt	r3, [sp, #28]
 800afda:	bfb8      	it	lt
 800afdc:	9204      	strlt	r2, [sp, #16]
 800afde:	7823      	ldrb	r3, [r4, #0]
 800afe0:	2b2e      	cmp	r3, #46	; 0x2e
 800afe2:	d10c      	bne.n	800affe <_vfiprintf_r+0x176>
 800afe4:	7863      	ldrb	r3, [r4, #1]
 800afe6:	2b2a      	cmp	r3, #42	; 0x2a
 800afe8:	d135      	bne.n	800b056 <_vfiprintf_r+0x1ce>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	1d1a      	adds	r2, r3, #4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	9203      	str	r2, [sp, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfb8      	it	lt
 800aff6:	f04f 33ff 	movlt.w	r3, #4294967295
 800affa:	3402      	adds	r4, #2
 800affc:	9305      	str	r3, [sp, #20]
 800affe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0e4 <_vfiprintf_r+0x25c>
 800b002:	7821      	ldrb	r1, [r4, #0]
 800b004:	2203      	movs	r2, #3
 800b006:	4650      	mov	r0, sl
 800b008:	f7f5 f8c2 	bl	8000190 <memchr>
 800b00c:	b140      	cbz	r0, 800b020 <_vfiprintf_r+0x198>
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	eba0 000a 	sub.w	r0, r0, sl
 800b014:	fa03 f000 	lsl.w	r0, r3, r0
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	4303      	orrs	r3, r0
 800b01c:	3401      	adds	r4, #1
 800b01e:	9304      	str	r3, [sp, #16]
 800b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b024:	482c      	ldr	r0, [pc, #176]	; (800b0d8 <_vfiprintf_r+0x250>)
 800b026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b02a:	2206      	movs	r2, #6
 800b02c:	f7f5 f8b0 	bl	8000190 <memchr>
 800b030:	2800      	cmp	r0, #0
 800b032:	d03f      	beq.n	800b0b4 <_vfiprintf_r+0x22c>
 800b034:	4b29      	ldr	r3, [pc, #164]	; (800b0dc <_vfiprintf_r+0x254>)
 800b036:	bb1b      	cbnz	r3, 800b080 <_vfiprintf_r+0x1f8>
 800b038:	9b03      	ldr	r3, [sp, #12]
 800b03a:	3307      	adds	r3, #7
 800b03c:	f023 0307 	bic.w	r3, r3, #7
 800b040:	3308      	adds	r3, #8
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b046:	443b      	add	r3, r7
 800b048:	9309      	str	r3, [sp, #36]	; 0x24
 800b04a:	e767      	b.n	800af1c <_vfiprintf_r+0x94>
 800b04c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b050:	460c      	mov	r4, r1
 800b052:	2001      	movs	r0, #1
 800b054:	e7a5      	b.n	800afa2 <_vfiprintf_r+0x11a>
 800b056:	2300      	movs	r3, #0
 800b058:	3401      	adds	r4, #1
 800b05a:	9305      	str	r3, [sp, #20]
 800b05c:	4619      	mov	r1, r3
 800b05e:	f04f 0c0a 	mov.w	ip, #10
 800b062:	4620      	mov	r0, r4
 800b064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b068:	3a30      	subs	r2, #48	; 0x30
 800b06a:	2a09      	cmp	r2, #9
 800b06c:	d903      	bls.n	800b076 <_vfiprintf_r+0x1ee>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0c5      	beq.n	800affe <_vfiprintf_r+0x176>
 800b072:	9105      	str	r1, [sp, #20]
 800b074:	e7c3      	b.n	800affe <_vfiprintf_r+0x176>
 800b076:	fb0c 2101 	mla	r1, ip, r1, r2
 800b07a:	4604      	mov	r4, r0
 800b07c:	2301      	movs	r3, #1
 800b07e:	e7f0      	b.n	800b062 <_vfiprintf_r+0x1da>
 800b080:	ab03      	add	r3, sp, #12
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	462a      	mov	r2, r5
 800b086:	4b16      	ldr	r3, [pc, #88]	; (800b0e0 <_vfiprintf_r+0x258>)
 800b088:	a904      	add	r1, sp, #16
 800b08a:	4630      	mov	r0, r6
 800b08c:	f3af 8000 	nop.w
 800b090:	4607      	mov	r7, r0
 800b092:	1c78      	adds	r0, r7, #1
 800b094:	d1d6      	bne.n	800b044 <_vfiprintf_r+0x1bc>
 800b096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b098:	07d9      	lsls	r1, r3, #31
 800b09a:	d405      	bmi.n	800b0a8 <_vfiprintf_r+0x220>
 800b09c:	89ab      	ldrh	r3, [r5, #12]
 800b09e:	059a      	lsls	r2, r3, #22
 800b0a0:	d402      	bmi.n	800b0a8 <_vfiprintf_r+0x220>
 800b0a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0a4:	f7ff fd7f 	bl	800aba6 <__retarget_lock_release_recursive>
 800b0a8:	89ab      	ldrh	r3, [r5, #12]
 800b0aa:	065b      	lsls	r3, r3, #25
 800b0ac:	f53f af12 	bmi.w	800aed4 <_vfiprintf_r+0x4c>
 800b0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b2:	e711      	b.n	800aed8 <_vfiprintf_r+0x50>
 800b0b4:	ab03      	add	r3, sp, #12
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <_vfiprintf_r+0x258>)
 800b0bc:	a904      	add	r1, sp, #16
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f000 f880 	bl	800b1c4 <_printf_i>
 800b0c4:	e7e4      	b.n	800b090 <_vfiprintf_r+0x208>
 800b0c6:	bf00      	nop
 800b0c8:	0800c0d8 	.word	0x0800c0d8
 800b0cc:	0800c0f8 	.word	0x0800c0f8
 800b0d0:	0800c0b8 	.word	0x0800c0b8
 800b0d4:	0800c118 	.word	0x0800c118
 800b0d8:	0800c122 	.word	0x0800c122
 800b0dc:	00000000 	.word	0x00000000
 800b0e0:	0800ae63 	.word	0x0800ae63
 800b0e4:	0800c11e 	.word	0x0800c11e

0800b0e8 <_printf_common>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	4699      	mov	r9, r3
 800b0f0:	688a      	ldr	r2, [r1, #8]
 800b0f2:	690b      	ldr	r3, [r1, #16]
 800b0f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	bfb8      	it	lt
 800b0fc:	4613      	movlt	r3, r2
 800b0fe:	6033      	str	r3, [r6, #0]
 800b100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b104:	4607      	mov	r7, r0
 800b106:	460c      	mov	r4, r1
 800b108:	b10a      	cbz	r2, 800b10e <_printf_common+0x26>
 800b10a:	3301      	adds	r3, #1
 800b10c:	6033      	str	r3, [r6, #0]
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	0699      	lsls	r1, r3, #26
 800b112:	bf42      	ittt	mi
 800b114:	6833      	ldrmi	r3, [r6, #0]
 800b116:	3302      	addmi	r3, #2
 800b118:	6033      	strmi	r3, [r6, #0]
 800b11a:	6825      	ldr	r5, [r4, #0]
 800b11c:	f015 0506 	ands.w	r5, r5, #6
 800b120:	d106      	bne.n	800b130 <_printf_common+0x48>
 800b122:	f104 0a19 	add.w	sl, r4, #25
 800b126:	68e3      	ldr	r3, [r4, #12]
 800b128:	6832      	ldr	r2, [r6, #0]
 800b12a:	1a9b      	subs	r3, r3, r2
 800b12c:	42ab      	cmp	r3, r5
 800b12e:	dc26      	bgt.n	800b17e <_printf_common+0x96>
 800b130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b134:	1e13      	subs	r3, r2, #0
 800b136:	6822      	ldr	r2, [r4, #0]
 800b138:	bf18      	it	ne
 800b13a:	2301      	movne	r3, #1
 800b13c:	0692      	lsls	r2, r2, #26
 800b13e:	d42b      	bmi.n	800b198 <_printf_common+0xb0>
 800b140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b144:	4649      	mov	r1, r9
 800b146:	4638      	mov	r0, r7
 800b148:	47c0      	blx	r8
 800b14a:	3001      	adds	r0, #1
 800b14c:	d01e      	beq.n	800b18c <_printf_common+0xa4>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	68e5      	ldr	r5, [r4, #12]
 800b152:	6832      	ldr	r2, [r6, #0]
 800b154:	f003 0306 	and.w	r3, r3, #6
 800b158:	2b04      	cmp	r3, #4
 800b15a:	bf08      	it	eq
 800b15c:	1aad      	subeq	r5, r5, r2
 800b15e:	68a3      	ldr	r3, [r4, #8]
 800b160:	6922      	ldr	r2, [r4, #16]
 800b162:	bf0c      	ite	eq
 800b164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b168:	2500      	movne	r5, #0
 800b16a:	4293      	cmp	r3, r2
 800b16c:	bfc4      	itt	gt
 800b16e:	1a9b      	subgt	r3, r3, r2
 800b170:	18ed      	addgt	r5, r5, r3
 800b172:	2600      	movs	r6, #0
 800b174:	341a      	adds	r4, #26
 800b176:	42b5      	cmp	r5, r6
 800b178:	d11a      	bne.n	800b1b0 <_printf_common+0xc8>
 800b17a:	2000      	movs	r0, #0
 800b17c:	e008      	b.n	800b190 <_printf_common+0xa8>
 800b17e:	2301      	movs	r3, #1
 800b180:	4652      	mov	r2, sl
 800b182:	4649      	mov	r1, r9
 800b184:	4638      	mov	r0, r7
 800b186:	47c0      	blx	r8
 800b188:	3001      	adds	r0, #1
 800b18a:	d103      	bne.n	800b194 <_printf_common+0xac>
 800b18c:	f04f 30ff 	mov.w	r0, #4294967295
 800b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b194:	3501      	adds	r5, #1
 800b196:	e7c6      	b.n	800b126 <_printf_common+0x3e>
 800b198:	18e1      	adds	r1, r4, r3
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	2030      	movs	r0, #48	; 0x30
 800b19e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1a2:	4422      	add	r2, r4
 800b1a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	e7c7      	b.n	800b140 <_printf_common+0x58>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	47c0      	blx	r8
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	d0e6      	beq.n	800b18c <_printf_common+0xa4>
 800b1be:	3601      	adds	r6, #1
 800b1c0:	e7d9      	b.n	800b176 <_printf_common+0x8e>
	...

0800b1c4 <_printf_i>:
 800b1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c8:	7e0f      	ldrb	r7, [r1, #24]
 800b1ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1cc:	2f78      	cmp	r7, #120	; 0x78
 800b1ce:	4691      	mov	r9, r2
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	469a      	mov	sl, r3
 800b1d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1da:	d807      	bhi.n	800b1ec <_printf_i+0x28>
 800b1dc:	2f62      	cmp	r7, #98	; 0x62
 800b1de:	d80a      	bhi.n	800b1f6 <_printf_i+0x32>
 800b1e0:	2f00      	cmp	r7, #0
 800b1e2:	f000 80d8 	beq.w	800b396 <_printf_i+0x1d2>
 800b1e6:	2f58      	cmp	r7, #88	; 0x58
 800b1e8:	f000 80a3 	beq.w	800b332 <_printf_i+0x16e>
 800b1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1f4:	e03a      	b.n	800b26c <_printf_i+0xa8>
 800b1f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1fa:	2b15      	cmp	r3, #21
 800b1fc:	d8f6      	bhi.n	800b1ec <_printf_i+0x28>
 800b1fe:	a101      	add	r1, pc, #4	; (adr r1, 800b204 <_printf_i+0x40>)
 800b200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b204:	0800b25d 	.word	0x0800b25d
 800b208:	0800b271 	.word	0x0800b271
 800b20c:	0800b1ed 	.word	0x0800b1ed
 800b210:	0800b1ed 	.word	0x0800b1ed
 800b214:	0800b1ed 	.word	0x0800b1ed
 800b218:	0800b1ed 	.word	0x0800b1ed
 800b21c:	0800b271 	.word	0x0800b271
 800b220:	0800b1ed 	.word	0x0800b1ed
 800b224:	0800b1ed 	.word	0x0800b1ed
 800b228:	0800b1ed 	.word	0x0800b1ed
 800b22c:	0800b1ed 	.word	0x0800b1ed
 800b230:	0800b37d 	.word	0x0800b37d
 800b234:	0800b2a1 	.word	0x0800b2a1
 800b238:	0800b35f 	.word	0x0800b35f
 800b23c:	0800b1ed 	.word	0x0800b1ed
 800b240:	0800b1ed 	.word	0x0800b1ed
 800b244:	0800b39f 	.word	0x0800b39f
 800b248:	0800b1ed 	.word	0x0800b1ed
 800b24c:	0800b2a1 	.word	0x0800b2a1
 800b250:	0800b1ed 	.word	0x0800b1ed
 800b254:	0800b1ed 	.word	0x0800b1ed
 800b258:	0800b367 	.word	0x0800b367
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	1d1a      	adds	r2, r3, #4
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	602a      	str	r2, [r5, #0]
 800b264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b26c:	2301      	movs	r3, #1
 800b26e:	e0a3      	b.n	800b3b8 <_printf_i+0x1f4>
 800b270:	6820      	ldr	r0, [r4, #0]
 800b272:	6829      	ldr	r1, [r5, #0]
 800b274:	0606      	lsls	r6, r0, #24
 800b276:	f101 0304 	add.w	r3, r1, #4
 800b27a:	d50a      	bpl.n	800b292 <_printf_i+0xce>
 800b27c:	680e      	ldr	r6, [r1, #0]
 800b27e:	602b      	str	r3, [r5, #0]
 800b280:	2e00      	cmp	r6, #0
 800b282:	da03      	bge.n	800b28c <_printf_i+0xc8>
 800b284:	232d      	movs	r3, #45	; 0x2d
 800b286:	4276      	negs	r6, r6
 800b288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b28c:	485e      	ldr	r0, [pc, #376]	; (800b408 <_printf_i+0x244>)
 800b28e:	230a      	movs	r3, #10
 800b290:	e019      	b.n	800b2c6 <_printf_i+0x102>
 800b292:	680e      	ldr	r6, [r1, #0]
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b29a:	bf18      	it	ne
 800b29c:	b236      	sxthne	r6, r6
 800b29e:	e7ef      	b.n	800b280 <_printf_i+0xbc>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	6820      	ldr	r0, [r4, #0]
 800b2a4:	1d19      	adds	r1, r3, #4
 800b2a6:	6029      	str	r1, [r5, #0]
 800b2a8:	0601      	lsls	r1, r0, #24
 800b2aa:	d501      	bpl.n	800b2b0 <_printf_i+0xec>
 800b2ac:	681e      	ldr	r6, [r3, #0]
 800b2ae:	e002      	b.n	800b2b6 <_printf_i+0xf2>
 800b2b0:	0646      	lsls	r6, r0, #25
 800b2b2:	d5fb      	bpl.n	800b2ac <_printf_i+0xe8>
 800b2b4:	881e      	ldrh	r6, [r3, #0]
 800b2b6:	4854      	ldr	r0, [pc, #336]	; (800b408 <_printf_i+0x244>)
 800b2b8:	2f6f      	cmp	r7, #111	; 0x6f
 800b2ba:	bf0c      	ite	eq
 800b2bc:	2308      	moveq	r3, #8
 800b2be:	230a      	movne	r3, #10
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2c6:	6865      	ldr	r5, [r4, #4]
 800b2c8:	60a5      	str	r5, [r4, #8]
 800b2ca:	2d00      	cmp	r5, #0
 800b2cc:	bfa2      	ittt	ge
 800b2ce:	6821      	ldrge	r1, [r4, #0]
 800b2d0:	f021 0104 	bicge.w	r1, r1, #4
 800b2d4:	6021      	strge	r1, [r4, #0]
 800b2d6:	b90e      	cbnz	r6, 800b2dc <_printf_i+0x118>
 800b2d8:	2d00      	cmp	r5, #0
 800b2da:	d04d      	beq.n	800b378 <_printf_i+0x1b4>
 800b2dc:	4615      	mov	r5, r2
 800b2de:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2e2:	fb03 6711 	mls	r7, r3, r1, r6
 800b2e6:	5dc7      	ldrb	r7, [r0, r7]
 800b2e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2ec:	4637      	mov	r7, r6
 800b2ee:	42bb      	cmp	r3, r7
 800b2f0:	460e      	mov	r6, r1
 800b2f2:	d9f4      	bls.n	800b2de <_printf_i+0x11a>
 800b2f4:	2b08      	cmp	r3, #8
 800b2f6:	d10b      	bne.n	800b310 <_printf_i+0x14c>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	07de      	lsls	r6, r3, #31
 800b2fc:	d508      	bpl.n	800b310 <_printf_i+0x14c>
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	6861      	ldr	r1, [r4, #4]
 800b302:	4299      	cmp	r1, r3
 800b304:	bfde      	ittt	le
 800b306:	2330      	movle	r3, #48	; 0x30
 800b308:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b30c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b310:	1b52      	subs	r2, r2, r5
 800b312:	6122      	str	r2, [r4, #16]
 800b314:	f8cd a000 	str.w	sl, [sp]
 800b318:	464b      	mov	r3, r9
 800b31a:	aa03      	add	r2, sp, #12
 800b31c:	4621      	mov	r1, r4
 800b31e:	4640      	mov	r0, r8
 800b320:	f7ff fee2 	bl	800b0e8 <_printf_common>
 800b324:	3001      	adds	r0, #1
 800b326:	d14c      	bne.n	800b3c2 <_printf_i+0x1fe>
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	b004      	add	sp, #16
 800b32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b332:	4835      	ldr	r0, [pc, #212]	; (800b408 <_printf_i+0x244>)
 800b334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b338:	6829      	ldr	r1, [r5, #0]
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b340:	6029      	str	r1, [r5, #0]
 800b342:	061d      	lsls	r5, r3, #24
 800b344:	d514      	bpl.n	800b370 <_printf_i+0x1ac>
 800b346:	07df      	lsls	r7, r3, #31
 800b348:	bf44      	itt	mi
 800b34a:	f043 0320 	orrmi.w	r3, r3, #32
 800b34e:	6023      	strmi	r3, [r4, #0]
 800b350:	b91e      	cbnz	r6, 800b35a <_printf_i+0x196>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	f023 0320 	bic.w	r3, r3, #32
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	2310      	movs	r3, #16
 800b35c:	e7b0      	b.n	800b2c0 <_printf_i+0xfc>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	f043 0320 	orr.w	r3, r3, #32
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	2378      	movs	r3, #120	; 0x78
 800b368:	4828      	ldr	r0, [pc, #160]	; (800b40c <_printf_i+0x248>)
 800b36a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b36e:	e7e3      	b.n	800b338 <_printf_i+0x174>
 800b370:	0659      	lsls	r1, r3, #25
 800b372:	bf48      	it	mi
 800b374:	b2b6      	uxthmi	r6, r6
 800b376:	e7e6      	b.n	800b346 <_printf_i+0x182>
 800b378:	4615      	mov	r5, r2
 800b37a:	e7bb      	b.n	800b2f4 <_printf_i+0x130>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	6826      	ldr	r6, [r4, #0]
 800b380:	6961      	ldr	r1, [r4, #20]
 800b382:	1d18      	adds	r0, r3, #4
 800b384:	6028      	str	r0, [r5, #0]
 800b386:	0635      	lsls	r5, r6, #24
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	d501      	bpl.n	800b390 <_printf_i+0x1cc>
 800b38c:	6019      	str	r1, [r3, #0]
 800b38e:	e002      	b.n	800b396 <_printf_i+0x1d2>
 800b390:	0670      	lsls	r0, r6, #25
 800b392:	d5fb      	bpl.n	800b38c <_printf_i+0x1c8>
 800b394:	8019      	strh	r1, [r3, #0]
 800b396:	2300      	movs	r3, #0
 800b398:	6123      	str	r3, [r4, #16]
 800b39a:	4615      	mov	r5, r2
 800b39c:	e7ba      	b.n	800b314 <_printf_i+0x150>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	1d1a      	adds	r2, r3, #4
 800b3a2:	602a      	str	r2, [r5, #0]
 800b3a4:	681d      	ldr	r5, [r3, #0]
 800b3a6:	6862      	ldr	r2, [r4, #4]
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f7f4 fef0 	bl	8000190 <memchr>
 800b3b0:	b108      	cbz	r0, 800b3b6 <_printf_i+0x1f2>
 800b3b2:	1b40      	subs	r0, r0, r5
 800b3b4:	6060      	str	r0, [r4, #4]
 800b3b6:	6863      	ldr	r3, [r4, #4]
 800b3b8:	6123      	str	r3, [r4, #16]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3c0:	e7a8      	b.n	800b314 <_printf_i+0x150>
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	462a      	mov	r2, r5
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	47d0      	blx	sl
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d0ab      	beq.n	800b328 <_printf_i+0x164>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	079b      	lsls	r3, r3, #30
 800b3d4:	d413      	bmi.n	800b3fe <_printf_i+0x23a>
 800b3d6:	68e0      	ldr	r0, [r4, #12]
 800b3d8:	9b03      	ldr	r3, [sp, #12]
 800b3da:	4298      	cmp	r0, r3
 800b3dc:	bfb8      	it	lt
 800b3de:	4618      	movlt	r0, r3
 800b3e0:	e7a4      	b.n	800b32c <_printf_i+0x168>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	47d0      	blx	sl
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d09b      	beq.n	800b328 <_printf_i+0x164>
 800b3f0:	3501      	adds	r5, #1
 800b3f2:	68e3      	ldr	r3, [r4, #12]
 800b3f4:	9903      	ldr	r1, [sp, #12]
 800b3f6:	1a5b      	subs	r3, r3, r1
 800b3f8:	42ab      	cmp	r3, r5
 800b3fa:	dcf2      	bgt.n	800b3e2 <_printf_i+0x21e>
 800b3fc:	e7eb      	b.n	800b3d6 <_printf_i+0x212>
 800b3fe:	2500      	movs	r5, #0
 800b400:	f104 0619 	add.w	r6, r4, #25
 800b404:	e7f5      	b.n	800b3f2 <_printf_i+0x22e>
 800b406:	bf00      	nop
 800b408:	0800c129 	.word	0x0800c129
 800b40c:	0800c13a 	.word	0x0800c13a

0800b410 <_sbrk_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4d06      	ldr	r5, [pc, #24]	; (800b42c <_sbrk_r+0x1c>)
 800b414:	2300      	movs	r3, #0
 800b416:	4604      	mov	r4, r0
 800b418:	4608      	mov	r0, r1
 800b41a:	602b      	str	r3, [r5, #0]
 800b41c:	f7f7 f90a 	bl	8002634 <_sbrk>
 800b420:	1c43      	adds	r3, r0, #1
 800b422:	d102      	bne.n	800b42a <_sbrk_r+0x1a>
 800b424:	682b      	ldr	r3, [r5, #0]
 800b426:	b103      	cbz	r3, 800b42a <_sbrk_r+0x1a>
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	bd38      	pop	{r3, r4, r5, pc}
 800b42c:	20001558 	.word	0x20001558

0800b430 <__sread>:
 800b430:	b510      	push	{r4, lr}
 800b432:	460c      	mov	r4, r1
 800b434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b438:	f000 f8a0 	bl	800b57c <_read_r>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	bfab      	itete	ge
 800b440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b442:	89a3      	ldrhlt	r3, [r4, #12]
 800b444:	181b      	addge	r3, r3, r0
 800b446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b44a:	bfac      	ite	ge
 800b44c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b44e:	81a3      	strhlt	r3, [r4, #12]
 800b450:	bd10      	pop	{r4, pc}

0800b452 <__swrite>:
 800b452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b456:	461f      	mov	r7, r3
 800b458:	898b      	ldrh	r3, [r1, #12]
 800b45a:	05db      	lsls	r3, r3, #23
 800b45c:	4605      	mov	r5, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	4616      	mov	r6, r2
 800b462:	d505      	bpl.n	800b470 <__swrite+0x1e>
 800b464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b468:	2302      	movs	r3, #2
 800b46a:	2200      	movs	r2, #0
 800b46c:	f000 f868 	bl	800b540 <_lseek_r>
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b47a:	81a3      	strh	r3, [r4, #12]
 800b47c:	4632      	mov	r2, r6
 800b47e:	463b      	mov	r3, r7
 800b480:	4628      	mov	r0, r5
 800b482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b486:	f000 b817 	b.w	800b4b8 <_write_r>

0800b48a <__sseek>:
 800b48a:	b510      	push	{r4, lr}
 800b48c:	460c      	mov	r4, r1
 800b48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b492:	f000 f855 	bl	800b540 <_lseek_r>
 800b496:	1c43      	adds	r3, r0, #1
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	bf15      	itete	ne
 800b49c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b49e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4a6:	81a3      	strheq	r3, [r4, #12]
 800b4a8:	bf18      	it	ne
 800b4aa:	81a3      	strhne	r3, [r4, #12]
 800b4ac:	bd10      	pop	{r4, pc}

0800b4ae <__sclose>:
 800b4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b2:	f000 b813 	b.w	800b4dc <_close_r>
	...

0800b4b8 <_write_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4d07      	ldr	r5, [pc, #28]	; (800b4d8 <_write_r+0x20>)
 800b4bc:	4604      	mov	r4, r0
 800b4be:	4608      	mov	r0, r1
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	602a      	str	r2, [r5, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f7fe f856 	bl	8009578 <_write>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_write_r+0x1e>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_write_r+0x1e>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	20001558 	.word	0x20001558

0800b4dc <_close_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d06      	ldr	r5, [pc, #24]	; (800b4f8 <_close_r+0x1c>)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	602b      	str	r3, [r5, #0]
 800b4e8:	f7f7 f870 	bl	80025cc <_close>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_close_r+0x1a>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_close_r+0x1a>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	20001558 	.word	0x20001558

0800b4fc <_fstat_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d07      	ldr	r5, [pc, #28]	; (800b51c <_fstat_r+0x20>)
 800b500:	2300      	movs	r3, #0
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	4611      	mov	r1, r2
 800b508:	602b      	str	r3, [r5, #0]
 800b50a:	f7f7 f86b 	bl	80025e4 <_fstat>
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	d102      	bne.n	800b518 <_fstat_r+0x1c>
 800b512:	682b      	ldr	r3, [r5, #0]
 800b514:	b103      	cbz	r3, 800b518 <_fstat_r+0x1c>
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	bd38      	pop	{r3, r4, r5, pc}
 800b51a:	bf00      	nop
 800b51c:	20001558 	.word	0x20001558

0800b520 <_isatty_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d06      	ldr	r5, [pc, #24]	; (800b53c <_isatty_r+0x1c>)
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	f7f7 f86a 	bl	8002604 <_isatty>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_isatty_r+0x1a>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_isatty_r+0x1a>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	20001558 	.word	0x20001558

0800b540 <_lseek_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	; (800b560 <_lseek_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f7 f863 	bl	800261a <_lseek>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_lseek_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_lseek_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20001558 	.word	0x20001558

0800b564 <__malloc_lock>:
 800b564:	4801      	ldr	r0, [pc, #4]	; (800b56c <__malloc_lock+0x8>)
 800b566:	f7ff bb1d 	b.w	800aba4 <__retarget_lock_acquire_recursive>
 800b56a:	bf00      	nop
 800b56c:	2000154c 	.word	0x2000154c

0800b570 <__malloc_unlock>:
 800b570:	4801      	ldr	r0, [pc, #4]	; (800b578 <__malloc_unlock+0x8>)
 800b572:	f7ff bb18 	b.w	800aba6 <__retarget_lock_release_recursive>
 800b576:	bf00      	nop
 800b578:	2000154c 	.word	0x2000154c

0800b57c <_read_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d07      	ldr	r5, [pc, #28]	; (800b59c <_read_r+0x20>)
 800b580:	4604      	mov	r4, r0
 800b582:	4608      	mov	r0, r1
 800b584:	4611      	mov	r1, r2
 800b586:	2200      	movs	r2, #0
 800b588:	602a      	str	r2, [r5, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	f7f7 f801 	bl	8002592 <_read>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_read_r+0x1e>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_read_r+0x1e>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	20001558 	.word	0x20001558

0800b5a0 <_init>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	bf00      	nop
 800b5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a6:	bc08      	pop	{r3}
 800b5a8:	469e      	mov	lr, r3
 800b5aa:	4770      	bx	lr

0800b5ac <_fini>:
 800b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ae:	bf00      	nop
 800b5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5b2:	bc08      	pop	{r3}
 800b5b4:	469e      	mov	lr, r3
 800b5b6:	4770      	bx	lr
