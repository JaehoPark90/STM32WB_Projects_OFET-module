
I2C_WakeUpFromStop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  20000008  080046b4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000014c  20000108  080047b4  00020108  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000254  080047b4  00020254  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000fa04  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0000ebb2  00000000  00000000  0002fb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022f6  00000000  00000000  0003e6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  000409e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000d01fe  00000000  00000000  00041c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001198  00000000  00000000  00111e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000209a9  00000000  00000000  00113010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001339b9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004cb4  00000000  00000000  00133a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000108 	.word	0x20000108
 8000158:	00000000 	.word	0x00000000
 800015c:	080045d4 	.word	0x080045d4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000010c 	.word	0x2000010c
 8000178:	080045d4 	.word	0x080045d4

0800017c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800017c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800017e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000180:	3304      	adds	r3, #4

08000182 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000182:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000184:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000186:	d3f9      	bcc.n	800017c <CopyDataInit>
  bx lr
 8000188:	4770      	bx	lr

0800018a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800018a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800018c:	3004      	adds	r0, #4

0800018e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800018e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000190:	d3fb      	bcc.n	800018a <FillZerobss>
  bx lr
 8000192:	4770      	bx	lr

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000198:	f000 fbbc 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800019c:	480b      	ldr	r0, [pc, #44]	; (80001cc <LoopForever+0x8>)
 800019e:	490c      	ldr	r1, [pc, #48]	; (80001d0 <LoopForever+0xc>)
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <LoopForever+0x10>)
 80001a2:	2300      	movs	r3, #0
 80001a4:	f7ff ffed 	bl	8000182 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001a8:	480b      	ldr	r0, [pc, #44]	; (80001d8 <LoopForever+0x14>)
 80001aa:	490c      	ldr	r1, [pc, #48]	; (80001dc <LoopForever+0x18>)
 80001ac:	2300      	movs	r3, #0
 80001ae:	f7ff ffee 	bl	800018e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001b2:	480b      	ldr	r0, [pc, #44]	; (80001e0 <LoopForever+0x1c>)
 80001b4:	490b      	ldr	r1, [pc, #44]	; (80001e4 <LoopForever+0x20>)
 80001b6:	2300      	movs	r3, #0
 80001b8:	f7ff ffe9 	bl	800018e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001bc:	f004 f9de 	bl	800457c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001c0:	f000 f82c 	bl	800021c <main>

080001c4 <LoopForever>:

LoopForever:
  b LoopForever
 80001c4:	e7fe      	b.n	80001c4 <LoopForever>
 80001c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000108 	.word	0x20000108
 80001d4:	080046b4 	.word	0x080046b4
  INIT_BSS _sbss, _ebss
 80001d8:	20000108 	.word	0x20000108
 80001dc:	20000254 	.word	0x20000254
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001e0:	20030000 	.word	0x20030000
 80001e4:	20030000 	.word	0x20030000

080001e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>

080001ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ea:	b480      	push	{r7}
 80001ec:	b085      	sub	sp, #20
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4313      	orrs	r3, r2
 8000200:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4013      	ands	r3, r2
 800020c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020e:	68fb      	ldr	r3, [r7, #12]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fbce 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f878 	bl	8000318 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000228:	f000 f8c8 	bl	80003bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f926 	bl	800047c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f8e2 	bl	80003f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Configure LED2, LED3 and LED1 */
  BSP_LED_Init(LED2);
 8000234:	2001      	movs	r0, #1
 8000236:	f000 fa75 	bl	8000724 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800023a:	2002      	movs	r0, #2
 800023c:	f000 fa72 	bl	8000724 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fa6f 	bl	8000724 <BSP_LED_Init>

#ifdef MASTER_BOARD
  
  /* Configure User push-button (SW1) */
  BSP_PB_Init(BUTTON_SW1,BUTTON_MODE_GPIO);
 8000246:	2100      	movs	r1, #0
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fad9 	bl	8000800 <BSP_PB_Init>

  /* Wait for User push-button (SW1) press before starting the Communication */
  while (BSP_PB_GetState(BUTTON_SW1) != GPIO_PIN_RESET)
 800024e:	bf00      	nop
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fb45 	bl	80008e0 <BSP_PB_GetState>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d1f9      	bne.n	8000250 <main+0x34>
  {
  }

  /* Wait for User push-button (SW1) release before starting the Communication */
  while (BSP_PB_GetState(BUTTON_SW1) != GPIO_PIN_SET)
 800025c:	bf00      	nop
 800025e:	2000      	movs	r0, #0
 8000260:	f000 fb3e 	bl	80008e0 <BSP_PB_GetState>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	d1f9      	bne.n	800025e <main+0x42>
  /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through 
     "aTxBuffer" buffer */
  do
  {
    if(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)(I2C_ADDRESS), (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 800026a:	23d8      	movs	r3, #216	; 0xd8
 800026c:	4a27      	ldr	r2, [pc, #156]	; (800030c <main+0xf0>)
 800026e:	21ca      	movs	r1, #202	; 0xca
 8000270:	4827      	ldr	r0, [pc, #156]	; (8000310 <main+0xf4>)
 8000272:	f001 f815 	bl	80012a0 <HAL_I2C_Master_Transmit_IT>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <main+0x64>
    {
      /* Error_Handler() function is called when error occurs. */
      Error_Handler();
 800027c:	f000 f948 	bl	8000510 <Error_Handler>
        state of the peripheral; if it's busy you need to wait for the end of current
        transfer before starting a new one.
        For simplicity reasons, this example is just waiting till the end of the 
        transfer, but application may perform other tasks while transfer operation
        is ongoing. */  
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8000280:	bf00      	nop
 8000282:	4823      	ldr	r0, [pc, #140]	; (8000310 <main+0xf4>)
 8000284:	f001 f9b1 	bl	80015ea <HAL_I2C_GetState>
 8000288:	4603      	mov	r3, r0
 800028a:	2b20      	cmp	r3, #32
 800028c:	d1f9      	bne.n	8000282 <main+0x66>
    } 

    /* When Acknowledge failure occurs (Slave don't acknowledge it's address)
       Master restarts communication */
  }
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800028e:	4820      	ldr	r0, [pc, #128]	; (8000310 <main+0xf4>)
 8000290:	f001 f9b9 	bl	8001606 <HAL_I2C_GetError>
 8000294:	4603      	mov	r3, r0
 8000296:	2b04      	cmp	r3, #4
 8000298:	d0e7      	beq.n	800026a <main+0x4e>

  /* Wait for User push-button (SW1) press before starting the Communication */
  while (BSP_PB_GetState(BUTTON_SW1) != GPIO_PIN_RESET)
 800029a:	bf00      	nop
 800029c:	2000      	movs	r0, #0
 800029e:	f000 fb1f 	bl	80008e0 <BSP_PB_GetState>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1f9      	bne.n	800029c <main+0x80>
  {
  }

  /* Wait for User push-button (SW1) release before starting the Communication */
  while (BSP_PB_GetState(BUTTON_SW1) != GPIO_PIN_SET)
 80002a8:	bf00      	nop
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 fb18 	bl	80008e0 <BSP_PB_GetState>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d1f9      	bne.n	80002aa <main+0x8e>
  }

  /*##- Put I2C peripheral in reception process ###########################*/
  do
  {
    if(HAL_I2C_Master_Receive_IT(&hi2c1, (uint16_t)(I2C_ADDRESS), (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 80002b6:	23d8      	movs	r3, #216	; 0xd8
 80002b8:	4a16      	ldr	r2, [pc, #88]	; (8000314 <main+0xf8>)
 80002ba:	21ca      	movs	r1, #202	; 0xca
 80002bc:	4814      	ldr	r0, [pc, #80]	; (8000310 <main+0xf4>)
 80002be:	f001 f85f 	bl	8001380 <HAL_I2C_Master_Receive_IT>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <main+0xb0>
    {
      /* Error_Handler() function is called when error occurs. */
      Error_Handler();
 80002c8:	f000 f922 	bl	8000510 <Error_Handler>
        state of the peripheral; if it's busy you need to wait for the end of current
        transfer before starting a new one.
        For simplicity reasons, this example is just waiting till the end of the 
        transfer, but application may perform other tasks while transfer operation
        is ongoing. */  
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80002cc:	bf00      	nop
 80002ce:	4810      	ldr	r0, [pc, #64]	; (8000310 <main+0xf4>)
 80002d0:	f001 f98b 	bl	80015ea <HAL_I2C_GetState>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b20      	cmp	r3, #32
 80002d8:	d1f9      	bne.n	80002ce <main+0xb2>
    } 

    /* When Acknowledge failure occurs (Slave don't acknowledge it's address)
       Master restarts communication */
  }
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002da:	480d      	ldr	r0, [pc, #52]	; (8000310 <main+0xf4>)
 80002dc:	f001 f993 	bl	8001606 <HAL_I2C_GetError>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d0e7      	beq.n	80002b6 <main+0x9a>
      state of the peripheral; if it's busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80002e6:	bf00      	nop
 80002e8:	4809      	ldr	r0, [pc, #36]	; (8000310 <main+0xf4>)
 80002ea:	f001 f97e 	bl	80015ea <HAL_I2C_GetState>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b20      	cmp	r3, #32
 80002f2:	d1f9      	bne.n	80002e8 <main+0xcc>
  {
  } 

  /*##- Compare the sent and received buffers ##############################*/
  if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,RXBUFFERSIZE))
 80002f4:	22d8      	movs	r2, #216	; 0xd8
 80002f6:	4907      	ldr	r1, [pc, #28]	; (8000314 <main+0xf8>)
 80002f8:	4804      	ldr	r0, [pc, #16]	; (800030c <main+0xf0>)
 80002fa:	f000 f8e7 	bl	80004cc <Buffercmp>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <main+0xec>
  {
    /* Processing Error */
    Error_Handler();
 8000304:	f000 f904 	bl	8000510 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000308:	e7fe      	b.n	8000308 <main+0xec>
 800030a:	bf00      	nop
 800030c:	20000008 	.word	0x20000008
 8000310:	20000124 	.word	0x20000124
 8000314:	20000178 	.word	0x20000178

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09a      	sub	sp, #104	; 0x68
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0320 	add.w	r3, r7, #32
 8000322:	2248      	movs	r2, #72	; 0x48
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f004 f94c 	bl	80045c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800033e:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <SystemClock_Config+0xa0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000346:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <SystemClock_Config+0xa0>)
 8000348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800034c:	6013      	str	r3, [r2, #0]
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <SystemClock_Config+0xa0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035a:	2302      	movs	r3, #2
 800035c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000364:	2340      	movs	r3, #64	; 0x40
 8000366:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000368:	2300      	movs	r3, #0
 800036a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0320 	add.w	r3, r7, #32
 8000370:	4618      	mov	r0, r3
 8000372:	f002 fef5 	bl	8003160 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800037c:	f000 f8c8 	bl	8000510 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000380:	236f      	movs	r3, #111	; 0x6f
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000384:	2301      	movs	r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 fa51 	bl	8003848 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003ac:	f000 f8b0 	bl	8000510 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3768      	adds	r7, #104	; 0x68
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	58000400 	.word	0x58000400

080003bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b094      	sub	sp, #80	; 0x50
 80003c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003c2:	463b      	mov	r3, r7
 80003c4:	2250      	movs	r2, #80	; 0x50
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 f8fb 	bl	80045c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80003ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003d4:	2300      	movs	r3, #0
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80003d8:	2310      	movs	r3, #16
 80003da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003dc:	463b      	mov	r3, r7
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 fe45 	bl	800406e <HAL_RCCEx_PeriphCLKConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80003ea:	f000 f891 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003ee:	bf00      	nop
 80003f0:	3750      	adds	r7, #80	; 0x50
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_I2C1_Init+0x7c>)
 80003fe:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <MX_I2C1_Init+0x80>)
 8000400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000404:	f640 6214 	movw	r2, #3604	; 0xe14
 8000408:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = I2C_ADDRESS;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_I2C1_Init+0x7c>)
 800040c:	22ca      	movs	r2, #202	; 0xca
 800040e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000412:	2201      	movs	r2, #1
 8000414:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_I2C1_Init+0x7c>)
 800041e:	2200      	movs	r2, #0
 8000420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_I2C1_Init+0x7c>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000436:	f000 fea3 	bl	8001180 <HAL_I2C_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000440:	f000 f866 	bl	8000510 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000444:	2100      	movs	r1, #0
 8000446:	480b      	ldr	r0, [pc, #44]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000448:	f002 fa64 	bl	8002914 <HAL_I2CEx_ConfigAnalogFilter>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000452:	f000 f85d 	bl	8000510 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000456:	2100      	movs	r1, #0
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_I2C1_Init+0x7c>)
 800045a:	f002 faa6 	bl	80029aa <HAL_I2CEx_ConfigDigitalFilter>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000464:	f000 f854 	bl	8000510 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000468:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800046c:	f002 faea 	bl	8002a44 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000124 	.word	0x20000124
 8000478:	40005400 	.word	0x40005400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000480:	2002      	movs	r0, #2
 8000482:	f7ff feb2 	bl	80001ea <LL_AHB2_GRP1_EnableClock>

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_I2C_MasterTxCpltCallback>:
  *         you can add your own implementation. 
  * @retval None
  */
#ifdef MASTER_BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
  /* Toggle LED2: Transfer in transmission process is correct */
  BSP_LED_Toggle(LED2);
 8000492:	2001      	movs	r0, #1
 8000494:	f000 f99a 	bl	80007cc <BSP_LED_Toggle>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HAL_I2C_MasterRxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
#ifdef MASTER_BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* Toggle LED2: Transfer in reception process is correct */
  BSP_LED_Toggle(LED2);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 f98f 	bl	80007cc <BSP_LED_Toggle>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_I2C_ErrorCallback>:
  *         add your own implementation.
  * @retval None
  */
#ifdef MASTER_BOARD
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  /* Turn LED3 on: Transfer error in reception/transmission process */
  BSP_LED_On(LED3); 
 80004be:	2002      	movs	r0, #2
 80004c0:	f000 f96a 	bl	8000798 <BSP_LED_On>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	4613      	mov	r3, r2
 80004d8:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80004da:	e00d      	b.n	80004f8 <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d001      	beq.n	80004ec <Buffercmp+0x20>
    {
      return BufferLength;
 80004e8:	88fb      	ldrh	r3, [r7, #6]
 80004ea:	e00b      	b.n	8000504 <Buffercmp+0x38>
    }
    pBuffer1++;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	1e5a      	subs	r2, r3, #1
 80004fc:	80fa      	strh	r2, [r7, #6]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1ec      	bne.n	80004dc <Buffercmp+0x10>
  }

  return 0;
 8000502:	2300      	movs	r3, #0
}
 8000504:	4618      	mov	r0, r3
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8000514:	2002      	movs	r0, #2
 8000516:	f000 f93f 	bl	8000798 <BSP_LED_On>
  while(1)
 800051a:	e7fe      	b.n	800051a <Error_Handler+0xa>

0800051c <LL_AHB2_GRP1_EnableClock>:
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000540:	68fb      	ldr	r3, [r7, #12]
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800054e:	b480      	push	{r7}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800055c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4313      	orrs	r3, r2
 8000564:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b0c2      	sub	sp, #264	; 0x108
 8000594:	af00      	add	r7, sp, #0
 8000596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800059a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800059e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005b4:	2250      	movs	r2, #80	; 0x50
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f004 f803 	bl	80045c4 <memset>
  if(hi2c->Instance==I2C1)
 80005be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a32      	ldr	r2, [pc, #200]	; (8000694 <HAL_I2C_MspInit+0x104>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d15c      	bne.n	800068a <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2248      	movs	r2, #72	; 0x48
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fff3 	bl	80045c4 <memset>
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /*##-1- Enable the HSI clock  #*/
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fdb5 	bl	8003160 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d000      	beq.n	80005fe <HAL_I2C_MspInit+0x6e>
  {
    /* Error */
    while(1); 
 80005fc:	e7fe      	b.n	80005fc <HAL_I2C_MspInit+0x6c>
  }
  
  /*##-2- Configure HSI as I2C clock source #*/
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005fe:	2304      	movs	r3, #4
 8000600:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <HAL_I2C_MspInit+0x108>)
 8000604:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8000606:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fd2f 	bl	800406e <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000610:	2304      	movs	r3, #4
 8000612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <HAL_I2C_MspInit+0x108>)
 8000618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fd24 	bl	800406e <HAL_RCCEx_PeriphCLKConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <HAL_I2C_MspInit+0xa0>
    {
      Error_Handler();
 800062c:	f7ff ff70 	bl	8000510 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	2002      	movs	r0, #2
 8000632:	f7ff ff73 	bl	800051c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800063a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063e:	2312      	movs	r3, #18
 8000640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000650:	2304      	movs	r3, #4
 8000652:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800065a:	4619      	mov	r1, r3
 800065c:	480f      	ldr	r0, [pc, #60]	; (800069c <HAL_I2C_MspInit+0x10c>)
 800065e:	f000 fbd5 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000662:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000666:	f7ff ff72 	bl	800054e <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	201e      	movs	r0, #30
 8000670:	f000 fb2b 	bl	8000cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000674:	201e      	movs	r0, #30
 8000676:	f000 fb42 	bl	8000cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	201f      	movs	r0, #31
 8000680:	f000 fb23 	bl	8000cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000684:	201f      	movs	r0, #31
 8000686:	f000 fb3a 	bl	8000cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40005400 	.word	0x40005400
 8000698:	00030200 	.word	0x00030200
 800069c:	48000400 	.word	0x48000400

080006a0 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f9d8 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <I2C1_EV_IRQHandler+0x10>)
 80006ce:	f000 fec7 	bl	8001460 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000124 	.word	0x20000124

080006dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <I2C1_ER_IRQHandler+0x10>)
 80006e2:	f000 fed7 	bl	8001494 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000124 	.word	0x20000124

080006f0 <LL_AHB2_GRP1_EnableClock>:
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800070c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4013      	ands	r3, r2
 8000712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff ffd6 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <BSP_LED_Init+0x6c>)
 8000748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <BSP_LED_Init+0x70>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	f107 020c 	add.w	r2, r7, #12
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fb4f 	bl	8000e0c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a08      	ldr	r2, [pc, #32]	; (8000794 <BSP_LED_Init+0x70>)
 8000772:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <BSP_LED_Init+0x6c>)
 800077a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	f000 fccb 	bl	800111c <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	08004618 	.word	0x08004618
 8000794:	200000e4 	.word	0x200000e4

08000798 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <BSP_LED_On+0x2c>)
 80007a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <BSP_LED_On+0x30>)
 80007ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b2:	2201      	movs	r2, #1
 80007b4:	4619      	mov	r1, r3
 80007b6:	f000 fcb1 	bl	800111c <HAL_GPIO_WritePin>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000e4 	.word	0x200000e4
 80007c8:	08004618 	.word	0x08004618

080007cc <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <BSP_LED_Toggle+0x2c>)
 80007da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <BSP_LED_Toggle+0x30>)
 80007e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4610      	mov	r0, r2
 80007ea:	f000 fcaf 	bl	800114c <HAL_GPIO_TogglePin>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000e4 	.word	0x200000e4
 80007fc:	08004618 	.word	0x08004618

08000800 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	460a      	mov	r2, r1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d103      	bne.n	800082e <BSP_PB_Init+0x2e>
 8000826:	2004      	movs	r0, #4
 8000828:	f7ff ff62 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>
 800082c:	e00c      	b.n	8000848 <BSP_PB_Init+0x48>
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d103      	bne.n	800083c <BSP_PB_Init+0x3c>
 8000834:	2008      	movs	r0, #8
 8000836:	f7ff ff5b 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>
 800083a:	e005      	b.n	8000848 <BSP_PB_Init+0x48>
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d102      	bne.n	8000848 <BSP_PB_Init+0x48>
 8000842:	2008      	movs	r0, #8
 8000844:	f7ff ff54 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d117      	bne.n	800087e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <BSP_PB_Init+0xd4>)
 8000852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000856:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800085c:	2301      	movs	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2302      	movs	r3, #2
 8000862:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <BSP_PB_Init+0xd8>)
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	f107 020c 	add.w	r2, r7, #12
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 faca 	bl	8000e0c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 f927 	bl	8000acc <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d123      	bne.n	80008cc <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <BSP_PB_Init+0xd4>)
 8000888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8000892:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000896:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <BSP_PB_Init+0xd8>)
 800089c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fab0 	bl	8000e0c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <BSP_PB_Init+0xdc>)
 80008b0:	5cd3      	ldrb	r3, [r2, r3]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	210f      	movs	r1, #15
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fa06 	bl	8000cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <BSP_PB_Init+0xdc>)
 80008c2:	5cd3      	ldrb	r3, [r2, r3]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fa19 	bl	8000cfe <HAL_NVIC_EnableIRQ>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08004620 	.word	0x08004620
 80008d8:	200000f0 	.word	0x200000f0
 80008dc:	08004628 	.word	0x08004628

080008e0 <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <BSP_PB_GetState+0x2c>)
 80008ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <BSP_PB_GetState+0x30>)
 80008f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008fa:	4619      	mov	r1, r3
 80008fc:	4610      	mov	r0, r2
 80008fe:	f000 fbf5 	bl	80010ec <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000f0 	.word	0x200000f0
 8000910:	08004620 	.word	0x08004620

08000914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemInit+0xa0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemInit+0xa0>)
 8000920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000924:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <SystemInit+0xa0>)
 8000926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800092a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800092e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800093e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000942:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000946:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <SystemInit+0xa4>)
 8000954:	4013      	ands	r3, r2
 8000956:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000964:	f023 0305 	bic.w	r3, r3, #5
 8000968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800096c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <SystemInit+0xa8>)
 8000986:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <SystemInit+0xa8>)
 800098e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800099a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	faf6fefb 	.word	0xfaf6fefb
 80009bc:	22041000 	.word	0x22041000

080009c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_Init+0x3c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_Init+0x3c>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 f96c 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f80f 	bl	8000a00 <HAL_InitTick>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	e001      	b.n	80009f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ee:	f7ff fdc7 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58004000 	.word	0x58004000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d024      	beq.n	8000a5e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a14:	f003 f8c6 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a24:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f974 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10f      	bne.n	8000a58 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d809      	bhi.n	8000a52 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	f04f 30ff 	mov.w	r0, #4294967295
 8000a46:	f000 f940 	bl	8000cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_InitTick+0x70>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	e007      	b.n	8000a62 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	e004      	b.n	8000a62 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e001      	b.n	8000a62 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000104 	.word	0x20000104
 8000a70:	20000100 	.word	0x20000100

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000104 	.word	0x20000104
 8000a98:	20000250 	.word	0x20000250

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000250 	.word	0x20000250

08000ab4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTickPrio+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000100 	.word	0x20000100

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff ffe2 	bl	8000a9c <HAL_GetTick>
 8000ad8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Delay+0x44>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000af2:	bf00      	nop
 8000af4:	f7ff ffd2 	bl	8000a9c <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
    {
    }
  }
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000104 	.word	0x20000104

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff29 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff40 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff90 	bl	8000c08 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5f 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff33 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffa4 	bl	8000c70 <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d005      	beq.n	8000d56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e047      	b.n	8000de6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 020e 	bic.w	r2, r2, #14
 8000d64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0201 	bic.w	r2, r2, #1
 8000d74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f003 021c 	and.w	r2, r3, #28
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	2101      	movs	r1, #1
 8000d94:	fa01 f202 	lsl.w	r2, r1, r2
 8000d98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000da2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00c      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dc4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	4798      	blx	r3
    }
  }
  return status;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	e14c      	b.n	80010b6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 813e 	beq.w	80010b0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d005      	beq.n	8000e4c <HAL_GPIO_Init+0x40>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d130      	bne.n	8000eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e82:	2201      	movs	r2, #1
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	f003 0201 	and.w	r2, r3, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d017      	beq.n	8000eea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d123      	bne.n	8000f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0203 	and.w	r2, r3, #3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8098 	beq.w	80010b0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f80:	4a54      	ldr	r2, [pc, #336]	; (80010d4 <HAL_GPIO_Init+0x2c8>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000faa:	d019      	beq.n	8000fe0 <HAL_GPIO_Init+0x1d4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_GPIO_Init+0x2cc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d013      	beq.n	8000fdc <HAL_GPIO_Init+0x1d0>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d00d      	beq.n	8000fd8 <HAL_GPIO_Init+0x1cc>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2d4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x1c8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2d8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_GPIO_Init+0x1c4>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e008      	b.n	8000fe2 <HAL_GPIO_Init+0x1d6>
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	e006      	b.n	8000fe2 <HAL_GPIO_Init+0x1d6>
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e004      	b.n	8000fe2 <HAL_GPIO_Init+0x1d6>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x1d6>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_GPIO_Init+0x1d6>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	f002 0203 	and.w	r2, r2, #3
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	4093      	lsls	r3, r2
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff2:	4938      	ldr	r1, [pc, #224]	; (80010d4 <HAL_GPIO_Init+0x2c8>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001024:	4a30      	ldr	r2, [pc, #192]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800104e:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 8001056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107a:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 8001084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f aeab 	bne.w	8000e1c <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48001000 	.word	0x48001000
 80010e8:	58000800 	.word	0x58000800

080010ec <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e001      	b.n	800110e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e081      	b.n	8001296 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f9f2 	bl	8000590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e006      	b.n	8001208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d104      	bne.n	800121a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69d9      	ldr	r1, [r3, #28]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	817b      	strh	r3, [r7, #10]
 80012b0:	4613      	mov	r3, r2
 80012b2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b20      	cmp	r3, #32
 80012be:	d153      	bne.n	8001368 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ce:	d101      	bne.n	80012d4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80012d0:	2302      	movs	r3, #2
 80012d2:	e04a      	b.n	800136a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_I2C_Master_Transmit_IT+0x42>
 80012de:	2302      	movs	r3, #2
 80012e0:	e043      	b.n	800136a <HAL_I2C_Master_Transmit_IT+0xca>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2221      	movs	r2, #33	; 0x21
 80012ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2210      	movs	r2, #16
 80012f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	893a      	ldrh	r2, [r7, #8]
 800130a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8001316:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131c:	b29b      	uxth	r3, r3
 800131e:	2bff      	cmp	r3, #255	; 0xff
 8001320:	d906      	bls.n	8001330 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e007      	b.n	8001340 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001334:	b29a      	uxth	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800133a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800133e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001344:	b2da      	uxtb	r2, r3
 8001346:	8979      	ldrh	r1, [r7, #10]
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_I2C_Master_Transmit_IT+0xdc>)
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f001 f9e6 	bl	8002720 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800135c:	2101      	movs	r1, #1
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f001 fa10 	bl	8002784 <I2C_Enable_IRQ>

    return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e000      	b.n	800136a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001368:	2302      	movs	r3, #2
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	ffff0000 	.word	0xffff0000
 8001378:	0800161f 	.word	0x0800161f
 800137c:	80002000 	.word	0x80002000

08001380 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	817b      	strh	r3, [r7, #10]
 8001390:	4613      	mov	r3, r2
 8001392:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b20      	cmp	r3, #32
 800139e:	d153      	bne.n	8001448 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ae:	d101      	bne.n	80013b4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80013b0:	2302      	movs	r3, #2
 80013b2:	e04a      	b.n	800144a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_I2C_Master_Receive_IT+0x42>
 80013be:	2302      	movs	r3, #2
 80013c0:	e043      	b.n	800144a <HAL_I2C_Master_Receive_IT+0xca>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2222      	movs	r2, #34	; 0x22
 80013ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2210      	movs	r2, #16
 80013d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	893a      	ldrh	r2, [r7, #8]
 80013ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_I2C_Master_Receive_IT+0xd4>)
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_I2C_Master_Receive_IT+0xd8>)
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2bff      	cmp	r3, #255	; 0xff
 8001400:	d906      	bls.n	8001410 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	22ff      	movs	r2, #255	; 0xff
 8001406:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e007      	b.n	8001420 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800141a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001424:	b2da      	uxtb	r2, r3
 8001426:	8979      	ldrh	r1, [r7, #10]
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_I2C_Master_Receive_IT+0xdc>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f001 f976 	bl	8002720 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800143c:	2102      	movs	r1, #2
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f001 f9a0 	bl	8002784 <I2C_Enable_IRQ>

    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001448:	2302      	movs	r3, #2
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	ffff0000 	.word	0xffff0000
 8001458:	0800161f 	.word	0x0800161f
 800145c:	80002400 	.word	0x80002400

08001460 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	68f9      	ldr	r1, [r7, #12]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	4798      	blx	r3
  }
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d010      	beq.n	80014da <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	09db      	lsrs	r3, r3, #7
 80014bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	0a9b      	lsrs	r3, r3, #10
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d010      	beq.n	8001508 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	09db      	lsrs	r3, r3, #7
 80014ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00a      	beq.n	8001508 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f043 0208 	orr.w	r2, r3, #8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001506:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	0a5b      	lsrs	r3, r3, #9
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d010      	beq.n	8001536 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	09db      	lsrs	r3, r3, #7
 8001518:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00a      	beq.n	8001536 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f043 0202 	orr.w	r2, r3, #2
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 030b 	and.w	r3, r3, #11
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 ffaf 	bl	80024ac <I2C_ITError>
  }
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	70fb      	strb	r3, [r7, #3]
 800158a:	4613      	mov	r3, r2
 800158c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015f8:	b2db      	uxtb	r3, r3
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b088      	sub	sp, #32
 8001622:	af02      	add	r7, sp, #8
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <I2C_Master_ISR_IT+0x1e>
 8001638:	2302      	movs	r3, #2
 800163a:	e114      	b.n	8001866 <I2C_Master_ISR_IT+0x248>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2210      	movs	r2, #16
 8001662:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f043 0204 	orr.w	r2, r3, #4
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f001 f812 	bl	800269a <I2C_Flush_TXDR>
 8001676:	e0e1      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01d      	beq.n	80016cc <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f023 0304 	bic.w	r3, r3, #4
 8001696:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016ca:	e0b7      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01e      	beq.n	8001716 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d018      	beq.n	8001716 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001714:	e092      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	09db      	lsrs	r3, r3, #7
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d05d      	beq.n	80017de <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800172a:	2b00      	cmp	r3, #0
 800172c:	d057      	beq.n	80017de <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d040      	beq.n	80017ba <I2C_Master_ISR_IT+0x19c>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	2b00      	cmp	r3, #0
 800173e:	d13c      	bne.n	80017ba <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	b29b      	uxth	r3, r3
 8001748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800174c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d90e      	bls.n	8001776 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	22ff      	movs	r2, #255	; 0xff
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	b2da      	uxtb	r2, r3
 8001764:	8a79      	ldrh	r1, [r7, #18]
 8001766:	2300      	movs	r3, #0
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 ffd6 	bl	8002720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001774:	e032      	b.n	80017dc <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001788:	d00b      	beq.n	80017a2 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	b2da      	uxtb	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	8a79      	ldrh	r1, [r7, #18]
 8001796:	2000      	movs	r0, #0
 8001798:	9000      	str	r0, [sp, #0]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 ffc0 	bl	8002720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a0:	e01c      	b.n	80017dc <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	8a79      	ldrh	r1, [r7, #18]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 ffb4 	bl	8002720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b8:	e010      	b.n	80017dc <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017c8:	d003      	beq.n	80017d2 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fba9 	bl	8001f22 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017d0:	e034      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80017d2:	2140      	movs	r1, #64	; 0x40
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fe69 	bl	80024ac <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017da:	e02f      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
 80017dc:	e02e      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d028      	beq.n	800183c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d022      	beq.n	800183c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d119      	bne.n	8001834 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800180e:	d015      	beq.n	800183c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001818:	d108      	bne.n	800182c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	e007      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 fb78 	bl	8001f22 <I2C_ITMasterSeqCplt>
 8001832:	e003      	b.n	800183c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fe38 	bl	80024ac <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d009      	beq.n	800185c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001854:	6979      	ldr	r1, [r7, #20]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 fbfe 	bl	8002058 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <I2C_Slave_ISR_IT+0x24>
 800188e:	2302      	movs	r3, #2
 8001890:	e0ec      	b.n	8001a6c <I2C_Slave_ISR_IT+0x1fe>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80018b2:	6939      	ldr	r1, [r7, #16]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 fc99 	bl	80021ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d04d      	beq.n	8001962 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d047      	beq.n	8001962 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d128      	bne.n	800192e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b28      	cmp	r3, #40	; 0x28
 80018e6:	d108      	bne.n	80018fa <I2C_Slave_ISR_IT+0x8c>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018ee:	d104      	bne.n	80018fa <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fd84 	bl	8002400 <I2C_ITListenCplt>
 80018f8:	e032      	b.n	8001960 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b29      	cmp	r3, #41	; 0x29
 8001904:	d10e      	bne.n	8001924 <I2C_Slave_ISR_IT+0xb6>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800190c:	d00a      	beq.n	8001924 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2210      	movs	r2, #16
 8001914:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 febf 	bl	800269a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fb3d 	bl	8001f9c <I2C_ITSlaveSeqCplt>
 8001922:	e01d      	b.n	8001960 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800192c:	e096      	b.n	8001a5c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2210      	movs	r2, #16
 8001934:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f043 0204 	orr.w	r2, r3, #4
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <I2C_Slave_ISR_IT+0xe4>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194e:	f040 8085 	bne.w	8001a5c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4619      	mov	r1, r3
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fda7 	bl	80024ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800195e:	e07d      	b.n	8001a5c <I2C_Slave_ISR_IT+0x1ee>
 8001960:	e07c      	b.n	8001a5c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d030      	beq.n	80019d0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001976:	2b00      	cmp	r3, #0
 8001978:	d02a      	beq.n	80019d0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d018      	beq.n	80019b6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d14f      	bne.n	8001a60 <I2C_Slave_ISR_IT+0x1f2>
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019c6:	d04b      	beq.n	8001a60 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fae7 	bl	8001f9c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80019ce:	e047      	b.n	8001a60 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80019e8:	6939      	ldr	r1, [r7, #16]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fa15 	bl	8001e1a <I2C_ITAddrCplt>
 80019f0:	e037      	b.n	8001a62 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d031      	beq.n	8001a62 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d02b      	beq.n	8001a62 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d018      	beq.n	8001a46 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	851a      	strh	r2, [r3, #40]	; 0x28
 8001a44:	e00d      	b.n	8001a62 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d002      	beq.n	8001a54 <I2C_Slave_ISR_IT+0x1e6>
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d106      	bne.n	8001a62 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 faa1 	bl	8001f9c <I2C_ITSlaveSeqCplt>
 8001a5a:	e002      	b.n	8001a62 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001a5c:	bf00      	nop
 8001a5e:	e000      	b.n	8001a62 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001a60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <I2C_Master_ISR_DMA+0x1a>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e0e1      	b.n	8001c52 <I2C_Master_ISR_DMA+0x1de>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d017      	beq.n	8001ad2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d011      	beq.n	8001ad2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f043 0204 	orr.w	r2, r3, #4
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fe5d 	bl	8002784 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fde5 	bl	800269a <I2C_Flush_TXDR>
 8001ad0:	e0ba      	b.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	09db      	lsrs	r3, r3, #7
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d072      	beq.n	8001bc4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06c      	beq.n	8001bc4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d04e      	beq.n	8001ba2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b10:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2bff      	cmp	r3, #255	; 0xff
 8001b1a:	d906      	bls.n	8001b2a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	22ff      	movs	r2, #255	; 0xff
 8001b20:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e010      	b.n	8001b4c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b3c:	d003      	beq.n	8001b46 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e002      	b.n	8001b4c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	8a79      	ldrh	r1, [r7, #18]
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fde0 	bl	8002720 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b22      	cmp	r3, #34	; 0x22
 8001b7c:	d108      	bne.n	8001b90 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b8e:	e05b      	b.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b9e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ba0:	e052      	b.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bb0:	d003      	beq.n	8001bba <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f9b5 	bl	8001f22 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001bb8:	e046      	b.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 fc75 	bl	80024ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001bc2:	e041      	b.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d029      	beq.n	8001c24 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d119      	bne.n	8001c1a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bf4:	d027      	beq.n	8001c46 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bfe:	d108      	bne.n	8001c12 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001c10:	e019      	b.n	8001c46 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f985 	bl	8001f22 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001c18:	e015      	b.n	8001c46 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001c1a:	2140      	movs	r1, #64	; 0x40
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fc45 	bl	80024ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c22:	e010      	b.n	8001c46 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00b      	beq.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa0a 	bl	8002058 <I2C_ITMasterCplt>
 8001c44:	e000      	b.n	8001c48 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001c46:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b088      	sub	sp, #32
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <I2C_Slave_ISR_DMA+0x24>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e0c9      	b.n	8001e12 <I2C_Slave_ISR_DMA+0x1b8>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 faa3 	bl	80021ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 809a 	beq.w	8001de8 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8093 	beq.w	8001de8 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0b9b      	lsrs	r3, r3, #14
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0bdb      	lsrs	r3, r3, #15
 8001cd2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d07f      	beq.n	8001dda <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00d      	beq.n	8001cfe <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0bdb      	lsrs	r3, r3, #15
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0b9b      	lsrs	r3, r3, #14
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d128      	bne.n	8001d7a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b28      	cmp	r3, #40	; 0x28
 8001d32:	d108      	bne.n	8001d46 <I2C_Slave_ISR_DMA+0xec>
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d3a:	d104      	bne.n	8001d46 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fb5e 	bl	8002400 <I2C_ITListenCplt>
 8001d44:	e048      	b.n	8001dd8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b29      	cmp	r3, #41	; 0x29
 8001d50:	d10e      	bne.n	8001d70 <I2C_Slave_ISR_DMA+0x116>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d58:	d00a      	beq.n	8001d70 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2210      	movs	r2, #16
 8001d60:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fc99 	bl	800269a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f917 	bl	8001f9c <I2C_ITSlaveSeqCplt>
 8001d6e:	e033      	b.n	8001dd8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2210      	movs	r2, #16
 8001d76:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001d78:	e034      	b.n	8001de4 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2210      	movs	r2, #16
 8001d80:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f043 0204 	orr.w	r2, r3, #4
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d94:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <I2C_Slave_ISR_DMA+0x14a>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da2:	d11f      	bne.n	8001de4 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b21      	cmp	r3, #33	; 0x21
 8001da8:	d002      	beq.n	8001db0 <I2C_Slave_ISR_DMA+0x156>
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	2b29      	cmp	r3, #41	; 0x29
 8001dae:	d103      	bne.n	8001db8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2221      	movs	r2, #33	; 0x21
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
 8001db6:	e008      	b.n	8001dca <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	2b22      	cmp	r3, #34	; 0x22
 8001dbc:	d002      	beq.n	8001dc4 <I2C_Slave_ISR_DMA+0x16a>
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc2:	d102      	bne.n	8001dca <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2222      	movs	r2, #34	; 0x22
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4619      	mov	r1, r3
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fb6b 	bl	80024ac <I2C_ITError>
      if (treatdmanack == 1U)
 8001dd6:	e005      	b.n	8001de4 <I2C_Slave_ISR_DMA+0x18a>
 8001dd8:	e004      	b.n	8001de4 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2210      	movs	r2, #16
 8001de0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001de2:	e011      	b.n	8001e08 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001de4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001de6:	e00f      	b.n	8001e08 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	08db      	lsrs	r3, r3, #3
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d009      	beq.n	8001e08 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f809 	bl	8001e1a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e30:	2b28      	cmp	r3, #40	; 0x28
 8001e32:	d16a      	bne.n	8001f0a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e52:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e60:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e6e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d138      	bne.n	8001eea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001e78:	897b      	ldrh	r3, [r7, #10]
 8001e7a:	09db      	lsrs	r3, r3, #7
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	89bb      	ldrh	r3, [r7, #12]
 8001e80:	4053      	eors	r3, r2
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f003 0306 	and.w	r3, r3, #6
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11c      	bne.n	8001ec6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001e8c:	897b      	ldrh	r3, [r7, #10]
 8001e8e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d13b      	bne.n	8001f1a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2208      	movs	r2, #8
 8001eae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001eb8:	89ba      	ldrh	r2, [r7, #12]
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fb5d 	bl	800157e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ec4:	e029      	b.n	8001f1a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ec6:	893b      	ldrh	r3, [r7, #8]
 8001ec8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fcc2 	bl	8002858 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001edc:	89ba      	ldrh	r2, [r7, #12]
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fb4b 	bl	800157e <HAL_I2C_AddrCallback>
}
 8001ee8:	e017      	b.n	8001f1a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fcb2 	bl	8002858 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001efc:	89ba      	ldrh	r2, [r7, #12]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fb3b 	bl	800157e <HAL_I2C_AddrCallback>
}
 8001f08:	e007      	b.n	8001f1a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2208      	movs	r2, #8
 8001f10:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b21      	cmp	r3, #33	; 0x21
 8001f3c:	d115      	bne.n	8001f6a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2211      	movs	r2, #17
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f52:	2101      	movs	r1, #1
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fc7f 	bl	8002858 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fa91 	bl	800048a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f68:	e014      	b.n	8001f94 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2212      	movs	r2, #18
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f7e:	2102      	movs	r1, #2
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fc69 	bl	8002858 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7fe fa86 	bl	80004a0 <HAL_I2C_MasterRxCpltCallback>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0b9b      	lsrs	r3, r3, #14
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e00d      	b.n	8001fee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b29      	cmp	r3, #41	; 0x29
 8001ff8:	d112      	bne.n	8002020 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2228      	movs	r2, #40	; 0x28
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2221      	movs	r2, #33	; 0x21
 8002006:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002008:	2101      	movs	r1, #1
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fc24 	bl	8002858 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fa9c 	bl	8001556 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800201e:	e017      	b.n	8002050 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b2a      	cmp	r3, #42	; 0x2a
 800202a:	d111      	bne.n	8002050 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2228      	movs	r2, #40	; 0x28
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2222      	movs	r2, #34	; 0x22
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800203a:	2102      	movs	r1, #2
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fc0b 	bl	8002858 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fa8d 	bl	800156a <HAL_I2C_SlaveRxCpltCallback>
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2220      	movs	r2, #32
 800206c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b21      	cmp	r3, #33	; 0x21
 8002078:	d107      	bne.n	800208a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800207a:	2101      	movs	r1, #1
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fbeb 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2211      	movs	r2, #17
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
 8002088:	e00c      	b.n	80020a4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b22      	cmp	r3, #34	; 0x22
 8002094:	d106      	bne.n	80020a4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002096:	2102      	movs	r1, #2
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fbdd 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2212      	movs	r2, #18
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <I2C_ITMasterCplt+0x18c>)
 80020b0:	400b      	ands	r3, r1
 80020b2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <I2C_ITMasterCplt+0x190>)
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2210      	movs	r2, #16
 80020d2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b60      	cmp	r3, #96	; 0x60
 80020ea:	d10b      	bne.n	8002104 <I2C_ITMasterCplt+0xac>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002102:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fac8 	bl	800269a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b60      	cmp	r3, #96	; 0x60
 800211a:	d002      	beq.n	8002122 <I2C_ITMasterCplt+0xca>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f9bf 	bl	80024ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800212e:	e054      	b.n	80021da <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b21      	cmp	r3, #33	; 0x21
 800213a:	d124      	bne.n	8002186 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d10b      	bne.n	800216e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fa21 	bl	80015ae <HAL_I2C_MemTxCpltCallback>
}
 800216c:	e035      	b.n	80021da <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe f983 	bl	800048a <HAL_I2C_MasterTxCpltCallback>
}
 8002184:	e029      	b.n	80021da <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b22      	cmp	r3, #34	; 0x22
 8002190:	d123      	bne.n	80021da <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d10b      	bne.n	80021c4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fa00 	bl	80015c2 <HAL_I2C_MemRxCpltCallback>
}
 80021c2:	e00a      	b.n	80021da <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe f963 	bl	80004a0 <HAL_I2C_MasterRxCpltCallback>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	fe00e800 	.word	0xfe00e800
 80021e8:	ffff0000 	.word	0xffff0000

080021ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002208:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2220      	movs	r2, #32
 8002210:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b21      	cmp	r3, #33	; 0x21
 8002216:	d002      	beq.n	800221e <I2C_ITSlaveCplt+0x32>
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2b29      	cmp	r3, #41	; 0x29
 800221c:	d108      	bne.n	8002230 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800221e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fb18 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2221      	movs	r2, #33	; 0x21
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
 800222e:	e00d      	b.n	800224c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b22      	cmp	r3, #34	; 0x22
 8002234:	d002      	beq.n	800223c <I2C_ITSlaveCplt+0x50>
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b2a      	cmp	r3, #42	; 0x2a
 800223a:	d107      	bne.n	800224c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800223c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fb09 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2222      	movs	r2, #34	; 0x22
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <I2C_ITSlaveCplt+0x20c>)
 8002268:	400b      	ands	r3, r1
 800226a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fa14 	bl	800269a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	0b9b      	lsrs	r3, r3, #14
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d013      	beq.n	80022a6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800228c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a4:	e018      	b.n	80022d8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	0bdb      	lsrs	r3, r3, #15
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d012      	beq.n	80022d8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8a7 	bl	80024ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b28      	cmp	r3, #40	; 0x28
 8002368:	d141      	bne.n	80023ee <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800236a:	6979      	ldr	r1, [r7, #20]
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f847 	bl	8002400 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002372:	e03c      	b.n	80023ee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800237c:	d014      	beq.n	80023a8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fe0c 	bl	8001f9c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <I2C_ITSlaveCplt+0x210>)
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff f8fa 	bl	800159a <HAL_I2C_ListenCpltCallback>
}
 80023a6:	e022      	b.n	80023ee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b22      	cmp	r3, #34	; 0x22
 80023b2:	d10e      	bne.n	80023d2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff f8cd 	bl	800156a <HAL_I2C_SlaveRxCpltCallback>
}
 80023d0:	e00d      	b.n	80023ee <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff f8b4 	bl	8001556 <HAL_I2C_SlaveTxCpltCallback>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	fe00e800 	.word	0xfe00e800
 80023fc:	ffff0000 	.word	0xffff0000

08002400 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <I2C_ITListenCplt+0xa8>)
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d022      	beq.n	800247e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800247e:	f248 0103 	movw	r1, #32771	; 0x8003
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f9e8 	bl	8002858 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2210      	movs	r2, #16
 800248e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff f87e 	bl	800159a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	ffff0000 	.word	0xffff0000

080024ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a5d      	ldr	r2, [pc, #372]	; (8002640 <I2C_ITError+0x194>)
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b28      	cmp	r3, #40	; 0x28
 80024e2:	d005      	beq.n	80024f0 <I2C_ITError+0x44>
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b29      	cmp	r3, #41	; 0x29
 80024e8:	d002      	beq.n	80024f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b2a      	cmp	r3, #42	; 0x2a
 80024ee:	d10b      	bne.n	8002508 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80024f0:	2103      	movs	r1, #3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f9b0 	bl	8002858 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2228      	movs	r2, #40	; 0x28
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <I2C_ITError+0x198>)
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
 8002506:	e011      	b.n	800252c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002508:	f248 0103 	movw	r1, #32771	; 0x8003
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9a3 	bl	8002858 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b60      	cmp	r3, #96	; 0x60
 800251c:	d003      	beq.n	8002526 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	2b00      	cmp	r3, #0
 8002538:	d039      	beq.n	80025ae <I2C_ITError+0x102>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b11      	cmp	r3, #17
 800253e:	d002      	beq.n	8002546 <I2C_ITError+0x9a>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b21      	cmp	r3, #33	; 0x21
 8002544:	d133      	bne.n	80025ae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002554:	d107      	bne.n	8002566 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002564:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fc40 	bl	8000df0 <HAL_DMA_GetState>
 8002570:	4603      	mov	r3, r0
 8002572:	2b01      	cmp	r3, #1
 8002574:	d017      	beq.n	80025a6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	4a33      	ldr	r2, [pc, #204]	; (8002648 <I2C_ITError+0x19c>)
 800257c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fbd1 	bl	8000d32 <HAL_DMA_Abort_IT>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04d      	beq.n	8002632 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a0:	4610      	mov	r0, r2
 80025a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025a4:	e045      	b.n	8002632 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f850 	bl	800264c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025ac:	e041      	b.n	8002632 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d039      	beq.n	800262a <I2C_ITError+0x17e>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d002      	beq.n	80025c2 <I2C_ITError+0x116>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b22      	cmp	r3, #34	; 0x22
 80025c0:	d133      	bne.n	800262a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d0:	d107      	bne.n	80025e2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fc02 	bl	8000df0 <HAL_DMA_GetState>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d017      	beq.n	8002622 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	4a14      	ldr	r2, [pc, #80]	; (8002648 <I2C_ITError+0x19c>)
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fb93 	bl	8000d32 <HAL_DMA_Abort_IT>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d011      	beq.n	8002636 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800261c:	4610      	mov	r0, r2
 800261e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002620:	e009      	b.n	8002636 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f812 	bl	800264c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002628:	e005      	b.n	8002636 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f80e 	bl	800264c <I2C_TreatErrorCallback>
  }
}
 8002630:	e002      	b.n	8002638 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002636:	bf00      	nop
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	ffff0000 	.word	0xffff0000
 8002644:	0800186f 	.word	0x0800186f
 8002648:	080026e3 	.word	0x080026e3

0800264c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d10e      	bne.n	800267e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe ffad 	bl	80015d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800267c:	e009      	b.n	8002692 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7fd ff12 	bl	80004b6 <HAL_I2C_ErrorCallback>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d103      	bne.n	80026b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d007      	beq.n	80026d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	619a      	str	r2, [r3, #24]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	2200      	movs	r2, #0
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2200      	movs	r2, #0
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff ff9b 	bl	800264c <I2C_TreatErrorCallback>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	4613      	mov	r3, r2
 8002730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002738:	7a7b      	ldrb	r3, [r7, #9]
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002740:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	4313      	orrs	r3, r2
 800274a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800274e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <I2C_TransferConfig+0x60>)
 8002760:	430b      	orrs	r3, r1
 8002762:	43db      	mvns	r3, r3
 8002764:	ea02 0103 	and.w	r1, r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	03ff63ff 	.word	0x03ff63ff

08002784 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <I2C_Enable_IRQ+0xcc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80027a2:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <I2C_Enable_IRQ+0xd0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d11d      	bne.n	80027e4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	da03      	bge.n	80027b8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80027b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d103      	bne.n	80027c6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80027c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d103      	bne.n	80027d4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d12c      	bne.n	8002834 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027e2:	e027      	b.n	8002834 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da03      	bge.n	80027f4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80027f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002804:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002816:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	2b10      	cmp	r3, #16
 800281c:	d103      	bne.n	8002826 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002824:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	2b20      	cmp	r3, #32
 800282a:	d103      	bne.n	8002834 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f043 0320 	orr.w	r3, r3, #32
 8002832:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	08001a75 	.word	0x08001a75
 8002854:	08001c5b 	.word	0x08001c5b

08002858 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00f      	beq.n	8002892 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002878:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002886:	2b28      	cmp	r3, #40	; 0x28
 8002888:	d003      	beq.n	8002892 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002890:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00f      	beq.n	80028bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80028a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028b0:	2b28      	cmp	r3, #40	; 0x28
 80028b2:	d003      	beq.n	80028bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80028ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da03      	bge.n	80028cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d103      	bne.n	80028da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d103      	bne.n	80028e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 0320 	orr.w	r3, r3, #32
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d103      	bne.n	80028f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43da      	mvns	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	400a      	ands	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b20      	cmp	r3, #32
 8002928:	d138      	bne.n	800299c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002934:	2302      	movs	r3, #2
 8002936:	e032      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d139      	bne.n	8002a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e033      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2224      	movs	r2, #36	; 0x24
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40010000 	.word	0x40010000

08002a68 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	58000400 	.word	0x58000400

08002a88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	58000400 	.word	0x58000400

08002aa4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ab6:	d101      	bne.n	8002abc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b16:	d101      	bne.n	8002b1c <LL_RCC_HSE_IsReady+0x18>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_RCC_HSE_IsReady+0x1a>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d101      	bne.n	8002b7c <LL_RCC_HSI_IsReady+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_RCC_HSI_IsReady+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d101      	bne.n	8002c0e <LL_RCC_HSI48_IsReady+0x18>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <LL_RCC_HSI48_IsReady+0x1a>
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d101      	bne.n	8002cba <LL_RCC_LSE_IsReady+0x18>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <LL_RCC_LSE_IsReady+0x1a>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d101      	bne.n	8002d22 <LL_RCC_LSI1_IsReady+0x18>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_RCC_LSI1_IsReady+0x1a>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d101      	bne.n	8002d8a <LL_RCC_LSI2_IsReady+0x18>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_RCC_LSI2_IsReady+0x1a>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6013      	str	r3, [r2, #0]
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d101      	bne.n	8002e16 <LL_RCC_MSI_IsReady+0x16>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <LL_RCC_MSI_IsReady+0x18>
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e5a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2bb0      	cmp	r3, #176	; 0xb0
 8002e60:	d901      	bls.n	8002e66 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e62:	23b0      	movs	r3, #176	; 0xb0
 8002e64:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 0203 	bic.w	r2, r3, #3
 8002eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f42:	f023 020f 	bic.w	r2, r3, #15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003014:	6013      	str	r3, [r2, #0]
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003032:	d101      	bne.n	8003038 <LL_RCC_PLL_IsReady+0x18>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <LL_RCC_PLL_IsReady+0x1a>
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0303 	and.w	r3, r3, #3
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d101      	bne.n	80030be <LL_RCC_IsActiveFlag_HPRE+0x18>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030de:	d101      	bne.n	80030e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d101      	bne.n	800310a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003128:	d101      	bne.n	800312e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800314c:	d101      	bne.n	8003152 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b08d      	sub	sp, #52	; 0x34
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e363      	b.n	800383a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 808d 	beq.w	800329a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003180:	f7ff fea1 	bl	8002ec6 <LL_RCC_GetSysClkSource>
 8003184:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003186:	f7ff ff82 	bl	800308e <LL_RCC_PLL_GetMainSource>
 800318a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x3e>
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d147      	bne.n	8003228 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2b01      	cmp	r3, #1
 800319c:	d144      	bne.n	8003228 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e347      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80031ae:	f7ff fe4c 	bl	8002e4a <LL_RCC_MSI_GetRange>
 80031b2:	4603      	mov	r3, r0
 80031b4:	429c      	cmp	r4, r3
 80031b6:	d914      	bls.n	80031e2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fd05 	bl	8003bcc <RCC_SetFlashLatencyFromMSIRange>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e336      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fe26 	bl	8002e22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fe4a 	bl	8002e74 <LL_RCC_MSI_SetCalibTrimming>
 80031e0:	e013      	b.n	800320a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fe1b 	bl	8002e22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fe3f 	bl	8002e74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fce6 	bl	8003bcc <RCC_SetFlashLatencyFromMSIRange>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e317      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800320a:	f000 fccb 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 800320e:	4603      	mov	r3, r0
 8003210:	4aa4      	ldr	r2, [pc, #656]	; (80034a4 <HAL_RCC_OscConfig+0x344>)
 8003212:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003214:	4ba4      	ldr	r3, [pc, #656]	; (80034a8 <HAL_RCC_OscConfig+0x348>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd fbf1 	bl	8000a00 <HAL_InitTick>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d039      	beq.n	8003298 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e308      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01e      	beq.n	800326e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003230:	f7ff fdc8 	bl	8002dc4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003234:	f7fd fc32 	bl	8000a9c <HAL_GetTick>
 8003238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800323c:	f7fd fc2e 	bl	8000a9c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e2f5      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800324e:	f7ff fdd7 	bl	8002e00 <LL_RCC_MSI_IsReady>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f1      	beq.n	800323c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fde0 	bl	8002e22 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fe04 	bl	8002e74 <LL_RCC_MSI_SetCalibTrimming>
 800326c:	e015      	b.n	800329a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800326e:	f7ff fdb8 	bl	8002de2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003272:	f7fd fc13 	bl	8000a9c <HAL_GetTick>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800327a:	f7fd fc0f 	bl	8000a9c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e2d6      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800328c:	f7ff fdb8 	bl	8002e00 <LL_RCC_MSI_IsReady>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f1      	bne.n	800327a <HAL_RCC_OscConfig+0x11a>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003298:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d047      	beq.n	8003336 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a6:	f7ff fe0e 	bl	8002ec6 <LL_RCC_GetSysClkSource>
 80032aa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ac:	f7ff feef 	bl	800308e <LL_RCC_PLL_GetMainSource>
 80032b0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x164>
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d108      	bne.n	80032d0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d134      	bne.n	8003336 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e2b4      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_OscConfig+0x180>
 80032da:	f7ff fbf5 	bl	8002ac8 <LL_RCC_HSE_Enable>
 80032de:	e001      	b.n	80032e4 <HAL_RCC_OscConfig+0x184>
 80032e0:	f7ff fc01 	bl	8002ae6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fbd6 	bl	8000a9c <HAL_GetTick>
 80032f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd fbd2 	bl	8000a9c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e299      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003306:	f7ff fbfd 	bl	8002b04 <LL_RCC_HSE_IsReady>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f1      	beq.n	80032f4 <HAL_RCC_OscConfig+0x194>
 8003310:	e011      	b.n	8003336 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fd fbc3 	bl	8000a9c <HAL_GetTick>
 8003316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331a:	f7fd fbbf 	bl	8000a9c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e286      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800332c:	f7ff fbea 	bl	8002b04 <LL_RCC_HSE_IsReady>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f1      	bne.n	800331a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d04c      	beq.n	80033dc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	f7ff fdc0 	bl	8002ec6 <LL_RCC_GetSysClkSource>
 8003346:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003348:	f7ff fea1 	bl	800308e <LL_RCC_PLL_GetMainSource>
 800334c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x200>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d10e      	bne.n	8003378 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d10b      	bne.n	8003378 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e266      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fc09 	bl	8002b88 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003376:	e031      	b.n	80033dc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d019      	beq.n	80033b4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	f7ff fbd2 	bl	8002b28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fb8a 	bl	8000a9c <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338c:	f7fd fb86 	bl	8000a9c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e24d      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800339e:	f7ff fbe1 	bl	8002b64 <LL_RCC_HSI_IsReady>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f1      	beq.n	800338c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fbeb 	bl	8002b88 <LL_RCC_HSI_SetCalibTrimming>
 80033b2:	e013      	b.n	80033dc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b4:	f7ff fbc7 	bl	8002b46 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fb70 	bl	8000a9c <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fd fb6c 	bl	8000a9c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e233      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80033d2:	f7ff fbc7 	bl	8002b64 <LL_RCC_HSI_IsReady>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f1      	bne.n	80033c0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a3 	beq.w	800353c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d076      	beq.n	80034ec <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d046      	beq.n	8003498 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800340a:	f7ff fc7e 	bl	8002d0a <LL_RCC_LSI1_IsReady>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d113      	bne.n	800343c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003414:	f7ff fc57 	bl	8002cc6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003418:	f7fd fb40 	bl	8000a9c <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003420:	f7fd fb3c 	bl	8000a9c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e203      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003432:	f7ff fc6a 	bl	8002d0a <LL_RCC_LSI1_IsReady>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f1      	beq.n	8003420 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800343c:	f7ff fc77 	bl	8002d2e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd fb2c 	bl	8000a9c <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003448:	f7fd fb28 	bl	8000a9c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b03      	cmp	r3, #3
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1ef      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800345a:	f7ff fc8a 	bl	8002d72 <LL_RCC_LSI2_IsReady>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f1      	beq.n	8003448 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fc94 	bl	8002d96 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800346e:	f7ff fc3b 	bl	8002ce8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fd fb13 	bl	8000a9c <HAL_GetTick>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800347a:	f7fd fb0f 	bl	8000a9c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1d6      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800348c:	f7ff fc3d 	bl	8002d0a <LL_RCC_LSI1_IsReady>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f1      	bne.n	800347a <HAL_RCC_OscConfig+0x31a>
 8003496:	e051      	b.n	800353c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003498:	f7ff fc15 	bl	8002cc6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd fafe 	bl	8000a9c <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034a2:	e00c      	b.n	80034be <HAL_RCC_OscConfig+0x35e>
 80034a4:	200000fc 	.word	0x200000fc
 80034a8:	20000100 	.word	0x20000100
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034ac:	f7fd faf6 	bl	8000a9c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1bd      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034be:	f7ff fc24 	bl	8002d0a <LL_RCC_LSI1_IsReady>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f1      	beq.n	80034ac <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80034c8:	f7ff fc42 	bl	8002d50 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034ce:	f7fd fae5 	bl	8000a9c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1ac      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80034e0:	f7ff fc47 	bl	8002d72 <LL_RCC_LSI2_IsReady>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f1      	bne.n	80034ce <HAL_RCC_OscConfig+0x36e>
 80034ea:	e027      	b.n	800353c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80034ec:	f7ff fc30 	bl	8002d50 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fd fad4 	bl	8000a9c <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034f8:	f7fd fad0 	bl	8000a9c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b03      	cmp	r3, #3
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e197      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800350a:	f7ff fc32 	bl	8002d72 <LL_RCC_LSI2_IsReady>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f1      	bne.n	80034f8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003514:	f7ff fbe8 	bl	8002ce8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7fd fac0 	bl	8000a9c <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003520:	f7fd fabc 	bl	8000a9c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e183      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003532:	f7ff fbea 	bl	8002d0a <LL_RCC_LSI1_IsReady>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f1      	bne.n	8003520 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05b      	beq.n	8003600 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003548:	4ba7      	ldr	r3, [pc, #668]	; (80037e8 <HAL_RCC_OscConfig+0x688>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d114      	bne.n	800357e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003554:	f7ff fa88 	bl	8002a68 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003558:	f7fd faa0 	bl	8000a9c <HAL_GetTick>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fd fa9c 	bl	8000a9c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e163      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003572:	4b9d      	ldr	r3, [pc, #628]	; (80037e8 <HAL_RCC_OscConfig+0x688>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d102      	bne.n	800358c <HAL_RCC_OscConfig+0x42c>
 8003586:	f7ff fb48 	bl	8002c1a <LL_RCC_LSE_Enable>
 800358a:	e00c      	b.n	80035a6 <HAL_RCC_OscConfig+0x446>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d104      	bne.n	800359e <HAL_RCC_OscConfig+0x43e>
 8003594:	f7ff fb63 	bl	8002c5e <LL_RCC_LSE_EnableBypass>
 8003598:	f7ff fb3f 	bl	8002c1a <LL_RCC_LSE_Enable>
 800359c:	e003      	b.n	80035a6 <HAL_RCC_OscConfig+0x446>
 800359e:	f7ff fb4d 	bl	8002c3c <LL_RCC_LSE_Disable>
 80035a2:	f7ff fb6d 	bl	8002c80 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d014      	beq.n	80035d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fd fa75 	bl	8000a9c <HAL_GetTick>
 80035b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fd fa71 	bl	8000a9c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e136      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80035cc:	f7ff fb69 	bl	8002ca2 <LL_RCC_LSE_IsReady>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ef      	beq.n	80035b6 <HAL_RCC_OscConfig+0x456>
 80035d6:	e013      	b.n	8003600 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fd fa60 	bl	8000a9c <HAL_GetTick>
 80035dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fd fa5c 	bl	8000a9c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e121      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035f6:	f7ff fb54 	bl	8002ca2 <LL_RCC_LSE_IsReady>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ef      	bne.n	80035e0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02c      	beq.n	8003666 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d014      	beq.n	800363e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003614:	f7ff facd 	bl	8002bb2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fd fa40 	bl	8000a9c <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003620:	f7fd fa3c 	bl	8000a9c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e103      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003632:	f7ff fae0 	bl	8002bf6 <LL_RCC_HSI48_IsReady>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f1      	beq.n	8003620 <HAL_RCC_OscConfig+0x4c0>
 800363c:	e013      	b.n	8003666 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800363e:	f7ff fac9 	bl	8002bd4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fd fa2b 	bl	8000a9c <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364a:	f7fd fa27 	bl	8000a9c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0ee      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800365c:	f7ff facb 	bl	8002bf6 <LL_RCC_HSI48_IsReady>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f1      	bne.n	800364a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80e4 	beq.w	8003838 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003670:	f7ff fc29 	bl	8002ec6 <LL_RCC_GetSysClkSource>
 8003674:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	2b02      	cmp	r3, #2
 8003684:	f040 80b4 	bne.w	80037f0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0203 	and.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	429a      	cmp	r2, r3
 8003694:	d123      	bne.n	80036de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d11c      	bne.n	80036de <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d114      	bne.n	80036de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d10d      	bne.n	80036de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d05d      	beq.n	800379a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d058      	beq.n	8003796 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0a1      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036f6:	f7ff fc84 	bl	8003002 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036fa:	f7fd f9cf 	bl	8000a9c <HAL_GetTick>
 80036fe:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7fd f9cb 	bl	8000a9c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e092      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	4b30      	ldr	r3, [pc, #192]	; (80037ec <HAL_RCC_OscConfig+0x68c>)
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800373a:	0212      	lsls	r2, r2, #8
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003742:	4311      	orrs	r1, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800374e:	430a      	orrs	r2, r1
 8003750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003754:	4313      	orrs	r3, r2
 8003756:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003758:	f7ff fc44 	bl	8002fe4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800376c:	f7fd f996 	bl	8000a9c <HAL_GetTick>
 8003770:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd f992 	bl	8000a9c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e059      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003794:	e050      	b.n	8003838 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e04f      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d147      	bne.n	8003838 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037a8:	f7ff fc1c 	bl	8002fe4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037bc:	f7fd f96e 	bl	8000a9c <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fd f96a 	bl	8000a9c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e031      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ef      	beq.n	80037c4 <HAL_RCC_OscConfig+0x664>
 80037e4:	e028      	b.n	8003838 <HAL_RCC_OscConfig+0x6d8>
 80037e6:	bf00      	nop
 80037e8:	58000400 	.word	0x58000400
 80037ec:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d01e      	beq.n	8003834 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	f7ff fc04 	bl	8003002 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd f94f 	bl	8000a9c <HAL_GetTick>
 80037fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003802:	f7fd f94b 	bl	8000a9c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e012      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ef      	bne.n	8003802 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_OscConfig+0x6e4>)
 800382e:	4013      	ands	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
 8003832:	e001      	b.n	8003838 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3734      	adds	r7, #52	; 0x34
 800383e:	46bd      	mov	sp, r7
 8003840:	bd90      	pop	{r4, r7, pc}
 8003842:	bf00      	nop
 8003844:	eefefffc 	.word	0xeefefffc

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e12d      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b98      	ldr	r3, [pc, #608]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d91b      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b95      	ldr	r3, [pc, #596]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0207 	bic.w	r2, r3, #7
 8003872:	4993      	ldr	r1, [pc, #588]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387a:	f7fd f90f 	bl	8000a9c <HAL_GetTick>
 800387e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003880:	e008      	b.n	8003894 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003882:	f7fd f90b 	bl	8000a9c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e111      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003894:	4b8a      	ldr	r3, [pc, #552]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d1ef      	bne.n	8003882 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fb13 	bl	8002ede <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038b8:	f7fd f8f0 	bl	8000a9c <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038c0:	f7fd f8ec 	bl	8000a9c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0f2      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038d2:	f7ff fbe8 	bl	80030a6 <LL_RCC_IsActiveFlag_HPRE>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f1      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d016      	beq.n	8003916 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fb0a 	bl	8002f06 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038f2:	f7fd f8d3 	bl	8000a9c <HAL_GetTick>
 80038f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038fa:	f7fd f8cf 	bl	8000a9c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0d5      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800390c:	f7ff fbdd 	bl	80030ca <LL_RCC_IsActiveFlag_C2HPRE>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f1      	beq.n	80038fa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fb03 	bl	8002f32 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800392c:	f7fd f8b6 	bl	8000a9c <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003934:	f7fd f8b2 	bl	8000a9c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0b8      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003946:	f7ff fbd3 	bl	80030f0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f1      	beq.n	8003934 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fafd 	bl	8002f60 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003966:	f7fd f899 	bl	8000a9c <HAL_GetTick>
 800396a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800396e:	f7fd f895 	bl	8000a9c <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e09b      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003980:	f7ff fbc9 	bl	8003116 <LL_RCC_IsActiveFlag_PPRE1>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f1      	beq.n	800396e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff faf3 	bl	8002f88 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039a2:	f7fd f87b 	bl	8000a9c <HAL_GetTick>
 80039a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039aa:	f7fd f877 	bl	8000a9c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e07d      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039bc:	f7ff fbbd 	bl	800313a <LL_RCC_IsActiveFlag_PPRE2>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f1      	beq.n	80039aa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d043      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80039da:	f7ff f893 	bl	8002b04 <LL_RCC_HSE_IsReady>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d11e      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e067      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80039f0:	f7ff fb16 	bl	8003020 <LL_RCC_PLL_IsReady>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d113      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e05c      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a06:	f7ff f9fb 	bl	8002e00 <LL_RCC_MSI_IsReady>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d108      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e051      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a14:	f7ff f8a6 	bl	8002b64 <LL_RCC_HSI_IsReady>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e04a      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fa39 	bl	8002e9e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2c:	f7fd f836 	bl	8000a9c <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fd f832 	bl	8000a9c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e036      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	f7ff fa3c 	bl	8002ec6 <LL_RCC_GetSysClkSource>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d1ec      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d21b      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 0207 	bic.w	r2, r3, #7
 8003a70:	4913      	ldr	r1, [pc, #76]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd f810 	bl	8000a9c <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a80:	f7fd f80c 	bl	8000a9c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e012      	b.n	8003ab8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_RCC_ClockConfig+0x278>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1ef      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003aa0:	f000 f880 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_RCC_ClockConfig+0x27c>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003aaa:	f7fd f803 	bl	8000ab4 <HAL_GetTickPrio>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fc ffa5 	bl	8000a00 <HAL_InitTick>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	58004000 	.word	0x58004000
 8003ac4:	200000fc 	.word	0x200000fc

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	f7ff f9fa 	bl	8002ec6 <LL_RCC_GetSysClkSource>
 8003ad2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ada:	f7ff f9b6 	bl	8002e4a <LL_RCC_MSI_GetRange>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e04b      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003af6:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e045      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d10a      	bne.n	8003b18 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b02:	f7fe ffcf 	bl	8002aa4 <LL_RCC_HSE_IsEnabledDiv2>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e03a      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e037      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b18:	f7ff fab9 	bl	800308e <LL_RCC_PLL_GetMainSource>
 8003b1c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d003      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x64>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x6a>
 8003b2a:	e00d      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b2e:	60bb      	str	r3, [r7, #8]
        break;
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b32:	f7fe ffb7 	bl	8002aa4 <LL_RCC_HSE_IsEnabledDiv2>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b3c:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b3e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b40:	e00d      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003b44:	60bb      	str	r3, [r7, #8]
        break;
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b48:	f7ff f97f 	bl	8002e4a <LL_RCC_MSI_GetRange>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	60bb      	str	r3, [r7, #8]
        break;
 8003b5c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003b5e:	f7ff fa71 	bl	8003044 <LL_RCC_PLL_GetN>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	fb03 f402 	mul.w	r4, r3, r2
 8003b6a:	f7ff fa84 	bl	8003076 <LL_RCC_PLL_GetDivider>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	3301      	adds	r3, #1
 8003b74:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b78:	f7ff fa71 	bl	800305e <LL_RCC_PLL_GetR>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	0f5b      	lsrs	r3, r3, #29
 8003b80:	3301      	adds	r3, #1
 8003b82:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b86:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003b88:	68fb      	ldr	r3, [r7, #12]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	0800466c 	.word	0x0800466c
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	003d0900 	.word	0x003d0900
 8003ba0:	007a1200 	.word	0x007a1200

08003ba4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b598      	push	{r3, r4, r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ba8:	f7ff ff8e 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003bac:	4604      	mov	r4, r0
 8003bae:	f7ff f9ff 	bl	8002fb0 <LL_RCC_GetAHBPrescaler>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	4a03      	ldr	r2, [pc, #12]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x24>)
 8003bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd98      	pop	{r3, r4, r7, pc}
 8003bc8:	0800462c 	.word	0x0800462c

08003bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2bb0      	cmp	r3, #176	; 0xb0
 8003bd8:	d903      	bls.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e007      	b.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003bf2:	f7ff f9e9 	bl	8002fc8 <LL_RCC_GetAHB4Prescaler>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	0c9c      	lsrs	r4, r3, #18
 8003c16:	f7fe ff37 	bl	8002a88 <HAL_PWREx_GetVoltageRange>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 f80c 	bl	8003c3c <RCC_SetFlashLatency>
 8003c24:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	0800466c 	.word	0x0800466c
 8003c34:	0800462c 	.word	0x0800462c
 8003c38:	431bde83 	.word	0x431bde83

08003c3c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b093      	sub	sp, #76	; 0x4c
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <RCC_SetFlashLatency+0xe8>)
 8003c48:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003c52:	4a35      	ldr	r2, [pc, #212]	; (8003d28 <RCC_SetFlashLatency+0xec>)
 8003c54:	f107 031c 	add.w	r3, r7, #28
 8003c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003c5e:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <RCC_SetFlashLatency+0xf0>)
 8003c60:	f107 040c 	add.w	r4, r7, #12
 8003c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c74:	d11a      	bne.n	8003cac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7a:	e013      	b.n	8003ca4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	3348      	adds	r3, #72	; 0x48
 8003c82:	443b      	add	r3, r7
 8003c84:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d807      	bhi.n	8003c9e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	3348      	adds	r3, #72	; 0x48
 8003c94:	443b      	add	r3, r7
 8003c96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c9c:	e020      	b.n	8003ce0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d9e8      	bls.n	8003c7c <RCC_SetFlashLatency+0x40>
 8003caa:	e019      	b.n	8003ce0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb0:	e013      	b.n	8003cda <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	3348      	adds	r3, #72	; 0x48
 8003cb8:	443b      	add	r3, r7
 8003cba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d807      	bhi.n	8003cd4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	3348      	adds	r3, #72	; 0x48
 8003cca:	443b      	add	r3, r7
 8003ccc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003cd0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003cd2:	e005      	b.n	8003ce0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d9e8      	bls.n	8003cb2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <RCC_SetFlashLatency+0xf4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 0207 	bic.w	r2, r3, #7
 8003ce8:	4911      	ldr	r1, [pc, #68]	; (8003d30 <RCC_SetFlashLatency+0xf4>)
 8003cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003cf0:	f7fc fed4 	bl	8000a9c <HAL_GetTick>
 8003cf4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003cf6:	e008      	b.n	8003d0a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cf8:	f7fc fed0 	bl	8000a9c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e007      	b.n	8003d1a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <RCC_SetFlashLatency+0xf4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1ef      	bne.n	8003cf8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	374c      	adds	r7, #76	; 0x4c
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}
 8003d22:	bf00      	nop
 8003d24:	080045ec 	.word	0x080045ec
 8003d28:	080045fc 	.word	0x080045fc
 8003d2c:	08004608 	.word	0x08004608
 8003d30:	58004000 	.word	0x58004000

08003d34 <LL_RCC_LSE_IsEnabled>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <LL_RCC_LSE_IsEnabled+0x18>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <LL_RCC_LSE_IsEnabled+0x1a>
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_LSE_IsReady>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d101      	bne.n	8003d70 <LL_RCC_LSE_IsReady+0x18>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <LL_RCC_LSE_IsReady+0x1a>
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <LL_RCC_SetRFWKPClockSource>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_SetSMPSClockSource>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_RCC_SetSMPSPrescaler>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_RCC_SetUSARTClockSource>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f023 0203 	bic.w	r2, r3, #3
 8003e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_RCC_SetLPUARTClockSource>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_SetI2CClockSource>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_RCC_SetLPTIMClockSource>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_RCC_SetSAIClockSource>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_SetRNGClockSource>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_SetCLK48ClockSource>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_SetUSBClockSource>:
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ffe3 	bl	8003f16 <LL_RCC_SetCLK48ClockSource>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <LL_RCC_SetADCClockSource>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_RCC_SetRTCClockSource>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_GetRTCClockSource>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_ForceBackupDomainReset>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_ReleaseBackupDomainReset>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_RCC_PLLSAI1_Enable>:
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004020:	6013      	str	r3, [r2, #0]
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_RCC_PLLSAI1_Disable>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_RCC_PLLSAI1_IsReady>:
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800404e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405c:	d101      	bne.n	8004062 <LL_RCC_PLLSAI1_IsReady+0x18>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b088      	sub	sp, #32
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004076:	2300      	movs	r3, #0
 8004078:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800407a:	2300      	movs	r3, #0
 800407c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d034      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004092:	d021      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004098:	d81b      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800409a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409e:	d01d      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80040a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040a4:	d815      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80040aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ae:	d110      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80040c0:	e00d      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f947 	bl	800435a <RCCEx_PLLSAI1_ConfigNP>
 80040cc:	4603      	mov	r3, r0
 80040ce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040d0:	e005      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
        break;
 80040d6:	e002      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80040dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040de:	7ffb      	ldrb	r3, [r7, #31]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fee8 	bl	8003ebe <LL_RCC_SetSAIClockSource>
 80040ee:	e001      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
 80040f2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d046      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004100:	f7ff ff56 	bl	8003fb0 <LL_RCC_GetRTCClockSource>
 8004104:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d03c      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004110:	f7fe fcaa 	bl	8002a68 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff30 	bl	8003f84 <LL_RCC_SetRTCClockSource>
 8004124:	e02e      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004130:	f7ff ff4b 	bl	8003fca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004134:	f7ff ff5a 	bl	8003fec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004150:	f7ff fdf0 	bl	8003d34 <LL_RCC_LSE_IsEnabled>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d114      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800415a:	f7fc fc9f 	bl	8000a9c <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004160:	e00b      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fc fc9b 	bl	8000a9c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d902      	bls.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	77fb      	strb	r3, [r7, #31]
              break;
 8004178:	e004      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800417a:	f7ff fded 	bl	8003d58 <LL_RCC_LSE_IsReady>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d1ee      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004184:	7ffb      	ldrb	r3, [r7, #31]
 8004186:	77bb      	strb	r3, [r7, #30]
 8004188:	e001      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	7ffb      	ldrb	r3, [r7, #31]
 800418c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fe2a 	bl	8003df8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fe35 	bl	8003e24 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fe5d 	bl	8003e8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fe52 	bl	8003e8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fe2a 	bl	8003e50 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fe1f 	bl	8003e50 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d022      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fe8d 	bl	8003f42 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004230:	d107      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004240:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800424a:	d10b      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f8dd 	bl	8004410 <RCCEx_PLLSAI1_ConfigNQ>
 8004256:	4603      	mov	r3, r0
 8004258:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004260:	7ffb      	ldrb	r3, [r7, #31]
 8004262:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800426c:	2b00      	cmp	r3, #0
 800426e:	d02b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004282:	d003      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fe2a 	bl	8003eea <LL_RCC_SetRNGClockSource>
 8004296:	e00a      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	2000      	movs	r0, #0
 80042a4:	f7ff fe21 	bl	8003eea <LL_RCC_SetRNGClockSource>
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fe34 	bl	8003f16 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80042b6:	d107      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d022      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fe3d 	bl	8003f58 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e6:	d107      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004300:	d10b      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f8dd 	bl	80044c6 <RCCEx_PLLSAI1_ConfigNR>
 800430c:	4603      	mov	r3, r0
 800430e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004310:	7ffb      	ldrb	r3, [r7, #31]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004316:	7ffb      	ldrb	r3, [r7, #31]
 8004318:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d004      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fd26 	bl	8003d7c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fd45 	bl	8003dd0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fd2c 	bl	8003da8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004350:	7fbb      	ldrb	r3, [r7, #30]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004366:	f7ff fe61 	bl	800402c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800436a:	f7fc fb97 	bl	8000a9c <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004370:	e009      	b.n	8004386 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004372:	f7fc fb93 	bl	8000a9c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d902      	bls.n	8004386 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	73fb      	strb	r3, [r7, #15]
      break;
 8004384:	e004      	b.n	8004390 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004386:	f7ff fe60 	bl	800404a <LL_RCC_PLLSAI1_IsReady>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d137      	bne.n	8004406 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c0:	4313      	orrs	r3, r2
 80043c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043c4:	f7ff fe23 	bl	800400e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fc fb68 	bl	8000a9c <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043ce:	e009      	b.n	80043e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d0:	f7fc fb64 	bl	8000a9c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	73fb      	strb	r3, [r7, #15]
        break;
 80043e2:	e004      	b.n	80043ee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043e4:	f7ff fe31 	bl	800404a <LL_RCC_PLLSAI1_IsReady>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d1f0      	bne.n	80043d0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d108      	bne.n	8004406 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004402:	4313      	orrs	r3, r2
 8004404:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800441c:	f7ff fe06 	bl	800402c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004420:	f7fc fb3c 	bl	8000a9c <HAL_GetTick>
 8004424:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004426:	e009      	b.n	800443c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004428:	f7fc fb38 	bl	8000a9c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d902      	bls.n	800443c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	73fb      	strb	r3, [r7, #15]
      break;
 800443a:	e004      	b.n	8004446 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800443c:	f7ff fe05 	bl	800404a <LL_RCC_PLLSAI1_IsReady>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d137      	bne.n	80044bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004476:	4313      	orrs	r3, r2
 8004478:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800447a:	f7ff fdc8 	bl	800400e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447e:	f7fc fb0d 	bl	8000a9c <HAL_GetTick>
 8004482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004484:	e009      	b.n	800449a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004486:	f7fc fb09 	bl	8000a9c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d902      	bls.n	800449a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	73fb      	strb	r3, [r7, #15]
        break;
 8004498:	e004      	b.n	80044a4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800449a:	f7ff fdd6 	bl	800404a <LL_RCC_PLLSAI1_IsReady>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d1f0      	bne.n	8004486 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044d2:	f7ff fdab 	bl	800402c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044d6:	f7fc fae1 	bl	8000a9c <HAL_GetTick>
 80044da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044dc:	e009      	b.n	80044f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044de:	f7fc fadd 	bl	8000a9c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d902      	bls.n	80044f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	73fb      	strb	r3, [r7, #15]
      break;
 80044f0:	e004      	b.n	80044fc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044f2:	f7ff fdaa 	bl	800404a <LL_RCC_PLLSAI1_IsReady>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d137      	bne.n	8004572 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800451a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800452c:	4313      	orrs	r3, r2
 800452e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004530:	f7ff fd6d 	bl	800400e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fc fab2 	bl	8000a9c <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800453a:	e009      	b.n	8004550 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800453c:	f7fc faae 	bl	8000a9c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
        break;
 800454e:	e004      	b.n	800455a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004550:	f7ff fd7b 	bl	800404a <LL_RCC_PLLSAI1_IsReady>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d1f0      	bne.n	800453c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d108      	bne.n	8004572 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004572:	7bfb      	ldrb	r3, [r7, #15]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4d0d      	ldr	r5, [pc, #52]	; (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2600      	movs	r6, #0
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4d0b      	ldr	r5, [pc, #44]	; (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	; (80045c0 <__libc_init_array+0x44>)
 8004590:	f000 f820 	bl	80045d4 <_init>
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2600      	movs	r6, #0
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	080046ac 	.word	0x080046ac
 80045b8:	080046ac 	.word	0x080046ac
 80045bc:	080046ac 	.word	0x080046ac
 80045c0:	080046b0 	.word	0x080046b0

080045c4 <memset>:
 80045c4:	4402      	add	r2, r0
 80045c6:	4603      	mov	r3, r0
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d100      	bne.n	80045ce <memset+0xa>
 80045cc:	4770      	bx	lr
 80045ce:	f803 1b01 	strb.w	r1, [r3], #1
 80045d2:	e7f9      	b.n	80045c8 <memset+0x4>

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
